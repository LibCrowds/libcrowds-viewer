!function(I,g){"object"==typeof exports&&"object"==typeof module?module.exports=g():"function"==typeof define&&define.amd?define([],g):"object"==typeof exports?exports["libcrowds-viewer"]=g():I["libcrowds-viewer"]=g()}(this,function(){return function(I){function g(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return I[e].call(t.exports,t,t.exports,g),t.l=!0,t.exports}var n={};return g.m=I,g.c=n,g.i=function(I){return I},g.d=function(I,n,e){g.o(I,n)||Object.defineProperty(I,n,{configurable:!1,enumerable:!0,get:e})},g.n=function(I){var n=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(n,"a",n),n},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="./",g(g.s=83)}([function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(241)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(95),\n  /* template */\n  __webpack_require__(219),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWU/YmQxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHlCQUFnTDtBQUNoTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXNGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTc4ZDM0YjUyXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0ljb24udnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSWNvbi52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzhkMzRiNTJcXFwifSEuLi8uLi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9JY29uLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24udnVlXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval('/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push("@media " + item[2] + "{" + item[1] + "}");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join("");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === "string")\r\n\t\t\tmodules = [[null, modules, ""]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === "number")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgIGlmICghZnVuY3Rpb25hbCkge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(242)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qcz82YjJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBLHVCQUF1QiwyQkFBMkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxudmFyIGxpc3RUb1N0eWxlcyA9IHJlcXVpcmUoJy4vbGlzdFRvU3R5bGVzJylcblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVtkYXRhLXZ1ZS1zc3ItaWR+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzPzFiNjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLHFDQUFxQyIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Form__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_getImageUri__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_errors__ = __webpack_require__(8);\n\n\n\n\n\n\n/**\n * Represents a task to be updated with user input as annotations.\n */\n\nvar Task = function () {\n  function Task(_ref) {\n    var _ref$mode = _ref.mode,\n        mode = _ref$mode === undefined ? __WEBPACK_IMPORTED_MODULE_4__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$mode,\n        _ref$imgInfoUri = _ref.imgInfoUri,\n        imgInfoUri = _ref$imgInfoUri === undefined ? __WEBPACK_IMPORTED_MODULE_4__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$imgInfoUri,\n        _ref$imgInfo = _ref.imgInfo,\n        imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_4__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$imgInfo,\n        _ref$id = _ref.id,\n        id = _ref$id === undefined ? null : _ref$id,\n        _ref$manifestUri = _ref.manifestUri,\n        manifestUri = _ref$manifestUri === undefined ? '' : _ref$manifestUri,\n        _ref$objective = _ref.objective,\n        objective = _ref$objective === undefined ? '' : _ref$objective,\n        _ref$guidance = _ref.guidance,\n        guidance = _ref$guidance === undefined ? '' : _ref$guidance,\n        tag = _ref.tag,\n        classification = _ref.classification,\n        _ref$form = _ref.form,\n        form = _ref$form === undefined ? null : _ref$form,\n        _ref$highlights = _ref.highlights,\n        highlights = _ref$highlights === undefined ? [] : _ref$highlights,\n        _ref$liked = _ref.liked,\n        liked = _ref$liked === undefined ? false : _ref$liked,\n        _ref$annotations = _ref.annotations,\n        annotations = _ref$annotations === undefined ? [] : _ref$annotations,\n        _ref$complete = _ref.complete,\n        complete = _ref$complete === undefined ? false : _ref$complete;\n\n    __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Task);\n\n    this.mode = mode;\n    this.id = id;\n    this.imgInfoUri = imgInfoUri;\n    this.manifestUri = manifestUri;\n    this.objective = objective;\n    this.guidance = guidance;\n    this.tag = tag;\n    this.classification = classification;\n    this.form = form;\n    this.highlights = highlights;\n    this.liked = liked;\n    this.annotations = annotations;\n    this.complete = complete;\n\n    this.imgInfo = imgInfo;\n\n    this.thumbnailUri = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_getImageUri__[\"a\" /* default */])({\n      imgInfo: this.imgInfo,\n      size: '256,'\n    });\n\n    // Validate\n    var validModes = ['select', 'transcribe'];\n\n    if (validModes.indexOf(this.mode) < 0) {\n      throw new Error('Mode must be one of ' + validModes);\n    }\n\n    if (this.mode === 'select' && !this.tag) {\n      throw new Error('Tag is required when in select mode');\n    }\n\n    if (mode === 'transcribe') {\n      this.form = new __WEBPACK_IMPORTED_MODULE_2__model_Form__[\"a\" /* default */](this.form);\n    }\n  }\n\n  /**\n   * Update the form.\n   * @param {Object} form\n   *   The form.\n   */\n\n\n  __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Task, [{\n    key: 'updateForm',\n    value: function updateForm(form) {\n      this.form = form;\n    }\n  }]);\n\n  return Task;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Task);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvVGFzay5qcz80ZmYwIl0sIm5hbWVzIjpbIlRhc2siLCJtb2RlIiwiZXJyb3JzIiwidGhyb3dJZk1pc3NpbmciLCJpbWdJbmZvVXJpIiwiaW1nSW5mbyIsImlkIiwibWFuaWZlc3RVcmkiLCJvYmplY3RpdmUiLCJndWlkYW5jZSIsInRhZyIsImNsYXNzaWZpY2F0aW9uIiwiZm9ybSIsImhpZ2hsaWdodHMiLCJsaWtlZCIsImFubm90YXRpb25zIiwiY29tcGxldGUiLCJ0aHVtYm5haWxVcmkiLCJnZXRJbWFnZVVyaSIsInNpemUiLCJ2YWxpZE1vZGVzIiwiaW5kZXhPZiIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7SUFHTUEsSTtBQUNKLHNCQWVHO0FBQUEseUJBZERDLElBY0M7QUFBQSxRQWREQSxJQWNDLDZCQWRNLDhEQUFBQyxDQUFPQyxjQUFQLEVBY047QUFBQSwrQkFiREMsVUFhQztBQUFBLFFBYkRBLFVBYUMsbUNBYlksOERBQUFGLENBQU9DLGNBQVAsRUFhWjtBQUFBLDRCQVpERSxPQVlDO0FBQUEsUUFaREEsT0FZQyxnQ0FaUyw4REFBQUgsQ0FBT0MsY0FBUCxFQVlUO0FBQUEsdUJBWERHLEVBV0M7QUFBQSxRQVhEQSxFQVdDLDJCQVhJLElBV0o7QUFBQSxnQ0FWREMsV0FVQztBQUFBLFFBVkRBLFdBVUMsb0NBVmEsRUFVYjtBQUFBLDhCQVREQyxTQVNDO0FBQUEsUUFUREEsU0FTQyxrQ0FUVyxFQVNYO0FBQUEsNkJBUkRDLFFBUUM7QUFBQSxRQVJEQSxRQVFDLGlDQVJVLEVBUVY7QUFBQSxRQVBEQyxHQU9DLFFBUERBLEdBT0M7QUFBQSxRQU5EQyxjQU1DLFFBTkRBLGNBTUM7QUFBQSx5QkFMREMsSUFLQztBQUFBLFFBTERBLElBS0MsNkJBTE0sSUFLTjtBQUFBLCtCQUpEQyxVQUlDO0FBQUEsUUFKREEsVUFJQyxtQ0FKWSxFQUlaO0FBQUEsMEJBSERDLEtBR0M7QUFBQSxRQUhEQSxLQUdDLDhCQUhPLEtBR1A7QUFBQSxnQ0FGREMsV0FFQztBQUFBLFFBRkRBLFdBRUMsb0NBRmEsRUFFYjtBQUFBLDZCQUREQyxRQUNDO0FBQUEsUUFEREEsUUFDQyxpQ0FEVSxLQUNWOztBQUFBOztBQUNELFNBQUtmLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtLLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFNBQUtGLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0csV0FBTCxHQUFtQkEsV0FBbkI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7O0FBRUEsU0FBS1gsT0FBTCxHQUFlQSxPQUFmOztBQUVBLFNBQUtZLFlBQUwsR0FBb0IsMEZBQUFDLENBQVk7QUFDOUJiLGVBQVMsS0FBS0EsT0FEZ0I7QUFFOUJjLFlBQU07QUFGd0IsS0FBWixDQUFwQjs7QUFLQTtBQUNBLFFBQU1DLGFBQWEsQ0FBQyxRQUFELEVBQVcsWUFBWCxDQUFuQjs7QUFFQSxRQUFJQSxXQUFXQyxPQUFYLENBQW1CLEtBQUtwQixJQUF4QixJQUFnQyxDQUFwQyxFQUF1QztBQUNyQyxZQUFNLElBQUlxQixLQUFKLDBCQUFpQ0YsVUFBakMsQ0FBTjtBQUNEOztBQUVELFFBQUksS0FBS25CLElBQUwsS0FBYyxRQUFkLElBQTBCLENBQUMsS0FBS1MsR0FBcEMsRUFBeUM7QUFDdkMsWUFBTSxJQUFJWSxLQUFKLHVDQUFOO0FBQ0Q7O0FBRUQsUUFBSXJCLFNBQVMsWUFBYixFQUEyQjtBQUN6QixXQUFLVyxJQUFMLEdBQVksSUFBSSw0REFBSixDQUFTLEtBQUtBLElBQWQsQ0FBWjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7OzsrQkFLWUEsSSxFQUFNO0FBQ2hCLFdBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNEOzs7Ozs7QUFHSCx5REFBZVosSUFBZiIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm0gZnJvbSAnQC9tb2RlbC9Gb3JtJ1xuaW1wb3J0IGdldEltYWdlVXJpIGZyb20gJ0AvdXRpbHMvZ2V0SW1hZ2VVcmknXG5pbXBvcnQgZXJyb3JzIGZyb20gJ0AvdXRpbHMvZXJyb3JzJ1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSB0YXNrIHRvIGJlIHVwZGF0ZWQgd2l0aCB1c2VyIGlucHV0IGFzIGFubm90YXRpb25zLlxuICovXG5jbGFzcyBUYXNrIHtcbiAgY29uc3RydWN0b3IgKHtcbiAgICBtb2RlID0gZXJyb3JzLnRocm93SWZNaXNzaW5nKCksXG4gICAgaW1nSW5mb1VyaSA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIGltZ0luZm8gPSBlcnJvcnMudGhyb3dJZk1pc3NpbmcoKSxcbiAgICBpZCA9IG51bGwsXG4gICAgbWFuaWZlc3RVcmkgPSAnJyxcbiAgICBvYmplY3RpdmUgPSAnJyxcbiAgICBndWlkYW5jZSA9ICcnLFxuICAgIHRhZyxcbiAgICBjbGFzc2lmaWNhdGlvbixcbiAgICBmb3JtID0gbnVsbCxcbiAgICBoaWdobGlnaHRzID0gW10sXG4gICAgbGlrZWQgPSBmYWxzZSxcbiAgICBhbm5vdGF0aW9ucyA9IFtdLFxuICAgIGNvbXBsZXRlID0gZmFsc2VcbiAgfSkge1xuICAgIHRoaXMubW9kZSA9IG1vZGVcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLmltZ0luZm9VcmkgPSBpbWdJbmZvVXJpXG4gICAgdGhpcy5tYW5pZmVzdFVyaSA9IG1hbmlmZXN0VXJpXG4gICAgdGhpcy5vYmplY3RpdmUgPSBvYmplY3RpdmVcbiAgICB0aGlzLmd1aWRhbmNlID0gZ3VpZGFuY2VcbiAgICB0aGlzLnRhZyA9IHRhZ1xuICAgIHRoaXMuY2xhc3NpZmljYXRpb24gPSBjbGFzc2lmaWNhdGlvblxuICAgIHRoaXMuZm9ybSA9IGZvcm1cbiAgICB0aGlzLmhpZ2hsaWdodHMgPSBoaWdobGlnaHRzXG4gICAgdGhpcy5saWtlZCA9IGxpa2VkXG4gICAgdGhpcy5hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zXG4gICAgdGhpcy5jb21wbGV0ZSA9IGNvbXBsZXRlXG5cbiAgICB0aGlzLmltZ0luZm8gPSBpbWdJbmZvXG5cbiAgICB0aGlzLnRodW1ibmFpbFVyaSA9IGdldEltYWdlVXJpKHtcbiAgICAgIGltZ0luZm86IHRoaXMuaW1nSW5mbyxcbiAgICAgIHNpemU6ICcyNTYsJ1xuICAgIH0pXG5cbiAgICAvLyBWYWxpZGF0ZVxuICAgIGNvbnN0IHZhbGlkTW9kZXMgPSBbJ3NlbGVjdCcsICd0cmFuc2NyaWJlJ11cblxuICAgIGlmICh2YWxpZE1vZGVzLmluZGV4T2YodGhpcy5tb2RlKSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTW9kZSBtdXN0IGJlIG9uZSBvZiAke3ZhbGlkTW9kZXN9YClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb2RlID09PSAnc2VsZWN0JyAmJiAhdGhpcy50YWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGFnIGlzIHJlcXVpcmVkIHdoZW4gaW4gc2VsZWN0IG1vZGVgKVxuICAgIH1cblxuICAgIGlmIChtb2RlID09PSAndHJhbnNjcmliZScpIHtcbiAgICAgIHRoaXMuZm9ybSA9IG5ldyBGb3JtKHRoaXMuZm9ybSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmb3JtLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9ybVxuICAgKiAgIFRoZSBmb3JtLlxuICAgKi9cbiAgdXBkYXRlRm9ybSAoZm9ybSkge1xuICAgIHRoaXMuZm9ybSA9IGZvcm1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kZWwvVGFzay5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanM/NzdhYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("var store      = __webpack_require__(42)('wks')\n  , uid        = __webpack_require__(24)\n  , Symbol     = __webpack_require__(6).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanM/MzAyNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  /**\n   * Error used to identify missing required parameters.\n   */\n  throwIfMissing: function throwIfMissing() {\n    throw new Error('Missing parameter');\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZXJyb3JzLmpzP2E2ZjAiXSwibmFtZXMiOlsidGhyb3dJZk1pc3NpbmciLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEseURBQWU7QUFDYjs7O0FBR0FBLGdCQUphLDRCQUlLO0FBQ2hCLFVBQU0sSUFBSUMsS0FBSixDQUFVLG1CQUFWLENBQU47QUFDRDtBQU5ZLENBQWYiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIEVycm9yIHVzZWQgdG8gaWRlbnRpZnkgbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgdGhyb3dJZk1pc3NpbmcgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXInKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvZXJyb3JzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcz8yMWFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(18)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcz83MDUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxpQ0FBaUMsUUFBUSxnQkFBZ0IsVUFBVSxHQUFHO0FBQ3RFLENBQUMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/ZDg1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var anObject       = __webpack_require__(14)\n  , IE8_DOM_DEFINE = __webpack_require__(56)\n  , toPrimitive    = __webpack_require__(45)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(10) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/NDExNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFVBQVU7QUFDYjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(132)\n  , defined = __webpack_require__(35);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY5NDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(19);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/MGRhMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var global    = __webpack_require__(6)\n  , core      = __webpack_require__(4)\n  , ctx       = __webpack_require__(54)\n  , hide      = __webpack_require__(16)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/ZWNlMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQiIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV1cbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcbiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYoSVNfUFJPVE8pe1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var dP         = __webpack_require__(12)\n  , createDesc = __webpack_require__(23);\nmodule.exports = __webpack_require__(10) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzP2E2ZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(117), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanM/MWIwOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval("module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz85MzVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MjRjOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = __webpack_require__(62)\n  , enumBugKeys = __webpack_require__(36);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz9mNWJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\n\nvar _iterator = __webpack_require__(114);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = __webpack_require__(113);\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {\n  return typeof obj === "undefined" ? "undefined" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanM/ZjRiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxpSEFBaUgsbUJBQW1CLEVBQUUsbUJBQW1CLDRKQUE0Sjs7QUFFclQsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval("module.exports = {};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanM/YWZmNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzFlODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/ZThjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;//! openseadragon 2.2.1\n//! Built on 2016-07-01\n//! Git commit: v2.2.1-0-babdefd\n//! http://openseadragon.github.io\n//! License: http://openseadragon.github.io/license/\n\n/*\n * OpenSeadragon\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * Portions of this source file taken from jQuery:\n *\n * Copyright 2011 John Resig\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * "Software"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/*\n * Portions of this source file taken from mattsnider.com:\n *\n * Copyright (c) 2006-2013 Matt Snider\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT\n * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\n * THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n/**\n * @namespace OpenSeadragon\n * @version openseadragon 2.2.1\n * @classdesc The root namespace for OpenSeadragon.  All utility methods\n * and classes are defined on or below this namespace.\n *\n */\n\n\n// Typedefs\n\n /**\n  * All required and optional settings for instantiating a new instance of an OpenSeadragon image viewer.\n  *\n  * @typedef {Object} Options\n  * @memberof OpenSeadragon\n  *\n  * @property {String} id\n  *     Id of the element to append the viewer\'s container element to. If not provided, the \'element\' property must be provided.\n  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.\n  *\n  * @property {Element} element\n  *     The element to append the viewer\'s container element to. If not provided, the \'id\' property must be provided.\n  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.\n  *\n  * @property {Array|String|Function|Object} [tileSources=null]\n  *     Tile source(s) to open initially. This is a complex parameter; see\n  *     {@link OpenSeadragon.Viewer#open} for details.\n  *\n  * @property {Number} [tabIndex=0]\n  *     Tabbing order index to assign to the viewer element. Positive values are selected in increasing order. When tabIndex is 0\n  *     source order is used. A negative value omits the viewer from the tabbing order.\n  *\n  * @property {Array} overlays Array of objects defining permanent overlays of\n  *     the viewer. The overlays added via this option and later removed with\n  *     {@link OpenSeadragon.Viewer#removeOverlay} will be added back when a new\n  *     image is opened.\n  *     To add overlays which can be definitively removed, one must use\n  *     {@link OpenSeadragon.Viewer#addOverlay}\n  *     If displaying a sequence of images, the overlays can be associated\n  *     with a specific page by passing the overlays array to the page\'s\n  *     tile source configuration.\n  *     Expected properties:\n  *     * x, y, (or px, py for pixel coordinates) to define the location.\n  *     * width, height in point if using x,y or in pixels if using px,py. If width\n  *       and height are specified, the overlay size is adjusted when zooming,\n  *       otherwise the size stays the size of the content (or the size defined by CSS).\n  *     * className to associate a class to the overlay\n  *     * id to set the overlay element. If an element with this id already exists,\n  *       it is reused, otherwise it is created. If not specified, a new element is\n  *       created.\n  *     * placement a string to define the relative position to the viewport.\n  *       Only used if no width and height are specified. Default: \'TOP_LEFT\'.\n  *       See {@link OpenSeadragon.Placement} for possible values.\n  *\n  * @property {String} [xmlPath=null]\n  *     <strong>DEPRECATED</strong>. A relative path to load a DZI file from the server.\n  *     Prefer the newer Options.tileSources.\n  *\n  * @property {String} [prefixUrl=\'/images/\']\n  *     Prepends the prefixUrl to navImages paths, which is very useful\n  *     since the default paths are rarely useful for production\n  *     environments.\n  *\n  * @property {OpenSeadragon.NavImages} [navImages]\n  *     An object with a property for each button or other built-in navigation\n  *     control, eg the current \'zoomIn\', \'zoomOut\', \'home\', and \'fullpage\'.\n  *     Each of those in turn provides an image path for each state of the button\n  *     or navigation control, eg \'REST\', \'GROUP\', \'HOVER\', \'PRESS\'. Finally the\n  *     image paths, by default assume there is a folder on the servers root path\n  *     called \'/images\', eg \'/images/zoomin_rest.png\'.  If you need to adjust\n  *     these paths, prefer setting the option.prefixUrl rather than overriding\n  *     every image path directly through this setting.\n  *\n  * @property {Boolean} [debugMode=false]\n  *     TODO: provide an in-screen panel providing event detail feedback.\n  *\n  * @property {String} [debugGridColor=\'#437AB2\']\n  *\n  * @property {Number} [blendTime=0]\n  *     Specifies the duration of animation as higher or lower level tiles are\n  *     replacing the existing tile.\n  *\n  * @property {Boolean} [alwaysBlend=false]\n  *     Forces the tile to always blend.  By default the tiles skip blending\n  *     when the blendTime is surpassed and the current animation frame would\n  *     not complete the blend.\n  *\n  * @property {Boolean} [autoHideControls=true]\n  *     If the user stops interacting with the viewport, fade the navigation\n  *     controls.  Useful for presentation since the controls are by default\n  *     floated on top of the image the user is viewing.\n  *\n  * @property {Boolean} [immediateRender=false]\n  *     Render the best closest level first, ignoring the lowering levels which\n  *     provide the effect of very blurry to sharp. It is recommended to change\n  *     setting to true for mobile devices.\n  *\n  * @property {Number} [defaultZoomLevel=0]\n  *     Zoom level to use when image is first opened or the home button is clicked.\n  *     If 0, adjusts to fit viewer.\n  *\n  * @property {Number} [opacity=1]\n  *     Default opacity of the tiled images (1=opaque, 0=transparent)\n  *\n  * @property {String} [compositeOperation=null]\n  *     Valid values are \'source-over\', \'source-atop\', \'source-in\', \'source-out\',\n  *     \'destination-over\', \'destination-atop\', \'destination-in\',\n  *     \'destination-out\', \'lighter\', \'copy\' or \'xor\'\n  *\n  * @property {String|CanvasGradient|CanvasPattern|Function} [placeholderFillStyle=null]\n  *     Draws a colored rectangle behind the tile if it is not loaded yet.\n  *     You can pass a CSS color value like "#FF8800".\n  *     When passing a function the tiledImage and canvas context are available as argument which is useful when you draw a gradient or pattern.\n  *\n  * @property {Number} [degrees=0]\n  *     Initial rotation.\n  *\n  * @property {Number} [minZoomLevel=null]\n  *\n  * @property {Number} [maxZoomLevel=null]\n  *\n  * @property {Boolean} [homeFillsViewer=false]\n  *     Make the \'home\' button fill the viewer and clip the image, instead\n  *     of fitting the image to the viewer and letterboxing.\n  *\n  * @property {Boolean} [panHorizontal=true]\n  *     Allow horizontal pan.\n  *\n  * @property {Boolean} [panVertical=true]\n  *     Allow vertical pan.\n  *\n  * @property {Boolean} [constrainDuringPan=false]\n  *\n  * @property {Boolean} [wrapHorizontal=false]\n  *     Set to true to force the image to wrap horizontally within the viewport.\n  *     Useful for maps or images representing the surface of a sphere or cylinder.\n  *\n  * @property {Boolean} [wrapVertical=false]\n  *     Set to true to force the image to wrap vertically within the viewport.\n  *     Useful for maps or images representing the surface of a sphere or cylinder.\n  *\n  * @property {Number} [minZoomImageRatio=0.9]\n  *     The minimum percentage ( expressed as a number between 0 and 1 ) of\n  *     the viewport height or width at which the zoom out will be constrained.\n  *     Setting it to 0, for example will allow you to zoom out infinity.\n  *\n  * @property {Number} [maxZoomPixelRatio=1.1]\n  *     The maximum ratio to allow a zoom-in to affect the highest level pixel\n  *     ratio. This can be set to Infinity to allow \'infinite\' zooming into the\n  *     image though it is less effective visually if the HTML5 Canvas is not\n  *     availble on the viewing device.\n  *\n  * @property {Number} [smoothTileEdgesMinZoom=1.1]\n  *     A zoom percentage ( where 1 is 100% ) of the highest resolution level.\n  *     When zoomed in beyond this value alternative compositing will be used to\n  *     smooth out the edges between tiles. This will have a performance impact.\n  *     Can be set to Infinity to turn it off.\n  *     Note: This setting is ignored on iOS devices due to a known bug (See {@link https://github.com/openseadragon/openseadragon/issues/952})\n  *\n  * @property {Boolean} [iOSDevice=?]\n  *     True if running on an iOS device, false otherwise.\n  *     Used to disable certain features that behave differently on iOS devices.\n  *\n  * @property {Boolean} [autoResize=true]\n  *     Set to false to prevent polling for viewer size changes. Useful for providing custom resize behavior.\n  *\n  * @property {Boolean} [preserveImageSizeOnResize=false]\n  *     Set to true to have the image size preserved when the viewer is resized. This requires autoResize=true (default).\n  *\n  * @property {Number} [minScrollDeltaTime=50]\n  *     Number of milliseconds between canvas-scroll events. This value helps normalize the rate of canvas-scroll\n  *     events between different devices, causing the faster devices to slow down enough to make the zoom control\n  *     more manageable.\n  *\n  * @property {Number} [pixelsPerWheelLine=40]\n  *     For pixel-resolution scrolling devices, the number of pixels equal to one scroll line.\n  *\n  * @property {Number} [visibilityRatio=0.5]\n  *     The percentage ( as a number from 0 to 1 ) of the source image which\n  *     must be kept within the viewport.  If the image is dragged beyond that\n  *     limit, it will \'bounce\' back until the minimum visibility ratio is\n  *     achieved.  Setting this to 0 and wrapHorizontal ( or wrapVertical ) to\n  *     true will provide the effect of an infinitely scrolling viewport.\n  *\n  * @property {Object} [viewportMargins={}]\n  *     Pushes the "home" region in from the sides by the specified amounts.\n  *     Possible subproperties (Numbers, in screen coordinates): left, top, right, bottom.\n  *\n  * @property {Number} [imageLoaderLimit=0]\n  *     The maximum number of image requests to make concurrently. By default\n  *     it is set to 0 allowing the browser to make the maximum number of\n  *     image requests in parallel as allowed by the browsers policy.\n  *\n  * @property {Number} [clickTimeThreshold=300]\n  *      The number of milliseconds within which a pointer down-up event combination\n  *      will be treated as a click gesture.\n  *\n  * @property {Number} [clickDistThreshold=5]\n  *      The maximum distance allowed between a pointer down event and a pointer up event\n  *      to be treated as a click gesture.\n  *\n  * @property {Number} [dblClickTimeThreshold=300]\n  *      The number of milliseconds within which two pointer down-up event combinations\n  *      will be treated as a double-click gesture.\n  *\n  * @property {Number} [dblClickDistThreshold=20]\n  *      The maximum distance allowed between two pointer click events\n  *      to be treated as a double-click gesture.\n  *\n  * @property {Number} [springStiffness=6.5]\n  *\n  * @property {Number} [animationTime=1.2]\n  *     Specifies the animation duration per each {@link OpenSeadragon.Spring}\n  *     which occur when the image is dragged or zoomed.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsMouse]\n  *     Settings for gestures generated by a mouse pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsMouse.scrollToZoom=true] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsMouse.clickToZoom=true] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsMouse.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsMouse.pinchToZoom=false] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsMouse.flickEnabled=false] - Enable flick gesture\n  * @property {Number} [gestureSettingsMouse.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsMouse.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsMouse.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsTouch]\n  *     Settings for gestures generated by a touch pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsTouch.scrollToZoom=false] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsTouch.clickToZoom=false] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsTouch.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsTouch.pinchToZoom=true] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsTouch.flickEnabled=true] - Enable flick gesture\n  * @property {Number} [gestureSettingsTouch.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsTouch.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsTouch.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsPen]\n  *     Settings for gestures generated by a pen pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsPen.scrollToZoom=false] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsPen.clickToZoom=true] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsPen.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsPen.pinchToZoom=false] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsPen.flickEnabled=false] - Enable flick gesture\n  * @property {Number} [gestureSettingsPen.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsPen.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsPen.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsUnknown]\n  *     Settings for gestures generated by unknown pointer devices. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsUnknown.scrollToZoom=true] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsUnknown.clickToZoom=false] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsUnknown.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsUnknown.pinchToZoom=true] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsUnknown.flickEnabled=true] - Enable flick gesture\n  * @property {Number} [gestureSettingsUnknown.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsUnknown.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsUnknown.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {Number} [zoomPerClick=2.0]\n  *     The "zoom distance" per mouse click or touch tap. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).</em>\n  *\n  * @property {Number} [zoomPerScroll=1.2]\n  *     The "zoom distance" per mouse scroll or touch pinch. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).</em>\n  *\n  * @property {Number} [zoomPerSecond=1.0]\n  *     The number of seconds to animate a single zoom event over.\n  *\n  * @property {Boolean} [showNavigator=false]\n  *     Set to true to make the navigator minimap appear.\n  *\n  * @property {String} [navigatorId=navigator-GENERATED DATE]\n  *     The ID of a div to hold the navigator minimap.\n  *     If an ID is specified, the navigatorPosition, navigatorSizeRatio, navigatorMaintainSizeRatio, navigator[Top|Left|Height|Width] and navigatorAutoFade options will be ignored.\n  *     If an ID is not specified, a div element will be generated and placed on top of the main image.\n  *\n  * @property {String} [navigatorPosition=\'TOP_RIGHT\']\n  *     Valid values are \'TOP_LEFT\', \'TOP_RIGHT\', \'BOTTOM_LEFT\', \'BOTTOM_RIGHT\', or \'ABSOLUTE\'.<br>\n  *     If \'ABSOLUTE\' is specified, then navigator[Top|Left|Height|Width] determines the size and position of the navigator minimap in the viewer, and navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.<br>\n  *     For \'TOP_LEFT\', \'TOP_RIGHT\', \'BOTTOM_LEFT\', and \'BOTTOM_RIGHT\', the navigatorSizeRatio or navigator[Height|Width] values determine the size of the navigator minimap.\n  *\n  * @property {Number} [navigatorSizeRatio=0.2]\n  *     Ratio of navigator size to viewer size. Ignored if navigator[Height|Width] are specified.\n  *\n  * @property {Boolean} [navigatorMaintainSizeRatio=false]\n  *     If true, the navigator minimap is resized (using navigatorSizeRatio) when the viewer size changes.\n  *\n  * @property {Number|String} [navigatorTop=null]\n  *     Specifies the location of the navigator minimap (see navigatorPosition).\n  *\n  * @property {Number|String} [navigatorLeft=null]\n  *     Specifies the location of the navigator minimap (see navigatorPosition).\n  *\n  * @property {Number|String} [navigatorHeight=null]\n  *     Specifies the size of the navigator minimap (see navigatorPosition).\n  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.\n  *\n  * @property {Number|String} [navigatorWidth=null]\n  *     Specifies the size of the navigator minimap (see navigatorPosition).\n  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.\n  *\n  * @property {Boolean} [navigatorAutoResize=true]\n  *     Set to false to prevent polling for navigator size changes. Useful for providing custom resize behavior.\n  *     Setting to false can also improve performance when the navigator is configured to a fixed size.\n  *\n  * @property {Boolean} [navigatorAutoFade=true]\n  *     If the user stops interacting with the viewport, fade the navigator minimap.\n  *     Setting to false will make the navigator minimap always visible.\n  *\n  * @property {Boolean} [navigatorRotate=true]\n  *     If true, the navigator will be rotated together with the viewer.\n  *\n  * @property {Number} [controlsFadeDelay=2000]\n  *     The number of milliseconds to wait once the user has stopped interacting\n  *     with the interface before begining to fade the controls. Assumes\n  *     showNavigationControl and autoHideControls are both true.\n  *\n  * @property {Number} [controlsFadeLength=1500]\n  *     The number of milliseconds to animate the controls fading out.\n  *\n  * @property {Number} [maxImageCacheCount=200]\n  *     The max number of images we should keep in memory (per drawer).\n  *\n  * @property {Number} [timeout=30000]\n  *\n  * @property {Boolean} [useCanvas=true]\n  *     Set to false to not use an HTML canvas element for image rendering even if canvas is supported.\n  *\n  * @property {Number} [minPixelRatio=0.5]\n  *     The higher the minPixelRatio, the lower the quality of the image that\n  *     is considered sufficient to stop rendering a given zoom level.  For\n  *     example, if you are targeting mobile devices with less bandwith you may\n  *     try setting this to 1.5 or higher.\n  *\n  * @property {Boolean} [mouseNavEnabled=true]\n  *     Is the user able to interact with the image via mouse or touch. Default\n  *     interactions include draging the image in a plane, and zooming in toward\n  *     and away from the image.\n  *\n  * @property {Boolean} [showNavigationControl=true]\n  *     Set to false to prevent the appearance of the default navigation controls.<br>\n  *     Note that if set to false, the customs buttons set by the options\n  *     zoomInButton, zoomOutButton etc, are rendered inactive.\n  *\n  * @property {OpenSeadragon.ControlAnchor} [navigationControlAnchor=TOP_LEFT]\n  *     Placement of the default navigation controls.\n  *     To set the placement of the sequence controls, see the\n  *     sequenceControlAnchor option.\n  *\n  * @property {Boolean} [showZoomControl=true]\n  *     If true then + and - buttons to zoom in and out are displayed.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showHomeControl=true]\n  *     If true then the \'Go home\' button is displayed to go back to the original\n  *     zoom and pan.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showFullPageControl=true]\n  *     If true then the \'Toggle full page\' button is displayed to switch\n  *     between full page and normal mode.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showRotationControl=false]\n  *     If true then the rotate left/right controls will be displayed as part of the\n  *     standard controls. This is also subject to the browser support for rotate\n  *     (e.g. viewer.drawer.canRotate()).<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showSequenceControl=true]\n  *     If sequenceMode is true, then provide buttons for navigating forward and\n  *     backward through the images.\n  *\n  * @property {OpenSeadragon.ControlAnchor} [sequenceControlAnchor=TOP_LEFT]\n  *     Placement of the default sequence controls.\n  *\n  * @property {Boolean} [navPrevNextWrap=false]\n  *     If true then the \'previous\' button will wrap to the last image when\n  *     viewing the first image and the \'next\' button will wrap to the first\n  *     image when viewing the last image.\n  *\n  * @property {String} zoomInButton\n  *     Set the id of the custom \'Zoom in\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} zoomOutButton\n  *     Set the id of the custom \'Zoom out\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} homeButton\n  *     Set the id of the custom \'Go home\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} fullPageButton\n  *     Set the id of the custom \'Toggle full page\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} rotateLeftButton\n  *     Set the id of the custom \'Rotate left\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} rotateRightButton\n  *     Set the id of the custom \'Rotate right\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} previousButton\n  *     Set the id of the custom \'Previous page\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} nextButton\n  *     Set the id of the custom \'Next page\' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {Boolean} [sequenceMode=false]\n  *     Set to true to have the viewer treat your tilesources as a sequence of images to\n  *     be opened one at a time rather than all at once.\n  *\n  * @property {Number} [initialPage=0]\n  *     If sequenceMode is true, display this page initially.\n  *\n  * @property {Boolean} [preserveViewport=false]\n  *     If sequenceMode is true, then normally navigating through each image resets the\n  *     viewport to \'home\' position.  If preserveViewport is set to true, then the viewport\n  *     position is preserved when navigating between images in the sequence.\n  *\n  * @property {Boolean} [preserveOverlays=false]\n  *     If sequenceMode is true, then normally navigating through each image\n  *     resets the overlays.\n  *     If preserveOverlays is set to true, then the overlays added with {@link OpenSeadragon.Viewer#addOverlay}\n  *     are preserved when navigating between images in the sequence.\n  *     Note: setting preserveOverlays overrides any overlays specified in the global\n  *     "overlays" option for the Viewer. It\'s also not compatible with specifying\n  *     per-tileSource overlays via the options, as those overlays will persist\n  *     even after the tileSource is closed.\n  *\n  * @property {Boolean} [showReferenceStrip=false]\n  *     If sequenceMode is true, then display a scrolling strip of image thumbnails for\n  *     navigating through the images.\n  *\n  * @property {String} [referenceStripScroll=\'horizontal\']\n  *\n  * @property {Element} [referenceStripElement=null]\n  *\n  * @property {Number} [referenceStripHeight=null]\n  *\n  * @property {Number} [referenceStripWidth=null]\n  *\n  * @property {String} [referenceStripPosition=\'BOTTOM_LEFT\']\n  *\n  * @property {Number} [referenceStripSizeRatio=0.2]\n  *\n  * @property {Boolean} [collectionMode=false]\n  *     Set to true to have the viewer arrange your TiledImages in a grid or line.\n  *\n  * @property {Number} [collectionRows=3]\n  *     If collectionMode is true, specifies how many rows the grid should have. Use 1 to make a line.\n  *     If collectionLayout is \'vertical\', specifies how many columns instead.\n  *\n  * @property {Number} [collectionColumns=0]\n  *     If collectionMode is true, specifies how many columns the grid should have. Use 1 to make a line.\n  *     If collectionLayout is \'vertical\', specifies how many rows instead. Ignored if collectionRows is not set to a falsy value.\n  *\n  * @property {String} [collectionLayout=\'horizontal\']\n  *     If collectionMode is true, specifies whether to arrange vertically or horizontally.\n  *\n  * @property {Number} [collectionTileSize=800]\n  *     If collectionMode is true, specifies the size, in viewport coordinates, for each TiledImage to fit into.\n  *     The TiledImage will be centered within a square of the specified size.\n  *\n  * @property {Number} [collectionTileMargin=80]\n  *     If collectionMode is true, specifies the margin, in viewport coordinates, between each TiledImage.\n  *\n  * @property {String|Boolean} [crossOriginPolicy=false]\n  *     Valid values are \'Anonymous\', \'use-credentials\', and false. If false, canvas requests will\n  *     not use CORS, and the canvas will be tainted.\n  *\n  * @property {Boolean} [ajaxWithCredentials=false]\n  *     Whether to set the withCredentials XHR flag for AJAX requests (when loading tile sources).\n  *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.\n  *\n  */\n\n /**\n  * Settings for gestures generated by a pointer device.\n  *\n  * @typedef {Object} GestureSettings\n  * @memberof OpenSeadragon\n  *\n  * @property {Boolean} scrollToZoom\n  *     Set to false to disable zooming on scroll gestures.\n  *\n  * @property {Boolean} clickToZoom\n  *     Set to false to disable zooming on click gestures.\n  *\n  * @property {Boolean} dblClickToZoom\n  *     Set to false to disable zooming on double-click gestures. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  *\n  * @property {Boolean} pinchToZoom\n  *     Set to false to disable zooming on pinch gestures.\n  *\n  * @property {Boolean} flickEnabled\n  *     Set to false to disable the kinetic panning effect (flick) at the end of a drag gesture.\n  *\n  * @property {Number} flickMinSpeed\n  *     If flickEnabled is true, the minimum speed (in pixels-per-second) required to cause the kinetic panning effect (flick) at the end of a drag gesture.\n  *\n  * @property {Number} flickMomentum\n  *     If flickEnabled is true, a constant multiplied by the velocity to determine the distance of the kinetic panning effect (flick) at the end of a drag gesture.\n  *     A larger value will make the flick feel "lighter", while a smaller value will make the flick feel "heavier".\n  *     Note: springStiffness and animationTime also affect the "spring" used to stop the flick animation.\n  *\n  */\n\n/**\n  * The names for the image resources used for the image navigation buttons.\n  *\n  * @typedef {Object} NavImages\n  * @memberof OpenSeadragon\n  *\n  * @property {Object} zoomIn - Images for the zoom-in button.\n  * @property {String} zoomIn.REST\n  * @property {String} zoomIn.GROUP\n  * @property {String} zoomIn.HOVER\n  * @property {String} zoomIn.DOWN\n  *\n  * @property {Object} zoomOut - Images for the zoom-out button.\n  * @property {String} zoomOut.REST\n  * @property {String} zoomOut.GROUP\n  * @property {String} zoomOut.HOVER\n  * @property {String} zoomOut.DOWN\n  *\n  * @property {Object} home - Images for the home button.\n  * @property {String} home.REST\n  * @property {String} home.GROUP\n  * @property {String} home.HOVER\n  * @property {String} home.DOWN\n  *\n  * @property {Object} fullpage - Images for the full-page button.\n  * @property {String} fullpage.REST\n  * @property {String} fullpage.GROUP\n  * @property {String} fullpage.HOVER\n  * @property {String} fullpage.DOWN\n  *\n  * @property {Object} rotateleft - Images for the rotate left button.\n  * @property {String} rotateleft.REST\n  * @property {String} rotateleft.GROUP\n  * @property {String} rotateleft.HOVER\n  * @property {String} rotateleft.DOWN\n  *\n  * @property {Object} rotateright - Images for the rotate right button.\n  * @property {String} rotateright.REST\n  * @property {String} rotateright.GROUP\n  * @property {String} rotateright.HOVER\n  * @property {String} rotateright.DOWN\n  *\n  * @property {Object} previous - Images for the previous button.\n  * @property {String} previous.REST\n  * @property {String} previous.GROUP\n  * @property {String} previous.HOVER\n  * @property {String} previous.DOWN\n  *\n  * @property {Object} next - Images for the next button.\n  * @property {String} next.REST\n  * @property {String} next.GROUP\n  * @property {String} next.HOVER\n  * @property {String} next.DOWN\n  *\n  */\n\n\n /**\n  * This function serves as a single point of instantiation for an {@link OpenSeadragon.Viewer}, including all\n  * combinations of out-of-the-box configurable features.\n  *\n  * @param {OpenSeadragon.Options} options - Viewer options.\n  * @returns {OpenSeadragon.Viewer}\n  */\nwindow.OpenSeadragon = window.OpenSeadragon || function( options ){\n\n    return new OpenSeadragon.Viewer( options );\n\n};\n\nif (true) {\n   !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n       return (window.OpenSeadragon);\n   }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n(function( $ ){\n\n\n    /**\n     * The OpenSeadragon version.\n     *\n     * @member {Object} OpenSeadragon.version\n     * @property {String} versionStr - The version number as a string (\'major.minor.revision\').\n     * @property {Number} major - The major version number.\n     * @property {Number} minor - The minor version number.\n     * @property {Number} revision - The revision number.\n     * @since 1.0.0\n     */\n    $.version = {\n        versionStr: \'2.2.1\',\n        major: parseInt(\'2\', 10),\n        minor: parseInt(\'2\', 10),\n        revision: parseInt(\'1\', 10)\n    };\n\n\n    /**\n     * Taken from jquery 1.6.1\n     * [[Class]] -> type pairs\n     * @private\n     */\n    var class2type = {\n            \'[object Boolean]\':     \'boolean\',\n            \'[object Number]\':      \'number\',\n            \'[object String]\':      \'string\',\n            \'[object Function]\':    \'function\',\n            \'[object Array]\':       \'array\',\n            \'[object Date]\':        \'date\',\n            \'[object RegExp]\':      \'regexp\',\n            \'[object Object]\':      \'object\'\n        },\n        // Save a reference to some core methods\n        toString    = Object.prototype.toString,\n        hasOwn      = Object.prototype.hasOwnProperty;\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function isFunction\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.isFunction = function( obj ) {\n        return $.type(obj) === "function";\n    };\n\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function isArray\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.isArray = Array.isArray || function( obj ) {\n        return $.type(obj) === "array";\n    };\n\n\n    /**\n     * A crude way of determining if an object is a window.\n     * Taken from jQuery 1.6.1\n     * @function isWindow\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.isWindow = function( obj ) {\n        return obj && typeof obj === "object" && "setInterval" in obj;\n    };\n\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function type\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.type = function( obj ) {\n        return ( obj === null ) || ( obj === undefined ) ?\n            String( obj ) :\n            class2type[ toString.call(obj) ] || "object";\n    };\n\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function isPlainObject\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.isPlainObject = function( obj ) {\n        // Must be an Object.\n        // Because of IE, we also have to check the presence of the constructor property.\n        // Make sure that DOM nodes and window objects don\'t pass through, as well\n        if ( !obj || OpenSeadragon.type(obj) !== "object" || obj.nodeType || $.isWindow( obj ) ) {\n            return false;\n        }\n\n        // Not own constructor property must be Object\n        if ( obj.constructor &&\n            !hasOwn.call(obj, "constructor") &&\n            !hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {\n            return false;\n        }\n\n        // Own properties are enumerated firstly, so to speed up,\n        // if last one is own, then all properties are own.\n\n        var lastKey;\n        for (var key in obj ) {\n            lastKey = key;\n        }\n\n        return lastKey === undefined || hasOwn.call( obj, lastKey );\n    };\n\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function isEmptyObject\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.isEmptyObject = function( obj ) {\n        for ( var name in obj ) {\n            return false;\n        }\n        return true;\n    };\n\n    /**\n     * Shim around Object.freeze. Does nothing if Object.freeze is not supported.\n     * @param {Object} obj The object to freeze.\n     * @return {Object} obj The frozen object.\n     */\n    $.freezeObject = function(obj) {\n        if (Object.freeze) {\n            $.freezeObject = Object.freeze;\n        } else {\n            $.freezeObject = function(obj) {\n                return obj;\n            };\n        }\n        return $.freezeObject(obj);\n    };\n\n    /**\n     * True if the browser supports the HTML5 canvas element\n     * @member {Boolean} supportsCanvas\n     * @memberof OpenSeadragon\n     */\n    $.supportsCanvas = (function () {\n        var canvasElement = document.createElement( \'canvas\' );\n        return !!( $.isFunction( canvasElement.getContext ) &&\n                    canvasElement.getContext( \'2d\' ) );\n    }());\n\n    /**\n     * Test whether the submitted canvas is tainted or not.\n     * @argument {Canvas} canvas The canvas to test.\n     * @returns {Boolean} True if the canvas is tainted.\n     */\n    $.isCanvasTainted = function(canvas) {\n        var isTainted = false;\n        try {\n            // We test if the canvas is tainted by retrieving data from it.\n            // An exception will be raised if the canvas is tainted.\n            var data = canvas.getContext(\'2d\').getImageData(0, 0, 1, 1);\n        } catch (e) {\n            isTainted = true;\n        }\n        return isTainted;\n    };\n\n    /**\n     * A ratio comparing the device screen\'s pixel density to the canvas\'s backing store pixel density. Defaults to 1 if canvas isn\'t supported by the browser.\n     * @member {Number} pixelDensityRatio\n     * @memberof OpenSeadragon\n     */\n    $.pixelDensityRatio = (function () {\n        if ( $.supportsCanvas ) {\n            var context = document.createElement(\'canvas\').getContext(\'2d\');\n            var devicePixelRatio = window.devicePixelRatio || 1;\n            var backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                                    context.mozBackingStorePixelRatio ||\n                                    context.msBackingStorePixelRatio ||\n                                    context.oBackingStorePixelRatio ||\n                                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        } else {\n            return 1;\n        }\n    }());\n\n}( OpenSeadragon ));\n\n/**\n *  This closure defines all static methods available to the OpenSeadragon\n *  namespace.  Many, if not most, are taked directly from jQuery for use\n *  to simplify and reduce common programming patterns.  More static methods\n *  from jQuery may eventually make their way into this though we are\n *  attempting to avoid an explicit dependency on jQuery only because\n *  OpenSeadragon is a broadly useful code base and would be made less broad\n *  by requiring jQuery fully.\n *\n *  Some static methods have also been refactored from the original OpenSeadragon\n *  project.\n */\n(function( $ ){\n\n    /**\n     * Taken from jQuery 1.6.1\n     * @function extend\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */\n    $.extend = function() {\n        var options,\n            name,\n            src,\n            copy,\n            copyIsArray,\n            clone,\n            target  = arguments[ 0 ] || {},\n            length  = arguments.length,\n            deep    = false,\n            i       = 1;\n\n        // Handle a deep copy situation\n        if ( typeof target === "boolean" ) {\n            deep    = target;\n            target  = arguments[ 1 ] || {};\n            // skip the boolean and the target\n            i = 2;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if ( typeof target !== "object" && !OpenSeadragon.isFunction( target ) ) {\n            target = {};\n        }\n\n        // extend jQuery itself if only one argument is passed\n        if ( length === i ) {\n            target = this;\n            --i;\n        }\n\n        for ( ; i < length; i++ ) {\n            // Only deal with non-null/undefined values\n            options = arguments[ i ];\n            if ( options !== null || options !== undefined ) {\n                // Extend the base object\n                for ( name in options ) {\n                    src = target[ name ];\n                    copy = options[ name ];\n\n                    // Prevent never-ending loop\n                    if ( target === copy ) {\n                        continue;\n                    }\n\n                    // Recurse if we\'re merging plain objects or arrays\n                    if ( deep && copy && ( OpenSeadragon.isPlainObject( copy ) || ( copyIsArray = OpenSeadragon.isArray( copy ) ) ) ) {\n                        if ( copyIsArray ) {\n                            copyIsArray = false;\n                            clone = src && OpenSeadragon.isArray( src ) ? src : [];\n\n                        } else {\n                            clone = src && OpenSeadragon.isPlainObject( src ) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[ name ] = OpenSeadragon.extend( deep, clone, copy );\n\n                    // Don\'t bring in undefined values\n                    } else if ( copy !== undefined ) {\n                        target[ name ] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    };\n\n    var isIOSDevice = function () {\n        if (typeof navigator !== \'object\') {\n            return false;\n        }\n        var userAgent = navigator.userAgent;\n        if (typeof userAgent !== \'string\') {\n            return false;\n        }\n        return userAgent.indexOf(\'iPhone\') !== -1 ||\n               userAgent.indexOf(\'iPad\') !== -1 ||\n               userAgent.indexOf(\'iPod\') !== -1;\n    };\n\n    $.extend( $, /** @lends OpenSeadragon */{\n        /**\n         * The default values for the optional settings documented at {@link OpenSeadragon.Options}.\n         * @static\n         * @type {Object}\n         */\n        DEFAULT_SETTINGS: {\n            //DATA SOURCE DETAILS\n            xmlPath:                null,\n            tileSources:            null,\n            tileHost:               null,\n            initialPage:            0,\n            crossOriginPolicy:      false,\n            ajaxWithCredentials:    false,\n\n            //PAN AND ZOOM SETTINGS AND CONSTRAINTS\n            panHorizontal:          true,\n            panVertical:            true,\n            constrainDuringPan:     false,\n            wrapHorizontal:         false,\n            wrapVertical:           false,\n            visibilityRatio:        0.5, //-> how much of the viewer can be negative space\n            minPixelRatio:          0.5, //->closer to 0 draws tiles meant for a higher zoom at this zoom\n            defaultZoomLevel:       0,\n            minZoomLevel:           null,\n            maxZoomLevel:           null,\n            homeFillsViewer:        false,\n\n            //UI RESPONSIVENESS AND FEEL\n            clickTimeThreshold:     300,\n            clickDistThreshold:     5,\n            dblClickTimeThreshold:  300,\n            dblClickDistThreshold:  20,\n            springStiffness:        6.5,\n            animationTime:          1.2,\n            gestureSettingsMouse:   { scrollToZoom: true,  clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },\n            gestureSettingsTouch:   { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },\n            gestureSettingsPen:     { scrollToZoom: false, clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },\n            gestureSettingsUnknown: { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },\n            zoomPerClick:           2,\n            zoomPerScroll:          1.2,\n            zoomPerSecond:          1.0,\n            blendTime:              0,\n            alwaysBlend:            false,\n            autoHideControls:       true,\n            immediateRender:        false,\n            minZoomImageRatio:      0.9, //-> closer to 0 allows zoom out to infinity\n            maxZoomPixelRatio:      1.1, //-> higher allows \'over zoom\' into pixels\n            smoothTileEdgesMinZoom: 1.1, //-> higher than maxZoomPixelRatio disables it\n            iOSDevice:              isIOSDevice(),\n            pixelsPerWheelLine:     40,\n            autoResize:             true,\n            preserveImageSizeOnResize: false, // requires autoResize=true\n            minScrollDeltaTime:     50,\n\n            //DEFAULT CONTROL SETTINGS\n            showSequenceControl:     true,  //SEQUENCE\n            sequenceControlAnchor:   null,  //SEQUENCE\n            preserveViewport:        false, //SEQUENCE\n            preserveOverlays:        false, //SEQUENCE\n            navPrevNextWrap:         false, //SEQUENCE\n            showNavigationControl:   true,  //ZOOM/HOME/FULL/ROTATION\n            navigationControlAnchor: null,  //ZOOM/HOME/FULL/ROTATION\n            showZoomControl:         true,  //ZOOM\n            showHomeControl:         true,  //HOME\n            showFullPageControl:     true,  //FULL\n            showRotationControl:     false, //ROTATION\n            controlsFadeDelay:       2000,  //ZOOM/HOME/FULL/SEQUENCE\n            controlsFadeLength:      1500,  //ZOOM/HOME/FULL/SEQUENCE\n            mouseNavEnabled:         true,  //GENERAL MOUSE INTERACTIVITY\n\n            //VIEWPORT NAVIGATOR SETTINGS\n            showNavigator:              false,\n            navigatorId:                null,\n            navigatorPosition:          null,\n            navigatorSizeRatio:         0.2,\n            navigatorMaintainSizeRatio: false,\n            navigatorTop:               null,\n            navigatorLeft:              null,\n            navigatorHeight:            null,\n            navigatorWidth:             null,\n            navigatorAutoResize:        true,\n            navigatorAutoFade:          true,\n            navigatorRotate:            true,\n\n            // INITIAL ROTATION\n            degrees:                    0,\n\n            // APPEARANCE\n            opacity:                    1,\n            compositeOperation:         null,\n            placeholderFillStyle:       null,\n\n            //REFERENCE STRIP SETTINGS\n            showReferenceStrip:          false,\n            referenceStripScroll:       \'horizontal\',\n            referenceStripElement:       null,\n            referenceStripHeight:        null,\n            referenceStripWidth:         null,\n            referenceStripPosition:      \'BOTTOM_LEFT\',\n            referenceStripSizeRatio:     0.2,\n\n            //COLLECTION VISUALIZATION SETTINGS\n            collectionRows:         3, //or columns depending on layout\n            collectionColumns:      0, //columns in horizontal layout, rows in vertical layout\n            collectionLayout:       \'horizontal\', //vertical\n            collectionMode:         false,\n            collectionTileSize:     800,\n            collectionTileMargin:   80,\n\n            //PERFORMANCE SETTINGS\n            imageLoaderLimit:       0,\n            maxImageCacheCount:     200,\n            timeout:                30000,\n            useCanvas:              true,  // Use canvas element for drawing if available\n\n            //INTERFACE RESOURCE SETTINGS\n            prefixUrl:              "/images/",\n            navImages: {\n                zoomIn: {\n                    REST:   \'zoomin_rest.png\',\n                    GROUP:  \'zoomin_grouphover.png\',\n                    HOVER:  \'zoomin_hover.png\',\n                    DOWN:   \'zoomin_pressed.png\'\n                },\n                zoomOut: {\n                    REST:   \'zoomout_rest.png\',\n                    GROUP:  \'zoomout_grouphover.png\',\n                    HOVER:  \'zoomout_hover.png\',\n                    DOWN:   \'zoomout_pressed.png\'\n                },\n                home: {\n                    REST:   \'home_rest.png\',\n                    GROUP:  \'home_grouphover.png\',\n                    HOVER:  \'home_hover.png\',\n                    DOWN:   \'home_pressed.png\'\n                },\n                fullpage: {\n                    REST:   \'fullpage_rest.png\',\n                    GROUP:  \'fullpage_grouphover.png\',\n                    HOVER:  \'fullpage_hover.png\',\n                    DOWN:   \'fullpage_pressed.png\'\n                },\n                rotateleft: {\n                    REST:   \'rotateleft_rest.png\',\n                    GROUP:  \'rotateleft_grouphover.png\',\n                    HOVER:  \'rotateleft_hover.png\',\n                    DOWN:   \'rotateleft_pressed.png\'\n                },\n                rotateright: {\n                    REST:   \'rotateright_rest.png\',\n                    GROUP:  \'rotateright_grouphover.png\',\n                    HOVER:  \'rotateright_hover.png\',\n                    DOWN:   \'rotateright_pressed.png\'\n                },\n                previous: {\n                    REST:   \'previous_rest.png\',\n                    GROUP:  \'previous_grouphover.png\',\n                    HOVER:  \'previous_hover.png\',\n                    DOWN:   \'previous_pressed.png\'\n                },\n                next: {\n                    REST:   \'next_rest.png\',\n                    GROUP:  \'next_grouphover.png\',\n                    HOVER:  \'next_hover.png\',\n                    DOWN:   \'next_pressed.png\'\n                }\n            },\n\n            //DEVELOPER SETTINGS\n            debugMode:              false,\n            debugGridColor:         \'#437AB2\'\n        },\n\n\n        /**\n         * TODO: get rid of this.  I can\'t see how it\'s required at all.  Looks\n         *       like an early legacy code artifact.\n         * @static\n         * @ignore\n         */\n        SIGNAL: "----seadragon----",\n\n\n        /**\n         * Returns a function which invokes the method as if it were a method belonging to the object.\n         * @function\n         * @param {Object} object\n         * @param {Function} method\n         * @returns {Function}\n         */\n        delegate: function( object, method ) {\n            return function(){\n                var args = arguments;\n                if ( args === undefined ){\n                    args = [];\n                }\n                return method.apply( object, args );\n            };\n        },\n\n\n        /**\n         * An enumeration of Browser vendors.\n         * @static\n         * @type {Object}\n         * @property {Number} UNKNOWN\n         * @property {Number} IE\n         * @property {Number} FIREFOX\n         * @property {Number} SAFARI\n         * @property {Number} CHROME\n         * @property {Number} OPERA\n         */\n        BROWSERS: {\n            UNKNOWN:    0,\n            IE:         1,\n            FIREFOX:    2,\n            SAFARI:     3,\n            CHROME:     4,\n            OPERA:      5\n        },\n\n\n        /**\n         * Returns a DOM Element for the given id or element.\n         * @function\n         * @param {String|Element} element Accepts an id or element.\n         * @returns {Element} The element with the given id, null, or the element itself.\n         */\n        getElement: function( element ) {\n            if ( typeof ( element ) == "string" ) {\n                element = document.getElementById( element );\n            }\n            return element;\n        },\n\n\n        /**\n         * Determines the position of the upper-left corner of the element.\n         * @function\n         * @param {Element|String} element - the elemenet we want the position for.\n         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element.\n         */\n        getElementPosition: function( element ) {\n            var result = new $.Point(),\n                isFixed,\n                offsetParent;\n\n            element      = $.getElement( element );\n            isFixed      = $.getElementStyle( element ).position == "fixed";\n            offsetParent = getOffsetParent( element, isFixed );\n\n            while ( offsetParent ) {\n\n                result.x += element.offsetLeft;\n                result.y += element.offsetTop;\n\n                if ( isFixed ) {\n                    result = result.plus( $.getPageScroll() );\n                }\n\n                element = offsetParent;\n                isFixed = $.getElementStyle( element ).position == "fixed";\n                offsetParent = getOffsetParent( element, isFixed );\n            }\n\n            return result;\n        },\n\n\n        /**\n         * Determines the position of the upper-left corner of the element adjusted for current page and/or element scroll.\n         * @function\n         * @param {Element|String} element - the element we want the position for.\n         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element adjusted for current page and/or element scroll.\n         */\n        getElementOffset: function( element ) {\n            element = $.getElement( element );\n\n            var doc = element && element.ownerDocument,\n                docElement,\n                win,\n                boundingRect = { top: 0, left: 0 };\n\n            if ( !doc ) {\n                return new $.Point();\n            }\n\n            docElement = doc.documentElement;\n\n            if ( typeof element.getBoundingClientRect !== typeof undefined ) {\n                boundingRect = element.getBoundingClientRect();\n            }\n\n            win = ( doc == doc.window ) ?\n                doc :\n                ( doc.nodeType === 9 ) ?\n                    doc.defaultView || doc.parentWindow :\n                    false;\n\n            return new $.Point(\n                boundingRect.left + ( win.pageXOffset || docElement.scrollLeft ) - ( docElement.clientLeft || 0 ),\n                boundingRect.top + ( win.pageYOffset || docElement.scrollTop ) - ( docElement.clientTop || 0 )\n            );\n        },\n\n\n        /**\n         * Determines the height and width of the given element.\n         * @function\n         * @param {Element|String} element\n         * @returns {OpenSeadragon.Point}\n         */\n        getElementSize: function( element ) {\n            element = $.getElement( element );\n\n            return new $.Point(\n                element.clientWidth,\n                element.clientHeight\n            );\n        },\n\n\n        /**\n         * Returns the CSSStyle object for the given element.\n         * @function\n         * @param {Element|String} element\n         * @returns {CSSStyle}\n         */\n        getElementStyle:\n            document.documentElement.currentStyle ?\n            function( element ) {\n                element = $.getElement( element );\n                return element.currentStyle;\n            } :\n            function( element ) {\n                element = $.getElement( element );\n                return window.getComputedStyle( element, "" );\n            },\n\n        /**\n         * Returns the property with the correct vendor prefix appended.\n         * @param {String} property the property name\n         * @returns {String} the property with the correct prefix or null if not\n         * supported.\n         */\n        getCssPropertyWithVendorPrefix: function(property) {\n            var memo = {};\n\n            $.getCssPropertyWithVendorPrefix = function(property) {\n                if (memo[property] !== undefined) {\n                    return memo[property];\n                }\n                var style = document.createElement(\'div\').style;\n                var result = null;\n                if (style[property] !== undefined) {\n                    result = property;\n                } else {\n                    var prefixes = [\'Webkit\', \'Moz\', \'MS\', \'O\',\n                        \'webkit\', \'moz\', \'ms\', \'o\'];\n                    var suffix = $.capitalizeFirstLetter(property);\n                    for (var i = 0; i < prefixes.length; i++) {\n                        var prop = prefixes[i] + suffix;\n                        if (style[prop] !== undefined) {\n                            result = prop;\n                            break;\n                        }\n                    }\n                }\n                memo[property] = result;\n                return result;\n            };\n            return $.getCssPropertyWithVendorPrefix(property);\n        },\n\n        /**\n         * Capitalizes the first letter of a string\n         * @param {String} string\n         * @returns {String} The string with the first letter capitalized\n         */\n        capitalizeFirstLetter: function(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        },\n\n        /**\n         * Determines if a point is within the bounding rectangle of the given element (hit-test).\n         * @function\n         * @param {Element|String} element\n         * @param {OpenSeadragon.Point} point\n         * @returns {Boolean}\n         */\n        pointInElement: function( element, point ) {\n            element = $.getElement( element );\n            var offset = $.getElementOffset( element ),\n                size = $.getElementSize( element );\n            return point.x >= offset.x && point.x < offset.x + size.x && point.y < offset.y + size.y && point.y >= offset.y;\n        },\n\n\n        /**\n         * Gets the latest event, really only useful internally since its\n         * specific to IE behavior.\n         * @function\n         * @param {Event} [event]\n         * @returns {Event}\n         * @deprecated For internal use only\n         * @private\n         */\n        getEvent: function( event ) {\n            if( event ){\n                $.getEvent = function( event ) {\n                    return event;\n                };\n            } else {\n                $.getEvent = function() {\n                    return window.event;\n                };\n            }\n            return $.getEvent( event );\n        },\n\n\n        /**\n         * Gets the position of the mouse on the screen for a given event.\n         * @function\n         * @param {Event} [event]\n         * @returns {OpenSeadragon.Point}\n         */\n        getMousePosition: function( event ) {\n\n            if ( typeof( event.pageX ) == "number" ) {\n                $.getMousePosition = function( event ){\n                    var result = new $.Point();\n\n                    event = $.getEvent( event );\n                    result.x = event.pageX;\n                    result.y = event.pageY;\n\n                    return result;\n                };\n            } else if ( typeof( event.clientX ) == "number" ) {\n                $.getMousePosition = function( event ){\n                    var result = new $.Point();\n\n                    event = $.getEvent( event );\n                    result.x =\n                        event.clientX +\n                        document.body.scrollLeft +\n                        document.documentElement.scrollLeft;\n                    result.y =\n                        event.clientY +\n                        document.body.scrollTop +\n                        document.documentElement.scrollTop;\n\n                    return result;\n                };\n            } else {\n                throw new Error(\n                    "Unknown event mouse position, no known technique."\n                );\n            }\n\n            return $.getMousePosition( event );\n        },\n\n\n        /**\n         * Determines the page\'s current scroll position.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */\n        getPageScroll: function() {\n            var docElement  = document.documentElement || {},\n                body        = document.body || {};\n\n            if ( typeof( window.pageXOffset ) == "number" ) {\n                $.getPageScroll = function(){\n                    return new $.Point(\n                        window.pageXOffset,\n                        window.pageYOffset\n                    );\n                };\n            } else if ( body.scrollLeft || body.scrollTop ) {\n                $.getPageScroll = function(){\n                    return new $.Point(\n                        document.body.scrollLeft,\n                        document.body.scrollTop\n                    );\n                };\n            } else if ( docElement.scrollLeft || docElement.scrollTop ) {\n                $.getPageScroll = function(){\n                    return new $.Point(\n                        document.documentElement.scrollLeft,\n                        document.documentElement.scrollTop\n                    );\n                };\n            } else {\n                // We can\'t reassign the function yet, as there was no scroll.\n                return new $.Point(0,0);\n            }\n\n            return $.getPageScroll();\n        },\n\n        /**\n         * Set the page scroll position.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */\n        setPageScroll: function( scroll ) {\n            if ( typeof ( window.scrollTo ) !== "undefined" ) {\n                $.setPageScroll = function( scroll ) {\n                    window.scrollTo( scroll.x, scroll.y );\n                };\n            } else {\n                var originalScroll = $.getPageScroll();\n                if ( originalScroll.x === scroll.x &&\n                    originalScroll.y === scroll.y ) {\n                    // We are already correctly positioned and there\n                    // is no way to detect the correct method.\n                    return;\n                }\n\n                document.body.scrollLeft = scroll.x;\n                document.body.scrollTop = scroll.y;\n                var currentScroll = $.getPageScroll();\n                if ( currentScroll.x !== originalScroll.x &&\n                    currentScroll.y !== originalScroll.y ) {\n                    $.setPageScroll = function( scroll ) {\n                        document.body.scrollLeft = scroll.x;\n                        document.body.scrollTop = scroll.y;\n                    };\n                    return;\n                }\n\n                document.documentElement.scrollLeft = scroll.x;\n                document.documentElement.scrollTop = scroll.y;\n                currentScroll = $.getPageScroll();\n                if ( currentScroll.x !== originalScroll.x &&\n                    currentScroll.y !== originalScroll.y ) {\n                    $.setPageScroll = function( scroll ) {\n                        document.documentElement.scrollLeft = scroll.x;\n                        document.documentElement.scrollTop = scroll.y;\n                    };\n                    return;\n                }\n\n                // We can\'t find anything working, so we do nothing.\n                $.setPageScroll = function( scroll ) {\n                };\n            }\n\n            return $.setPageScroll( scroll );\n        },\n\n        /**\n         * Determines the size of the browsers window.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */\n        getWindowSize: function() {\n            var docElement = document.documentElement || {},\n                body    = document.body || {};\n\n            if ( typeof( window.innerWidth ) == \'number\' ) {\n                $.getWindowSize = function(){\n                    return new $.Point(\n                        window.innerWidth,\n                        window.innerHeight\n                    );\n                };\n            } else if ( docElement.clientWidth || docElement.clientHeight ) {\n                $.getWindowSize = function(){\n                    return new $.Point(\n                        document.documentElement.clientWidth,\n                        document.documentElement.clientHeight\n                    );\n                };\n            } else if ( body.clientWidth || body.clientHeight ) {\n                $.getWindowSize = function(){\n                    return new $.Point(\n                        document.body.clientWidth,\n                        document.body.clientHeight\n                    );\n                };\n            } else {\n                throw new Error("Unknown window size, no known technique.");\n            }\n\n            return $.getWindowSize();\n        },\n\n\n        /**\n         * Wraps the given element in a nest of divs so that the element can\n         * be easily centered using CSS tables\n         * @function\n         * @param {Element|String} element\n         * @returns {Element} outermost wrapper element\n         */\n        makeCenteredNode: function( element ) {\n            // Convert a possible ID to an actual HTMLElement\n            element = $.getElement( element );\n\n            /*\n                CSS tables require you to have a display:table/row/cell hierarchy so we need to create\n                three nested wrapper divs:\n             */\n\n            var wrappers = [\n                $.makeNeutralElement( \'div\' ),\n                $.makeNeutralElement( \'div\' ),\n                $.makeNeutralElement( \'div\' )\n            ];\n\n            // It feels like we should be able to pass style dicts to makeNeutralElement:\n            $.extend(wrappers[0].style, {\n                display: "table",\n                height: "100%",\n                width: "100%"\n            });\n\n            $.extend(wrappers[1].style, {\n                display: "table-row"\n            });\n\n            $.extend(wrappers[2].style, {\n                display: "table-cell",\n                verticalAlign: "middle",\n                textAlign: "center"\n            });\n\n            wrappers[0].appendChild(wrappers[1]);\n            wrappers[1].appendChild(wrappers[2]);\n            wrappers[2].appendChild(element);\n\n            return wrappers[0];\n        },\n\n\n        /**\n         * Creates an easily positionable element of the given type that therefor\n         * serves as an excellent container element.\n         * @function\n         * @param {String} tagName\n         * @returns {Element}\n         */\n        makeNeutralElement: function( tagName ) {\n            var element = document.createElement( tagName ),\n                style   = element.style;\n\n            style.background = "transparent none";\n            style.border     = "none";\n            style.margin     = "0px";\n            style.padding    = "0px";\n            style.position   = "static";\n\n            return element;\n        },\n\n\n        /**\n         * Returns the current milliseconds, using Date.now() if available\n         * @function\n         */\n        now: function( ) {\n          if (Date.now) {\n            $.now = Date.now;\n          } else {\n            $.now = function() { return new Date().getTime(); };\n          }\n\n          return $.now();\n        },\n\n\n        /**\n         * Ensures an image is loaded correctly to support alpha transparency.\n         * Generally only IE has issues doing this correctly for formats like\n         * png.\n         * @function\n         * @param {String} src\n         * @returns {Element}\n         */\n        makeTransparentImage: function( src ) {\n\n            $.makeTransparentImage = function( src ){\n                var img = $.makeNeutralElement( "img" );\n\n                img.src = src;\n\n                return img;\n            };\n\n            if ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 7 ) {\n\n                $.makeTransparentImage = function( src ){\n                    var img     = $.makeNeutralElement( "img" ),\n                        element = null;\n\n                    element = $.makeNeutralElement("span");\n                    element.style.display = "inline-block";\n\n                    img.onload = function() {\n                        element.style.width  = element.style.width || img.width + "px";\n                        element.style.height = element.style.height || img.height + "px";\n\n                        img.onload = null;\n                        img = null;     // to prevent memory leaks in IE\n                    };\n\n                    img.src = src;\n                    element.style.filter =\n                        "progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'" +\n                        src +\n                        "\', sizingMethod=\'scale\')";\n\n                    return element;\n                };\n\n            }\n\n            return $.makeTransparentImage( src );\n        },\n\n\n        /**\n         * Sets the opacity of the specified element.\n         * @function\n         * @param {Element|String} element\n         * @param {Number} opacity\n         * @param {Boolean} [usesAlpha]\n         */\n        setElementOpacity: function( element, opacity, usesAlpha ) {\n\n            var ieOpacity,\n                ieFilter;\n\n            element = $.getElement( element );\n\n            if ( usesAlpha && !$.Browser.alpha ) {\n                opacity = Math.round( opacity );\n            }\n\n            if ( $.Browser.opacity ) {\n                element.style.opacity = opacity < 1 ? opacity : "";\n            } else {\n                if ( opacity < 1 ) {\n                    ieOpacity = Math.round( 100 * opacity );\n                    ieFilter  = "alpha(opacity=" + ieOpacity + ")";\n                    element.style.filter = ieFilter;\n                } else {\n                    element.style.filter = "";\n                }\n            }\n        },\n\n\n        /**\n         * Sets the specified element\'s touch-action style attribute to \'none\'.\n         * @function\n         * @param {Element|String} element\n         */\n        setElementTouchActionNone: function( element ) {\n            element = $.getElement( element );\n            if ( typeof element.style.touchAction !== \'undefined\' ) {\n                element.style.touchAction = \'none\';\n            } else if ( typeof element.style.msTouchAction !== \'undefined\' ) {\n                element.style.msTouchAction = \'none\';\n            }\n        },\n\n\n        /**\n         * Add the specified CSS class to the element if not present.\n         * @function\n         * @param {Element|String} element\n         * @param {String} className\n         */\n        addClass: function( element, className ) {\n            element = $.getElement( element );\n\n            if ( ! element.className ) {\n                element.className = className;\n            } else if ( ( \' \' + element.className + \' \' ).\n                indexOf( \' \' + className + \' \' ) === -1 ) {\n                element.className += \' \' + className;\n            }\n        },\n\n        /**\n         * Find the first index at which an element is found in an array or -1\n         * if not present.\n         *\n         * Code taken and adapted from\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility\n         *\n         * @function\n         * @param {Array} array The array from which to find the element\n         * @param {Object} searchElement The element to find\n         * @param {Number} [fromIndex=0] Index to start research.\n         * @returns {Number} The index of the element in the array.\n         */\n        indexOf: function( array, searchElement, fromIndex ) {\n            if ( Array.prototype.indexOf ) {\n                this.indexOf = function( array, searchElement, fromIndex ) {\n                    return array.indexOf( searchElement, fromIndex );\n                };\n            } else {\n                this.indexOf = function( array, searchElement, fromIndex ) {\n                    var i,\n                        pivot = ( fromIndex ) ? fromIndex : 0,\n                        length;\n                    if ( !array ) {\n                        throw new TypeError( );\n                    }\n\n                    length = array.length;\n                    if ( length === 0 || pivot >= length ) {\n                        return -1;\n                    }\n\n                    if ( pivot < 0 ) {\n                        pivot = length - Math.abs( pivot );\n                    }\n\n                    for ( i = pivot; i < length; i++ ) {\n                        if ( array[i] === searchElement ) {\n                            return i;\n                        }\n                    }\n                    return -1;\n                };\n            }\n            return this.indexOf( array, searchElement, fromIndex );\n        },\n\n        /**\n         * Remove the specified CSS class from the element.\n         * @function\n         * @param {Element|String} element\n         * @param {String} className\n         */\n        removeClass: function( element, className ) {\n            var oldClasses,\n                newClasses = [],\n                i;\n\n            element = $.getElement( element );\n            oldClasses = element.className.split( /\\s+/ );\n            for ( i = 0; i < oldClasses.length; i++ ) {\n                if ( oldClasses[ i ] && oldClasses[ i ] !== className ) {\n                    newClasses.push( oldClasses[ i ] );\n                }\n            }\n            element.className = newClasses.join(\' \');\n        },\n\n\n        /**\n         * Adds an event listener for the given element, eventName and handler.\n         * @function\n         * @param {Element|String} element\n         * @param {String} eventName\n         * @param {Function} handler\n         * @param {Boolean} [useCapture]\n         */\n        addEvent: (function () {\n            if ( window.addEventListener ) {\n                return function ( element, eventName, handler, useCapture ) {\n                    element = $.getElement( element );\n                    element.addEventListener( eventName, handler, useCapture );\n                };\n            } else if ( window.attachEvent ) {\n                return function ( element, eventName, handler, useCapture ) {\n                    element = $.getElement( element );\n                    element.attachEvent( \'on\' + eventName, handler );\n                };\n            } else {\n                throw new Error( "No known event model." );\n            }\n        }()),\n\n\n        /**\n         * Remove a given event listener for the given element, event type and\n         * handler.\n         * @function\n         * @param {Element|String} element\n         * @param {String} eventName\n         * @param {Function} handler\n         * @param {Boolean} [useCapture]\n         */\n        removeEvent: (function () {\n            if ( window.removeEventListener ) {\n                return function ( element, eventName, handler, useCapture ) {\n                    element = $.getElement( element );\n                    element.removeEventListener( eventName, handler, useCapture );\n                };\n            } else if ( window.detachEvent ) {\n                return function( element, eventName, handler, useCapture ) {\n                    element = $.getElement( element );\n                    element.detachEvent( \'on\' + eventName, handler );\n                };\n            } else {\n                throw new Error( "No known event model." );\n            }\n        }()),\n\n\n        /**\n         * Cancels the default browser behavior had the event propagated all\n         * the way up the DOM to the window object.\n         * @function\n         * @param {Event} [event]\n         */\n        cancelEvent: function( event ) {\n            event = $.getEvent( event );\n\n            if ( event.preventDefault ) {\n                $.cancelEvent = function( event ){\n                    // W3C for preventing default\n                    event.preventDefault();\n                };\n            } else {\n                $.cancelEvent = function( event ){\n                    event = $.getEvent( event );\n                    // legacy for preventing default\n                    event.cancel = true;\n                    // IE for preventing default\n                    event.returnValue = false;\n                };\n            }\n            $.cancelEvent( event );\n        },\n\n\n        /**\n         * Stops the propagation of the event up the DOM.\n         * @function\n         * @param {Event} [event]\n         */\n        stopEvent: function( event ) {\n            event = $.getEvent( event );\n\n            if ( event.stopPropagation ) {\n                // W3C for stopping propagation\n                $.stopEvent = function( event ){\n                    event.stopPropagation();\n                };\n            } else {\n                // IE for stopping propagation\n                $.stopEvent = function( event ){\n                    event = $.getEvent( event );\n                    event.cancelBubble = true;\n                };\n\n            }\n\n            $.stopEvent( event );\n        },\n\n\n        /**\n         * Similar to OpenSeadragon.delegate, but it does not immediately call\n         * the method on the object, returning a function which can be called\n         * repeatedly to delegate the method. It also allows additonal arguments\n         * to be passed during construction which will be added during each\n         * invocation, and each invocation can add additional arguments as well.\n         *\n         * @function\n         * @param {Object} object\n         * @param {Function} method\n         * @param [args] any additional arguments are passed as arguments to the\n         *  created callback\n         * @returns {Function}\n         */\n        createCallback: function( object, method ) {\n            //TODO: This pattern is painful to use and debug.  It\'s much cleaner\n            //      to use pinning plus anonymous functions.  Get rid of this\n            //      pattern!\n            var initialArgs = [],\n                i;\n            for ( i = 2; i < arguments.length; i++ ) {\n                initialArgs.push( arguments[ i ] );\n            }\n\n            return function() {\n                var args = initialArgs.concat( [] ),\n                    i;\n                for ( i = 0; i < arguments.length; i++ ) {\n                    args.push( arguments[ i ] );\n                }\n\n                return method.apply( object, args );\n            };\n        },\n\n\n        /**\n         * Retreives the value of a url parameter from the window.location string.\n         * @function\n         * @param {String} key\n         * @returns {String} The value of the url parameter or null if no param matches.\n         */\n        getUrlParameter: function( key ) {\n            var value = URLPARAMS[ key ];\n            return value ? value : null;\n        },\n\n        /**\n         * Retrieves the protocol used by the url. The url can either be absolute\n         * or relative.\n         * @function\n         * @private\n         * @param {String} url The url to retrieve the protocol from.\n         * @return {String} The protocol (http:, https:, file:, ftp: ...)\n         */\n        getUrlProtocol: function( url ) {\n            var match = url.match(/^([a-z]+:)\\/\\//i);\n            if ( match === null ) {\n                // Relative URL, retrive the protocol from window.location\n                return window.location.protocol;\n            }\n            return match[1].toLowerCase();\n        },\n\n        /**\n         * Create an XHR object\n         * @private\n         * @param {type} [local] If set to true, the XHR will be file: protocol\n         * compatible if possible (but may raise a warning in the browser).\n         * @returns {XMLHttpRequest}\n         */\n        createAjaxRequest: function( local ) {\n            // IE11 does not support window.ActiveXObject so we just try to\n            // create one to see if it is supported.\n            // See: http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx\n            var supportActiveX;\n            try {\n                /* global ActiveXObject:true */\n                supportActiveX = !!new ActiveXObject( "Microsoft.XMLHTTP" );\n            } catch( e ) {\n                supportActiveX = false;\n            }\n\n            if ( supportActiveX ) {\n                if ( window.XMLHttpRequest ) {\n                    $.createAjaxRequest = function( local ) {\n                        if ( local ) {\n                            return new ActiveXObject( "Microsoft.XMLHTTP" );\n                        }\n                        return new XMLHttpRequest();\n                    };\n                } else {\n                    $.createAjaxRequest = function() {\n                        return new ActiveXObject( "Microsoft.XMLHTTP" );\n                    };\n                }\n            } else if ( window.XMLHttpRequest ) {\n                $.createAjaxRequest = function() {\n                    return new XMLHttpRequest();\n                };\n            } else {\n                throw new Error( "Browser doesn\'t support XMLHttpRequest." );\n            }\n            return $.createAjaxRequest( local );\n        },\n\n        /**\n         * Makes an AJAX request.\n         * @param {Object} options\n         * @param {String} options.url - the url to request\n         * @param {Function} options.success - a function to call on a successful response\n         * @param {Function} options.error - a function to call on when an error occurs\n         * @param {Boolean} [options.withCredentials=false] - whether to set the XHR\'s withCredentials\n         * @throws {Error}\n         */\n        makeAjaxRequest: function( url, onSuccess, onError ) {\n            var withCredentials;\n\n            // Note that our preferred API is that you pass in a single object; the named\n            // arguments are for legacy support.\n            if( $.isPlainObject( url ) ){\n                onSuccess = url.success;\n                onError = url.error;\n                withCredentials = url.withCredentials;\n                url = url.url;\n            }\n\n            var protocol = $.getUrlProtocol( url );\n            var request = $.createAjaxRequest( protocol === "file:" );\n\n            if ( !$.isFunction( onSuccess ) ) {\n                throw new Error( "makeAjaxRequest requires a success callback" );\n            }\n\n            request.onreadystatechange = function() {\n                // 4 = DONE (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)\n                if ( request.readyState == 4 ) {\n                    request.onreadystatechange = function(){};\n\n                    // With protocols other than http/https, the status is 200\n                    // on Firefox and 0 on other browsers\n                    if ( request.status === 200 ||\n                        ( request.status === 0 &&\n                          protocol !== "http:" &&\n                          protocol !== "https:" )) {\n                        onSuccess( request );\n                    } else {\n                        $.console.log( "AJAX request returned %d: %s", request.status, url );\n\n                        if ( $.isFunction( onError ) ) {\n                            onError( request );\n                        }\n                    }\n                }\n            };\n\n            if (withCredentials) {\n                request.withCredentials = true;\n            }\n\n            try {\n                request.open( "GET", url, true );\n                request.send( null );\n            } catch (e) {\n                var msg = e.message;\n\n                /*\n                    IE < 10 does not support CORS and an XHR request to a different origin will fail as soon\n                    as send() is called. This is particularly easy to miss during development and appear in\n                    production if you use a CDN or domain sharding and the security policy is likely to break\n                    exception handlers since any attempt to access a property of the request object will\n                    raise an access denied TypeError inside the catch block.\n\n                    To be friendlier, we\'ll check for this specific error and add a documentation pointer\n                    to point developers in the right direction. We test the exception number because IE\'s\n                    error messages are localized.\n                */\n                var oldIE = $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 10;\n                if ( oldIE && typeof( e.number ) != "undefined" && e.number == -2147024891 ) {\n                    msg += "\\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain";\n                }\n\n                $.console.log( "%s while making AJAX request: %s", e.name, msg );\n\n                request.onreadystatechange = function(){};\n\n                if (window.XDomainRequest) { // IE9 or IE8 might as well try to use XDomainRequest\n                    var xdr = new XDomainRequest();\n                    if (xdr) {\n                        xdr.onload = function (e) {\n                            if ( $.isFunction( onSuccess ) ) {\n                                onSuccess({ // Faking an xhr object\n                                    responseText: xdr.responseText,\n                                    status: 200, // XDomainRequest doesn\'t support status codes, so we just fake one! :/\n                                    statusText: \'OK\'\n                                });\n                            }\n                        };\n                        xdr.onerror = function (e) {\n                            if ( $.isFunction ( onError ) ) {\n                                onError({ // Faking an xhr object\n                                    responseText: xdr.responseText,\n                                    status: 444, // 444 No Response\n                                    statusText: \'An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser.\'\n                                });\n                            }\n                        };\n                        try {\n                            xdr.open(\'GET\', url);\n                            xdr.send();\n                        } catch (e2) {\n                            if ( $.isFunction( onError ) ) {\n                                onError( request, e );\n                            }\n                        }\n                    }\n                } else {\n                    if ( $.isFunction( onError ) ) {\n                        onError( request, e );\n                    }\n                }\n            }\n        },\n\n        /**\n         * Taken from jQuery 1.6.1\n         * @function\n         * @param {Object} options\n         * @param {String} options.url\n         * @param {Function} options.callback\n         * @param {String} [options.param=\'callback\'] The name of the url parameter\n         *      to request the jsonp provider with.\n         * @param {String} [options.callbackName=] The name of the callback to\n         *      request the jsonp provider with.\n         */\n        jsonp: function( options ){\n            var script,\n                url     = options.url,\n                head    = document.head ||\n                    document.getElementsByTagName( "head" )[ 0 ] ||\n                    document.documentElement,\n                jsonpCallback = options.callbackName || \'openseadragon\' + $.now(),\n                previous      = window[ jsonpCallback ],\n                replace       = "$1" + jsonpCallback + "$2",\n                callbackParam = options.param || \'callback\',\n                callback      = options.callback;\n\n            url = url.replace( /(\\=)\\?(&|$)|\\?\\?/i, replace );\n            // Add callback manually\n            url += (/\\?/.test( url ) ? "&" : "?") + callbackParam + "=" + jsonpCallback;\n\n            // Install callback\n            window[ jsonpCallback ] = function( response ) {\n                if ( !previous ){\n                    try{\n                        delete window[ jsonpCallback ];\n                    }catch(e){\n                        //swallow\n                    }\n                } else {\n                    window[ jsonpCallback ] = previous;\n                }\n                if( callback && $.isFunction( callback ) ){\n                    callback( response );\n                }\n            };\n\n            script = document.createElement( "script" );\n\n            //TODO: having an issue with async info requests\n            if( undefined !== options.async || false !== options.async ){\n                script.async = "async";\n            }\n\n            if ( options.scriptCharset ) {\n                script.charset = options.scriptCharset;\n            }\n\n            script.src = url;\n\n            // Attach handlers for all browsers\n            script.onload = script.onreadystatechange = function( _, isAbort ) {\n\n                if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n                    // Handle memory leak in IE\n                    script.onload = script.onreadystatechange = null;\n\n                    // Remove the script\n                    if ( head && script.parentNode ) {\n                        head.removeChild( script );\n                    }\n\n                    // Dereference the script\n                    script = undefined;\n                }\n            };\n            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n            // This arises when a base node is used (#2709 and #4378).\n            head.insertBefore( script, head.firstChild );\n\n        },\n\n\n        /**\n         * Fully deprecated. Will throw an error.\n         * @function\n         * @deprecated use {@link OpenSeadragon.Viewer#open}\n         */\n        createFromDZI: function() {\n            throw "OpenSeadragon.createFromDZI is deprecated, use Viewer.open.";\n        },\n\n        /**\n         * Parses an XML string into a DOM Document.\n         * @function\n         * @param {String} string\n         * @returns {Document}\n         */\n        parseXml: function( string ) {\n            if ( window.DOMParser ) {\n\n                $.parseXml = function( string ) {\n                    var xmlDoc = null,\n                        parser;\n\n                    parser = new DOMParser();\n                    xmlDoc = parser.parseFromString( string, "text/xml" );\n                    return xmlDoc;\n                };\n\n            } else if ( window.ActiveXObject ) {\n\n                $.parseXml = function( string ) {\n                    var xmlDoc = null;\n\n                    xmlDoc = new ActiveXObject( "Microsoft.XMLDOM" );\n                    xmlDoc.async = false;\n                    xmlDoc.loadXML( string );\n                    return xmlDoc;\n                };\n\n            } else {\n                throw new Error( "Browser doesn\'t support XML DOM." );\n            }\n\n            return $.parseXml( string );\n        },\n\n        /**\n         * Parses a JSON string into a Javascript object.\n         * @function\n         * @param {String} string\n         * @returns {Object}\n         */\n        parseJSON: function(string) {\n            if (window.JSON && window.JSON.parse) {\n                $.parseJSON = window.JSON.parse;\n            } else {\n                // Should only be used by IE8 in non standards mode\n                $.parseJSON = function(string) {\n                    /*jshint evil:true*/\n                    return eval(\'(\' + string + \')\');\n                };\n            }\n            return $.parseJSON(string);\n        },\n\n        /**\n         * Reports whether the image format is supported for tiling in this\n         * version.\n         * @function\n         * @param {String} [extension]\n         * @returns {Boolean}\n         */\n        imageFormatSupported: function( extension ) {\n            extension = extension ? extension : "";\n            return !!FILEFORMATS[ extension.toLowerCase() ];\n        }\n\n    });\n\n\n    /**\n     * The current browser vendor, version, and related information regarding detected features.\n     * @member {Object} Browser\n     * @memberof OpenSeadragon\n     * @static\n     * @type {Object}\n     * @property {OpenSeadragon.BROWSERS} vendor - One of the {@link OpenSeadragon.BROWSERS} enumeration values.\n     * @property {Number} version\n     * @property {Boolean} alpha - Does the browser support image alpha transparency.\n     */\n    $.Browser = {\n        vendor:     $.BROWSERS.UNKNOWN,\n        version:    0,\n        alpha:      true\n    };\n\n\n    var FILEFORMATS = {\n            "bmp":  false,\n            "jpeg": true,\n            "jpg":  true,\n            "png":  true,\n            "tif":  false,\n            "wdp":  false\n        },\n        URLPARAMS = {};\n\n    (function() {\n        //A small auto-executing routine to determine the browser vendor,\n        //version and supporting feature sets.\n        var app = navigator.appName,\n            ver = navigator.appVersion,\n            ua  = navigator.userAgent,\n            regex;\n\n        //console.error( \'appName: \' + navigator.appName );\n        //console.error( \'appVersion: \' + navigator.appVersion );\n        //console.error( \'userAgent: \' + navigator.userAgent );\n\n        switch( navigator.appName ){\n            case "Microsoft Internet Explorer":\n                if( !!window.attachEvent &&\n                    !!window.ActiveXObject ) {\n\n                    $.Browser.vendor = $.BROWSERS.IE;\n                    $.Browser.version = parseFloat(\n                        ua.substring(\n                            ua.indexOf( "MSIE" ) + 5,\n                            ua.indexOf( ";", ua.indexOf( "MSIE" ) ) )\n                        );\n                }\n                break;\n            case "Netscape":\n                if( !!window.addEventListener ){\n                    if ( ua.indexOf( "Firefox" ) >= 0 ) {\n                        $.Browser.vendor = $.BROWSERS.FIREFOX;\n                        $.Browser.version = parseFloat(\n                            ua.substring( ua.indexOf( "Firefox" ) + 8 )\n                        );\n                    } else if ( ua.indexOf( "Safari" ) >= 0 ) {\n                        $.Browser.vendor = ua.indexOf( "Chrome" ) >= 0 ?\n                            $.BROWSERS.CHROME :\n                            $.BROWSERS.SAFARI;\n                        $.Browser.version = parseFloat(\n                            ua.substring(\n                                ua.substring( 0, ua.indexOf( "Safari" ) ).lastIndexOf( "/" ) + 1,\n                                ua.indexOf( "Safari" )\n                            )\n                        );\n                    } else {\n                        regex = new RegExp( "Trident/.*rv:([0-9]{1,}[.0-9]{0,})");\n                        if ( regex.exec( ua ) !== null ) {\n                            $.Browser.vendor = $.BROWSERS.IE;\n                            $.Browser.version = parseFloat( RegExp.$1 );\n                        }\n                    }\n                }\n                break;\n            case "Opera":\n                $.Browser.vendor = $.BROWSERS.OPERA;\n                $.Browser.version = parseFloat( ver );\n                break;\n        }\n\n            // ignore \'?\' portion of query string\n        var query = window.location.search.substring( 1 ),\n            parts = query.split(\'&\'),\n            part,\n            sep,\n            i;\n\n        for ( i = 0; i < parts.length; i++ ) {\n            part = parts[ i ];\n            sep  = part.indexOf( \'=\' );\n\n            if ( sep > 0 ) {\n                URLPARAMS[ part.substring( 0, sep ) ] =\n                    decodeURIComponent( part.substring( sep + 1 ) );\n            }\n        }\n\n        //determine if this browser supports image alpha transparency\n        $.Browser.alpha = !(\n            (\n                $.Browser.vendor == $.BROWSERS.IE &&\n                $.Browser.version < 9\n            ) || (\n                $.Browser.vendor == $.BROWSERS.CHROME &&\n                $.Browser.version < 2\n            )\n        );\n\n        //determine if this browser supports element.style.opacity\n        $.Browser.opacity = !(\n            $.Browser.vendor == $.BROWSERS.IE &&\n            $.Browser.version < 9\n        );\n\n    })();\n\n\n    //TODO: $.console is often used inside a try/catch block which generally\n    //      prevents allowings errors to occur with detection until a debugger\n    //      is attached.  Although I\'ve been guilty of the same anti-pattern\n    //      I eventually was convinced that errors should naturally propogate in\n    //      all but the most special cases.\n    /**\n     * A convenient alias for console when available, and a simple null\n     * function when console is unavailable.\n     * @static\n     * @private\n     */\n    var nullfunction = function( msg ){\n            //document.location.hash = msg;\n        };\n\n    $.console = window.console || {\n        log:    nullfunction,\n        debug:  nullfunction,\n        info:   nullfunction,\n        warn:   nullfunction,\n        error:  nullfunction,\n        assert: nullfunction\n    };\n\n\n    // Adding support for HTML5\'s requestAnimationFrame as suggested by acdha.\n    // Implementation taken from matt synder\'s post here:\n    // http://mattsnider.com/cross-browser-and-legacy-supported-requestframeanimation/\n    (function( w ) {\n\n        // most browsers have an implementation\n        var requestAnimationFrame = w.requestAnimationFrame ||\n            w.mozRequestAnimationFrame ||\n            w.webkitRequestAnimationFrame ||\n            w.msRequestAnimationFrame;\n\n        var cancelAnimationFrame = w.cancelAnimationFrame ||\n            w.mozCancelAnimationFrame ||\n            w.webkitCancelAnimationFrame ||\n            w.msCancelAnimationFrame;\n\n        // polyfill, when necessary\n        if ( requestAnimationFrame && cancelAnimationFrame ) {\n            // We can\'t assign these window methods directly to $ because they\n            // expect their "this" to be "window", so we call them in wrappers.\n            $.requestAnimationFrame = function(){\n                return requestAnimationFrame.apply( w, arguments );\n            };\n            $.cancelAnimationFrame = function(){\n                return cancelAnimationFrame.apply( w, arguments );\n            };\n        } else {\n            var aAnimQueue = [],\n                processing = [],\n                iRequestId = 0,\n                iIntervalId;\n\n            // create a mock requestAnimationFrame function\n            $.requestAnimationFrame = function( callback ) {\n                aAnimQueue.push( [ ++iRequestId, callback ] );\n\n                if ( !iIntervalId ) {\n                    iIntervalId = setInterval( function() {\n                        if ( aAnimQueue.length ) {\n                            var time = $.now();\n                            // Process all of the currently outstanding frame\n                            // requests, but none that get added during the\n                            // processing.\n                            // Swap the arrays so we don\'t have to create a new\n                            // array every frame.\n                            var temp = processing;\n                            processing = aAnimQueue;\n                            aAnimQueue = temp;\n                            while ( processing.length ) {\n                                processing.shift()[ 1 ]( time );\n                            }\n                        } else {\n                            // don\'t continue the interval, if unnecessary\n                            clearInterval( iIntervalId );\n                            iIntervalId = undefined;\n                        }\n                    }, 1000 / 50);  // estimating support for 50 frames per second\n                }\n\n                return iRequestId;\n            };\n\n            // create a mock cancelAnimationFrame function\n            $.cancelAnimationFrame = function( requestId ) {\n                // find the request ID and remove it\n                var i, j;\n                for ( i = 0, j = aAnimQueue.length; i < j; i += 1 ) {\n                    if ( aAnimQueue[ i ][ 0 ] === requestId ) {\n                        aAnimQueue.splice( i, 1 );\n                        return;\n                    }\n                }\n\n                // If it\'s not in the queue, it may be in the set we\'re currently\n                // processing (if cancelAnimationFrame is called from within a\n                // requestAnimationFrame callback).\n                for ( i = 0, j = processing.length; i < j; i += 1 ) {\n                    if ( processing[ i ][ 0 ] === requestId ) {\n                        processing.splice( i, 1 );\n                        return;\n                    }\n                }\n            };\n        }\n    })( window );\n\n    /**\n     * @private\n     * @inner\n     * @function\n     * @param {Element} element\n     * @param {Boolean} [isFixed]\n     * @returns {Element}\n     */\n    function getOffsetParent( element, isFixed ) {\n        if ( isFixed && element != document.body ) {\n            return document.body;\n        } else {\n            return element.offsetParent;\n        }\n    }\n\n}(OpenSeadragon));\n\n/*\n * OpenSeadragon - full-screen support functions\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ) {\n    /**\n     * Determine native full screen support we can get from the browser.\n     * @member fullScreenApi\n     * @memberof OpenSeadragon\n     * @type {object}\n     * @property {Boolean} supportsFullScreen Return true if full screen API is supported.\n     * @property {Function} isFullScreen Return true if currently in full screen mode.\n     * @property {Function} getFullScreenElement Return the element currently in full screen mode.\n     * @property {Function} requestFullScreen Make a request to go in full screen mode.\n     * @property {Function} exitFullScreen Make a request to exit full screen mode.\n     * @property {Function} cancelFullScreen Deprecated, use exitFullScreen instead.\n     * @property {String} fullScreenEventName Event fired when the full screen mode change.\n     * @property {String} fullScreenErrorEventName Event fired when a request to go\n     * in full screen mode failed.\n     */\n    var fullScreenApi = {\n        supportsFullScreen: false,\n        isFullScreen: function() { return false; },\n        getFullScreenElement: function() { return null; },\n        requestFullScreen: function() {},\n        exitFullScreen: function() {},\n        cancelFullScreen: function() {},\n        fullScreenEventName: \'\',\n        fullScreenErrorEventName: \'\'\n    };\n\n    // check for native support\n    if ( document.exitFullscreen ) {\n        // W3C standard\n        fullScreenApi.supportsFullScreen = true;\n        fullScreenApi.getFullScreenElement = function() {\n            return document.fullscreenElement;\n        };\n        fullScreenApi.requestFullScreen = function( element ) {\n            return element.requestFullscreen();\n        };\n        fullScreenApi.exitFullScreen = function() {\n            document.exitFullscreen();\n        };\n        fullScreenApi.fullScreenEventName = "fullscreenchange";\n        fullScreenApi.fullScreenErrorEventName = "fullscreenerror";\n    } else if ( document.msExitFullscreen ) {\n        // IE 11\n        fullScreenApi.supportsFullScreen = true;\n        fullScreenApi.getFullScreenElement = function() {\n            return document.msFullscreenElement;\n        };\n        fullScreenApi.requestFullScreen = function( element ) {\n            return element.msRequestFullscreen();\n        };\n        fullScreenApi.exitFullScreen = function() {\n            document.msExitFullscreen();\n        };\n        fullScreenApi.fullScreenEventName = "MSFullscreenChange";\n        fullScreenApi.fullScreenErrorEventName = "MSFullscreenError";\n    } else if ( document.webkitExitFullscreen ) {\n        // Recent webkit\n        fullScreenApi.supportsFullScreen = true;\n        fullScreenApi.getFullScreenElement = function() {\n            return document.webkitFullscreenElement;\n        };\n        fullScreenApi.requestFullScreen = function( element ) {\n            return element.webkitRequestFullscreen();\n        };\n        fullScreenApi.exitFullScreen = function() {\n            document.webkitExitFullscreen();\n        };\n        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";\n        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";\n    } else if ( document.webkitCancelFullScreen ) {\n        // Old webkit\n        fullScreenApi.supportsFullScreen = true;\n        fullScreenApi.getFullScreenElement = function() {\n            return document.webkitCurrentFullScreenElement;\n        };\n        fullScreenApi.requestFullScreen = function( element ) {\n            return element.webkitRequestFullScreen();\n        };\n        fullScreenApi.exitFullScreen = function() {\n            document.webkitCancelFullScreen();\n        };\n        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";\n        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";\n    } else if ( document.mozCancelFullScreen ) {\n        // Firefox\n        fullScreenApi.supportsFullScreen = true;\n        fullScreenApi.getFullScreenElement = function() {\n            return document.mozFullScreenElement;\n        };\n        fullScreenApi.requestFullScreen = function( element ) {\n            return element.mozRequestFullScreen();\n        };\n        fullScreenApi.exitFullScreen = function() {\n            document.mozCancelFullScreen();\n        };\n        fullScreenApi.fullScreenEventName = "mozfullscreenchange";\n        fullScreenApi.fullScreenErrorEventName = "mozfullscreenerror";\n    }\n    fullScreenApi.isFullScreen = function() {\n        return fullScreenApi.getFullScreenElement() !== null;\n    };\n    fullScreenApi.cancelFullScreen = function() {\n        $.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead.");\n        fullScreenApi.exitFullScreen();\n    };\n\n    // export api\n    $.extend( $, fullScreenApi );\n\n})( OpenSeadragon );\n\n/*\n * OpenSeadragon - EventSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function($){\n\n/**\n * Event handler method signature used by all OpenSeadragon events.\n *\n * @callback EventHandler\n * @memberof OpenSeadragon\n * @param {Object} event - See individual events for event-specific properties.\n */\n\n\n/**\n * @class EventSource\n * @classdesc For use by classes which want to support custom, non-browser events.\n *\n * @memberof OpenSeadragon\n */\n$.EventSource = function() {\n    this.events = {};\n};\n\n/** @lends OpenSeadragon.EventSource.prototype */\n$.EventSource.prototype = {\n\n    /**\n     * Add an event handler to be triggered only once (or a given number of times)\n     * for a given event.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {OpenSeadragon.EventHandler} handler - Function to call when event\n     * is triggered.\n     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged\n     * to the handler.\n     * @param {Number} [times=1] - The number of times to handle the event\n     * before removing it.\n     */\n    addOnceHandler: function(eventName, handler, userData, times) {\n        var self = this;\n        times = times || 1;\n        var count = 0;\n        var onceHandler = function(event) {\n            count++;\n            if (count === times) {\n                self.removeHandler(eventName, onceHandler);\n            }\n            handler(event);\n        };\n        this.addHandler(eventName, onceHandler, userData);\n    },\n\n    /**\n     * Add an event handler for a given event.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {OpenSeadragon.EventHandler} handler - Function to call when event is triggered.\n     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged to the handler.\n     */\n    addHandler: function ( eventName, handler, userData ) {\n        var events = this.events[ eventName ];\n        if ( !events ) {\n            this.events[ eventName ] = events = [];\n        }\n        if ( handler && $.isFunction( handler ) ) {\n            events[ events.length ] = { handler: handler, userData: userData || null };\n        }\n    },\n\n    /**\n     * Remove a specific event handler for a given event.\n     * @function\n     * @param {String} eventName - Name of event for which the handler is to be removed.\n     * @param {OpenSeadragon.EventHandler} handler - Function to be removed.\n     */\n    removeHandler: function ( eventName, handler ) {\n        var events = this.events[ eventName ],\n            handlers = [],\n            i;\n        if ( !events ) {\n            return;\n        }\n        if ( $.isArray( events ) ) {\n            for ( i = 0; i < events.length; i++ ) {\n                if ( events[i].handler !== handler ) {\n                    handlers.push( events[ i ] );\n                }\n            }\n            this.events[ eventName ] = handlers;\n        }\n    },\n\n\n    /**\n     * Remove all event handlers for a given event type. If no type is given all\n     * event handlers for every event type are removed.\n     * @function\n     * @param {String} eventName - Name of event for which all handlers are to be removed.\n     */\n    removeAllHandlers: function( eventName ) {\n        if ( eventName ){\n            this.events[ eventName ] = [];\n        } else{\n            for ( var eventType in this.events ) {\n                this.events[ eventType ] = [];\n            }\n        }\n    },\n\n    /**\n     * Get a function which iterates the list of all handlers registered for a given event, calling the handler for each.\n     * @function\n     * @param {String} eventName - Name of event to get handlers for.\n     */\n    getHandler: function ( eventName ) {\n        var events = this.events[ eventName ];\n        if ( !events || !events.length ) {\n            return null;\n        }\n        events = events.length === 1 ?\n            [ events[ 0 ] ] :\n            Array.apply( null, events );\n        return function ( source, args ) {\n            var i,\n                length = events.length;\n            for ( i = 0; i < length; i++ ) {\n                if ( events[ i ] ) {\n                    args.eventSource = source;\n                    args.userData = events[ i ].userData;\n                    events[ i ].handler( args );\n                }\n            }\n        };\n    },\n\n    /**\n     * Trigger an event, optionally passing additional information.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {Object} eventArgs - Event-specific data.\n     */\n    raiseEvent: function( eventName, eventArgs ) {\n        //uncomment if you want to get a log of all events\n        //$.console.log( eventName );\n        var handler = this.getHandler( eventName );\n\n        if ( handler ) {\n            if ( !eventArgs ) {\n                eventArgs = {};\n            }\n\n            handler( this, eventArgs );\n        }\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - MouseTracker\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function ( $ ) {\n\n    // All MouseTracker instances\n    var MOUSETRACKERS  = [];\n\n    // dictionary from hash to private properties\n    var THIS           = {};\n\n\n    /**\n     * @class MouseTracker\n     * @classdesc Provides simplified handling of common pointer device (mouse, touch, pen, etc.) gestures\n     *            and keyboard events on a specified element.\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     *      Allows configurable properties to be entirely specified by passing\n     *      an options object to the constructor.  The constructor also supports\n     *      the original positional arguments \'element\', \'clickTimeThreshold\',\n     *      and \'clickDistThreshold\' in that order.\n     * @param {Element|String} options.element\n     *      A reference to an element or an element id for which the pointer/key\n     *      events will be monitored.\n     * @param {Boolean} [options.startDisabled=false]\n     *      If true, event tracking on the element will not start until\n     *      {@link OpenSeadragon.MouseTracker.setTracking|setTracking} is called.\n     * @param {Number} options.clickTimeThreshold\n     *      The number of milliseconds within which a pointer down-up event combination\n     *      will be treated as a click gesture.\n     * @param {Number} options.clickDistThreshold\n     *      The maximum distance allowed between a pointer down event and a pointer up event\n     *      to be treated as a click gesture.\n     * @param {Number} options.dblClickTimeThreshold\n     *      The number of milliseconds within which two pointer down-up event combinations\n     *      will be treated as a double-click gesture.\n     * @param {Number} options.dblClickDistThreshold\n     *      The maximum distance allowed between two pointer click events\n     *      to be treated as a click gesture.\n     * @param {Number} [options.stopDelay=50]\n     *      The number of milliseconds without pointer move before the stop\n     *      event is fired.\n     * @param {OpenSeadragon.EventHandler} [options.enterHandler=null]\n     *      An optional handler for pointer enter.\n     * @param {OpenSeadragon.EventHandler} [options.exitHandler=null]\n     *      An optional handler for pointer exit.\n     * @param {OpenSeadragon.EventHandler} [options.pressHandler=null]\n     *      An optional handler for pointer press.\n     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryPressHandler=null]\n     *      An optional handler for pointer non-primary button press.\n     * @param {OpenSeadragon.EventHandler} [options.releaseHandler=null]\n     *      An optional handler for pointer release.\n     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryReleaseHandler=null]\n     *      An optional handler for pointer non-primary button release.\n     * @param {OpenSeadragon.EventHandler} [options.moveHandler=null]\n     *      An optional handler for pointer move.\n     * @param {OpenSeadragon.EventHandler} [options.scrollHandler=null]\n     *      An optional handler for mouse wheel scroll.\n     * @param {OpenSeadragon.EventHandler} [options.clickHandler=null]\n     *      An optional handler for pointer click.\n     * @param {OpenSeadragon.EventHandler} [options.dblClickHandler=null]\n     *      An optional handler for pointer double-click.\n     * @param {OpenSeadragon.EventHandler} [options.dragHandler=null]\n     *      An optional handler for the drag gesture.\n     * @param {OpenSeadragon.EventHandler} [options.dragEndHandler=null]\n     *      An optional handler for after a drag gesture.\n     * @param {OpenSeadragon.EventHandler} [options.pinchHandler=null]\n     *      An optional handler for the pinch gesture.\n     * @param {OpenSeadragon.EventHandler} [options.keyDownHandler=null]\n     *      An optional handler for keydown.\n     * @param {OpenSeadragon.EventHandler} [options.keyUpHandler=null]\n     *      An optional handler for keyup.\n     * @param {OpenSeadragon.EventHandler} [options.keyHandler=null]\n     *      An optional handler for keypress.\n     * @param {OpenSeadragon.EventHandler} [options.focusHandler=null]\n     *      An optional handler for focus.\n     * @param {OpenSeadragon.EventHandler} [options.blurHandler=null]\n     *      An optional handler for blur.\n     * @param {Object} [options.userData=null]\n     *      Arbitrary object to be passed unchanged to any attached handler methods.\n     */\n    $.MouseTracker = function ( options ) {\n\n        MOUSETRACKERS.push( this );\n\n        var args = arguments;\n\n        if ( !$.isPlainObject( options ) ) {\n            options = {\n                element:            args[ 0 ],\n                clickTimeThreshold: args[ 1 ],\n                clickDistThreshold: args[ 2 ]\n            };\n        }\n\n        this.hash               = Math.random(); // An unique hash for this tracker.\n        /**\n         * The element for which pointer events are being monitored.\n         * @member {Element} element\n         * @memberof OpenSeadragon.MouseTracker#\n         */\n        this.element            = $.getElement( options.element );\n        /**\n         * The number of milliseconds within which a pointer down-up event combination\n         * will be treated as a click gesture.\n         * @member {Number} clickTimeThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */\n        this.clickTimeThreshold = options.clickTimeThreshold || $.DEFAULT_SETTINGS.clickTimeThreshold;\n        /**\n         * The maximum distance allowed between a pointer down event and a pointer up event\n         * to be treated as a click gesture.\n         * @member {Number} clickDistThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */\n        this.clickDistThreshold = options.clickDistThreshold || $.DEFAULT_SETTINGS.clickDistThreshold;\n        /**\n         * The number of milliseconds within which two pointer down-up event combinations\n         * will be treated as a double-click gesture.\n         * @member {Number} dblClickTimeThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */\n        this.dblClickTimeThreshold = options.dblClickTimeThreshold || $.DEFAULT_SETTINGS.dblClickTimeThreshold;\n        /**\n         * The maximum distance allowed between two pointer click events\n         * to be treated as a click gesture.\n         * @member {Number} clickDistThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */\n        this.dblClickDistThreshold = options.dblClickDistThreshold || $.DEFAULT_SETTINGS.dblClickDistThreshold;\n        this.userData              = options.userData          || null;\n        this.stopDelay             = options.stopDelay         || 50;\n\n        this.enterHandler             = options.enterHandler             || null;\n        this.exitHandler              = options.exitHandler              || null;\n        this.pressHandler             = options.pressHandler             || null;\n        this.nonPrimaryPressHandler   = options.nonPrimaryPressHandler   || null;\n        this.releaseHandler           = options.releaseHandler           || null;\n        this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null;\n        this.moveHandler              = options.moveHandler              || null;\n        this.scrollHandler            = options.scrollHandler            || null;\n        this.clickHandler             = options.clickHandler             || null;\n        this.dblClickHandler          = options.dblClickHandler          || null;\n        this.dragHandler              = options.dragHandler              || null;\n        this.dragEndHandler           = options.dragEndHandler           || null;\n        this.pinchHandler             = options.pinchHandler             || null;\n        this.stopHandler              = options.stopHandler              || null;\n        this.keyDownHandler           = options.keyDownHandler           || null;\n        this.keyUpHandler             = options.keyUpHandler             || null;\n        this.keyHandler               = options.keyHandler               || null;\n        this.focusHandler             = options.focusHandler             || null;\n        this.blurHandler              = options.blurHandler              || null;\n\n        //Store private properties in a scope sealed hash map\n        var _this = this;\n\n        /**\n         * @private\n         * @property {Boolean} tracking\n         *      Are we currently tracking pointer events for this element.\n         */\n        THIS[ this.hash ] = {\n            click:                 function ( event ) { onClick( _this, event ); },\n            dblclick:              function ( event ) { onDblClick( _this, event ); },\n            keydown:               function ( event ) { onKeyDown( _this, event ); },\n            keyup:                 function ( event ) { onKeyUp( _this, event ); },\n            keypress:              function ( event ) { onKeyPress( _this, event ); },\n            focus:                 function ( event ) { onFocus( _this, event ); },\n            blur:                  function ( event ) { onBlur( _this, event ); },\n\n            wheel:                 function ( event ) { onWheel( _this, event ); },\n            mousewheel:            function ( event ) { onMouseWheel( _this, event ); },\n            DOMMouseScroll:        function ( event ) { onMouseWheel( _this, event ); },\n            MozMousePixelScroll:   function ( event ) { onMouseWheel( _this, event ); },\n\n            mouseenter:            function ( event ) { onMouseEnter( _this, event ); }, // Used on IE8 only\n            mouseleave:            function ( event ) { onMouseLeave( _this, event ); }, // Used on IE8 only\n            mouseover:             function ( event ) { onMouseOver( _this, event ); },\n            mouseout:              function ( event ) { onMouseOut( _this, event ); },\n            mousedown:             function ( event ) { onMouseDown( _this, event ); },\n            mouseup:               function ( event ) { onMouseUp( _this, event ); },\n            mouseupcaptured:       function ( event ) { onMouseUpCaptured( _this, event ); },\n            mousemove:             function ( event ) { onMouseMove( _this, event ); },\n            mousemovecaptured:     function ( event ) { onMouseMoveCaptured( _this, event ); },\n\n            touchstart:            function ( event ) { onTouchStart( _this, event ); },\n            touchend:              function ( event ) { onTouchEnd( _this, event ); },\n            touchendcaptured:      function ( event ) { onTouchEndCaptured( _this, event ); },\n            touchmove:             function ( event ) { onTouchMove( _this, event ); },\n            touchmovecaptured:     function ( event ) { onTouchMoveCaptured( _this, event ); },\n            touchcancel:           function ( event ) { onTouchCancel( _this, event ); },\n\n            gesturestart:          function ( event ) { onGestureStart( _this, event ); },\n            gesturechange:         function ( event ) { onGestureChange( _this, event ); },\n\n            pointerover:           function ( event ) { onPointerOver( _this, event ); },\n            MSPointerOver:         function ( event ) { onPointerOver( _this, event ); },\n            pointerout:            function ( event ) { onPointerOut( _this, event ); },\n            MSPointerOut:          function ( event ) { onPointerOut( _this, event ); },\n            pointerdown:           function ( event ) { onPointerDown( _this, event ); },\n            MSPointerDown:         function ( event ) { onPointerDown( _this, event ); },\n            pointerup:             function ( event ) { onPointerUp( _this, event ); },\n            MSPointerUp:           function ( event ) { onPointerUp( _this, event ); },\n            pointermove:           function ( event ) { onPointerMove( _this, event ); },\n            MSPointerMove:         function ( event ) { onPointerMove( _this, event ); },\n            pointercancel:         function ( event ) { onPointerCancel( _this, event ); },\n            MSPointerCancel:       function ( event ) { onPointerCancel( _this, event ); },\n            pointerupcaptured:     function ( event ) { onPointerUpCaptured( _this, event ); },\n            pointermovecaptured:   function ( event ) { onPointerMoveCaptured( _this, event ); },\n\n            tracking:              false,\n\n            // Active pointers lists. Array of GesturePointList objects, one for each pointer device type.\n            // GesturePointList objects are added each time a pointer is tracked by a new pointer device type (see getActivePointersListByType()).\n            // Active pointers are any pointer being tracked for this element which are in the hit-test area\n            //     of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.\n            activePointersLists:   [],\n\n            // Tracking for double-click gesture\n            lastClickPos:          null,\n            dblClickTimeOut:       null,\n\n            // Tracking for pinch gesture\n            pinchGPoints:          [],\n            lastPinchDist:         0,\n            currentPinchDist:      0,\n            lastPinchCenter:       null,\n            currentPinchCenter:    null\n        };\n\n        if ( !options.startDisabled ) {\n            this.setTracking( true );\n        }\n    };\n\n    /** @lends OpenSeadragon.MouseTracker.prototype */\n    $.MouseTracker.prototype = {\n\n        /**\n         * Clean up any events or objects created by the tracker.\n         * @function\n         */\n        destroy: function () {\n            var i;\n\n            stopTracking( this );\n            this.element = null;\n\n            for ( i = 0; i < MOUSETRACKERS.length; i++ ) {\n                if ( MOUSETRACKERS[ i ] === this ) {\n                    MOUSETRACKERS.splice( i, 1 );\n                    break;\n                }\n            }\n\n            THIS[ this.hash ] = null;\n            delete THIS[ this.hash ];\n        },\n\n        /**\n         * Are we currently tracking events on this element.\n         * @deprecated Just use this.tracking\n         * @function\n         * @returns {Boolean} Are we currently tracking events on this element.\n         */\n        isTracking: function () {\n            return THIS[ this.hash ].tracking;\n        },\n\n        /**\n         * Enable or disable whether or not we are tracking events on this element.\n         * @function\n         * @param {Boolean} track True to start tracking, false to stop tracking.\n         * @returns {OpenSeadragon.MouseTracker} Chainable.\n         */\n        setTracking: function ( track ) {\n            if ( track ) {\n                startTracking( this );\n            } else {\n                stopTracking( this );\n            }\n            //chain\n            return this;\n        },\n\n        /**\n         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for the given pointer device type,\n         * creating and caching a new {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} if one doesn\'t already exist for the type.\n         * @function\n         * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.\n         * @returns {OpenSeadragon.MouseTracker.GesturePointList}\n         */\n        getActivePointersListByType: function ( type ) {\n            var delegate = THIS[ this.hash ],\n                i,\n                len = delegate.activePointersLists.length,\n                list;\n\n            for ( i = 0; i < len; i++ ) {\n                if ( delegate.activePointersLists[ i ].type === type ) {\n                    return delegate.activePointersLists[ i ];\n                }\n            }\n\n            list = new $.MouseTracker.GesturePointList( type );\n            delegate.activePointersLists.push( list );\n            return list;\n        },\n\n        /**\n         * Returns the total number of pointers currently active on the tracked element.\n         * @function\n         * @returns {Number}\n         */\n        getActivePointerCount: function () {\n            var delegate = THIS[ this.hash ],\n                i,\n                len = delegate.activePointersLists.length,\n                count = 0;\n\n            for ( i = 0; i < len; i++ ) {\n                count += delegate.activePointersLists[ i ].getLength();\n            }\n\n            return count;\n        },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Number} event.pointers\n         *      Number of pointers (all types) active in the tracked element.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.buttonDownAny\n         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        enterHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Number} event.pointers\n         *      Number of pointers (all types) active in the tracked element.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.buttonDownAny\n         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        exitHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        pressHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.button\n         *      Button which caused the event.\n         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        nonPrimaryPressHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.insideElementReleased\n         *      True if the cursor inside the tracked element when the button was released.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        releaseHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.button\n         *      Button which caused the event.\n         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        nonPrimaryReleaseHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        moveHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.scroll\n         *      The scroll delta for the event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead. Touch devices no longer generate scroll event.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        scrollHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Boolean} event.quick\n         *      True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for ignoring drag events.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        clickHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        dblClickHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {OpenSeadragon.Point} event.delta\n         *      The x,y components of the difference between the current position and the last drag event position.  Useful for ignoring or weighting the events.\n         * @param {Number} event.speed\n         *     Current computed speed, in pixels per second.\n         * @param {Number} event.direction\n         *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        dragHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.speed\n         *     Speed at the end of a drag gesture, in pixels per second.\n         * @param {Number} event.direction\n         *     Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        dragEndHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} event.gesturePoints\n         *      Gesture points associated with the gesture. Velocity data can be found here.\n         * @param {OpenSeadragon.Point} event.lastCenter\n         *      The previous center point of the two pinch contact points relative to the tracked element.\n         * @param {OpenSeadragon.Point} event.center\n         *      The center point of the two pinch contact points relative to the tracked element.\n         * @param {Number} event.lastDistance\n         *      The previous distance between the two pinch contact points in CSS pixels.\n         * @param {Number} event.distance\n         *      The distance between the two pinch contact points in CSS pixels.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        pinchHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     "mouse", "touch", "pen", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        stopHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        keyDownHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        keyUpHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        keyHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        focusHandler: function () { },\n\n        /**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */\n        blurHandler: function () { }\n    };\n\n\n    /**\n     * Provides continuous computation of velocity (speed and direction) of active pointers.\n     * This is a singleton, used by all MouseTracker instances, as it is unlikely there will ever be more than\n     * two active gesture pointers at a time.\n     *\n     * @private\n     * @member gesturePointVelocityTracker\n     * @memberof OpenSeadragon.MouseTracker\n     */\n    $.MouseTracker.gesturePointVelocityTracker = (function () {\n        var trackerPoints = [],\n            intervalId = 0,\n            lastTime = 0;\n\n        // Generates a unique identifier for a tracked gesture point\n        var _generateGuid = function ( tracker, gPoint ) {\n            return tracker.hash.toString() + gPoint.type + gPoint.id.toString();\n        };\n\n        // Interval timer callback. Computes velocity for all tracked gesture points.\n        var _doTracking = function () {\n            var i,\n                len = trackerPoints.length,\n                trackPoint,\n                gPoint,\n                now = $.now(),\n                elapsedTime,\n                distance,\n                speed;\n\n            elapsedTime = now - lastTime;\n            lastTime = now;\n\n            for ( i = 0; i < len; i++ ) {\n                trackPoint = trackerPoints[ i ];\n                gPoint = trackPoint.gPoint;\n                // Math.atan2 gives us just what we need for a velocity vector, as we can simply\n                //   use cos()/sin() to extract the x/y velocity components.\n                gPoint.direction = Math.atan2( gPoint.currentPos.y - trackPoint.lastPos.y, gPoint.currentPos.x - trackPoint.lastPos.x );\n                // speed = distance / elapsed time\n                distance = trackPoint.lastPos.distanceTo( gPoint.currentPos );\n                trackPoint.lastPos = gPoint.currentPos;\n                speed = 1000 * distance / ( elapsedTime + 1 );\n                // Simple biased average, favors the most recent speed computation. Smooths out erratic gestures a bit.\n                gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed;\n            }\n        };\n\n        // Public. Add a gesture point to be tracked\n        var addPoint = function ( tracker, gPoint ) {\n            var guid = _generateGuid( tracker, gPoint );\n\n            trackerPoints.push(\n                {\n                    guid: guid,\n                    gPoint: gPoint,\n                    lastPos: gPoint.currentPos\n                } );\n\n            // Only fire up the interval timer when there\'s gesture pointers to track\n            if ( trackerPoints.length === 1 ) {\n                lastTime = $.now();\n                intervalId = window.setInterval( _doTracking, 50 );\n            }\n        };\n\n        // Public. Stop tracking a gesture point\n        var removePoint = function ( tracker, gPoint ) {\n            var guid = _generateGuid( tracker, gPoint ),\n                i,\n                len = trackerPoints.length;\n            for ( i = 0; i < len; i++ ) {\n                if ( trackerPoints[ i ].guid === guid ) {\n                    trackerPoints.splice( i, 1 );\n                    // Only run the interval timer if theres gesture pointers to track\n                    len--;\n                    if ( len === 0 ) {\n                        window.clearInterval( intervalId );\n                    }\n                    break;\n                }\n            }\n        };\n\n        return {\n            addPoint:    addPoint,\n            removePoint: removePoint\n        };\n    } )();\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Pointer event model and feature detection\n///////////////////////////////////////////////////////////////////////////////\n\n    $.MouseTracker.captureElement = document;\n\n    /**\n     * Detect available mouse wheel event name.\n     */\n    $.MouseTracker.wheelEventName = ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version > 8 ) ||\n                                                ( \'onwheel\' in document.createElement( \'div\' ) ) ? \'wheel\' : // Modern browsers support \'wheel\'\n                                    document.onmousewheel !== undefined ? \'mousewheel\' :                     // Webkit and IE support at least \'mousewheel\'\n                                    \'DOMMouseScroll\';                                                        // Assume old Firefox\n\n    /**\n     * Detect legacy mouse capture support.\n     */\n    $.MouseTracker.supportsMouseCapture = (function () {\n        var divElement = document.createElement( \'div\' );\n        return $.isFunction( divElement.setCapture ) && $.isFunction( divElement.releaseCapture );\n    }());\n\n    /**\n     * Detect browser pointer device event model(s) and build appropriate list of events to subscribe to.\n     */\n    $.MouseTracker.subscribeEvents = [ "click", "dblclick", "keydown", "keyup", "keypress", "focus", "blur", $.MouseTracker.wheelEventName ];\n\n    if( $.MouseTracker.wheelEventName == "DOMMouseScroll" ) {\n        // Older Firefox\n        $.MouseTracker.subscribeEvents.push( "MozMousePixelScroll" );\n    }\n\n    // Note: window.navigator.pointerEnable is deprecated on IE 11 and not part of W3C spec.\n    if ( window.PointerEvent && ( window.navigator.pointerEnabled || $.Browser.vendor !== $.BROWSERS.IE ) ) {\n        // IE11 and other W3C Pointer Event implementations (see http://www.w3.org/TR/pointerevents)\n        $.MouseTracker.havePointerEvents = true;\n        $.MouseTracker.subscribeEvents.push( "pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel" );\n        $.MouseTracker.unprefixedPointerEvents = true;\n        if( navigator.maxTouchPoints ) {\n            $.MouseTracker.maxTouchPoints = navigator.maxTouchPoints;\n        } else {\n            $.MouseTracker.maxTouchPoints = 0;\n        }\n        $.MouseTracker.haveMouseEnter = false;\n    } else if ( window.MSPointerEvent && window.navigator.msPointerEnabled ) {\n        // IE10\n        $.MouseTracker.havePointerEvents = true;\n        $.MouseTracker.subscribeEvents.push( "MSPointerOver", "MSPointerOut", "MSPointerDown", "MSPointerUp", "MSPointerMove", "MSPointerCancel" );\n        $.MouseTracker.unprefixedPointerEvents = false;\n        if( navigator.msMaxTouchPoints ) {\n            $.MouseTracker.maxTouchPoints = navigator.msMaxTouchPoints;\n        } else {\n            $.MouseTracker.maxTouchPoints = 0;\n        }\n        $.MouseTracker.haveMouseEnter = false;\n    } else {\n        // Legacy W3C mouse events\n        $.MouseTracker.havePointerEvents = false;\n        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n            $.MouseTracker.subscribeEvents.push( "mouseenter", "mouseleave" );\n            $.MouseTracker.haveMouseEnter = true;\n        } else {\n            $.MouseTracker.subscribeEvents.push( "mouseover", "mouseout" );\n            $.MouseTracker.haveMouseEnter = false;\n        }\n        $.MouseTracker.subscribeEvents.push( "mousedown", "mouseup", "mousemove" );\n        if ( \'ontouchstart\' in window ) {\n            // iOS, Android, and other W3c Touch Event implementations\n            //    (see http://www.w3.org/TR/touch-events/)\n            //    (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n            //    (see https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n            $.MouseTracker.subscribeEvents.push( "touchstart", "touchend", "touchmove", "touchcancel" );\n        }\n        if ( \'ongesturestart\' in window ) {\n            // iOS (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n            //   Subscribe to these to prevent default gesture handling\n            $.MouseTracker.subscribeEvents.push( "gesturestart", "gesturechange" );\n        }\n        $.MouseTracker.mousePointerId = "legacy-mouse";\n        $.MouseTracker.maxTouchPoints = 10;\n    }\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Classes and typedefs\n///////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Represents a point of contact on the screen made by a mouse cursor, pen, touch, or other pointer device.\n     *\n     * @typedef {Object} GesturePoint\n     * @memberof OpenSeadragon.MouseTracker\n     *\n     * @property {Number} id\n     *     Identifier unique from all other active GesturePoints for a given pointer device.\n     * @property {String} type\n     *     The pointer device type: "mouse", "touch", "pen", etc.\n     * @property {Boolean} captured\n     *     True if events for the gesture point are captured to the tracked element.\n     * @property {Boolean} isPrimary\n     *     True if the gesture point is a master pointer amongst the set of active pointers for each pointer type. True for mouse and primary (first) touch/pen pointers.\n     * @property {Boolean} insideElementPressed\n     *     True if button pressed or contact point initiated inside the screen area of the tracked element.\n     * @property {Boolean} insideElement\n     *     True if pointer or contact point is currently inside the bounds of the tracked element.\n     * @property {Number} speed\n     *     Current computed speed, in pixels per second.\n     * @property {Number} direction\n     *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {OpenSeadragon.Point} contactPos\n     *     The initial pointer contact position, relative to the page including any scrolling. Only valid if the pointer has contact (pressed, touch contact, pen contact).\n     * @property {Number} contactTime\n     *     The initial pointer contact time, in milliseconds. Only valid if the pointer has contact (pressed, touch contact, pen contact).\n     * @property {OpenSeadragon.Point} lastPos\n     *     The last pointer position, relative to the page including any scrolling.\n     * @property {Number} lastTime\n     *     The last pointer contact time, in milliseconds.\n     * @property {OpenSeadragon.Point} currentPos\n     *     The current pointer position, relative to the page including any scrolling.\n     * @property {Number} currentTime\n     *     The current pointer contact time, in milliseconds.\n     */\n\n\n    /**\n     * @class GesturePointList\n     * @classdesc Provides an abstraction for a set of active {@link OpenSeadragon.MouseTracker.GesturePoint|GesturePoint} objects for a given pointer device type.\n     *            Active pointers are any pointer being tracked for this element which are in the hit-test area\n     *            of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.\n     * @memberof OpenSeadragon.MouseTracker\n     * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.\n     */\n    $.MouseTracker.GesturePointList = function ( type ) {\n        this._gPoints = [];\n        /**\n         * The pointer device type: "mouse", "touch", "pen", etc.\n         * @member {String} type\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */\n        this.type = type;\n        /**\n         * Current buttons pressed for the device.\n         * Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @member {Number} buttons\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */\n        this.buttons = 0;\n        /**\n         * Current number of contact points (touch points, mouse down, etc.) for the device.\n         * @member {Number} contacts\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */\n        this.contacts = 0;\n        /**\n         * Current number of clicks for the device. Used for multiple click gesture tracking.\n         * @member {Number} clicks\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */\n        this.clicks = 0;\n        /**\n         * Current number of captured pointers for the device.\n         * @member {Number} captureCount\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */\n        this.captureCount = 0;\n    };\n\n    /** @lends OpenSeadragon.MouseTracker.GesturePointList.prototype */\n    $.MouseTracker.GesturePointList.prototype = {\n        /**\n         * @function\n         * @returns {Number} Number of gesture points in the list.\n         */\n        getLength: function () {\n            return this._gPoints.length;\n        },\n        /**\n         * @function\n         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePoint>} The list of gesture points in the list as an array (read-only).\n         */\n        asArray: function () {\n            return this._gPoints;\n        },\n        /**\n         * @function\n         * @param {OpenSeadragon.MouseTracker.GesturePoint} gesturePoint - A gesture point to add to the list.\n         * @returns {Number} Number of gesture points in the list.\n         */\n        add: function ( gp ) {\n            return this._gPoints.push( gp );\n        },\n        /**\n         * @function\n         * @param {Number} id - The id of the gesture point to remove from the list.\n         * @returns {Number} Number of gesture points in the list.\n         */\n        removeById: function ( id ) {\n            var i,\n                len = this._gPoints.length;\n            for ( i = 0; i < len; i++ ) {\n                if ( this._gPoints[ i ].id === id ) {\n                    this._gPoints.splice( i, 1 );\n                    break;\n                }\n            }\n            return this._gPoints.length;\n        },\n        /**\n         * @function\n         * @param {Number} index - The index of the gesture point to retrieve from the list.\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point at the given index, or null if not found.\n         */\n        getByIndex: function ( index ) {\n            if ( index < this._gPoints.length) {\n                return this._gPoints[ index ];\n            }\n\n            return null;\n        },\n        /**\n         * @function\n         * @param {Number} id - The id of the gesture point to retrieve from the list.\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point with the given id, or null if not found.\n         */\n        getById: function ( id ) {\n            var i,\n                len = this._gPoints.length;\n            for ( i = 0; i < len; i++ ) {\n                if ( this._gPoints[ i ].id === id ) {\n                    return this._gPoints[ i ];\n                }\n            }\n            return null;\n        },\n        /**\n         * @function\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The primary gesture point in the list, or null if not found.\n         */\n        getPrimary: function ( id ) {\n            var i,\n                len = this._gPoints.length;\n            for ( i = 0; i < len; i++ ) {\n                if ( this._gPoints[ i ].isPrimary ) {\n                    return this._gPoints[ i ];\n                }\n            }\n            return null;\n        }\n    };\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Utility functions\n///////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Removes all tracked pointers.\n     * @private\n     * @inner\n     */\n    function clearTrackedPointers( tracker ) {\n        var delegate = THIS[ tracker.hash ],\n            i,\n            pointerListCount = delegate.activePointersLists.length;\n\n        for ( i = 0; i < pointerListCount; i++ ) {\n            if ( delegate.activePointersLists[ i ].captureCount > 0 ) {\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    \'mousemove\',\n                    delegate.mousemovecaptured,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    \'mouseup\',\n                    delegate.mouseupcaptured,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    $.MouseTracker.unprefixedPointerEvents ? \'pointermove\' : \'MSPointerMove\',\n                    delegate.pointermovecaptured,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    $.MouseTracker.unprefixedPointerEvents ? \'pointerup\' : \'MSPointerUp\',\n                    delegate.pointerupcaptured,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    \'touchmove\',\n                    delegate.touchmovecaptured,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    \'touchend\',\n                    delegate.touchendcaptured,\n                    true\n                );\n\n                delegate.activePointersLists[ i ].captureCount = 0;\n            }\n        }\n\n        for ( i = 0; i < pointerListCount; i++ ) {\n            delegate.activePointersLists.pop();\n        }\n    }\n\n    /**\n     * Starts tracking pointer events on the tracked element.\n     * @private\n     * @inner\n     */\n    function startTracking( tracker ) {\n        var delegate = THIS[ tracker.hash ],\n            event,\n            i;\n\n        if ( !delegate.tracking ) {\n            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {\n                event = $.MouseTracker.subscribeEvents[ i ];\n                $.addEvent(\n                    tracker.element,\n                    event,\n                    delegate[ event ],\n                    false\n                );\n            }\n\n            clearTrackedPointers( tracker );\n\n            delegate.tracking = true;\n        }\n    }\n\n    /**\n     * Stops tracking pointer events on the tracked element.\n     * @private\n     * @inner\n     */\n    function stopTracking( tracker ) {\n        var delegate = THIS[ tracker.hash ],\n            event,\n            i;\n\n        if ( delegate.tracking ) {\n            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {\n                event = $.MouseTracker.subscribeEvents[ i ];\n                $.removeEvent(\n                    tracker.element,\n                    event,\n                    delegate[ event ],\n                    false\n                );\n            }\n\n            clearTrackedPointers( tracker );\n\n            delegate.tracking = false;\n        }\n    }\n\n    /**\n     * @private\n     * @inner\n     */\n    function getCaptureEventParams( tracker, pointerType ) {\n        var delegate = THIS[ tracker.hash ];\n\n        if ( pointerType === \'pointerevent\' ) {\n            return {\n                upName: $.MouseTracker.unprefixedPointerEvents ? \'pointerup\' : \'MSPointerUp\',\n                upHandler: delegate.pointerupcaptured,\n                moveName: $.MouseTracker.unprefixedPointerEvents ? \'pointermove\' : \'MSPointerMove\',\n                moveHandler: delegate.pointermovecaptured\n            };\n        } else if ( pointerType === \'mouse\' ) {\n            return {\n                upName: \'mouseup\',\n                upHandler: delegate.mouseupcaptured,\n                moveName: \'mousemove\',\n                moveHandler: delegate.mousemovecaptured\n            };\n        } else if ( pointerType === \'touch\' ) {\n            return {\n                upName: \'touchend\',\n                upHandler: delegate.touchendcaptured,\n                moveName: \'touchmove\',\n                moveHandler: delegate.touchmovecaptured\n            };\n        } else {\n            throw new Error( "MouseTracker.getCaptureEventParams: Unknown pointer type." );\n        }\n    }\n\n    /**\n     * Begin capturing pointer events to the tracked element.\n     * @private\n     * @inner\n     */\n    function capturePointer( tracker, pointerType, pointerCount ) {\n        var pointsList = tracker.getActivePointersListByType( pointerType ),\n            eventParams;\n\n        pointsList.captureCount += (pointerCount || 1);\n\n        if ( pointsList.captureCount === 1 ) {\n            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n                tracker.element.setCapture( true );\n            } else {\n                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? \'pointerevent\' : pointerType );\n                // We emulate mouse capture by hanging listeners on the document object.\n                //    (Note we listen on the capture phase so the captured handlers will get called first)\n                if (isInIframe && canAccessEvents(window.top)) {\n                    $.addEvent(\n                        window.top,\n                        eventParams.upName,\n                        eventParams.upHandler,\n                        true\n                    );\n                }\n                $.addEvent(\n                    $.MouseTracker.captureElement,\n                    eventParams.upName,\n                    eventParams.upHandler,\n                    true\n                );\n                $.addEvent(\n                    $.MouseTracker.captureElement,\n                    eventParams.moveName,\n                    eventParams.moveHandler,\n                    true\n                );\n            }\n        }\n    }\n\n\n    /**\n     * Stop capturing pointer events to the tracked element.\n     * @private\n     * @inner\n     */\n    function releasePointer( tracker, pointerType, pointerCount ) {\n        var pointsList = tracker.getActivePointersListByType( pointerType ),\n            eventParams;\n\n        pointsList.captureCount -= (pointerCount || 1);\n\n        if ( pointsList.captureCount === 0 ) {\n            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n                tracker.element.releaseCapture();\n            } else {\n                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? \'pointerevent\' : pointerType );\n                // We emulate mouse capture by hanging listeners on the document object.\n                //    (Note we listen on the capture phase so the captured handlers will get called first)\n                if (isInIframe && canAccessEvents(window.top)) {\n                    $.removeEvent(\n                        window.top,\n                        eventParams.upName,\n                        eventParams.upHandler,\n                        true\n                    );\n                }\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    eventParams.moveName,\n                    eventParams.moveHandler,\n                    true\n                );\n                $.removeEvent(\n                    $.MouseTracker.captureElement,\n                    eventParams.upName,\n                    eventParams.upHandler,\n                    true\n                );\n            }\n        }\n    }\n\n\n    /**\n     * Gets a W3C Pointer Events model compatible pointer type string from a DOM pointer event.\n     * IE10 used a long integer value, but the W3C specification (and IE11+) use a string "mouse", "touch", "pen", etc.\n     * @private\n     * @inner\n     */\n    function getPointerType( event ) {\n        var pointerTypeStr;\n        if ( $.MouseTracker.unprefixedPointerEvents ) {\n            pointerTypeStr = event.pointerType;\n        } else {\n            // IE10\n            //  MSPOINTER_TYPE_TOUCH: 0x00000002\n            //  MSPOINTER_TYPE_PEN:   0x00000003\n            //  MSPOINTER_TYPE_MOUSE: 0x00000004\n            switch( event.pointerType )\n            {\n                case 0x00000002:\n                    pointerTypeStr = \'touch\';\n                    break;\n                case 0x00000003:\n                    pointerTypeStr = \'pen\';\n                    break;\n                case 0x00000004:\n                    pointerTypeStr = \'mouse\';\n                    break;\n                default:\n                    pointerTypeStr = \'\';\n            }\n        }\n        return pointerTypeStr;\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function getMouseAbsolute( event ) {\n        return $.getMousePosition( event );\n    }\n\n    /**\n     * @private\n     * @inner\n     */\n    function getMouseRelative( event, element ) {\n        return getPointRelativeToAbsolute( getMouseAbsolute( event ), element );\n    }\n\n    /**\n     * @private\n     * @inner\n     */\n    function getPointRelativeToAbsolute( point, element ) {\n        var offset = $.getElementOffset( element );\n        return point.minus( offset );\n    }\n\n    /**\n     * @private\n     * @inner\n     */\n    function getCenterPoint( point1, point2 ) {\n        return new $.Point( ( point1.x + point2.x ) / 2, ( point1.y + point2.y ) / 2 );\n    }\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Device-specific DOM event handlers\n///////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @private\n     * @inner\n     */\n    function onClick( tracker, event ) {\n        if ( tracker.clickHandler ) {\n            $.cancelEvent( event );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onDblClick( tracker, event ) {\n        if ( tracker.dblClickHandler ) {\n            $.cancelEvent( event );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onKeyDown( tracker, event ) {\n        //$.console.log( "keydown %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\n        var propagate;\n        if ( tracker.keyDownHandler ) {\n            event = $.getEvent( event );\n            propagate = tracker.keyDownHandler(\n                {\n                    eventSource:          tracker,\n                    keyCode:              event.keyCode ? event.keyCode : event.charCode,\n                    ctrl:                 event.ctrlKey,\n                    shift:                event.shiftKey,\n                    alt:                  event.altKey,\n                    meta:                 event.metaKey,\n                    originalEvent:        event,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( !propagate ) {\n                $.cancelEvent( event );\n            }\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onKeyUp( tracker, event ) {\n        //$.console.log( "keyup %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\n        var propagate;\n        if ( tracker.keyUpHandler ) {\n            event = $.getEvent( event );\n            propagate = tracker.keyUpHandler(\n                {\n                    eventSource:          tracker,\n                    keyCode:              event.keyCode ? event.keyCode : event.charCode,\n                    ctrl:                 event.ctrlKey,\n                    shift:                event.shiftKey,\n                    alt:                  event.altKey,\n                    meta:                 event.metaKey,\n                    originalEvent:        event,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( !propagate ) {\n                $.cancelEvent( event );\n            }\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onKeyPress( tracker, event ) {\n        //$.console.log( "keypress %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\n        var propagate;\n        if ( tracker.keyHandler ) {\n            event = $.getEvent( event );\n            propagate = tracker.keyHandler(\n                {\n                    eventSource:          tracker,\n                    keyCode:              event.keyCode ? event.keyCode : event.charCode,\n                    ctrl:                 event.ctrlKey,\n                    shift:                event.shiftKey,\n                    alt:                  event.altKey,\n                    meta:                 event.metaKey,\n                    originalEvent:        event,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( !propagate ) {\n                $.cancelEvent( event );\n            }\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onFocus( tracker, event ) {\n        //console.log( "focus %s", event );\n        var propagate;\n        if ( tracker.focusHandler ) {\n            event = $.getEvent( event );\n            propagate = tracker.focusHandler(\n                {\n                    eventSource:          tracker,\n                    originalEvent:        event,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( propagate === false ) {\n                $.cancelEvent( event );\n            }\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onBlur( tracker, event ) {\n        //console.log( "blur %s", event );\n        var propagate;\n        if ( tracker.blurHandler ) {\n            event = $.getEvent( event );\n            propagate = tracker.blurHandler(\n                {\n                    eventSource:          tracker,\n                    originalEvent:        event,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( propagate === false ) {\n                $.cancelEvent( event );\n            }\n        }\n    }\n\n\n    /**\n     * Handler for \'wheel\' events\n     *\n     * @private\n     * @inner\n     */\n    function onWheel( tracker, event ) {\n        handleWheelEvent( tracker, event, event );\n    }\n\n\n    /**\n     * Handler for \'mousewheel\', \'DOMMouseScroll\', and \'MozMousePixelScroll\' events\n     *\n     * @private\n     * @inner\n     */\n    function onMouseWheel( tracker, event ) {\n        event = $.getEvent( event );\n\n        // Simulate a \'wheel\' event\n        var simulatedEvent = {\n            target:     event.target || event.srcElement,\n            type:       "wheel",\n            shiftKey:   event.shiftKey || false,\n            clientX:    event.clientX,\n            clientY:    event.clientY,\n            pageX:      event.pageX ? event.pageX : event.clientX,\n            pageY:      event.pageY ? event.pageY : event.clientY,\n            deltaMode:  event.type == "MozMousePixelScroll" ? 0 : 1, // 0=pixel, 1=line, 2=page\n            deltaX:     0,\n            deltaZ:     0\n        };\n\n        // Calculate deltaY\n        if ( $.MouseTracker.wheelEventName == "mousewheel" ) {\n            simulatedEvent.deltaY = - 1 / $.DEFAULT_SETTINGS.pixelsPerWheelLine * event.wheelDelta;\n        } else {\n            simulatedEvent.deltaY = event.detail;\n        }\n\n        handleWheelEvent( tracker, simulatedEvent, event );\n    }\n\n\n    /**\n     * Handles \'wheel\' events.\n     * The event may be simulated by the legacy mouse wheel event handler (onMouseWheel()).\n     *\n     * @private\n     * @inner\n     */\n    function handleWheelEvent( tracker, event, originalEvent ) {\n        var nDelta = 0,\n            propagate;\n\n        // The nDelta variable is gated to provide smooth z-index scrolling\n        //   since the mouse wheel allows for substantial deltas meant for rapid\n        //   y-index scrolling.\n        // event.deltaMode: 0=pixel, 1=line, 2=page\n        // TODO: Deltas in pixel mode should be accumulated then a scroll value computed after $.DEFAULT_SETTINGS.pixelsPerWheelLine threshold reached\n        nDelta = event.deltaY < 0 ? 1 : -1;\n\n        if ( tracker.scrollHandler ) {\n            propagate = tracker.scrollHandler(\n                {\n                    eventSource:          tracker,\n                    pointerType:          \'mouse\',\n                    position:             getMouseRelative( event, tracker.element ),\n                    scroll:               nDelta,\n                    shift:                event.shiftKey,\n                    isTouchEvent:         false,\n                    originalEvent:        originalEvent,\n                    preventDefaultAction: false,\n                    userData:             tracker.userData\n                }\n            );\n            if ( propagate === false ) {\n                $.cancelEvent( originalEvent );\n            }\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function isParentChild( parent, child )\n    {\n       if ( parent === child ) {\n           return false;\n       }\n       while ( child && child !== parent ) {\n           child = child.parentNode;\n       }\n       return child === parent;\n    }\n\n\n    /**\n     * Only used on IE 8\n     *\n     * @private\n     * @inner\n     */\n    function onMouseEnter( tracker, event ) {\n        event = $.getEvent( event );\n\n        handleMouseEnter( tracker, event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onMouseOver( tracker, event ) {\n        event = $.getEvent( event );\n\n        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {\n            return;\n        }\n\n        handleMouseEnter( tracker, event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleMouseEnter( tracker, event ) {\n        var gPoint = {\n            id: $.MouseTracker.mousePointerId,\n            type: \'mouse\',\n            isPrimary: true,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersEnter( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * Only used on IE 8\n     *\n     * @private\n     * @inner\n     */\n    function onMouseLeave( tracker, event ) {\n        event = $.getEvent( event );\n\n        handleMouseExit( tracker, event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onMouseOut( tracker, event ) {\n        event = $.getEvent( event );\n\n        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {\n            return;\n        }\n\n        handleMouseExit( tracker, event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleMouseExit( tracker, event ) {\n        var gPoint = {\n            id: $.MouseTracker.mousePointerId,\n            type: \'mouse\',\n            isPrimary: true,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersExit( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * Returns a W3C DOM level 3 standard button value given an event.button property:\n     *   -1 == none, 0 == primary/left, 1 == middle, 2 == secondary/right, 3 == X1/back, 4 == X2/forward, 5 == eraser (pen)\n     * @private\n     * @inner\n     */\n    function getStandardizedButton( button ) {\n        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n            // On IE 8, 0 == none, 1 == left, 2 == right, 3 == left and right, 4 == middle, 5 == left and middle, 6 == right and middle, 7 == all three\n            // TODO: Support chorded (multiple) button presses on IE 8?\n            if ( button === 1 ) {\n                return 0;\n            } else if ( button === 2 ) {\n                return 2;\n            } else if ( button === 4 ) {\n                return 1;\n            } else {\n                return -1;\n            }\n        } else {\n            return button;\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onMouseDown( tracker, event ) {\n        var gPoint;\n\n        event = $.getEvent( event );\n\n        gPoint = {\n            id: $.MouseTracker.mousePointerId,\n            type: \'mouse\',\n            isPrimary: true,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        if ( updatePointersDown( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {\n            $.stopEvent( event );\n            capturePointer( tracker, \'mouse\' );\n        }\n\n        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler ) {\n            $.cancelEvent( event );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onMouseUp( tracker, event ) {\n        handleMouseUp( tracker, event );\n    }\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onMouseUp is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onMouseUpCaptured( tracker, event ) {\n        handleMouseUp( tracker, event );\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleMouseUp( tracker, event ) {\n        var gPoint;\n\n        event = $.getEvent( event );\n\n        gPoint = {\n            id: $.MouseTracker.mousePointerId,\n            type: \'mouse\',\n            isPrimary: true,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        if ( updatePointersUp( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {\n            releasePointer( tracker, \'mouse\' );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onMouseMove( tracker, event ) {\n        handleMouseMove( tracker, event );\n   }\n\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onMouseMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onMouseMoveCaptured( tracker, event ) {\n        handleMouseMove( tracker, event );\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleMouseMove( tracker, event ) {\n        var gPoint;\n\n        event = $.getEvent( event );\n\n        gPoint = {\n            id: $.MouseTracker.mousePointerId,\n            type: \'mouse\',\n            isPrimary: true,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersMove( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function abortTouchContacts( tracker, event, pointsList ) {\n        var i,\n            gPointCount = pointsList.getLength(),\n            abortGPoints = [];\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            abortGPoints.push( pointsList.getByIndex( i ) );\n        }\n\n        if ( abortGPoints.length > 0 ) {\n            // simulate touchend\n            updatePointersUp( tracker, event, abortGPoints, 0 ); // 0 means primary button press/release or touch contact\n            // release pointer capture\n            pointsList.captureCount = 1;\n            releasePointer( tracker, \'touch\' );\n            // simulate touchleave\n            updatePointersExit( tracker, event, abortGPoints );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onTouchStart( tracker, event ) {\n        var time,\n            i,\n            j,\n            touchCount = event.changedTouches.length,\n            gPoints = [],\n            parentGPoints,\n            pointsList = tracker.getActivePointersListByType( \'touch\' );\n\n        time = $.now();\n\n        if ( pointsList.getLength() > event.touches.length - touchCount ) {\n            $.console.warn(\'Tracked touch contact count doesn\\\'t match event.touches.length. Removing all tracked touch pointers.\');\n            abortTouchContacts( tracker, event, pointsList );\n        }\n\n        for ( i = 0; i < touchCount; i++ ) {\n            gPoints.push( {\n                id: event.changedTouches[ i ].identifier,\n                type: \'touch\',\n                // isPrimary not set - let the updatePointers functions determine it\n                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),\n                currentTime: time\n            } );\n        }\n\n        // simulate touchenter on our tracked element\n        updatePointersEnter( tracker, event, gPoints );\n\n        // simulate touchenter on our tracked element\'s tracked ancestor elements\n        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {\n            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {\n                parentGPoints = [];\n                for ( j = 0; j < touchCount; j++ ) {\n                    parentGPoints.push( {\n                        id: event.changedTouches[ j ].identifier,\n                        type: \'touch\',\n                        // isPrimary not set - let the updatePointers functions determine it\n                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),\n                        currentTime: time\n                    } );\n                }\n                updatePointersEnter( MOUSETRACKERS[ i ], event, parentGPoints );\n            }\n        }\n\n        if ( updatePointersDown( tracker, event, gPoints, 0 ) ) { // 0 means primary button press/release or touch contact\n            $.stopEvent( event );\n            capturePointer( tracker, \'touch\', touchCount );\n        }\n\n        $.cancelEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onTouchEnd( tracker, event ) {\n        handleTouchEnd( tracker, event );\n    }\n\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.\n     * onTouchEnd is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onTouchEndCaptured( tracker, event ) {\n        handleTouchEnd( tracker, event );\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleTouchEnd( tracker, event ) {\n        var time,\n            i,\n            j,\n            touchCount = event.changedTouches.length,\n            gPoints = [],\n            parentGPoints;\n\n        time = $.now();\n\n        for ( i = 0; i < touchCount; i++ ) {\n            gPoints.push( {\n                id: event.changedTouches[ i ].identifier,\n                type: \'touch\',\n                // isPrimary not set - let the updatePointers functions determine it\n                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),\n                currentTime: time\n            } );\n        }\n\n        if ( updatePointersUp( tracker, event, gPoints, 0 ) ) {\n            releasePointer( tracker, \'touch\', touchCount );\n        }\n\n        // simulate touchleave on our tracked element\n        updatePointersExit( tracker, event, gPoints );\n\n        // simulate touchleave on our tracked element\'s tracked ancestor elements\n        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {\n            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {\n                parentGPoints = [];\n                for ( j = 0; j < touchCount; j++ ) {\n                    parentGPoints.push( {\n                        id: event.changedTouches[ j ].identifier,\n                        type: \'touch\',\n                        // isPrimary not set - let the updatePointers functions determine it\n                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),\n                        currentTime: time\n                    } );\n                }\n                updatePointersExit( MOUSETRACKERS[ i ], event, parentGPoints );\n            }\n        }\n\n        $.cancelEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onTouchMove( tracker, event ) {\n        handleTouchMove( tracker, event );\n    }\n\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.\n     * onTouchMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onTouchMoveCaptured( tracker, event ) {\n        handleTouchMove( tracker, event );\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handleTouchMove( tracker, event ) {\n        var i,\n            touchCount = event.changedTouches.length,\n            gPoints = [];\n\n        for ( i = 0; i < touchCount; i++ ) {\n            gPoints.push( {\n                id: event.changedTouches[ i ].identifier,\n                type: \'touch\',\n                // isPrimary not set - let the updatePointers functions determine it\n                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),\n                currentTime: $.now()\n            } );\n        }\n\n        updatePointersMove( tracker, event, gPoints );\n\n        $.cancelEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onTouchCancel( tracker, event ) {\n        var i,\n            touchCount = event.changedTouches.length,\n            gPoints = [],\n            pointsList = tracker.getActivePointersListByType( \'touch\' );\n        \n        abortTouchContacts( tracker, event, pointsList );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onGestureStart( tracker, event ) {\n        event.stopPropagation();\n        event.preventDefault();\n        return false;\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onGestureChange( tracker, event ) {\n        event.stopPropagation();\n        event.preventDefault();\n        return false;\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerOver( tracker, event ) {\n        var gPoint;\n\n        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {\n            return;\n        }\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event ),\n            isPrimary: event.isPrimary,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersEnter( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerOut( tracker, event ) {\n        var gPoint;\n\n        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {\n            return;\n        }\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event ),\n            isPrimary: event.isPrimary,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersExit( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerDown( tracker, event ) {\n        var gPoint;\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event ),\n            isPrimary: event.isPrimary,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        if ( updatePointersDown( tracker, event, [ gPoint ], event.button ) ) {\n            $.stopEvent( event );\n            capturePointer( tracker, gPoint.type );\n        }\n\n        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {\n            $.cancelEvent( event );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerUp( tracker, event ) {\n        handlePointerUp( tracker, event );\n    }\n\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onPointerUp is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onPointerUpCaptured( tracker, event ) {\n        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );\n        if ( pointsList.getById( event.pointerId ) ) {\n            handlePointerUp( tracker, event );\n        }\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handlePointerUp( tracker, event ) {\n        var gPoint;\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event ),\n            isPrimary: event.isPrimary,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        if ( updatePointersUp( tracker, event, [ gPoint ], event.button ) ) {\n            releasePointer( tracker, gPoint.type );\n        }\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerMove( tracker, event ) {\n        handlePointerMove( tracker, event );\n    }\n\n\n    /**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onPointerMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */\n    function onPointerMoveCaptured( tracker, event ) {\n        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );\n        if ( pointsList.getById( event.pointerId ) ) {\n            handlePointerMove( tracker, event );\n        }\n        $.stopEvent( event );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handlePointerMove( tracker, event ) {\n        // Pointer changed coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)\n        var gPoint;\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event ),\n            isPrimary: event.isPrimary,\n            currentPos: getMouseAbsolute( event ),\n            currentTime: $.now()\n        };\n\n        updatePointersMove( tracker, event, [ gPoint ] );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function onPointerCancel( tracker, event ) {\n        var gPoint;\n\n        gPoint = {\n            id: event.pointerId,\n            type: getPointerType( event )\n        };\n\n        updatePointersCancel( tracker, event, [ gPoint ] );\n    }\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Device-agnostic DOM event handlers\n///////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList\n     *     The GesturePointList to track the pointer in.\n     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint\n     *      Gesture point to track.\n     * @returns {Number} Number of gesture points in pointsList.\n     */\n    function startTrackingPointer( pointsList, gPoint ) {\n\n        // If isPrimary is not known for the pointer then set it according to our rules:\n        //    true if the first pointer in the gesture, otherwise false\n        if ( !gPoint.hasOwnProperty( \'isPrimary\' ) ) {\n            if ( pointsList.getLength() === 0 ) {\n                gPoint.isPrimary = true;\n            } else {\n                gPoint.isPrimary = false;\n            }\n        }\n        gPoint.speed = 0;\n        gPoint.direction = 0;\n        gPoint.contactPos = gPoint.currentPos;\n        gPoint.contactTime = gPoint.currentTime;\n        gPoint.lastPos = gPoint.currentPos;\n        gPoint.lastTime = gPoint.currentTime;\n\n        return pointsList.add( gPoint );\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList\n     *     The GesturePointList to stop tracking the pointer on.\n     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint\n     *      Gesture point to stop tracking.\n     * @returns {Number} Number of gesture points in pointsList.\n     */\n    function stopTrackingPointer( pointsList, gPoint ) {\n        var listLength,\n            primaryPoint;\n\n        if ( pointsList.getById( gPoint.id ) ) {\n            listLength = pointsList.removeById( gPoint.id );\n\n            // If isPrimary is not known for the pointer and we just removed the primary pointer from the list then we need to set another pointer as primary\n            if ( !gPoint.hasOwnProperty( \'isPrimary\' ) ) {\n                primaryPoint = pointsList.getPrimary();\n                if ( !primaryPoint ) {\n                    primaryPoint = pointsList.getByIndex( 0 );\n                    if ( primaryPoint ) {\n                        primaryPoint.isPrimary = true;\n                    }\n                }\n            }\n        } else {\n            listLength = pointsList.getLength();\n        }\n\n        return listLength;\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */\n    function updatePointersEnter( tracker, event, gPoints ) {\n        var pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),\n            i,\n            gPointCount = gPoints.length,\n            curGPoint,\n            updateGPoint,\n            propagate;\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            curGPoint = gPoints[ i ];\n            updateGPoint = pointsList.getById( curGPoint.id );\n\n            if ( updateGPoint ) {\n                // Already tracking the pointer...update it\n                updateGPoint.insideElement = true;\n                updateGPoint.lastPos = updateGPoint.currentPos;\n                updateGPoint.lastTime = updateGPoint.currentTime;\n                updateGPoint.currentPos = curGPoint.currentPos;\n                updateGPoint.currentTime = curGPoint.currentTime;\n\n                curGPoint = updateGPoint;\n            } else {\n                // Initialize for tracking and add to the tracking list\n                curGPoint.captured = false;\n                curGPoint.insideElementPressed = false;\n                curGPoint.insideElement = true;\n                startTrackingPointer( pointsList, curGPoint );\n            }\n\n            // Enter\n            if ( tracker.enterHandler ) {\n                propagate = tracker.enterHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          curGPoint.type,\n                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),\n                        buttons:              pointsList.buttons,\n                        pointers:             tracker.getActivePointerCount(),\n                        insideElementPressed: curGPoint.insideElementPressed,\n                        buttonDownAny:        pointsList.buttons !== 0,\n                        isTouchEvent:         curGPoint.type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */\n    function updatePointersExit( tracker, event, gPoints ) {\n        var delegate = THIS[ tracker.hash ],\n            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),\n            i,\n            gPointCount = gPoints.length,\n            curGPoint,\n            updateGPoint,\n            propagate;\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            curGPoint = gPoints[ i ];\n            updateGPoint = pointsList.getById( curGPoint.id );\n\n            if ( updateGPoint ) {\n                // Already tracking the pointer. If captured then update it, else stop tracking it\n                if ( updateGPoint.captured ) {\n                    updateGPoint.insideElement = false;\n                    updateGPoint.lastPos = updateGPoint.currentPos;\n                    updateGPoint.lastTime = updateGPoint.currentTime;\n                    updateGPoint.currentPos = curGPoint.currentPos;\n                    updateGPoint.currentTime = curGPoint.currentTime;\n                } else {\n                    stopTrackingPointer( pointsList, updateGPoint );\n                }\n\n                curGPoint = updateGPoint;\n            }\n\n            // Exit\n            if ( tracker.exitHandler ) {\n                propagate = tracker.exitHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          curGPoint.type,\n                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),\n                        buttons:              pointsList.buttons,\n                        pointers:             tracker.getActivePointerCount(),\n                        insideElementPressed: updateGPoint ? updateGPoint.insideElementPressed : false,\n                        buttonDownAny:        pointsList.buttons !== 0,\n                        isTouchEvent:         curGPoint.type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     * @param {Number} buttonChanged\n     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,\n     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.\n     *\n     * @returns {Boolean} True if pointers should be captured to the tracked element, otherwise false.\n     */\n    function updatePointersDown( tracker, event, gPoints, buttonChanged ) {\n        var delegate = THIS[ tracker.hash ],\n            propagate,\n            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),\n            i,\n            gPointCount = gPoints.length,\n            curGPoint,\n            updateGPoint;\n\n        if ( typeof event.buttons !== \'undefined\' ) {\n            pointsList.buttons = event.buttons;\n        } else {\n            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n                if ( buttonChanged === 0 ) {\n                    // Primary\n                    pointsList.buttons += 1;\n                } else if ( buttonChanged === 1 ) {\n                    // Aux\n                    pointsList.buttons += 4;\n                } else if ( buttonChanged === 2 ) {\n                    // Secondary\n                    pointsList.buttons += 2;\n                } else if ( buttonChanged === 3 ) {\n                    // X1 (Back)\n                    pointsList.buttons += 8;\n                } else if ( buttonChanged === 4 ) {\n                    // X2 (Forward)\n                    pointsList.buttons += 16;\n                } else if ( buttonChanged === 5 ) {\n                    // Pen Eraser\n                    pointsList.buttons += 32;\n                }\n            } else {\n                if ( buttonChanged === 0 ) {\n                    // Primary\n                    pointsList.buttons |= 1;\n                } else if ( buttonChanged === 1 ) {\n                    // Aux\n                    pointsList.buttons |= 4;\n                } else if ( buttonChanged === 2 ) {\n                    // Secondary\n                    pointsList.buttons |= 2;\n                } else if ( buttonChanged === 3 ) {\n                    // X1 (Back)\n                    pointsList.buttons |= 8;\n                } else if ( buttonChanged === 4 ) {\n                    // X2 (Forward)\n                    pointsList.buttons |= 16;\n                } else if ( buttonChanged === 5 ) {\n                    // Pen Eraser\n                    pointsList.buttons |= 32;\n                }\n            }\n        }\n\n        // Only capture and track primary button, pen, and touch contacts\n        if ( buttonChanged !== 0 ) {\n            // Aux Press\n            if ( tracker.nonPrimaryPressHandler ) {\n                propagate = tracker.nonPrimaryPressHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          gPoints[ 0 ].type,\n                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),\n                        button:               buttonChanged,\n                        buttons:              pointsList.buttons,\n                        isTouchEvent:         gPoints[ 0 ].type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n\n            return false;\n        }\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            curGPoint = gPoints[ i ];\n            updateGPoint = pointsList.getById( curGPoint.id );\n\n            if ( updateGPoint ) {\n                // Already tracking the pointer...update it\n                updateGPoint.captured = true;\n                updateGPoint.insideElementPressed = true;\n                updateGPoint.insideElement = true;\n                updateGPoint.contactPos = curGPoint.currentPos;\n                updateGPoint.contactTime = curGPoint.currentTime;\n                updateGPoint.lastPos = updateGPoint.currentPos;\n                updateGPoint.lastTime = updateGPoint.currentTime;\n                updateGPoint.currentPos = curGPoint.currentPos;\n                updateGPoint.currentTime = curGPoint.currentTime;\n\n                curGPoint = updateGPoint;\n            } else {\n                // Initialize for tracking and add to the tracking list (no pointerover or pointermove event occurred before this)\n                curGPoint.captured = true;\n                curGPoint.insideElementPressed = true;\n                curGPoint.insideElement = true;\n                startTrackingPointer( pointsList, curGPoint );\n            }\n\n            pointsList.contacts++;\n            //$.console.log(\'contacts++ \', pointsList.contacts);\n\n            if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {\n                $.MouseTracker.gesturePointVelocityTracker.addPoint( tracker, curGPoint );\n            }\n\n            if ( pointsList.contacts === 1 ) {\n                // Press\n                if ( tracker.pressHandler ) {\n                    propagate = tracker.pressHandler(\n                        {\n                            eventSource:          tracker,\n                            pointerType:          curGPoint.type,\n                            position:             getPointRelativeToAbsolute( curGPoint.contactPos, tracker.element ),\n                            buttons:              pointsList.buttons,\n                            isTouchEvent:         curGPoint.type === \'touch\',\n                            originalEvent:        event,\n                            preventDefaultAction: false,\n                            userData:             tracker.userData\n                        }\n                    );\n                    if ( propagate === false ) {\n                        $.cancelEvent( event );\n                    }\n                }\n            } else if ( pointsList.contacts === 2 ) {\n                if ( tracker.pinchHandler && curGPoint.type === \'touch\' ) {\n                    // Initialize for pinch\n                    delegate.pinchGPoints = pointsList.asArray();\n                    delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );\n                    delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );\n                }\n            }\n        }\n\n        return true;\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     * @param {Number} buttonChanged\n     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,\n     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.\n     *\n     * @returns {Boolean} True if pointer capture should be released from the tracked element, otherwise false.\n     */\n    function updatePointersUp( tracker, event, gPoints, buttonChanged ) {\n        var delegate = THIS[ tracker.hash ],\n            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),\n            propagate,\n            insideElementReleased,\n            releasePoint,\n            releaseTime,\n            i,\n            gPointCount = gPoints.length,\n            curGPoint,\n            updateGPoint,\n            releaseCapture = false,\n            wasCaptured = false,\n            quick;\n\n        if ( typeof event.buttons !== \'undefined\' ) {\n            pointsList.buttons = event.buttons;\n        } else {\n            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {\n                if ( buttonChanged === 0 ) {\n                    // Primary\n                    pointsList.buttons -= 1;\n                } else if ( buttonChanged === 1 ) {\n                    // Aux\n                    pointsList.buttons -= 4;\n                } else if ( buttonChanged === 2 ) {\n                    // Secondary\n                    pointsList.buttons -= 2;\n                } else if ( buttonChanged === 3 ) {\n                    // X1 (Back)\n                    pointsList.buttons -= 8;\n                } else if ( buttonChanged === 4 ) {\n                    // X2 (Forward)\n                    pointsList.buttons -= 16;\n                } else if ( buttonChanged === 5 ) {\n                    // Pen Eraser\n                    pointsList.buttons -= 32;\n                }\n            } else {\n                if ( buttonChanged === 0 ) {\n                    // Primary\n                    pointsList.buttons ^= ~1;\n                } else if ( buttonChanged === 1 ) {\n                    // Aux\n                    pointsList.buttons ^= ~4;\n                } else if ( buttonChanged === 2 ) {\n                    // Secondary\n                    pointsList.buttons ^= ~2;\n                } else if ( buttonChanged === 3 ) {\n                    // X1 (Back)\n                    pointsList.buttons ^= ~8;\n                } else if ( buttonChanged === 4 ) {\n                    // X2 (Forward)\n                    pointsList.buttons ^= ~16;\n                } else if ( buttonChanged === 5 ) {\n                    // Pen Eraser\n                    pointsList.buttons ^= ~32;\n                }\n            }\n        }\n\n        // Only capture and track primary button, pen, and touch contacts\n        if ( buttonChanged !== 0 ) {\n            // Aux Release\n            if ( tracker.nonPrimaryReleaseHandler ) {\n                propagate = tracker.nonPrimaryReleaseHandler(\n                    {\n                        eventSource:           tracker,\n                        pointerType:           gPoints[ 0 ].type,\n                        position:              getPointRelativeToAbsolute(  gPoints[ 0 ].currentPos, tracker.element ),\n                        button:                buttonChanged,\n                        buttons:               pointsList.buttons,\n                        isTouchEvent:          gPoints[ 0 ].type === \'touch\',\n                        originalEvent:         event,\n                        preventDefaultAction:  false,\n                        userData:              tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n\n            return false;\n        }\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            curGPoint = gPoints[ i ];\n            updateGPoint = pointsList.getById( curGPoint.id );\n\n            if ( updateGPoint ) {\n                // Update the pointer, stop tracking it if not still in this element\n                if ( updateGPoint.captured ) {\n                    updateGPoint.captured = false;\n                    releaseCapture = true;\n                    wasCaptured = true;\n                }\n                updateGPoint.lastPos = updateGPoint.currentPos;\n                updateGPoint.lastTime = updateGPoint.currentTime;\n                updateGPoint.currentPos = curGPoint.currentPos;\n                updateGPoint.currentTime = curGPoint.currentTime;\n                if ( !updateGPoint.insideElement ) {\n                    stopTrackingPointer( pointsList, updateGPoint );\n                }\n\n                releasePoint = updateGPoint.currentPos;\n                releaseTime = updateGPoint.currentTime;\n\n                if ( wasCaptured ) {\n                    // Pointer was activated in our element but could have been removed in any element since events are captured to our element\n\n                    pointsList.contacts--;\n                    //$.console.log(\'contacts-- \', pointsList.contacts);\n\n                    if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {\n                        $.MouseTracker.gesturePointVelocityTracker.removePoint( tracker, updateGPoint );\n                    }\n\n                    if ( pointsList.contacts === 0 ) {\n\n                        // Release (pressed in our element)\n                        if ( tracker.releaseHandler ) {\n                            propagate = tracker.releaseHandler(\n                                {\n                                    eventSource:           tracker,\n                                    pointerType:           updateGPoint.type,\n                                    position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),\n                                    buttons:               pointsList.buttons,\n                                    insideElementPressed:  updateGPoint.insideElementPressed,\n                                    insideElementReleased: updateGPoint.insideElement,\n                                    isTouchEvent:          updateGPoint.type === \'touch\',\n                                    originalEvent:         event,\n                                    preventDefaultAction:  false,\n                                    userData:              tracker.userData\n                                }\n                            );\n                            if ( propagate === false ) {\n                                $.cancelEvent( event );\n                            }\n                        }\n\n                        // Drag End\n                        if ( tracker.dragEndHandler && !updateGPoint.currentPos.equals( updateGPoint.contactPos ) ) {\n                            propagate = tracker.dragEndHandler(\n                                {\n                                    eventSource:          tracker,\n                                    pointerType:          updateGPoint.type,\n                                    position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),\n                                    speed:                updateGPoint.speed,\n                                    direction:            updateGPoint.direction,\n                                    shift:                event.shiftKey,\n                                    isTouchEvent:         updateGPoint.type === \'touch\',\n                                    originalEvent:        event,\n                                    preventDefaultAction: false,\n                                    userData:             tracker.userData\n                                }\n                            );\n                            if ( propagate === false ) {\n                                $.cancelEvent( event );\n                            }\n                        }\n\n                        // Click / Double-Click\n                        if ( ( tracker.clickHandler || tracker.dblClickHandler ) && updateGPoint.insideElement ) {\n                            quick = releaseTime - updateGPoint.contactTime <= tracker.clickTimeThreshold &&\n                                            updateGPoint.contactPos.distanceTo( releasePoint ) <= tracker.clickDistThreshold;\n\n                            // Click\n                            if ( tracker.clickHandler ) {\n                                propagate = tracker.clickHandler(\n                                    {\n                                        eventSource:          tracker,\n                                        pointerType:          updateGPoint.type,\n                                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),\n                                        quick:                quick,\n                                        shift:                event.shiftKey,\n                                        isTouchEvent:         updateGPoint.type === \'touch\',\n                                        originalEvent:        event,\n                                        preventDefaultAction: false,\n                                        userData:             tracker.userData\n                                    }\n                                );\n                                if ( propagate === false ) {\n                                    $.cancelEvent( event );\n                                }\n                            }\n\n                            // Double-Click\n                            if ( tracker.dblClickHandler && quick ) {\n                                pointsList.clicks++;\n                                if ( pointsList.clicks === 1 ) {\n                                    delegate.lastClickPos = releasePoint;\n                                    /*jshint loopfunc:true*/\n                                    delegate.dblClickTimeOut = setTimeout( function() {\n                                        pointsList.clicks = 0;\n                                    }, tracker.dblClickTimeThreshold );\n                                    /*jshint loopfunc:false*/\n                                } else if ( pointsList.clicks === 2 ) {\n                                    clearTimeout( delegate.dblClickTimeOut );\n                                    pointsList.clicks = 0;\n                                    if ( delegate.lastClickPos.distanceTo( releasePoint ) <= tracker.dblClickDistThreshold ) {\n                                        propagate = tracker.dblClickHandler(\n                                            {\n                                                eventSource:          tracker,\n                                                pointerType:          updateGPoint.type,\n                                                position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),\n                                                shift:                event.shiftKey,\n                                                isTouchEvent:         updateGPoint.type === \'touch\',\n                                                originalEvent:        event,\n                                                preventDefaultAction: false,\n                                                userData:             tracker.userData\n                                            }\n                                        );\n                                        if ( propagate === false ) {\n                                            $.cancelEvent( event );\n                                        }\n                                    }\n                                    delegate.lastClickPos = null;\n                                }\n                            }\n                        }\n                    } else if ( pointsList.contacts === 2 ) {\n                        if ( tracker.pinchHandler && updateGPoint.type === \'touch\' ) {\n                            // Reset for pinch\n                            delegate.pinchGPoints = pointsList.asArray();\n                            delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );\n                            delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );\n                        }\n                    }\n                } else {\n                    // Pointer was activated in another element but removed in our element\n\n                    // Release (pressed in another element)\n                    if ( tracker.releaseHandler ) {\n                        propagate = tracker.releaseHandler(\n                            {\n                                eventSource:           tracker,\n                                pointerType:           updateGPoint.type,\n                                position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),\n                                buttons:               pointsList.buttons,\n                                insideElementPressed:  updateGPoint.insideElementPressed,\n                                insideElementReleased: updateGPoint.insideElement,\n                                isTouchEvent:          updateGPoint.type === \'touch\',\n                                originalEvent:         event,\n                                preventDefaultAction:  false,\n                                userData:              tracker.userData\n                            }\n                        );\n                        if ( propagate === false ) {\n                            $.cancelEvent( event );\n                        }\n                    }\n                }\n            }\n        }\n\n        return releaseCapture;\n    }\n\n\n    /**\n     * Call when pointer(s) change coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)\n     *\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */\n    function updatePointersMove( tracker, event, gPoints ) {\n        var delegate = THIS[ tracker.hash ],\n            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),\n            i,\n            gPointCount = gPoints.length,\n            curGPoint,\n            updateGPoint,\n            gPointArray,\n            delta,\n            propagate;\n\n        if ( typeof event.buttons !== \'undefined\' ) {\n            pointsList.buttons = event.buttons;\n        }\n\n        for ( i = 0; i < gPointCount; i++ ) {\n            curGPoint = gPoints[ i ];\n            updateGPoint = pointsList.getById( curGPoint.id );\n\n            if ( updateGPoint ) {\n                // Already tracking the pointer...update it\n                if ( curGPoint.hasOwnProperty( \'isPrimary\' ) ) {\n                    updateGPoint.isPrimary = curGPoint.isPrimary;\n                }\n                updateGPoint.lastPos = updateGPoint.currentPos;\n                updateGPoint.lastTime = updateGPoint.currentTime;\n                updateGPoint.currentPos = curGPoint.currentPos;\n                updateGPoint.currentTime = curGPoint.currentTime;\n            } else {\n                // Initialize for tracking and add to the tracking list (no pointerover or pointerdown event occurred before this)\n                curGPoint.captured = false;\n                curGPoint.insideElementPressed = false;\n                curGPoint.insideElement = true;\n                startTrackingPointer( pointsList, curGPoint );\n            }\n        }\n\n        // Stop (mouse only)\n        if ( tracker.stopHandler && gPoints[ 0 ].type === \'mouse\' ) {\n            clearTimeout( tracker.stopTimeOut );\n            tracker.stopTimeOut = setTimeout( function() {\n                handlePointerStop( tracker, event, gPoints[ 0 ].type );\n            }, tracker.stopDelay );\n        }\n\n        if ( pointsList.contacts === 0 ) {\n            // Move (no contacts: hovering mouse or other hover-capable device)\n            if ( tracker.moveHandler ) {\n                propagate = tracker.moveHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          gPoints[ 0 ].type,\n                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),\n                        buttons:              pointsList.buttons,\n                        isTouchEvent:         gPoints[ 0 ].type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n        } else if ( pointsList.contacts === 1 ) {\n            // Move (1 contact)\n            if ( tracker.moveHandler ) {\n                updateGPoint = pointsList.asArray()[ 0 ];\n                propagate = tracker.moveHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          updateGPoint.type,\n                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),\n                        buttons:              pointsList.buttons,\n                        isTouchEvent:         updateGPoint.type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n\n            // Drag\n            if ( tracker.dragHandler ) {\n                updateGPoint = pointsList.asArray()[ 0 ];\n                delta = updateGPoint.currentPos.minus( updateGPoint.lastPos );\n                propagate = tracker.dragHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          updateGPoint.type,\n                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),\n                        buttons:              pointsList.buttons,\n                        delta:                delta,\n                        speed:                updateGPoint.speed,\n                        direction:            updateGPoint.direction,\n                        shift:                event.shiftKey,\n                        isTouchEvent:         updateGPoint.type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n        } else if ( pointsList.contacts === 2 ) {\n            // Move (2 contacts, use center)\n            if ( tracker.moveHandler ) {\n                gPointArray = pointsList.asArray();\n                propagate = tracker.moveHandler(\n                    {\n                        eventSource:          tracker,\n                        pointerType:          gPointArray[ 0 ].type,\n                        position:             getPointRelativeToAbsolute( getCenterPoint( gPointArray[ 0 ].currentPos, gPointArray[ 1 ].currentPos ), tracker.element ),\n                        buttons:              pointsList.buttons,\n                        isTouchEvent:         gPointArray[ 0 ].type === \'touch\',\n                        originalEvent:        event,\n                        preventDefaultAction: false,\n                        userData:             tracker.userData\n                    }\n                );\n                if ( propagate === false ) {\n                    $.cancelEvent( event );\n                }\n            }\n\n            // Pinch\n            if ( tracker.pinchHandler && gPoints[ 0 ].type === \'touch\' ) {\n                delta = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );\n                if ( delta != delegate.currentPinchDist ) {\n                    delegate.lastPinchDist = delegate.currentPinchDist;\n                    delegate.currentPinchDist = delta;\n                    delegate.lastPinchCenter = delegate.currentPinchCenter;\n                    delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );\n                    propagate = tracker.pinchHandler(\n                        {\n                            eventSource:          tracker,\n                            pointerType:          \'touch\',\n                            gesturePoints:        delegate.pinchGPoints,\n                            lastCenter:           getPointRelativeToAbsolute( delegate.lastPinchCenter, tracker.element ),\n                            center:               getPointRelativeToAbsolute( delegate.currentPinchCenter, tracker.element ),\n                            lastDistance:         delegate.lastPinchDist,\n                            distance:             delegate.currentPinchDist,\n                            shift:                event.shiftKey,\n                            originalEvent:        event,\n                            preventDefaultAction: false,\n                            userData:             tracker.userData\n                        }\n                    );\n                    if ( propagate === false ) {\n                        $.cancelEvent( event );\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */\n    function updatePointersCancel( tracker, event, gPoints ) {\n        updatePointersUp( tracker, event, gPoints, 0 );\n        updatePointersExit( tracker, event, gPoints );\n    }\n\n\n    /**\n     * @private\n     * @inner\n     */\n    function handlePointerStop( tracker, originalMoveEvent, pointerType ) {\n        if ( tracker.stopHandler ) {\n            tracker.stopHandler( {\n                eventSource:          tracker,\n                pointerType:          pointerType,\n                position:             getMouseRelative( originalMoveEvent, tracker.element ),\n                buttons:              tracker.getActivePointersListByType( pointerType ).buttons,\n                isTouchEvent:         pointerType === \'touch\',\n                originalEvent:        originalMoveEvent,\n                preventDefaultAction: false,\n                userData:             tracker.userData\n            } );\n        }\n    }\n    \n    // True if inside an iframe, otherwise false.\n    // @member {Boolean} isInIframe\n    // @private\n    // @inner\n    var isInIframe = (function() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    })();\n \n    // @function\n    // @private\n    // @inner\n    // @returns {Boolean} True if the target has access rights to events, otherwise false.\n    function canAccessEvents (target) {\n        try {\n            return target.addEventListener && target.removeEventListener;\n        } catch (e) {\n            return false;\n        }\n    }\n\n} ( OpenSeadragon ) );\n\n/*\n * OpenSeadragon - Control\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * An enumeration of supported locations where controls can be anchored.\n * The anchoring is always relative to the container.\n * @member ControlAnchor\n * @memberof OpenSeadragon\n * @static\n * @type {Object}\n * @property {Number} NONE\n * @property {Number} TOP_LEFT\n * @property {Number} TOP_RIGHT\n * @property {Number} BOTTOM_LEFT\n * @property {Number} BOTTOM_RIGHT\n * @property {Number} ABSOLUTE\n */\n$.ControlAnchor = {\n    NONE: 0,\n    TOP_LEFT: 1,\n    TOP_RIGHT: 2,\n    BOTTOM_RIGHT: 3,\n    BOTTOM_LEFT: 4,\n    ABSOLUTE: 5\n};\n\n/**\n * @class Control\n * @classdesc A Control represents any interface element which is meant to allow the user\n * to interact with the zoomable interface. Any control can be anchored to any\n * element.\n *\n * @memberof OpenSeadragon\n * @param {Element} element - the control element to be anchored in the container.\n * @param {Object } options - All required and optional settings for configuring a control element.\n * @param {OpenSeadragon.ControlAnchor} [options.anchor=OpenSeadragon.ControlAnchor.NONE] - the position of the control\n *  relative to the container.\n * @param {Boolean} [options.attachToViewer=true] - Whether the control should be added directly to the viewer, or\n *  directly to the container\n * @param {Boolean} [options.autoFade=true] - Whether the control should have the autofade behavior\n * @param {Element} container - the element to control will be anchored too.\n */\n$.Control = function ( element, options, container ) {\n    var parent = element.parentNode;\n    if (typeof options === \'number\')\n    {\n        $.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; " +\n                        "please use an options object instead.  " +\n                        "Support for this deprecated variant is scheduled for removal in December 2013");\n         options = {anchor: options};\n    }\n    options.attachToViewer = (typeof options.attachToViewer === \'undefined\') ? true : options.attachToViewer;\n    /**\n     * True if the control should have autofade behavior.\n     * @member {Boolean} autoFade\n     * @memberof OpenSeadragon.Control#\n     */\n    this.autoFade = (typeof options.autoFade === \'undefined\') ? true : options.autoFade;\n    /**\n     * The element providing the user interface with some type of control (e.g. a zoom-in button).\n     * @member {Element} element\n     * @memberof OpenSeadragon.Control#\n     */\n    this.element    = element;\n    /**\n     * The position of the Control relative to its container.\n     * @member {OpenSeadragon.ControlAnchor} anchor\n     * @memberof OpenSeadragon.Control#\n     */\n    this.anchor     = options.anchor;\n    /**\n     * The Control\'s containing element.\n     * @member {Element} container\n     * @memberof OpenSeadragon.Control#\n     */\n    this.container  = container;\n    /**\n     * A neutral element surrounding the control element.\n     * @member {Element} wrapper\n     * @memberof OpenSeadragon.Control#\n     */\n    if ( this.anchor == $.ControlAnchor.ABSOLUTE ) {\n        this.wrapper    = $.makeNeutralElement( "div" );\n        this.wrapper.style.position = "absolute";\n        this.wrapper.style.top = typeof ( options.top )  == "number" ? ( options.top + \'px\' ) : options.top;\n        this.wrapper.style.left  = typeof ( options.left )  == "number" ?  (options.left + \'px\' ) : options.left;\n        this.wrapper.style.height = typeof ( options.height )  == "number" ? ( options.height + \'px\' ) : options.height;\n        this.wrapper.style.width  = typeof ( options.width )  == "number" ? ( options.width + \'px\' ) : options.width;\n        this.wrapper.style.margin = "0px";\n        this.wrapper.style.padding = "0px";\n\n        this.element.style.position = "relative";\n        this.element.style.top = "0px";\n        this.element.style.left = "0px";\n        this.element.style.height = "100%";\n        this.element.style.width = "100%";\n    } else {\n        this.wrapper    = $.makeNeutralElement( "div" );\n        this.wrapper.style.display = "inline-block";\n        if ( this.anchor == $.ControlAnchor.NONE ) {\n            // IE6 fix\n            this.wrapper.style.width = this.wrapper.style.height = "100%";\n        }\n    }\n    this.wrapper.appendChild( this.element );\n\n    if (options.attachToViewer ) {\n        if ( this.anchor == $.ControlAnchor.TOP_RIGHT ||\n             this.anchor == $.ControlAnchor.BOTTOM_RIGHT ) {\n            this.container.insertBefore(\n                this.wrapper,\n                this.container.firstChild\n            );\n        } else {\n            this.container.appendChild( this.wrapper );\n        }\n    } else {\n        parent.appendChild( this.wrapper );\n    }\n};\n\n/** @lends OpenSeadragon.Control.prototype */\n$.Control.prototype = {\n\n    /**\n     * Removes the control from the container.\n     * @function\n     */\n    destroy: function() {\n        this.wrapper.removeChild( this.element );\n        this.container.removeChild( this.wrapper );\n    },\n\n    /**\n     * Determines if the control is currently visible.\n     * @function\n     * @return {Boolean} true if currenly visible, false otherwise.\n     */\n    isVisible: function() {\n        return this.wrapper.style.display != "none";\n    },\n\n    /**\n     * Toggles the visibility of the control.\n     * @function\n     * @param {Boolean} visible - true to make visible, false to hide.\n     */\n    setVisible: function( visible ) {\n        this.wrapper.style.display = visible ?\n            ( this.anchor == $.ControlAnchor.ABSOLUTE ? \'block\' : \'inline-block\' ) :\n            "none";\n    },\n\n    /**\n     * Sets the opacity level for the control.\n     * @function\n     * @param {Number} opactiy - a value between 1 and 0 inclusively.\n     */\n    setOpacity: function( opacity ) {\n        if ( this.element[ $.SIGNAL ] && $.Browser.vendor == $.BROWSERS.IE ) {\n            $.setElementOpacity( this.element, opacity, true );\n        } else {\n            $.setElementOpacity( this.wrapper, opacity, true );\n        }\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - ControlDock\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n    /**\n     * @class ControlDock\n     * @classdesc Provides a container element (a &lt;form&gt; element) with support for the layout of control elements.\n     *\n     * @memberof OpenSeadragon\n     */\n    $.ControlDock = function( options ){\n        var layouts = [ \'topleft\', \'topright\', \'bottomright\', \'bottomleft\'],\n            layout,\n            i;\n\n        $.extend( true, this, {\n            id: \'controldock-\'+$.now()+\'-\'+Math.floor(Math.random()*1000000),\n            container: $.makeNeutralElement( \'div\' ),\n            controls: []\n        }, options );\n\n        // Disable the form\'s submit; otherwise button clicks and return keys\n        // can trigger it.\n        this.container.onsubmit = function() {\n            return false;\n        };\n\n        if( this.element ){\n            this.element = $.getElement( this.element );\n            this.element.appendChild( this.container );\n            this.element.style.position = \'relative\';\n            this.container.style.width = \'100%\';\n            this.container.style.height = \'100%\';\n        }\n\n        for( i = 0; i < layouts.length; i++ ){\n            layout = layouts[ i ];\n            this.controls[ layout ] = $.makeNeutralElement( "div" );\n            this.controls[ layout ].style.position = \'absolute\';\n            if ( layout.match( \'left\' ) ){\n                this.controls[ layout ].style.left = \'0px\';\n            }\n            if ( layout.match( \'right\' ) ){\n                this.controls[ layout ].style.right = \'0px\';\n            }\n            if ( layout.match( \'top\' ) ){\n                this.controls[ layout ].style.top = \'0px\';\n            }\n            if ( layout.match( \'bottom\' ) ){\n                this.controls[ layout ].style.bottom = \'0px\';\n            }\n        }\n\n        this.container.appendChild( this.controls.topleft );\n        this.container.appendChild( this.controls.topright );\n        this.container.appendChild( this.controls.bottomright );\n        this.container.appendChild( this.controls.bottomleft );\n    };\n\n    /** @lends OpenSeadragon.ControlDock.prototype */\n    $.ControlDock.prototype = {\n\n        /**\n         * @function\n         */\n        addControl: function ( element, controlOptions ) {\n            element = $.getElement( element );\n            var div = null;\n\n            if ( getControlIndex( this, element ) >= 0 ) {\n                return;     // they\'re trying to add a duplicate control\n            }\n\n            switch ( controlOptions.anchor ) {\n                case $.ControlAnchor.TOP_RIGHT:\n                    div = this.controls.topright;\n                    element.style.position = "relative";\n                    element.style.paddingRight = "0px";\n                    element.style.paddingTop = "0px";\n                    break;\n                case $.ControlAnchor.BOTTOM_RIGHT:\n                    div = this.controls.bottomright;\n                    element.style.position = "relative";\n                    element.style.paddingRight = "0px";\n                    element.style.paddingBottom = "0px";\n                    break;\n                case $.ControlAnchor.BOTTOM_LEFT:\n                    div = this.controls.bottomleft;\n                    element.style.position = "relative";\n                    element.style.paddingLeft = "0px";\n                    element.style.paddingBottom = "0px";\n                    break;\n                case $.ControlAnchor.TOP_LEFT:\n                    div = this.controls.topleft;\n                    element.style.position = "relative";\n                    element.style.paddingLeft = "0px";\n                    element.style.paddingTop = "0px";\n                    break;\n                case $.ControlAnchor.ABSOLUTE:\n                    div = this.container;\n                    element.style.margin = "0px";\n                    element.style.padding = "0px";\n                    break;\n                default:\n                case $.ControlAnchor.NONE:\n                    div = this.container;\n                    element.style.margin = "0px";\n                    element.style.padding = "0px";\n                    break;\n            }\n\n            this.controls.push(\n                new $.Control( element, controlOptions, div )\n            );\n            element.style.display = "inline-block";\n        },\n\n\n        /**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */\n        removeControl: function ( element ) {\n            element = $.getElement( element );\n            var i = getControlIndex( this, element );\n\n            if ( i >= 0 ) {\n                this.controls[ i ].destroy();\n                this.controls.splice( i, 1 );\n            }\n\n            return this;\n        },\n\n        /**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */\n        clearControls: function () {\n            while ( this.controls.length > 0 ) {\n                this.controls.pop().destroy();\n            }\n\n            return this;\n        },\n\n\n        /**\n         * @function\n         * @return {Boolean}\n         */\n        areControlsEnabled: function () {\n            var i;\n\n            for ( i = this.controls.length - 1; i >= 0; i-- ) {\n                if ( this.controls[ i ].isVisible() ) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n\n        /**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */\n        setControlsEnabled: function( enabled ) {\n            var i;\n\n            for ( i = this.controls.length - 1; i >= 0; i-- ) {\n                this.controls[ i ].setVisible( enabled );\n            }\n\n            return this;\n        }\n\n    };\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    // Utility methods\n    ///////////////////////////////////////////////////////////////////////////////\n    function getControlIndex( dock, element ) {\n        var controls = dock.controls,\n            i;\n\n        for ( i = controls.length - 1; i >= 0; i-- ) {\n            if ( controls[ i ].element == element ) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Placement\n *\n * Copyright (C) 2010-2016 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function($) {\n\n    /**\n     * An enumeration of positions to anchor an element.\n     * @member Placement\n     * @memberOf OpenSeadragon\n     * @static\n     * @readonly\n     * @property {OpenSeadragon.Placement} CENTER\n     * @property {OpenSeadragon.Placement} TOP_LEFT\n     * @property {OpenSeadragon.Placement} TOP\n     * @property {OpenSeadragon.Placement} TOP_RIGHT\n     * @property {OpenSeadragon.Placement} RIGHT\n     * @property {OpenSeadragon.Placement} BOTTOM_RIGHT\n     * @property {OpenSeadragon.Placement} BOTTOM\n     * @property {OpenSeadragon.Placement} BOTTOM_LEFT\n     * @property {OpenSeadragon.Placement} LEFT\n     */\n    $.Placement = $.freezeObject({\n        CENTER:       0,\n        TOP_LEFT:     1,\n        TOP:          2,\n        TOP_RIGHT:    3,\n        RIGHT:        4,\n        BOTTOM_RIGHT: 5,\n        BOTTOM:       6,\n        BOTTOM_LEFT:  7,\n        LEFT:         8,\n        properties: {\n            0: {\n                isLeft: false,\n                isHorizontallyCentered: true,\n                isRight: false,\n                isTop: false,\n                isVerticallyCentered: true,\n                isBottom: false\n            },\n            1: {\n                isLeft: true,\n                isHorizontallyCentered: false,\n                isRight: false,\n                isTop: true,\n                isVerticallyCentered: false,\n                isBottom: false\n            },\n            2: {\n                isLeft: false,\n                isHorizontallyCentered: true,\n                isRight: false,\n                isTop: true,\n                isVerticallyCentered: false,\n                isBottom: false\n            },\n            3: {\n                isLeft: false,\n                isHorizontallyCentered: false,\n                isRight: true,\n                isTop: true,\n                isVerticallyCentered: false,\n                isBottom: false\n            },\n            4: {\n                isLeft: false,\n                isHorizontallyCentered: false,\n                isRight: true,\n                isTop: false,\n                isVerticallyCentered: true,\n                isBottom: false\n            },\n            5: {\n                isLeft: false,\n                isHorizontallyCentered: false,\n                isRight: true,\n                isTop: false,\n                isVerticallyCentered: false,\n                isBottom: true\n            },\n            6: {\n                isLeft: false,\n                isHorizontallyCentered: true,\n                isRight: false,\n                isTop: false,\n                isVerticallyCentered: false,\n                isBottom: true\n            },\n            7: {\n                isLeft: true,\n                isHorizontallyCentered: false,\n                isRight: false,\n                isTop: false,\n                isVerticallyCentered: false,\n                isBottom: true\n            },\n            8: {\n                isLeft: true,\n                isHorizontallyCentered: false,\n                isRight: false,\n                isTop: false,\n                isVerticallyCentered: true,\n                isBottom: false\n            }\n        }\n    });\n\n}(OpenSeadragon));\n\n/*\n * OpenSeadragon - Viewer\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n// dictionary from hash to private properties\nvar THIS = {};\nvar nextHash = 1;\n\n/**\n *\n * The main point of entry into creating a zoomable image on the page.<br>\n * <br>\n * We have provided an idiomatic javascript constructor which takes\n * a single object, but still support the legacy positional arguments.<br>\n * <br>\n * The options below are given in order that they appeared in the constructor\n * as arguments and we translate a positional call into an idiomatic call.<br>\n * <br>\n * To create a viewer, you can use either of this methods:<br>\n * <ul>\n * <li><code>var viewer = new OpenSeadragon.Viewer(options);</code></li>\n * <li><code>var viewer = OpenSeadragon(options);</code></li>\n * </ul>\n * @class Viewer\n * @classdesc The main OpenSeadragon viewer class.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @extends OpenSeadragon.ControlDock\n * @param {OpenSeadragon.Options} options - Viewer options.\n *\n **/\n$.Viewer = function( options ) {\n\n    var args  = arguments,\n        _this = this,\n        i;\n\n\n    //backward compatibility for positional args while prefering more\n    //idiomatic javascript options object as the only argument\n    if( !$.isPlainObject( options ) ){\n        options = {\n            id:                 args[ 0 ],\n            xmlPath:            args.length > 1 ? args[ 1 ] : undefined,\n            prefixUrl:          args.length > 2 ? args[ 2 ] : undefined,\n            controls:           args.length > 3 ? args[ 3 ] : undefined,\n            overlays:           args.length > 4 ? args[ 4 ] : undefined\n        };\n    }\n\n    //options.config and the general config argument are deprecated\n    //in favor of the more direct specification of optional settings\n    //being pass directly on the options object\n    if ( options.config ){\n        $.extend( true, options, options.config );\n        delete options.config;\n    }\n\n    //Public properties\n    //Allow the options object to override global defaults\n    $.extend( true, this, {\n\n        //internal state and dom identifiers\n        id:             options.id,\n        hash:           options.hash || nextHash++,\n\n        //dom nodes\n        /**\n         * The parent element of this Viewer instance, passed in when the Viewer was created.\n         * @member {Element} element\n         * @memberof OpenSeadragon.Viewer#\n         */\n        element:        null,\n        /**\n         * A &lt;div&gt; element (provided by {@link OpenSeadragon.ControlDock}), the base element of this Viewer instance.<br><br>\n         * Child element of {@link OpenSeadragon.Viewer#element}.\n         * @member {Element} container\n         * @memberof OpenSeadragon.Viewer#\n         */\n        container:      null,\n        /**\n         * A &lt;div&gt; element, the element where user-input events are handled for panning and zooming.<br><br>\n         * Child element of {@link OpenSeadragon.Viewer#container},\n         * positioned on top of {@link OpenSeadragon.Viewer#keyboardCommandArea}.<br><br>\n         * The parent of {@link OpenSeadragon.Drawer#canvas} instances.\n         * @member {Element} canvas\n         * @memberof OpenSeadragon.Viewer#\n         */\n        canvas:         null,\n\n        // Overlays list. An overlay allows to add html on top of the viewer.\n        overlays:           [],\n        // Container inside the canvas where overlays are drawn.\n        overlaysContainer:  null,\n\n        //private state properties\n        previousBody:   [],\n\n        //This was originally initialized in the constructor and so could never\n        //have anything in it.  now it can because we allow it to be specified\n        //in the options and is only empty by default if not specified. Also\n        //this array was returned from get_controls which I find confusing\n        //since this object has a controls property which is treated in other\n        //functions like clearControls.  I\'m removing the accessors.\n        customControls: [],\n\n        //These are originally not part options but declared as members\n        //in initialize.  It\'s still considered idiomatic to put them here\n        source:         null,\n        /**\n         * Handles rendering of tiles in the viewer. Created for each TileSource opened.\n         * @member {OpenSeadragon.Drawer} drawer\n         * @memberof OpenSeadragon.Viewer#\n         */\n        drawer:             null,\n        world:              null,\n        /**\n         * Handles coordinate-related functionality - zoom, pan, rotation, etc. Created for each TileSource opened.\n         * @member {OpenSeadragon.Viewport} viewport\n         * @memberof OpenSeadragon.Viewer#\n         */\n        viewport:       null,\n        /**\n         * @member {OpenSeadragon.Navigator} navigator\n         * @memberof OpenSeadragon.Viewer#\n         */\n        navigator:      null,\n\n        //A collection viewport is a separate viewport used to provide\n        //simultaneous rendering of sets of tiles\n        collectionViewport:     null,\n        collectionDrawer:       null,\n\n        //UI image resources\n        //TODO: rename navImages to uiImages\n        navImages:      null,\n\n        //interface button controls\n        buttons:        null,\n\n        //TODO: this is defunct so safely remove it\n        profiler:       null\n\n    }, $.DEFAULT_SETTINGS, options );\n\n    if ( typeof( this.hash) === "undefined" ) {\n        throw new Error("A hash must be defined, either by specifying options.id or options.hash.");\n    }\n    if ( typeof( THIS[ this.hash ] ) !== "undefined" ) {\n        // We don\'t want to throw an error here, as the user might have discarded\n        // the previous viewer with the same hash and now want to recreate it.\n        $.console.warn("Hash " + this.hash + " has already been used.");\n    }\n\n    //Private state properties\n    THIS[ this.hash ] = {\n        "fsBoundsDelta":     new $.Point( 1, 1 ),\n        "prevContainerSize": null,\n        "animating":         false,\n        "forceRedraw":       false,\n        "mouseInside":       false,\n        "group":             null,\n        // whether we should be continuously zooming\n        "zooming":           false,\n        // how much we should be continuously zooming by\n        "zoomFactor":        null,\n        "lastZoomTime":      null,\n        "fullPage":          false,\n        "onfullscreenchange": null\n    };\n\n    this._sequenceIndex = 0;\n    this._firstOpen = true;\n    this._updateRequestId = null;\n    this._loadQueue = [];\n    this.currentOverlays = [];\n\n    this._lastScrollTime = $.now(); // variable used to help normalize the scroll event speed of different devices\n\n    //Inherit some behaviors and properties\n    $.EventSource.call( this );\n\n    this.addHandler( \'open-failed\', function ( event ) {\n        var msg = $.getString( "Errors.OpenFailed", event.eventSource, event.message);\n        _this._showMessage( msg );\n    });\n\n    $.ControlDock.call( this, options );\n\n    //Deal with tile sources\n    if ( this.xmlPath  ){\n        //Deprecated option.  Now it is preferred to use the tileSources option\n        this.tileSources = [ this.xmlPath ];\n    }\n\n    this.element              = this.element || document.getElementById( this.id );\n    this.canvas               = $.makeNeutralElement( "div" );\n\n    this.canvas.className = "openseadragon-canvas";\n    (function( style ){\n        style.width    = "100%";\n        style.height   = "100%";\n        style.overflow = "hidden";\n        style.position = "absolute";\n        style.top      = "0px";\n        style.left     = "0px";\n    }(this.canvas.style));\n    $.setElementTouchActionNone( this.canvas );\n    if (options.tabIndex !== "") {\n        this.canvas.tabIndex = (options.tabIndex === undefined ? 0 : options.tabIndex);\n    }\n\n    //the container is created through applying the ControlDock constructor above\n    this.container.className = "openseadragon-container";\n    (function( style ){\n        style.width     = "100%";\n        style.height    = "100%";\n        style.position  = "relative";\n        style.overflow  = "hidden";\n        style.left      = "0px";\n        style.top       = "0px";\n        style.textAlign = "left";  // needed to protect against\n    }( this.container.style ));\n\n    this.container.insertBefore( this.canvas, this.container.firstChild );\n    this.element.appendChild( this.container );\n\n    //Used for toggling between fullscreen and default container size\n    //TODO: these can be closure private and shared across Viewer\n    //      instances.\n    this.bodyWidth      = document.body.style.width;\n    this.bodyHeight     = document.body.style.height;\n    this.bodyOverflow   = document.body.style.overflow;\n    this.docOverflow    = document.documentElement.style.overflow;\n\n    this.innerTracker = new $.MouseTracker({\n        element:                  this.canvas,\n        startDisabled:            this.mouseNavEnabled ? false : true,\n        clickTimeThreshold:       this.clickTimeThreshold,\n        clickDistThreshold:       this.clickDistThreshold,\n        dblClickTimeThreshold:    this.dblClickTimeThreshold,\n        dblClickDistThreshold:    this.dblClickDistThreshold,\n        keyDownHandler:           $.delegate( this, onCanvasKeyDown ),\n        keyHandler:               $.delegate( this, onCanvasKeyPress ),\n        clickHandler:             $.delegate( this, onCanvasClick ),\n        dblClickHandler:          $.delegate( this, onCanvasDblClick ),\n        dragHandler:              $.delegate( this, onCanvasDrag ),\n        dragEndHandler:           $.delegate( this, onCanvasDragEnd ),\n        enterHandler:             $.delegate( this, onCanvasEnter ),\n        exitHandler:              $.delegate( this, onCanvasExit ),\n        pressHandler:             $.delegate( this, onCanvasPress ),\n        releaseHandler:           $.delegate( this, onCanvasRelease ),\n        nonPrimaryPressHandler:   $.delegate( this, onCanvasNonPrimaryPress ),\n        nonPrimaryReleaseHandler: $.delegate( this, onCanvasNonPrimaryRelease ),\n        scrollHandler:            $.delegate( this, onCanvasScroll ),\n        pinchHandler:             $.delegate( this, onCanvasPinch )\n    });\n\n    this.outerTracker = new $.MouseTracker({\n        element:               this.container,\n        startDisabled:         this.mouseNavEnabled ? false : true,\n        clickTimeThreshold:    this.clickTimeThreshold,\n        clickDistThreshold:    this.clickDistThreshold,\n        dblClickTimeThreshold: this.dblClickTimeThreshold,\n        dblClickDistThreshold: this.dblClickDistThreshold,\n        enterHandler:          $.delegate( this, onContainerEnter ),\n        exitHandler:           $.delegate( this, onContainerExit )\n    });\n\n    if( this.toolbar ){\n        this.toolbar = new $.ControlDock({ element: this.toolbar });\n    }\n\n    this.bindStandardControls();\n\n    THIS[ this.hash ].prevContainerSize = _getSafeElemSize( this.container );\n\n    // Create the world\n    this.world = new $.World({\n        viewer: this\n    });\n\n    this.world.addHandler(\'add-item\', function(event) {\n        // For backwards compatibility, we maintain the source property\n        _this.source = _this.world.getItemAt(0).source;\n\n        THIS[ _this.hash ].forceRedraw = true;\n\n        if (!_this._updateRequestId) {\n            _this._updateRequestId = scheduleUpdate( _this, updateMulti );\n        }\n    });\n\n    this.world.addHandler(\'remove-item\', function(event) {\n        // For backwards compatibility, we maintain the source property\n        if (_this.world.getItemCount()) {\n            _this.source = _this.world.getItemAt(0).source;\n        } else {\n            _this.source = null;\n        }\n\n        THIS[ _this.hash ].forceRedraw = true;\n    });\n\n    this.world.addHandler(\'metrics-change\', function(event) {\n        if (_this.viewport) {\n            _this.viewport._setContentBounds(_this.world.getHomeBounds(), _this.world.getContentFactor());\n        }\n    });\n\n    this.world.addHandler(\'item-index-change\', function(event) {\n        // For backwards compatibility, we maintain the source property\n        _this.source = _this.world.getItemAt(0).source;\n    });\n\n    // Create the viewport\n    this.viewport = new $.Viewport({\n        containerSize:      THIS[ this.hash ].prevContainerSize,\n        springStiffness:    this.springStiffness,\n        animationTime:      this.animationTime,\n        minZoomImageRatio:  this.minZoomImageRatio,\n        maxZoomPixelRatio:  this.maxZoomPixelRatio,\n        visibilityRatio:    this.visibilityRatio,\n        wrapHorizontal:     this.wrapHorizontal,\n        wrapVertical:       this.wrapVertical,\n        defaultZoomLevel:   this.defaultZoomLevel,\n        minZoomLevel:       this.minZoomLevel,\n        maxZoomLevel:       this.maxZoomLevel,\n        viewer:             this,\n        degrees:            this.degrees,\n        navigatorRotate:    this.navigatorRotate,\n        homeFillsViewer:    this.homeFillsViewer,\n        margins:            this.viewportMargins\n    });\n\n    this.viewport._setContentBounds(this.world.getHomeBounds(), this.world.getContentFactor());\n\n    // Create the image loader\n    this.imageLoader = new $.ImageLoader({\n        jobLimit: this.imageLoaderLimit\n    });\n\n    // Create the tile cache\n    this.tileCache = new $.TileCache({\n        maxImageCacheCount: this.maxImageCacheCount\n    });\n\n    // Create the drawer\n    this.drawer = new $.Drawer({\n        viewer:             this,\n        viewport:           this.viewport,\n        element:            this.canvas,\n        debugGridColor:     this.debugGridColor\n    });\n\n    // Overlay container\n    this.overlaysContainer    = $.makeNeutralElement( "div" );\n    this.canvas.appendChild( this.overlaysContainer );\n\n    // Now that we have a drawer, see if it supports rotate. If not we need to remove the rotate buttons\n    if (!this.drawer.canRotate()) {\n        // Disable/remove the rotate left/right buttons since they aren\'t supported\n        if (this.rotateLeft) {\n            i = this.buttons.buttons.indexOf(this.rotateLeft);\n            this.buttons.buttons.splice(i, 1);\n            this.buttons.element.removeChild(this.rotateLeft.element);\n        }\n        if (this.rotateRight) {\n            i = this.buttons.buttons.indexOf(this.rotateRight);\n            this.buttons.buttons.splice(i, 1);\n            this.buttons.element.removeChild(this.rotateRight.element);\n        }\n    }\n\n    //Instantiate a navigator if configured\n    if ( this.showNavigator){\n        this.navigator = new $.Navigator({\n            id:                this.navigatorId,\n            position:          this.navigatorPosition,\n            sizeRatio:         this.navigatorSizeRatio,\n            maintainSizeRatio: this.navigatorMaintainSizeRatio,\n            top:               this.navigatorTop,\n            left:              this.navigatorLeft,\n            width:             this.navigatorWidth,\n            height:            this.navigatorHeight,\n            autoResize:        this.navigatorAutoResize,\n            autoFade:          this.navigatorAutoFade,\n            prefixUrl:         this.prefixUrl,\n            viewer:            this,\n            navigatorRotate:   this.navigatorRotate,\n            crossOriginPolicy: this.crossOriginPolicy\n        });\n    }\n\n    // Sequence mode\n    if (this.sequenceMode) {\n        this.bindSequenceControls();\n    }\n\n    // Open initial tilesources\n    if (this.tileSources) {\n        this.open( this.tileSources );\n    }\n\n    // Add custom controls\n    for ( i = 0; i < this.customControls.length; i++ ) {\n        this.addControl(\n            this.customControls[ i ].id,\n            {anchor: this.customControls[ i ].anchor}\n        );\n    }\n\n    // Initial fade out\n    $.requestAnimationFrame( function(){\n        beginControlsAutoHide( _this );\n    } );\n};\n\n$.extend( $.Viewer.prototype, $.EventSource.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Viewer.prototype */{\n\n\n    /**\n     * @function\n     * @return {Boolean}\n     */\n    isOpen: function () {\n        return !!this.world.getItemCount();\n    },\n\n    // deprecated\n    openDzi: function ( dzi ) {\n        $.console.error( "[Viewer.openDzi] this function is deprecated; use Viewer.open() instead." );\n        return this.open( dzi );\n    },\n\n    // deprecated\n    openTileSource: function ( tileSource ) {\n        $.console.error( "[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead." );\n        return this.open( tileSource );\n    },\n\n    /**\n     * Open tiled images into the viewer, closing any others.\n     * @function\n     * @param {Array|String|Object|Function} tileSources - This can be a TiledImage\n     * specifier, a TileSource specifier, or an array of either. A TiledImage specifier\n     * is the same as the options parameter for {@link OpenSeadragon.Viewer#addTiledImage},\n     * except for the index property; images are added in sequence.\n     * A TileSource specifier is anything you could pass as the tileSource property\n     * of the options parameter for {@link OpenSeadragon.Viewer#addTiledImage}.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:open\n     * @fires OpenSeadragon.Viewer.event:open-failed\n     */\n    open: function (tileSources) {\n        var _this = this;\n\n        this.close();\n\n        if (!tileSources) {\n            return;\n        }\n\n        if (this.sequenceMode && $.isArray(tileSources)) {\n            if (this.referenceStrip) {\n                this.referenceStrip.destroy();\n                this.referenceStrip = null;\n            }\n\n            this.tileSources = tileSources;\n            this._sequenceIndex = Math.max(0, Math.min(this.tileSources.length - 1, this.initialPage));\n            if (this.tileSources.length) {\n                this.open(this.tileSources[this._sequenceIndex]);\n\n                if ( this.showReferenceStrip ){\n                    this.referenceStrip = new $.ReferenceStrip({\n                        id:          this.referenceStripElement,\n                        position:    this.referenceStripPosition,\n                        sizeRatio:   this.referenceStripSizeRatio,\n                        scroll:      this.referenceStripScroll,\n                        height:      this.referenceStripHeight,\n                        width:       this.referenceStripWidth,\n                        tileSources: this.tileSources,\n                        prefixUrl:   this.prefixUrl,\n                        viewer:      this\n                    });\n                }\n            }\n\n            this._updateSequenceButtons( this._sequenceIndex );\n            return;\n        }\n\n        if (!$.isArray(tileSources)) {\n            tileSources = [tileSources];\n        }\n\n        if (!tileSources.length) {\n            return;\n        }\n\n        this._opening = true;\n\n        var expected = tileSources.length;\n        var successes = 0;\n        var failures = 0;\n        var failEvent;\n\n        var checkCompletion = function() {\n            if (successes + failures === expected) {\n                if (successes) {\n                    if (_this._firstOpen || !_this.preserveViewport) {\n                        _this.viewport.goHome( true );\n                        _this.viewport.update();\n                    }\n\n                    _this._firstOpen = false;\n\n                    var source = tileSources[0];\n                    if (source.tileSource) {\n                        source = source.tileSource;\n                    }\n\n                    // Global overlays\n                    if( _this.overlays && !_this.preserveOverlays ){\n                        for ( var i = 0; i < _this.overlays.length; i++ ) {\n                            _this.currentOverlays[ i ] = getOverlayObject( _this, _this.overlays[ i ] );\n                        }\n                    }\n\n                    _this._drawOverlays();\n                    _this._opening = false;\n\n                    /**\n                     * Raised when the viewer has opened and loaded one or more TileSources.\n                     *\n                     * @event open\n                     * @memberof OpenSeadragon.Viewer\n                     * @type {object}\n                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                     * @property {OpenSeadragon.TileSource} source - The tile source that was opened.\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */\n                    // TODO: what if there are multiple sources?\n                    _this.raiseEvent( \'open\', { source: source } );\n                } else {\n                    _this._opening = false;\n\n                    /**\n                     * Raised when an error occurs loading a TileSource.\n                     *\n                     * @event open-failed\n                     * @memberof OpenSeadragon.Viewer\n                     * @type {object}\n                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                     * @property {String} message - Information about what failed.\n                     * @property {String} source - The tile source that failed.\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */\n                    _this.raiseEvent( \'open-failed\', failEvent );\n                }\n            }\n        };\n\n        var doOne = function(options) {\n            if (!$.isPlainObject(options) || !options.tileSource) {\n                options = {\n                    tileSource: options\n                };\n            }\n\n            if (options.index !== undefined) {\n                $.console.error(\'[Viewer.open] setting indexes here is not supported; use addTiledImage instead\');\n                delete options.index;\n            }\n\n            if (options.collectionImmediately === undefined) {\n                options.collectionImmediately = true;\n            }\n\n            var originalSuccess = options.success;\n            options.success = function(event) {\n                successes++;\n\n                // TODO: now that options has other things besides tileSource, the overlays\n                // should probably be at the options level, not the tileSource level.\n                if (options.tileSource.overlays) {\n                    for (var i = 0; i < options.tileSource.overlays.length; i++) {\n                        _this.addOverlay(options.tileSource.overlays[i]);\n                    }\n                }\n\n                if (originalSuccess) {\n                    originalSuccess(event);\n                }\n\n                checkCompletion();\n            };\n\n            var originalError = options.error;\n            options.error = function(event) {\n                failures++;\n\n                if (!failEvent) {\n                    failEvent = event;\n                }\n\n                if (originalError) {\n                    originalError(event);\n                }\n\n                checkCompletion();\n            };\n\n            _this.addTiledImage(options);\n        };\n\n        // TileSources\n        for (var i = 0; i < tileSources.length; i++) {\n            doOne(tileSources[i]);\n        }\n\n        return this;\n    },\n\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:close\n     */\n    close: function ( ) {\n        if ( !THIS[ this.hash ] ) {\n            //this viewer has already been destroyed: returning immediately\n            return this;\n        }\n\n        this._opening = false;\n\n        if ( this.navigator ) {\n            this.navigator.close();\n        }\n\n        if( ! this.preserveOverlays) {\n            this.clearOverlays();\n            this.overlaysContainer.innerHTML = "";\n        }\n\n        THIS[ this.hash ].animating = false;\n        this.world.removeAll();\n        this.imageLoader.clear();\n\n        /**\n         * Raised when the viewer is closed (see {@link OpenSeadragon.Viewer#close}).\n         *\n         * @event close\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'close\' );\n\n        return this;\n    },\n\n\n    /**\n     * Function to destroy the viewer and clean up everything created by OpenSeadragon.\n     *\n     * Example:\n     * var viewer = OpenSeadragon({\n     *   [...]\n     * });\n     *\n     * //when you are done with the viewer:\n     * viewer.destroy();\n     * viewer = null; //important\n     *\n     * @function\n     */\n    destroy: function( ) {\n        if ( !THIS[ this.hash ] ) {\n            //this viewer has already been destroyed: returning immediately\n            return;\n        }\n\n        this.close();\n\n        this.clearOverlays();\n        this.overlaysContainer.innerHTML = "";\n\n        //TODO: implement this...\n        //this.unbindSequenceControls()\n        //this.unbindStandardControls()\n\n        if (this.referenceStrip) {\n            this.referenceStrip.destroy();\n            this.referenceStrip = null;\n        }\n\n        if ( this._updateRequestId !== null ) {\n            $.cancelAnimationFrame( this._updateRequestId );\n            this._updateRequestId = null;\n        }\n\n        if ( this.drawer ) {\n            this.drawer.destroy();\n        }\n\n        this.removeAllHandlers();\n\n        // Go through top element (passed to us) and remove all children\n        // Use removeChild to make sure it handles SVG or any non-html\n        // also it performs better - http://jsperf.com/innerhtml-vs-removechild/15\n        if (this.element){\n            while (this.element.firstChild) {\n                this.element.removeChild(this.element.firstChild);\n            }\n        }\n\n        // destroy the mouse trackers\n        if (this.innerTracker){\n            this.innerTracker.destroy();\n        }\n        if (this.outerTracker){\n            this.outerTracker.destroy();\n        }\n\n        THIS[ this.hash ] = null;\n        delete THIS[ this.hash ];\n\n        // clear all our references to dom objects\n        this.canvas = null;\n        this.container = null;\n\n        // clear our reference to the main element - they will need to pass it in again, creating a new viewer\n        this.element = null;\n    },\n\n    /**\n     * @function\n     * @return {Boolean}\n     */\n    isMouseNavEnabled: function () {\n        return this.innerTracker.isTracking();\n    },\n\n    /**\n     * @function\n     * @param {Boolean} enabled - true to enable, false to disable\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:mouse-enabled\n     */\n    setMouseNavEnabled: function( enabled ){\n        this.innerTracker.setTracking( enabled );\n        this.outerTracker.setTracking( enabled );\n        /**\n         * Raised when mouse/touch navigation is enabled or disabled (see {@link OpenSeadragon.Viewer#setMouseNavEnabled}).\n         *\n         * @event mouse-enabled\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} enabled\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'mouse-enabled\', { enabled: enabled } );\n        return this;\n    },\n\n\n    /**\n     * @function\n     * @return {Boolean}\n     */\n    areControlsEnabled: function () {\n        var enabled = this.controls.length,\n            i;\n        for( i = 0; i < this.controls.length; i++ ){\n            enabled = enabled && this.controls[ i ].isVisibile();\n        }\n        return enabled;\n    },\n\n\n    /**\n     * Shows or hides the controls (e.g. the default navigation buttons).\n     *\n     * @function\n     * @param {Boolean} true to show, false to hide.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:controls-enabled\n     */\n    setControlsEnabled: function( enabled ) {\n        if( enabled ){\n            abortControlsAutoHide( this );\n        } else {\n            beginControlsAutoHide( this );\n        }\n        /**\n         * Raised when the navigation controls are shown or hidden (see {@link OpenSeadragon.Viewer#setControlsEnabled}).\n         *\n         * @event controls-enabled\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} enabled\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'controls-enabled\', { enabled: enabled } );\n        return this;\n    },\n\n    /**\n     * @function\n     * @return {Boolean}\n     */\n    isFullPage: function () {\n        return THIS[ this.hash ].fullPage;\n    },\n\n\n    /**\n     * Toggle full page mode.\n     * @function\n     * @param {Boolean} fullPage\n     *      If true, enter full page mode.  If false, exit full page mode.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pre-full-page\n     * @fires OpenSeadragon.Viewer.event:full-page\n     */\n    setFullPage: function( fullPage ) {\n\n        var body = document.body,\n            bodyStyle = body.style,\n            docStyle = document.documentElement.style,\n            _this = this,\n            hash,\n            nodes,\n            i;\n\n        //dont bother modifying the DOM if we are already in full page mode.\n        if ( fullPage == this.isFullPage() ) {\n            return this;\n        }\n\n        var fullPageEventArgs = {\n            fullPage: fullPage,\n            preventDefaultAction: false\n        };\n        /**\n         * Raised when the viewer is about to change to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).\n         *\n         * @event pre-full-page\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullPage - True if entering full-page mode, false if exiting full-page mode.\n         * @property {Boolean} preventDefaultAction - Set to true to prevent full-page mode change. Default: false.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'pre-full-page\', fullPageEventArgs );\n        if ( fullPageEventArgs.preventDefaultAction ) {\n            return this;\n        }\n\n        if ( fullPage ) {\n\n            this.elementSize = $.getElementSize( this.element );\n            this.pageScroll = $.getPageScroll();\n\n            this.elementMargin = this.element.style.margin;\n            this.element.style.margin = "0";\n            this.elementPadding = this.element.style.padding;\n            this.element.style.padding = "0";\n\n            this.bodyMargin = bodyStyle.margin;\n            this.docMargin = docStyle.margin;\n            bodyStyle.margin = "0";\n            docStyle.margin = "0";\n\n            this.bodyPadding = bodyStyle.padding;\n            this.docPadding = docStyle.padding;\n            bodyStyle.padding = "0";\n            docStyle.padding = "0";\n\n            this.bodyWidth = bodyStyle.width;\n            this.docWidth = docStyle.width;\n            bodyStyle.width = "100%";\n            docStyle.width = "100%";\n\n            this.bodyHeight = bodyStyle.height;\n            this.docHeight = docStyle.height;\n            bodyStyle.height = "100%";\n            docStyle.height = "100%";\n\n            //when entering full screen on the ipad it wasnt sufficient to leave\n            //the body intact as only only the top half of the screen would\n            //respond to touch events on the canvas, while the bottom half treated\n            //them as touch events on the document body.  Thus we remove and store\n            //the bodies elements and replace them when we leave full screen.\n            this.previousBody = [];\n            THIS[ this.hash ].prevElementParent = this.element.parentNode;\n            THIS[ this.hash ].prevNextSibling = this.element.nextSibling;\n            THIS[ this.hash ].prevElementWidth = this.element.style.width;\n            THIS[ this.hash ].prevElementHeight = this.element.style.height;\n            nodes = body.childNodes.length;\n            for ( i = 0; i < nodes; i++ ) {\n                this.previousBody.push( body.childNodes[ 0 ] );\n                body.removeChild( body.childNodes[ 0 ] );\n            }\n\n            //If we\'ve got a toolbar, we need to enable the user to use css to\n            //preserve it in fullpage mode\n            if ( this.toolbar && this.toolbar.element ) {\n                //save a reference to the parent so we can put it back\n                //in the long run we need a better strategy\n                this.toolbar.parentNode = this.toolbar.element.parentNode;\n                this.toolbar.nextSibling = this.toolbar.element.nextSibling;\n                body.appendChild( this.toolbar.element );\n\n                //Make sure the user has some ability to style the toolbar based\n                //on the mode\n                $.addClass( this.toolbar.element, \'fullpage\' );\n            }\n\n            $.addClass( this.element, \'fullpage\' );\n            body.appendChild( this.element );\n\n            this.element.style.height = $.getWindowSize().y + \'px\';\n            this.element.style.width = $.getWindowSize().x + \'px\';\n\n            if ( this.toolbar && this.toolbar.element ) {\n                this.element.style.height = (\n                    $.getElementSize( this.element ).y - $.getElementSize( this.toolbar.element ).y\n                ) + \'px\';\n            }\n\n            THIS[ this.hash ].fullPage = true;\n\n            // mouse will be inside container now\n            $.delegate( this, onContainerEnter )( {} );\n\n        } else {\n\n            this.element.style.margin = this.elementMargin;\n            this.element.style.padding = this.elementPadding;\n\n            bodyStyle.margin = this.bodyMargin;\n            docStyle.margin = this.docMargin;\n\n            bodyStyle.padding = this.bodyPadding;\n            docStyle.padding = this.docPadding;\n\n            bodyStyle.width = this.bodyWidth;\n            docStyle.width = this.docWidth;\n\n            bodyStyle.height = this.bodyHeight;\n            docStyle.height = this.docHeight;\n\n            body.removeChild( this.element );\n            nodes = this.previousBody.length;\n            for ( i = 0; i < nodes; i++ ) {\n                body.appendChild( this.previousBody.shift() );\n            }\n\n            $.removeClass( this.element, \'fullpage\' );\n            THIS[ this.hash ].prevElementParent.insertBefore(\n                this.element,\n                THIS[ this.hash ].prevNextSibling\n            );\n\n            //If we\'ve got a toolbar, we need to enable the user to use css to\n            //reset it to its original state\n            if ( this.toolbar && this.toolbar.element ) {\n                body.removeChild( this.toolbar.element );\n\n                //Make sure the user has some ability to style the toolbar based\n                //on the mode\n                $.removeClass( this.toolbar.element, \'fullpage\' );\n\n                this.toolbar.parentNode.insertBefore(\n                    this.toolbar.element,\n                    this.toolbar.nextSibling\n                );\n                delete this.toolbar.parentNode;\n                delete this.toolbar.nextSibling;\n            }\n\n            this.element.style.width = THIS[ this.hash ].prevElementWidth;\n            this.element.style.height = THIS[ this.hash ].prevElementHeight;\n\n            // After exiting fullPage or fullScreen, it can take some time\n            // before the browser can actually set the scroll.\n            var restoreScrollCounter = 0;\n            var restoreScroll = function() {\n                $.setPageScroll( _this.pageScroll );\n                var pageScroll = $.getPageScroll();\n                restoreScrollCounter++;\n                if ( restoreScrollCounter < 10 &&\n                    pageScroll.x !== _this.pageScroll.x ||\n                    pageScroll.y !== _this.pageScroll.y ) {\n                    $.requestAnimationFrame( restoreScroll );\n                }\n            };\n            $.requestAnimationFrame( restoreScroll );\n\n            THIS[ this.hash ].fullPage = false;\n\n            // mouse will likely be outside now\n            $.delegate( this, onContainerExit )( { } );\n\n        }\n\n        if ( this.navigator && this.viewport ) {\n            this.navigator.update( this.viewport );\n        }\n\n        /**\n         * Raised when the viewer has changed to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).\n         *\n         * @event full-page\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullPage - True if changed to full-page mode, false if exited full-page mode.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'full-page\', { fullPage: fullPage } );\n\n        return this;\n    },\n\n    /**\n     * Toggle full screen mode if supported. Toggle full page mode otherwise.\n     * @function\n     * @param {Boolean} fullScreen\n     *      If true, enter full screen mode.  If false, exit full screen mode.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pre-full-screen\n     * @fires OpenSeadragon.Viewer.event:full-screen\n     */\n    setFullScreen: function( fullScreen ) {\n        var _this = this;\n\n        if ( !$.supportsFullScreen ) {\n            return this.setFullPage( fullScreen );\n        }\n\n        if ( $.isFullScreen() === fullScreen ) {\n            return this;\n        }\n\n        var fullScreeEventArgs = {\n            fullScreen: fullScreen,\n            preventDefaultAction: false\n        };\n        /**\n         * Raised when the viewer is about to change to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).\n         * Note: the pre-full-screen event is not raised when the user is exiting\n         * full-screen mode by pressing the Esc key. In that case, consider using\n         * the full-screen, pre-full-page or full-page events.\n         *\n         * @event pre-full-screen\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullScreen - True if entering full-screen mode, false if exiting full-screen mode.\n         * @property {Boolean} preventDefaultAction - Set to true to prevent full-screen mode change. Default: false.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'pre-full-screen\', fullScreeEventArgs );\n        if ( fullScreeEventArgs.preventDefaultAction ) {\n            return this;\n        }\n\n        if ( fullScreen ) {\n\n            this.setFullPage( true );\n            // If the full page mode is not actually entered, we need to prevent\n            // the full screen mode.\n            if ( !this.isFullPage() ) {\n                return this;\n            }\n\n            this.fullPageStyleWidth = this.element.style.width;\n            this.fullPageStyleHeight = this.element.style.height;\n            this.element.style.width = \'100%\';\n            this.element.style.height = \'100%\';\n\n            var onFullScreenChange = function() {\n                var isFullScreen = $.isFullScreen();\n                if ( !isFullScreen ) {\n                    $.removeEvent( document, $.fullScreenEventName, onFullScreenChange );\n                    $.removeEvent( document, $.fullScreenErrorEventName, onFullScreenChange );\n\n                    _this.setFullPage( false );\n                    if ( _this.isFullPage() ) {\n                        _this.element.style.width = _this.fullPageStyleWidth;\n                        _this.element.style.height = _this.fullPageStyleHeight;\n                    }\n                }\n                if ( _this.navigator && _this.viewport ) {\n                    _this.navigator.update( _this.viewport );\n                }\n                /**\n                 * Raised when the viewer has changed to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).\n                 *\n                 * @event full-screen\n                 * @memberof OpenSeadragon.Viewer\n                 * @type {object}\n                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                 * @property {Boolean} fullScreen - True if changed to full-screen mode, false if exited full-screen mode.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( \'full-screen\', { fullScreen: isFullScreen } );\n            };\n            $.addEvent( document, $.fullScreenEventName, onFullScreenChange );\n            $.addEvent( document, $.fullScreenErrorEventName, onFullScreenChange );\n\n            $.requestFullScreen( document.body );\n\n        } else {\n            $.exitFullScreen();\n        }\n        return this;\n    },\n\n    /**\n     * @function\n     * @return {Boolean}\n     */\n    isVisible: function () {\n        return this.container.style.visibility != "hidden";\n    },\n\n\n    /**\n     * @function\n     * @param {Boolean} visible\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:visible\n     */\n    setVisible: function( visible ){\n        this.container.style.visibility = visible ? "" : "hidden";\n        /**\n         * Raised when the viewer is shown or hidden (see {@link OpenSeadragon.Viewer#setVisible}).\n         *\n         * @event visible\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} visible\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'visible\', { visible: visible } );\n        return this;\n    },\n\n    /**\n     * Add a tiled image to the viewer.\n     * options.tileSource can be anything that {@link OpenSeadragon.Viewer#open}\n     *  supports except arrays of images.\n     * Note that you can specify options.width or options.height, but not both.\n     * The other dimension will be calculated according to the item\'s aspect ratio.\n     * If collectionMode is on (see {@link OpenSeadragon.Options}), the new image is\n     * automatically arranged with the others.\n     * @function\n     * @param {Object} options\n     * @param {String|Object|Function} options.tileSource - The TileSource specifier.\n     * A String implies a url used to determine the tileSource implementation\n     *      based on the file extension of url. JSONP is implied by *.js,\n     *      otherwise the url is retrieved as text and the resulting text is\n     *      introspected to determine if its json, xml, or text and parsed.\n     * An Object implies an inline configuration which has a single\n     *      property sufficient for being able to determine tileSource\n     *      implementation. If the object has a property which is a function\n     *      named \'getTileUrl\', it is treated as a custom TileSource.\n     * @param {Number} [options.index] The index of the item. Added on top of\n     * all other items if not specified.\n     * @param {Boolean} [options.replace=false] If true, the item at options.index will be\n     * removed and the new item is added in its place. options.tileSource will be\n     * interpreted and fetched if necessary before the old item is removed to avoid leaving\n     * a gap in the world.\n     * @param {Number} [options.x=0] The X position for the image in viewport coordinates.\n     * @param {Number} [options.y=0] The Y position for the image in viewport coordinates.\n     * @param {Number} [options.width=1] The width for the image in viewport coordinates.\n     * @param {Number} [options.height] The height for the image in viewport coordinates.\n     * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates\n     * to fit the image into. If specified, x, y, width and height get ignored.\n     * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]\n     * How to anchor the image in the bounds if options.fitBounds is set.\n     * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to\n     * (portions of the image outside of this area will not be visible). Only works on\n     * browsers that support the HTML5 canvas.\n     * @param {Number} [options.opacity] Opacity the tiled image should be drawn at by default.\n     * @param {String} [options.compositeOperation] How the image is composited onto other images.\n     * @param {Function} [options.success] A function that gets called when the image is\n     * successfully added. It\'s passed the event object which contains a single property:\n     * "item", the resulting TiledImage.\n     * @param {Function} [options.error] A function that gets called if the image is\n     * unable to be added. It\'s passed the error event object, which contains "message"\n     * and "source" properties.\n     * @param {Boolean} [options.collectionImmediately=false] If collectionMode is on,\n     * specifies whether to snap to the new arrangement immediately or to animate to it.\n     * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.Viewer.event:add-item-failed\n     */\n    addTiledImage: function( options ) {\n        $.console.assert(options, "[Viewer.addTiledImage] options is required");\n        $.console.assert(options.tileSource, "[Viewer.addTiledImage] options.tileSource is required");\n        $.console.assert(!options.replace || (options.index > -1 && options.index < this.world.getItemCount()),\n            "[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world");\n\n        var _this = this;\n\n        if (options.replace) {\n            options.replaceItem = _this.world.getItemAt(options.index);\n        }\n\n        this._hideMessage();\n\n        if (options.placeholderFillStyle === undefined) {\n            options.placeholderFillStyle = this.placeholderFillStyle;\n        }\n        if (options.opacity === undefined) {\n            options.opacity = this.opacity;\n        }\n        if (options.compositeOperation === undefined) {\n            options.compositeOperation = this.compositeOperation;\n        }\n\n        var myQueueItem = {\n            options: options\n        };\n\n        function raiseAddItemFailed( event ) {\n            for (var i = 0; i < _this._loadQueue.length; i++) {\n                if (_this._loadQueue[i] === myQueueItem) {\n                    _this._loadQueue.splice(i, 1);\n                    break;\n                }\n            }\n\n            if (_this._loadQueue.length === 0) {\n                refreshWorld(myQueueItem);\n            }\n\n             /**\n             * Raised when an error occurs while adding a item.\n             * @event add-item-failed\n             * @memberOf OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {String} message\n             * @property {String} source\n             * @property {Object} options The options passed to the addTiledImage method.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            _this.raiseEvent( \'add-item-failed\', event );\n\n            if (options.error) {\n                options.error(event);\n            }\n        }\n\n        function refreshWorld(theItem) {\n            if (_this.collectionMode) {\n                _this.world.arrange({\n                    immediately: theItem.options.collectionImmediately,\n                    rows: _this.collectionRows,\n                    columns: _this.collectionColumns,\n                    layout: _this.collectionLayout,\n                    tileSize: _this.collectionTileSize,\n                    tileMargin: _this.collectionTileMargin\n                });\n                _this.world.setAutoRefigureSizes(true);\n            }\n        }\n\n        if ($.isArray(options.tileSource)) {\n            setTimeout(function() {\n                raiseAddItemFailed({\n                    message: "[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",\n                    source: options.tileSource,\n                    options: options\n                });\n            });\n            return;\n        }\n\n        this._loadQueue.push(myQueueItem);\n\n        getTileSourceImplementation( this, options.tileSource, function( tileSource ) {\n\n            myQueueItem.tileSource = tileSource;\n\n            // add everybody at the front of the queue that\'s ready to go\n            var queueItem, tiledImage, optionsClone;\n            while (_this._loadQueue.length) {\n                queueItem = _this._loadQueue[0];\n                if (!queueItem.tileSource) {\n                    break;\n                }\n\n                _this._loadQueue.splice(0, 1);\n\n                if (queueItem.options.replace) {\n                    var newIndex = _this.world.getIndexOfItem(queueItem.options.replaceItem);\n                    if (newIndex != -1) {\n                        queueItem.options.index = newIndex;\n                    }\n                    _this.world.removeItem(queueItem.options.replaceItem);\n                }\n\n                tiledImage = new $.TiledImage({\n                    viewer: _this,\n                    source: queueItem.tileSource,\n                    viewport: _this.viewport,\n                    drawer: _this.drawer,\n                    tileCache: _this.tileCache,\n                    imageLoader: _this.imageLoader,\n                    x: queueItem.options.x,\n                    y: queueItem.options.y,\n                    width: queueItem.options.width,\n                    height: queueItem.options.height,\n                    fitBounds: queueItem.options.fitBounds,\n                    fitBoundsPlacement: queueItem.options.fitBoundsPlacement,\n                    clip: queueItem.options.clip,\n                    placeholderFillStyle: queueItem.options.placeholderFillStyle,\n                    opacity: queueItem.options.opacity,\n                    compositeOperation: queueItem.options.compositeOperation,\n                    springStiffness: _this.springStiffness,\n                    animationTime: _this.animationTime,\n                    minZoomImageRatio: _this.minZoomImageRatio,\n                    wrapHorizontal: _this.wrapHorizontal,\n                    wrapVertical: _this.wrapVertical,\n                    immediateRender: _this.immediateRender,\n                    blendTime: _this.blendTime,\n                    alwaysBlend: _this.alwaysBlend,\n                    minPixelRatio: _this.minPixelRatio,\n                    smoothTileEdgesMinZoom: _this.smoothTileEdgesMinZoom,\n                    iOSDevice: _this.iOSDevice,\n                    crossOriginPolicy: _this.crossOriginPolicy,\n                    debugMode: _this.debugMode\n                });\n\n                if (_this.collectionMode) {\n                    _this.world.setAutoRefigureSizes(false);\n                }\n                _this.world.addItem( tiledImage, {\n                    index: queueItem.options.index\n                });\n\n                if (_this._loadQueue.length === 0) {\n                    //this restores the autoRefigureSizes flag to true.\n                    refreshWorld(queueItem);\n                }\n\n                if (_this.world.getItemCount() === 1 && !_this.preserveViewport) {\n                    _this.viewport.goHome(true);\n                }\n\n                if (_this.navigator) {\n                    optionsClone = $.extend({}, queueItem.options, {\n                        replace: false, // navigator already removed the layer, nothing to replace\n                        originalTiledImage: tiledImage,\n                        tileSource: queueItem.tileSource\n                    });\n\n                    _this.navigator.addTiledImage(optionsClone);\n                }\n\n                if (queueItem.options.success) {\n                    queueItem.options.success({\n                        item: tiledImage\n                    });\n                }\n            }\n        }, function( event ) {\n            event.options = options;\n            raiseAddItemFailed(event);\n        } );\n    },\n\n    /**\n     * Add a simple image to the viewer.\n     * The options are the same as the ones in {@link OpenSeadragon.Viewer#addTiledImage}\n     * except for options.tileSource which is replaced by options.url.\n     * @function\n     * @param {Object} options - See {@link OpenSeadragon.Viewer#addTiledImage}\n     * for all the options\n     * @param {String} options.url - The URL of the image to add.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.Viewer.event:add-item-failed\n     */\n    addSimpleImage: function(options) {\n        $.console.assert(options, "[Viewer.addSimpleImage] options is required");\n        $.console.assert(options.url, "[Viewer.addSimpleImage] options.url is required");\n\n        var opts = $.extend({}, options, {\n            tileSource: {\n                type: \'image\',\n                url:  options.url\n            }\n        });\n        delete opts.url;\n        this.addTiledImage(opts);\n    },\n\n    // deprecated\n    addLayer: function( options ) {\n        var _this = this;\n\n        $.console.error( "[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead." );\n\n        var optionsClone = $.extend({}, options, {\n            success: function(event) {\n                _this.raiseEvent("add-layer", {\n                    options: options,\n                    drawer: event.item\n                });\n            },\n            error: function(event) {\n                _this.raiseEvent("add-layer-failed", event);\n            }\n        });\n\n        this.addTiledImage(optionsClone);\n        return this;\n    },\n\n    // deprecated\n    getLayerAtLevel: function( level ) {\n        $.console.error( "[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead." );\n        return this.world.getItemAt(level);\n    },\n\n    // deprecated\n    getLevelOfLayer: function( drawer ) {\n        $.console.error( "[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead." );\n        return this.world.getIndexOfItem(drawer);\n    },\n\n    // deprecated\n    getLayersCount: function() {\n        $.console.error( "[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead." );\n        return this.world.getItemCount();\n    },\n\n    // deprecated\n    setLayerLevel: function( drawer, level ) {\n        $.console.error( "[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead." );\n        return this.world.setItemIndex(drawer, level);\n    },\n\n    // deprecated\n    removeLayer: function( drawer ) {\n        $.console.error( "[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead." );\n        return this.world.removeItem(drawer);\n    },\n\n    /**\n     * Force the viewer to redraw its contents.\n     * @returns {OpenSeadragon.Viewer} Chainable.\n     */\n    forceRedraw: function() {\n        THIS[ this.hash ].forceRedraw = true;\n        return this;\n    },\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     */\n    bindSequenceControls: function(){\n\n        //////////////////////////////////////////////////////////////////////////\n        // Image Sequence Controls\n        //////////////////////////////////////////////////////////////////////////\n        var onFocusHandler          = $.delegate( this, onFocus ),\n            onBlurHandler           = $.delegate( this, onBlur ),\n            onNextHandler           = $.delegate( this, onNext ),\n            onPreviousHandler       = $.delegate( this, onPrevious ),\n            navImages               = this.navImages,\n            useGroup                = true ;\n\n        if( this.showSequenceControl ){\n\n            if( this.previousButton || this.nextButton ){\n                //if we are binding to custom buttons then layout and\n                //grouping is the responsibility of the page author\n                useGroup = false;\n            }\n\n            this.previousButton = new $.Button({\n                element:    this.previousButton ? $.getElement( this.previousButton ) : null,\n                clickTimeThreshold: this.clickTimeThreshold,\n                clickDistThreshold: this.clickDistThreshold,\n                tooltip:    $.getString( "Tooltips.PreviousPage" ),\n                srcRest:    resolveUrl( this.prefixUrl, navImages.previous.REST ),\n                srcGroup:   resolveUrl( this.prefixUrl, navImages.previous.GROUP ),\n                srcHover:   resolveUrl( this.prefixUrl, navImages.previous.HOVER ),\n                srcDown:    resolveUrl( this.prefixUrl, navImages.previous.DOWN ),\n                onRelease:  onPreviousHandler,\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n\n            this.nextButton = new $.Button({\n                element:    this.nextButton ? $.getElement( this.nextButton ) : null,\n                clickTimeThreshold: this.clickTimeThreshold,\n                clickDistThreshold: this.clickDistThreshold,\n                tooltip:    $.getString( "Tooltips.NextPage" ),\n                srcRest:    resolveUrl( this.prefixUrl, navImages.next.REST ),\n                srcGroup:   resolveUrl( this.prefixUrl, navImages.next.GROUP ),\n                srcHover:   resolveUrl( this.prefixUrl, navImages.next.HOVER ),\n                srcDown:    resolveUrl( this.prefixUrl, navImages.next.DOWN ),\n                onRelease:  onNextHandler,\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n\n            if( !this.navPrevNextWrap ){\n                this.previousButton.disable();\n            }\n\n            if (!this.tileSources || !this.tileSources.length) {\n                this.nextButton.disable();\n            }\n\n            if( useGroup ){\n                this.paging = new $.ButtonGroup({\n                    buttons: [\n                        this.previousButton,\n                        this.nextButton\n                    ],\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold\n                });\n\n                this.pagingControl = this.paging.element;\n\n                if( this.toolbar ){\n                    this.toolbar.addControl(\n                        this.pagingControl,\n                        {anchor: $.ControlAnchor.BOTTOM_RIGHT}\n                    );\n                }else{\n                    this.addControl(\n                        this.pagingControl,\n                        {anchor: this.sequenceControlAnchor || $.ControlAnchor.TOP_LEFT}\n                    );\n                }\n            }\n        }\n        return this;\n    },\n\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     */\n    bindStandardControls: function(){\n        //////////////////////////////////////////////////////////////////////////\n        // Navigation Controls\n        //////////////////////////////////////////////////////////////////////////\n        var beginZoomingInHandler   = $.delegate( this, beginZoomingIn ),\n            endZoomingHandler       = $.delegate( this, endZooming ),\n            doSingleZoomInHandler   = $.delegate( this, doSingleZoomIn ),\n            beginZoomingOutHandler  = $.delegate( this, beginZoomingOut ),\n            doSingleZoomOutHandler  = $.delegate( this, doSingleZoomOut ),\n            onHomeHandler           = $.delegate( this, onHome ),\n            onFullScreenHandler     = $.delegate( this, onFullScreen ),\n            onRotateLeftHandler     = $.delegate( this, onRotateLeft ),\n            onRotateRightHandler    = $.delegate( this, onRotateRight ),\n            onFocusHandler          = $.delegate( this, onFocus ),\n            onBlurHandler           = $.delegate( this, onBlur ),\n            navImages               = this.navImages,\n            buttons                 = [],\n            useGroup                = true ;\n\n\n        if ( this.showNavigationControl ) {\n\n            if( this.zoomInButton || this.zoomOutButton ||\n                this.homeButton || this.fullPageButton ||\n                this.rotateLeftButton || this.rotateRightButton ) {\n                //if we are binding to custom buttons then layout and\n                //grouping is the responsibility of the page author\n                useGroup = false;\n            }\n\n            if ( this.showZoomControl ) {\n                buttons.push( this.zoomInButton = new $.Button({\n                    element:    this.zoomInButton ? $.getElement( this.zoomInButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.ZoomIn" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomIn.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomIn.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomIn.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomIn.DOWN ),\n                    onPress:    beginZoomingInHandler,\n                    onRelease:  endZoomingHandler,\n                    onClick:    doSingleZoomInHandler,\n                    onEnter:    beginZoomingInHandler,\n                    onExit:     endZoomingHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n\n                buttons.push( this.zoomOutButton = new $.Button({\n                    element:    this.zoomOutButton ? $.getElement( this.zoomOutButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.ZoomOut" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomOut.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomOut.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomOut.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomOut.DOWN ),\n                    onPress:    beginZoomingOutHandler,\n                    onRelease:  endZoomingHandler,\n                    onClick:    doSingleZoomOutHandler,\n                    onEnter:    beginZoomingOutHandler,\n                    onExit:     endZoomingHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n            }\n\n            if ( this.showHomeControl ) {\n                buttons.push( this.homeButton = new $.Button({\n                    element:    this.homeButton ? $.getElement( this.homeButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.Home" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.home.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.home.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.home.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.home.DOWN ),\n                    onRelease:  onHomeHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n            }\n\n            if ( this.showFullPageControl ) {\n                buttons.push( this.fullPageButton = new $.Button({\n                    element:    this.fullPageButton ? $.getElement( this.fullPageButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.FullPage" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.fullpage.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.fullpage.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.fullpage.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.fullpage.DOWN ),\n                    onRelease:  onFullScreenHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n            }\n\n            if ( this.showRotationControl ) {\n                buttons.push( this.rotateLeftButton = new $.Button({\n                    element:    this.rotateLeftButton ? $.getElement( this.rotateLeftButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.RotateLeft" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateleft.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateleft.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateleft.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateleft.DOWN ),\n                    onRelease:  onRotateLeftHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n\n                buttons.push( this.rotateRightButton = new $.Button({\n                    element:    this.rotateRightButton ? $.getElement( this.rotateRightButton ) : null,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold,\n                    tooltip:    $.getString( "Tooltips.RotateRight" ),\n                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateright.REST ),\n                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateright.GROUP ),\n                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateright.HOVER ),\n                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateright.DOWN ),\n                    onRelease:  onRotateRightHandler,\n                    onFocus:    onFocusHandler,\n                    onBlur:     onBlurHandler\n                }));\n\n            }\n\n            if ( useGroup ) {\n                this.buttons = new $.ButtonGroup({\n                    buttons:            buttons,\n                    clickTimeThreshold: this.clickTimeThreshold,\n                    clickDistThreshold: this.clickDistThreshold\n                });\n\n                this.navControl  = this.buttons.element;\n                this.addHandler( \'open\', $.delegate( this, lightUp ) );\n\n                if( this.toolbar ){\n                    this.toolbar.addControl(\n                        this.navControl,\n                        {anchor: $.ControlAnchor.TOP_LEFT}\n                    );\n                } else {\n                    this.addControl(\n                        this.navControl,\n                        {anchor: this.navigationControlAnchor || $.ControlAnchor.TOP_LEFT}\n                    );\n                }\n            }\n\n        }\n        return this;\n    },\n\n    /**\n     * Gets the active page of a sequence\n     * @function\n     * @return {Number}\n     */\n    currentPage: function() {\n        return this._sequenceIndex;\n    },\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:page\n     */\n    goToPage: function( page ){\n        if( this.tileSources && page >= 0 && page < this.tileSources.length ){\n            /**\n             * Raised when the page is changed on a viewer configured with multiple image sources (see {@link OpenSeadragon.Viewer#goToPage}).\n             *\n             * @event page\n             * @memberof OpenSeadragon.Viewer\n             * @type {Object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {Number} page - The page index.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.raiseEvent( \'page\', { page: page } );\n\n            this._sequenceIndex = page;\n\n            this._updateSequenceButtons( page );\n\n            this.open( this.tileSources[ page ] );\n\n            if( this.referenceStrip ){\n                this.referenceStrip.setFocus( page );\n            }\n        }\n\n        return this;\n    },\n\n   /**\n     * Adds an html element as an overlay to the current viewport.  Useful for\n     * highlighting words or areas of interest on an image or other zoomable\n     * interface. The overlays added via this method are removed when the viewport\n     * is closed which include when changing page.\n     * @method\n     * @param {Element|String|Object} element - A reference to an element or an id for\n     *      the element which will be overlayed. Or an Object specifying the configuration for the overlay.\n     *      If using an object, see {@link OpenSeadragon.Overlay} for a list of\n     *      all available options.\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or\n     *      rectangle which will be overlayed. This is a viewport relative location.\n     * @param {OpenSeadragon.Placement} placement - The position of the\n     *      viewport which the location coordinates will be treated as relative\n     *      to.\n     * @param {function} onDraw - If supplied the callback is called when the overlay\n     *      needs to be drawn. It it the responsibility of the callback to do any drawing/positioning.\n     *      It is passed position, size and element.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:add-overlay\n     */\n    addOverlay: function( element, location, placement, onDraw ) {\n        var options;\n        if( $.isPlainObject( element ) ){\n            options = element;\n        } else {\n            options = {\n                element: element,\n                location: location,\n                placement: placement,\n                onDraw: onDraw\n            };\n        }\n\n        element = $.getElement( options.element );\n\n        if ( getOverlayIndex( this.currentOverlays, element ) >= 0 ) {\n            // they\'re trying to add a duplicate overlay\n            return this;\n        }\n\n        var overlay = getOverlayObject( this, options);\n        this.currentOverlays.push(overlay);\n        overlay.drawHTML( this.overlaysContainer, this.viewport );\n\n        /**\n         * Raised when an overlay is added to the viewer (see {@link OpenSeadragon.Viewer#addOverlay}).\n         *\n         * @event add-overlay\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Element} element - The overlay element.\n         * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @property {OpenSeadragon.Placement} placement\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'add-overlay\', {\n            element: element,\n            location: options.location,\n            placement: options.placement\n        });\n        return this;\n    },\n\n    /**\n     * Updates the overlay represented by the reference to the element or\n     * element id moving it to the new location, relative to the new placement.\n     * @method\n     * @param {Element|String} element - A reference to an element or an id for\n     *      the element which is overlayed.\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or\n     *      rectangle which will be overlayed. This is a viewport relative location.\n     * @param {OpenSeadragon.Placement} placement - The position of the\n     *      viewport which the location coordinates will be treated as relative\n     *      to.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:update-overlay\n     */\n    updateOverlay: function( element, location, placement ) {\n        var i;\n\n        element = $.getElement( element );\n        i = getOverlayIndex( this.currentOverlays, element );\n\n        if ( i >= 0 ) {\n            this.currentOverlays[ i ].update( location, placement );\n            THIS[ this.hash ].forceRedraw = true;\n            /**\n             * Raised when an overlay\'s location or placement changes\n             * (see {@link OpenSeadragon.Viewer#updateOverlay}).\n             *\n             * @event update-overlay\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the\n             * Viewer which raised the event.\n             * @property {Element} element\n             * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location\n             * @property {OpenSeadragon.Placement} placement\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.raiseEvent( \'update-overlay\', {\n                element: element,\n                location: location,\n                placement: placement\n            });\n        }\n        return this;\n    },\n\n    /**\n     * Removes an overlay identified by the reference element or element id\n     * and schedules an update.\n     * @method\n     * @param {Element|String} element - A reference to the element or an\n     *      element id which represent the ovelay content to be removed.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:remove-overlay\n     */\n    removeOverlay: function( element ) {\n        var i;\n\n        element = $.getElement( element );\n        i = getOverlayIndex( this.currentOverlays, element );\n\n        if ( i >= 0 ) {\n            this.currentOverlays[ i ].destroy();\n            this.currentOverlays.splice( i, 1 );\n            THIS[ this.hash ].forceRedraw = true;\n            /**\n             * Raised when an overlay is removed from the viewer\n             * (see {@link OpenSeadragon.Viewer#removeOverlay}).\n             *\n             * @event remove-overlay\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the\n             * Viewer which raised the event.\n             * @property {Element} element - The overlay element.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.raiseEvent( \'remove-overlay\', {\n                element: element\n            });\n        }\n        return this;\n    },\n\n    /**\n     * Removes all currently configured Overlays from this Viewer and schedules\n     * an update.\n     * @method\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:clear-overlay\n     */\n    clearOverlays: function() {\n        while ( this.currentOverlays.length > 0 ) {\n            this.currentOverlays.pop().destroy();\n        }\n        THIS[ this.hash ].forceRedraw = true;\n        /**\n         * Raised when all overlays are removed from the viewer (see {@link OpenSeadragon.Drawer#clearOverlays}).\n         *\n         * @event clear-overlay\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'clear-overlay\', {} );\n        return this;\n    },\n\n     /**\n     * Finds an overlay identified by the reference element or element id\n     * and returns it as an object, return null if not found.\n     * @method\n     * @param {Element|String} element - A reference to the element or an\n     *      element id which represents the overlay content.\n     * @return {OpenSeadragon.Overlay} the matching overlay or null if none found.\n     */\n    getOverlayById: function( element ) {\n        var i;\n\n        element = $.getElement( element );\n        i = getOverlayIndex( this.currentOverlays, element );\n\n        if (i>=0) {\n            return this.currentOverlays[i];\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Updates the sequence buttons.\n     * @function OpenSeadragon.Viewer.prototype._updateSequenceButtons\n     * @private\n     * @param {Number} Sequence Value\n     */\n    _updateSequenceButtons: function( page ) {\n\n            if ( this.nextButton ) {\n                if(!this.tileSources || this.tileSources.length - 1 === page) {\n                    //Disable next button\n                    if ( !this.navPrevNextWrap ) {\n                        this.nextButton.disable();\n                    }\n                } else {\n                    this.nextButton.enable();\n                }\n            }\n            if ( this.previousButton ) {\n                if ( page > 0 ) {\n                    //Enable previous button\n                    this.previousButton.enable();\n                } else {\n                    if ( !this.navPrevNextWrap ) {\n                        this.previousButton.disable();\n                    }\n                }\n            }\n      },\n\n    /**\n     * Display a message in the viewport\n     * @function OpenSeadragon.Viewer.prototype._showMessage\n     * @private\n     * @param {String} text message\n     */\n    _showMessage: function ( message ) {\n        this._hideMessage();\n\n        var div = $.makeNeutralElement( "div" );\n        div.appendChild( document.createTextNode( message ) );\n\n        this.messageDiv = $.makeCenteredNode( div );\n\n        $.addClass(this.messageDiv, "openseadragon-message");\n\n        this.container.appendChild( this.messageDiv );\n    },\n\n    /**\n     * Hide any currently displayed viewport message\n     * @function OpenSeadragon.Viewer.prototype._hideMessage\n     * @private\n     */\n    _hideMessage: function () {\n        var div = this.messageDiv;\n        if (div) {\n            div.parentNode.removeChild(div);\n            delete this.messageDiv;\n        }\n    },\n\n    /**\n     * Gets this viewer\'s gesture settings for the given pointer device type.\n     * @method\n     * @param {String} type - The pointer device type to get the gesture settings for ("mouse", "touch", "pen", etc.).\n     * @return {OpenSeadragon.GestureSettings}\n     */\n    gestureSettingsByDeviceType: function ( type ) {\n        switch ( type ) {\n            case \'mouse\':\n                return this.gestureSettingsMouse;\n            case \'touch\':\n                return this.gestureSettingsTouch;\n            case \'pen\':\n                return this.gestureSettingsPen;\n            default:\n                return this.gestureSettingsUnknown;\n        }\n    },\n\n    // private\n    _drawOverlays: function() {\n        var i,\n            length = this.currentOverlays.length;\n        for ( i = 0; i < length; i++ ) {\n            this.currentOverlays[ i ].drawHTML( this.overlaysContainer, this.viewport );\n        }\n    },\n\n    /**\n     * Cancel the "in flight" images.\n     */\n    _cancelPendingImages: function() {\n        this._loadQueue = [];\n    }\n});\n\n\n/**\n * _getSafeElemSize is like getElementSize(), but refuses to return 0 for x or y,\n * which was causing some calling operations to return NaN.\n * @returns {Point}\n * @private\n */\nfunction _getSafeElemSize (oElement) {\n    oElement = $.getElement( oElement );\n\n    return new $.Point(\n        (oElement.clientWidth === 0 ? 1 : oElement.clientWidth),\n        (oElement.clientHeight === 0 ? 1 : oElement.clientHeight)\n    );\n}\n\n/**\n * @function\n * @private\n */\nfunction getTileSourceImplementation( viewer, tileSource, successCallback,\n    failCallback ) {\n    var _this = viewer;\n\n    //allow plain xml strings or json strings to be parsed here\n    if ( $.type( tileSource ) == \'string\' ) {\n        if ( tileSource.match( /\\s*<.*/ ) ) {\n            tileSource = $.parseXml( tileSource );\n        } else if ( tileSource.match( /\\s*[\\{\\[].*/ ) ) {\n            tileSource = $.parseJSON(tileSource);\n        }\n    }\n\n    function waitUntilReady(tileSource, originalTileSource) {\n        if (tileSource.ready) {\n            successCallback(tileSource);\n        } else {\n            tileSource.addHandler(\'ready\', function () {\n                successCallback(tileSource);\n            });\n            tileSource.addHandler(\'open-failed\', function (event) {\n                failCallback({\n                    message: event.message,\n                    source: originalTileSource\n                });\n            });\n        }\n    }\n\n    setTimeout( function() {\n        if ( $.type( tileSource ) == \'string\' ) {\n            //If its still a string it means it must be a url at this point\n            tileSource = new $.TileSource({\n                url: tileSource,\n                crossOriginPolicy: viewer.crossOriginPolicy,\n                ajaxWithCredentials: viewer.ajaxWithCredentials,\n                useCanvas: viewer.useCanvas,\n                success: function( event ) {\n                    successCallback( event.tileSource );\n                }\n            });\n            tileSource.addHandler( \'open-failed\', function( event ) {\n                failCallback( event );\n            } );\n\n        } else if ($.isPlainObject(tileSource) || tileSource.nodeType) {\n            if (!tileSource.crossOriginPolicy && viewer.crossOriginPolicy) {\n                tileSource.crossOriginPolicy = viewer.crossOriginPolicy;\n            }\n            if (tileSource.ajaxWithCredentials === undefined) {\n                tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials;\n            }\n            if (tileSource.useCanvas === undefined) {\n                tileSource.useCanvas = viewer.useCanvas;\n            }\n\n            if ( $.isFunction( tileSource.getTileUrl ) ) {\n                //Custom tile source\n                var customTileSource = new $.TileSource( tileSource );\n                customTileSource.getTileUrl = tileSource.getTileUrl;\n                successCallback( customTileSource );\n            } else {\n                //inline configuration\n                var $TileSource = $.TileSource.determineType( _this, tileSource );\n                if ( !$TileSource ) {\n                    failCallback( {\n                        message: "Unable to load TileSource",\n                        source: tileSource\n                    });\n                    return;\n                }\n                var options = $TileSource.prototype.configure.apply( _this, [ tileSource ] );\n                waitUntilReady(new $TileSource(options), tileSource);\n            }\n        } else {\n            //can assume it\'s already a tile source implementation\n            waitUntilReady(tileSource, tileSource);\n        }\n    });\n}\n\nfunction getOverlayObject( viewer, overlay ) {\n    if ( overlay instanceof $.Overlay ) {\n        return overlay;\n    }\n\n    var element = null;\n    if ( overlay.element ) {\n        element = $.getElement( overlay.element );\n    } else {\n        var id = overlay.id ?\n            overlay.id :\n            "openseadragon-overlay-" + Math.floor( Math.random() * 10000000 );\n\n        element = $.getElement( overlay.id );\n        if ( !element ) {\n            element         = document.createElement( "a" );\n            element.href    = "#/overlay/" + id;\n        }\n        element.id = id;\n        $.addClass( element, overlay.className ?\n            overlay.className :\n            "openseadragon-overlay"\n        );\n    }\n\n    var location = overlay.location;\n    var width = overlay.width;\n    var height = overlay.height;\n    if (!location) {\n        var x = overlay.x;\n        var y = overlay.y;\n        if (overlay.px !== undefined) {\n            var rect = viewer.viewport.imageToViewportRectangle(new $.Rect(\n                overlay.px,\n                overlay.py,\n                width || 0,\n                height || 0));\n            x = rect.x;\n            y = rect.y;\n            width = width !== undefined ? rect.width : undefined;\n            height = height !== undefined ? rect.height : undefined;\n        }\n        location = new $.Point(x, y);\n    }\n\n    var placement = overlay.placement;\n    if (placement && $.type(placement) === "string") {\n        placement = $.Placement[overlay.placement.toUpperCase()];\n    }\n\n    return new $.Overlay({\n        element: element,\n        location: location,\n        placement: placement,\n        onDraw: overlay.onDraw,\n        checkResize: overlay.checkResize,\n        width: width,\n        height: height,\n        rotationMode: overlay.rotationMode\n    });\n}\n\n/**\n * @private\n * @inner\n * Determines the index of the given overlay in the given overlays array.\n */\nfunction getOverlayIndex( overlays, element ) {\n    var i;\n    for ( i = overlays.length - 1; i >= 0; i-- ) {\n        if ( overlays[ i ].element === element ) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Schedulers provide the general engine for animation\n///////////////////////////////////////////////////////////////////////////////\nfunction scheduleUpdate( viewer, updateFunc ){\n    return $.requestAnimationFrame( function(){\n        updateFunc( viewer );\n    } );\n}\n\n\n//provides a sequence in the fade animation\nfunction scheduleControlsFade( viewer ) {\n    $.requestAnimationFrame( function(){\n        updateControlsFade( viewer );\n    });\n}\n\n\n//initiates an animation to hide the controls\nfunction beginControlsAutoHide( viewer ) {\n    if ( !viewer.autoHideControls ) {\n        return;\n    }\n    viewer.controlsShouldFade = true;\n    viewer.controlsFadeBeginTime =\n        $.now() +\n        viewer.controlsFadeDelay;\n\n    window.setTimeout( function(){\n        scheduleControlsFade( viewer );\n    }, viewer.controlsFadeDelay );\n}\n\n\n//determines if fade animation is done or continues the animation\nfunction updateControlsFade( viewer ) {\n    var currentTime,\n        deltaTime,\n        opacity,\n        i;\n    if ( viewer.controlsShouldFade ) {\n        currentTime = $.now();\n        deltaTime = currentTime - viewer.controlsFadeBeginTime;\n        opacity = 1.0 - deltaTime / viewer.controlsFadeLength;\n\n        opacity = Math.min( 1.0, opacity );\n        opacity = Math.max( 0.0, opacity );\n\n        for ( i = viewer.controls.length - 1; i >= 0; i--) {\n            if (viewer.controls[ i ].autoFade) {\n                viewer.controls[ i ].setOpacity( opacity );\n            }\n        }\n\n        if ( opacity > 0 ) {\n            // fade again\n            scheduleControlsFade( viewer );\n        }\n    }\n}\n\n\n//stop the fade animation on the controls and show them\nfunction abortControlsAutoHide( viewer ) {\n    var i;\n    viewer.controlsShouldFade = false;\n    for ( i = viewer.controls.length - 1; i >= 0; i-- ) {\n        viewer.controls[ i ].setOpacity( 1.0 );\n    }\n}\n\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Default view event handlers.\n///////////////////////////////////////////////////////////////////////////////\nfunction onFocus(){\n    abortControlsAutoHide( this );\n}\n\nfunction onBlur(){\n    beginControlsAutoHide( this );\n\n}\n\nfunction onCanvasKeyDown( event ) {\n    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {\n        switch( event.keyCode ){\n            case 38://up arrow\n                if ( event.shift ) {\n                    this.viewport.zoomBy(1.1);\n                } else {\n                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));\n                }\n                this.viewport.applyConstraints();\n                return false;\n            case 40://down arrow\n                if ( event.shift ) {\n                    this.viewport.zoomBy(0.9);\n                } else {\n                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));\n                }\n                this.viewport.applyConstraints();\n                return false;\n            case 37://left arrow\n                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));\n                this.viewport.applyConstraints();\n                return false;\n            case 39://right arrow\n                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));\n                this.viewport.applyConstraints();\n                return false;\n            default:\n                //console.log( \'navigator keycode %s\', event.keyCode );\n                return true;\n        }\n    } else {\n        return true;\n    }\n}\n\nfunction onCanvasKeyPress( event ) {\n    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {\n        switch( event.keyCode ){\n            case 43://=|+\n            case 61://=|+\n                this.viewport.zoomBy(1.1);\n                this.viewport.applyConstraints();\n                return false;\n            case 45://-|_\n                this.viewport.zoomBy(0.9);\n                this.viewport.applyConstraints();\n                return false;\n            case 48://0|)\n                this.viewport.goHome();\n                this.viewport.applyConstraints();\n                return false;\n            case 119://w\n            case 87://W\n                if ( event.shift ) {\n                    this.viewport.zoomBy(1.1);\n                } else {\n                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));\n                }\n                this.viewport.applyConstraints();\n                return false;\n            case 115://s\n            case 83://S\n                if ( event.shift ) {\n                    this.viewport.zoomBy(0.9);\n                } else {\n                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));\n                }\n                this.viewport.applyConstraints();\n                return false;\n            case 97://a\n                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));\n                this.viewport.applyConstraints();\n                return false;\n            case 100://d\n                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));\n                this.viewport.applyConstraints();\n                return false;\n            default:\n                //console.log( \'navigator keycode %s\', event.keyCode );\n                return true;\n        }\n    } else {\n        return true;\n    }\n}\n\nfunction onCanvasClick( event ) {\n    var gestureSettings;\n\n    var haveKeyboardFocus = document.activeElement == this.canvas;\n\n    // If we don\'t have keyboard focus, request it.\n    if ( !haveKeyboardFocus ) {\n        this.canvas.focus();\n    }\n\n    if ( !event.preventDefaultAction && this.viewport && event.quick ) {\n        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n        if ( gestureSettings.clickToZoom ) {\n            this.viewport.zoomBy(\n                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,\n                this.viewport.pointFromPixel( event.position, true )\n            );\n            this.viewport.applyConstraints();\n        }\n    }\n    /**\n     * Raised when a mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-click\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-click\', {\n        tracker: event.eventSource,\n        position: event.position,\n        quick: event.quick,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasDblClick( event ) {\n    var gestureSettings;\n\n    if ( !event.preventDefaultAction && this.viewport ) {\n        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n        if ( gestureSettings.dblClickToZoom ) {\n            this.viewport.zoomBy(\n                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,\n                this.viewport.pointFromPixel( event.position, true )\n            );\n            this.viewport.applyConstraints();\n        }\n    }\n    /**\n     * Raised when a double mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-double-click\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-double-click\', {\n        tracker: event.eventSource,\n        position: event.position,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasDrag( event ) {\n    var gestureSettings;\n\n    if ( !event.preventDefaultAction && this.viewport ) {\n        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n        if( !this.panHorizontal ){\n            event.delta.x = 0;\n        }\n        if( !this.panVertical ){\n            event.delta.y = 0;\n        }\n        this.viewport.panBy( this.viewport.deltaPointsFromPixels( event.delta.negate() ), gestureSettings.flickEnabled );\n        if( this.constrainDuringPan ){\n            this.viewport.applyConstraints();\n        }\n    }\n    /**\n     * Raised when a mouse or touch drag operation occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-drag\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.\n     * @property {Number} speed - Current computed speed, in pixels per second.\n     * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-drag\', {\n        tracker: event.eventSource,\n        position: event.position,\n        delta: event.delta,\n        speed: event.speed,\n        direction: event.direction,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasDragEnd( event ) {\n    if (!event.preventDefaultAction && this.viewport) {\n        var gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);\n        if (gestureSettings.flickEnabled &&\n            event.speed >= gestureSettings.flickMinSpeed) {\n            var amplitudeX = 0;\n            if (this.panHorizontal) {\n                amplitudeX = gestureSettings.flickMomentum * event.speed *\n                    Math.cos(event.direction);\n            }\n            var amplitudeY = 0;\n            if (this.panVertical) {\n                amplitudeY = gestureSettings.flickMomentum * event.speed *\n                    Math.sin(event.direction);\n            }\n            var center = this.viewport.pixelFromPoint(\n                this.viewport.getCenter(true));\n            var target = this.viewport.pointFromPixel(\n                new $.Point(center.x - amplitudeX, center.y - amplitudeY));\n            this.viewport.panTo(target, false);\n        }\n        this.viewport.applyConstraints();\n    }\n    /**\n     * Raised when a mouse or touch drag operation ends on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-drag-end\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} speed - Speed at the end of a drag gesture, in pixels per second.\n     * @property {Number} direction - Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent(\'canvas-drag-end\', {\n        tracker: event.eventSource,\n        position: event.position,\n        speed: event.speed,\n        direction: event.direction,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasEnter( event ) {\n    /**\n     * Raised when a pointer enters the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-enter\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-enter\', {\n        tracker: event.eventSource,\n        pointerType: event.pointerType,\n        position: event.position,\n        buttons: event.buttons,\n        pointers: event.pointers,\n        insideElementPressed: event.insideElementPressed,\n        buttonDownAny: event.buttonDownAny,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasExit( event ) {\n    /**\n     * Raised when a pointer leaves the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-exit\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-exit\', {\n        tracker: event.eventSource,\n        pointerType: event.pointerType,\n        position: event.position,\n        buttons: event.buttons,\n        pointers: event.pointers,\n        insideElementPressed: event.insideElementPressed,\n        buttonDownAny: event.buttonDownAny,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasPress( event ) {\n    /**\n     * Raised when the primary mouse button is pressed or touch starts on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-press\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-press\', {\n        tracker: event.eventSource,\n        pointerType: event.pointerType,\n        position: event.position,\n        insideElementPressed: event.insideElementPressed,\n        insideElementReleased: event.insideElementReleased,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasRelease( event ) {\n    /**\n     * Raised when the primary mouse button is released or touch ends on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-release\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-release\', {\n        tracker: event.eventSource,\n        pointerType: event.pointerType,\n        position: event.position,\n        insideElementPressed: event.insideElementPressed,\n        insideElementReleased: event.insideElementReleased,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasNonPrimaryPress( event ) {\n    /**\n     * Raised when any non-primary pointer button is pressed on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-nonprimary-press\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {Number} button - Button which caused the event.\n     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     * @property {Number} buttons - Current buttons pressed.\n     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-nonprimary-press\', {\n        tracker: event.eventSource,\n        position: event.position,\n        pointerType: event.pointerType,\n        button: event.button,\n        buttons: event.buttons,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasNonPrimaryRelease( event ) {\n    /**\n     * Raised when any non-primary pointer button is released on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-nonprimary-release\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {String} pointerType - "mouse", "touch", "pen", etc.\n     * @property {Number} button - Button which caused the event.\n     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     * @property {Number} buttons - Current buttons pressed.\n     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'canvas-nonprimary-release\', {\n        tracker: event.eventSource,\n        position: event.position,\n        pointerType: event.pointerType,\n        button: event.button,\n        buttons: event.buttons,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onCanvasPinch( event ) {\n    var gestureSettings,\n        centerPt,\n        lastCenterPt,\n        panByPt;\n\n    if ( !event.preventDefaultAction && this.viewport ) {\n        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n        if ( gestureSettings.pinchToZoom ) {\n            centerPt = this.viewport.pointFromPixel( event.center, true );\n            lastCenterPt = this.viewport.pointFromPixel( event.lastCenter, true );\n            panByPt = lastCenterPt.minus( centerPt );\n            if( !this.panHorizontal ) {\n                panByPt.x = 0;\n            }\n            if( !this.panVertical ) {\n                panByPt.y = 0;\n            }\n            this.viewport.zoomBy( event.distance / event.lastDistance, centerPt, true );\n            this.viewport.panBy( panByPt, true );\n            this.viewport.applyConstraints();\n        }\n        if ( gestureSettings.pinchRotate ) {\n            // Pinch rotate\n            var angle1 = Math.atan2(event.gesturePoints[0].currentPos.y - event.gesturePoints[1].currentPos.y,\n                event.gesturePoints[0].currentPos.x - event.gesturePoints[1].currentPos.x);\n            var angle2 = Math.atan2(event.gesturePoints[0].lastPos.y - event.gesturePoints[1].lastPos.y,\n                event.gesturePoints[0].lastPos.x - event.gesturePoints[1].lastPos.x);\n            this.viewport.setRotation(this.viewport.getRotation() + ((angle1 - angle2) * (180 / Math.PI)));\n        }\n    }\n    /**\n     * Raised when a pinch event occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-pinch\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gesturePoints - Gesture points associated with the gesture. Velocity data can be found here.\n     * @property {OpenSeadragon.Point} lastCenter - The previous center point of the two pinch contact points relative to the tracked element.\n     * @property {OpenSeadragon.Point} center - The center point of the two pinch contact points relative to the tracked element.\n     * @property {Number} lastDistance - The previous distance between the two pinch contact points in CSS pixels.\n     * @property {Number} distance - The distance between the two pinch contact points in CSS pixels.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent(\'canvas-pinch\', {\n        tracker: event.eventSource,\n        gesturePoints: event.gesturePoints,\n        lastCenter: event.lastCenter,\n        center: event.center,\n        lastDistance: event.lastDistance,\n        distance: event.distance,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n    //cancels event\n    return false;\n}\n\nfunction onCanvasScroll( event ) {\n    var gestureSettings,\n        factor,\n        thisScrollTime,\n        deltaScrollTime;\n\n    /* Certain scroll devices fire the scroll event way too fast so we are injecting a simple adjustment to keep things\n     * partially normalized. If we have already fired an event within the last \'minScrollDelta\' milliseconds we skip\n     * this one and wait for the next event. */\n    thisScrollTime = $.now();\n    deltaScrollTime = thisScrollTime - this._lastScrollTime;\n    if (deltaScrollTime > this.minScrollDeltaTime) {\n        this._lastScrollTime = thisScrollTime;\n\n        if ( !event.preventDefaultAction && this.viewport ) {\n            gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n            if ( gestureSettings.scrollToZoom ) {\n                factor = Math.pow( this.zoomPerScroll, event.scroll );\n                this.viewport.zoomBy(\n                    factor,\n                    this.viewport.pointFromPixel( event.position, true )\n                );\n                this.viewport.applyConstraints();\n            }\n        }\n        /**\n         * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#canvas} element (mouse wheel).\n         *\n         * @event canvas-scroll\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n         * @property {Number} scroll - The scroll delta for the event.\n         * @property {Boolean} shift - True if the shift key was pressed during this event.\n         * @property {Object} originalEvent - The original DOM event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'canvas-scroll\', {\n            tracker: event.eventSource,\n            position: event.position,\n            scroll: event.scroll,\n            shift: event.shift,\n            originalEvent: event.originalEvent\n        });\n        if (gestureSettings && gestureSettings.scrollToZoom) {\n            //cancels event\n            return false;\n        }\n    }\n    else {\n        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );\n        if (gestureSettings && gestureSettings.scrollToZoom) {\n            return false;   // We are swallowing this event\n        }\n    }\n}\n\nfunction onContainerEnter( event ) {\n    THIS[ this.hash ].mouseInside = true;\n    abortControlsAutoHide( this );\n    /**\n     * Raised when the cursor enters the {@link OpenSeadragon.Viewer#container} element.\n     *\n     * @event container-enter\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'container-enter\', {\n        tracker: event.eventSource,\n        position: event.position,\n        buttons: event.buttons,\n        pointers: event.pointers,\n        insideElementPressed: event.insideElementPressed,\n        buttonDownAny: event.buttonDownAny,\n        originalEvent: event.originalEvent\n    });\n}\n\nfunction onContainerExit( event ) {\n    if ( event.pointers < 1 ) {\n        THIS[ this.hash ].mouseInside = false;\n        if ( !THIS[ this.hash ].animating ) {\n            beginControlsAutoHide( this );\n        }\n    }\n    /**\n     * Raised when the cursor leaves the {@link OpenSeadragon.Viewer#container} element.\n     *\n     * @event container-exit\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.raiseEvent( \'container-exit\', {\n        tracker: event.eventSource,\n        position: event.position,\n        buttons: event.buttons,\n        pointers: event.pointers,\n        insideElementPressed: event.insideElementPressed,\n        buttonDownAny: event.buttonDownAny,\n        originalEvent: event.originalEvent\n    });\n}\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Page update routines ( aka Views - for future reference )\n///////////////////////////////////////////////////////////////////////////////\n\nfunction updateMulti( viewer ) {\n    updateOnce( viewer );\n\n    // Request the next frame, unless we\'ve been closed\n    if ( viewer.isOpen() ) {\n        viewer._updateRequestId = scheduleUpdate( viewer, updateMulti );\n    } else {\n        viewer._updateRequestId = false;\n    }\n}\n\nfunction updateOnce( viewer ) {\n\n    //viewer.profiler.beginUpdate();\n\n    if (viewer._opening) {\n        return;\n    }\n\n    if (viewer.autoResize) {\n        var containerSize = _getSafeElemSize(viewer.container);\n        var prevContainerSize = THIS[viewer.hash].prevContainerSize;\n        if (!containerSize.equals(prevContainerSize)) {\n            var viewport = viewer.viewport;\n            if (viewer.preserveImageSizeOnResize) {\n                var resizeRatio = prevContainerSize.x / containerSize.x;\n                var zoom = viewport.getZoom() * resizeRatio;\n                var center = viewport.getCenter();\n                viewport.resize(containerSize, false);\n                viewport.zoomTo(zoom, null, true);\n                viewport.panTo(center, true);\n            } else {\n                // maintain image position\n                var oldBounds = viewport.getBounds();\n                viewport.resize(containerSize, true);\n                viewport.fitBoundsWithConstraints(oldBounds, true);\n            }\n            THIS[viewer.hash].prevContainerSize = containerSize;\n            THIS[viewer.hash].forceRedraw = true;\n        }\n    }\n\n    var viewportChange = viewer.viewport.update();\n    var animated = viewer.world.update() || viewportChange;\n\n    if (viewportChange) {\n        /**\n         * Raised when any spring animation update occurs (zoom, pan, etc.),\n         * before the viewer has drawn the new location.\n         *\n         * @event viewport-change\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        viewer.raiseEvent(\'viewport-change\');\n    }\n\n    if( viewer.referenceStrip ){\n        animated = viewer.referenceStrip.update( viewer.viewport ) || animated;\n    }\n\n    if ( !THIS[ viewer.hash ].animating && animated ) {\n        /**\n         * Raised when any spring animation starts (zoom, pan, etc.).\n         *\n         * @event animation-start\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        viewer.raiseEvent( "animation-start" );\n        abortControlsAutoHide( viewer );\n    }\n\n    if ( animated || THIS[ viewer.hash ].forceRedraw || viewer.world.needsDraw() ) {\n        drawWorld( viewer );\n        viewer._drawOverlays();\n        if( viewer.navigator ){\n            viewer.navigator.update( viewer.viewport );\n        }\n\n        THIS[ viewer.hash ].forceRedraw = false;\n\n        if (animated) {\n            /**\n             * Raised when any spring animation update occurs (zoom, pan, etc.),\n             * after the viewer has drawn the new location.\n             *\n             * @event animation\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            viewer.raiseEvent( "animation" );\n        }\n    }\n\n    if ( THIS[ viewer.hash ].animating && !animated ) {\n        /**\n         * Raised when any spring animation ends (zoom, pan, etc.).\n         *\n         * @event animation-finish\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        viewer.raiseEvent( "animation-finish" );\n\n        if ( !THIS[ viewer.hash ].mouseInside ) {\n            beginControlsAutoHide( viewer );\n        }\n    }\n\n    THIS[ viewer.hash ].animating = animated;\n\n    //viewer.profiler.endUpdate();\n}\n\nfunction drawWorld( viewer ) {\n    viewer.imageLoader.clear();\n    viewer.drawer.clear();\n    viewer.world.draw();\n\n    /**\n     * <em>- Needs documentation -</em>\n     *\n     * @event update-viewport\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    viewer.raiseEvent( \'update-viewport\', {} );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Navigation Controls\n///////////////////////////////////////////////////////////////////////////////\nfunction resolveUrl( prefix, url ) {\n    return prefix ? prefix + url : url;\n}\n\n\n\nfunction beginZoomingIn() {\n    THIS[ this.hash ].lastZoomTime = $.now();\n    THIS[ this.hash ].zoomFactor = this.zoomPerSecond;\n    THIS[ this.hash ].zooming = true;\n    scheduleZoom( this );\n}\n\n\nfunction beginZoomingOut() {\n    THIS[ this.hash ].lastZoomTime = $.now();\n    THIS[ this.hash ].zoomFactor = 1.0 / this.zoomPerSecond;\n    THIS[ this.hash ].zooming = true;\n    scheduleZoom( this );\n}\n\n\nfunction endZooming() {\n    THIS[ this.hash ].zooming = false;\n}\n\n\nfunction scheduleZoom( viewer ) {\n    $.requestAnimationFrame( $.delegate( viewer, doZoom ) );\n}\n\n\nfunction doZoom() {\n    var currentTime,\n        deltaTime,\n        adjustedFactor;\n\n    if ( THIS[ this.hash ].zooming && this.viewport) {\n        currentTime     = $.now();\n        deltaTime       = currentTime - THIS[ this.hash ].lastZoomTime;\n        adjustedFactor  = Math.pow( THIS[ this.hash ].zoomFactor, deltaTime / 1000 );\n\n        this.viewport.zoomBy( adjustedFactor );\n        this.viewport.applyConstraints();\n        THIS[ this.hash ].lastZoomTime = currentTime;\n        scheduleZoom( this );\n    }\n}\n\n\nfunction doSingleZoomIn() {\n    if ( this.viewport ) {\n        THIS[ this.hash ].zooming = false;\n        this.viewport.zoomBy(\n            this.zoomPerClick / 1.0\n        );\n        this.viewport.applyConstraints();\n    }\n}\n\n\nfunction doSingleZoomOut() {\n    if ( this.viewport ) {\n        THIS[ this.hash ].zooming = false;\n        this.viewport.zoomBy(\n            1.0 / this.zoomPerClick\n        );\n        this.viewport.applyConstraints();\n    }\n}\n\n\nfunction lightUp() {\n    this.buttons.emulateEnter();\n    this.buttons.emulateExit();\n}\n\n\nfunction onHome() {\n    if ( this.viewport ) {\n        this.viewport.goHome();\n    }\n}\n\n\nfunction onFullScreen() {\n    if ( this.isFullPage() && !$.isFullScreen() ) {\n        // Is fullPage but not fullScreen\n        this.setFullPage( false );\n    } else {\n        this.setFullScreen( !this.isFullPage() );\n    }\n    // correct for no mouseout event on change\n    if ( this.buttons ) {\n        this.buttons.emulateExit();\n    }\n    this.fullPageButton.element.focus();\n    if ( this.viewport ) {\n        this.viewport.applyConstraints();\n    }\n}\n\n/**\n * Note: The current rotation feature is limited to 90 degree turns.\n */\nfunction onRotateLeft() {\n    if ( this.viewport ) {\n        var currRotation = this.viewport.getRotation();\n        if (currRotation === 0) {\n            currRotation = 270;\n        }\n        else {\n            currRotation -= 90;\n        }\n        this.viewport.setRotation(currRotation);\n    }\n}\n\n/**\n * Note: The current rotation feature is limited to 90 degree turns.\n */\nfunction onRotateRight() {\n    if ( this.viewport ) {\n        var currRotation = this.viewport.getRotation();\n        if (currRotation === 270) {\n            currRotation = 0;\n        }\n        else {\n            currRotation += 90;\n        }\n        this.viewport.setRotation(currRotation);\n    }\n}\n\n\nfunction onPrevious(){\n    var previous = this._sequenceIndex - 1;\n    if(this.navPrevNextWrap && previous < 0){\n        previous += this.tileSources.length;\n    }\n    this.goToPage( previous );\n}\n\n\nfunction onNext(){\n    var next = this._sequenceIndex + 1;\n    if(this.navPrevNextWrap && next >= this.tileSources.length){\n        next = 0;\n    }\n    this.goToPage( next );\n}\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Navigator\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class Navigator\n * @classdesc The Navigator provides a small view of the current image as fixed\n * while representing the viewport as a moving box serving as a frame\n * of reference in the larger viewport as to which portion of the image\n * is currently being examined.  The navigator\'s viewport can be interacted\n * with using the keyboard or the mouse.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.Viewer\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n */\n$.Navigator = function( options ){\n\n    var viewer      = options.viewer,\n        _this = this,\n        viewerSize,\n        navigatorSize;\n\n    //We may need to create a new element and id if they did not\n    //provide the id for the existing element\n    if( !options.id ){\n        options.id              = \'navigator-\' + $.now();\n        this.element            = $.makeNeutralElement( "div" );\n        options.controlOptions  = {\n            anchor:           $.ControlAnchor.TOP_RIGHT,\n            attachToViewer:   true,\n            autoFade:         options.autoFade\n        };\n\n        if( options.position ){\n            if( \'BOTTOM_RIGHT\' == options.position ){\n               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_RIGHT;\n            } else if( \'BOTTOM_LEFT\' == options.position ){\n               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_LEFT;\n            } else if( \'TOP_RIGHT\' == options.position ){\n               options.controlOptions.anchor = $.ControlAnchor.TOP_RIGHT;\n            } else if( \'TOP_LEFT\' == options.position ){\n               options.controlOptions.anchor = $.ControlAnchor.TOP_LEFT;\n            } else if( \'ABSOLUTE\' == options.position ){\n               options.controlOptions.anchor = $.ControlAnchor.ABSOLUTE;\n               options.controlOptions.top = options.top;\n               options.controlOptions.left = options.left;\n               options.controlOptions.height = options.height;\n               options.controlOptions.width = options.width;\n            }\n        }\n\n    } else {\n        this.element            = document.getElementById( options.id );\n        options.controlOptions  = {\n            anchor:           $.ControlAnchor.NONE,\n            attachToViewer:   false,\n            autoFade:         false\n        };\n    }\n    this.element.id         = options.id;\n    this.element.className  += \' navigator\';\n\n    options = $.extend( true, {\n        sizeRatio:     $.DEFAULT_SETTINGS.navigatorSizeRatio\n    }, options, {\n        element:                this.element,\n        tabIndex:               -1, // No keyboard navigation, omit from tab order\n        //These need to be overridden to prevent recursion since\n        //the navigator is a viewer and a viewer has a navigator\n        showNavigator:          false,\n        mouseNavEnabled:        false,\n        showNavigationControl:  false,\n        showSequenceControl:    false,\n        immediateRender:        true,\n        blendTime:              0,\n        animationTime:          0,\n        autoResize:             options.autoResize,\n        // prevent resizing the navigator from adding unwanted space around the image\n        minZoomImageRatio:      1.0\n    });\n\n    options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio;\n\n    $.setElementTouchActionNone( this.element );\n\n    this.borderWidth = 2;\n    //At some browser magnification levels the display regions lines up correctly, but at some there appears to\n    //be a one pixel gap.\n    this.fudge = new $.Point(1, 1);\n    this.totalBorderWidths = new $.Point(this.borderWidth*2, this.borderWidth*2).minus(this.fudge);\n\n\n    if ( options.controlOptions.anchor != $.ControlAnchor.NONE ) {\n        (function( style, borderWidth ){\n            style.margin        = \'0px\';\n            style.border        = borderWidth + \'px solid #555\';\n            style.padding       = \'0px\';\n            style.background    = \'#000\';\n            style.opacity       = 0.8;\n            style.overflow      = \'hidden\';\n        }( this.element.style, this.borderWidth));\n    }\n\n    this.displayRegion           = $.makeNeutralElement( "div" );\n    this.displayRegion.id        = this.element.id + \'-displayregion\';\n    this.displayRegion.className = \'displayregion\';\n\n    (function( style, borderWidth ){\n        style.position      = \'relative\';\n        style.top           = \'0px\';\n        style.left          = \'0px\';\n        style.fontSize      = \'0px\';\n        style.overflow      = \'hidden\';\n        style.border        = borderWidth + \'px solid #900\';\n        style.margin        = \'0px\';\n        style.padding       = \'0px\';\n        //TODO: IE doesnt like this property being set\n        //try{ style.outline  = \'2px auto #909\'; }catch(e){/*ignore*/}\n\n        style.background    = \'transparent\';\n\n        // We use square bracket notation on the statement below, because float is a keyword.\n        // This is important for the Google Closure compiler, if nothing else.\n        /*jshint sub:true */\n        style[\'float\']      = \'left\'; //Webkit\n\n        style.cssFloat      = \'left\'; //Firefox\n        style.styleFloat    = \'left\'; //IE\n        style.zIndex        = 999999999;\n        style.cursor        = \'default\';\n    }( this.displayRegion.style, this.borderWidth ));\n\n    this.displayRegionContainer = $.makeNeutralElement("div");\n    this.displayRegionContainer.id = this.element.id + \'-displayregioncontainer\';\n    this.displayRegionContainer.className = "displayregioncontainer";\n    this.displayRegionContainer.style.width = "100%";\n    this.displayRegionContainer.style.height = "100%";\n\n    viewer.addControl(\n        this.element,\n        options.controlOptions\n    );\n\n    this._resizeWithViewer = options.controlOptions.anchor != $.ControlAnchor.ABSOLUTE &&\n        options.controlOptions.anchor != $.ControlAnchor.NONE;\n\n    if ( this._resizeWithViewer ) {\n        if ( options.width && options.height ) {\n            this.element.style.height = typeof ( options.height )  == "number" ? ( options.height + \'px\' ) : options.height;\n            this.element.style.width  = typeof ( options.width )  == "number" ? ( options.width + \'px\' ) : options.width;\n        } else {\n            viewerSize = $.getElementSize( viewer.element );\n            this.element.style.height = Math.round( viewerSize.y * options.sizeRatio ) + \'px\';\n            this.element.style.width  = Math.round( viewerSize.x * options.sizeRatio ) + \'px\';\n            this.oldViewerSize = viewerSize;\n        }\n        navigatorSize = $.getElementSize( this.element );\n        this.elementArea = navigatorSize.x * navigatorSize.y;\n    }\n\n    this.oldContainerSize = new $.Point( 0, 0 );\n\n    $.Viewer.apply( this, [ options ] );\n\n    this.displayRegionContainer.appendChild(this.displayRegion);\n    this.element.getElementsByTagName(\'div\')[0].appendChild(this.displayRegionContainer);\n\n    function rotate(degrees) {\n        _setTransformRotate(_this.displayRegionContainer, degrees);\n        _setTransformRotate(_this.displayRegion, -degrees);\n        _this.viewport.setRotation(degrees);\n    }\n    if (options.navigatorRotate) {\n        var degrees = options.viewer.viewport ?\n            options.viewer.viewport.getRotation() :\n            options.viewer.degrees || 0;\n        rotate(degrees);\n        options.viewer.addHandler("rotate", function (args) {\n            rotate(args.degrees);\n        });\n    }\n\n    // Remove the base class\' (Viewer\'s) innerTracker and replace it with our own\n    this.innerTracker.destroy();\n    this.innerTracker = new $.MouseTracker({\n        element:         this.element,\n        dragHandler:     $.delegate( this, onCanvasDrag ),\n        clickHandler:    $.delegate( this, onCanvasClick ),\n        releaseHandler:  $.delegate( this, onCanvasRelease ),\n        scrollHandler:   $.delegate( this, onCanvasScroll )\n    });\n\n    this.addHandler("reset-size", function() {\n        if (_this.viewport) {\n            _this.viewport.goHome(true);\n        }\n    });\n\n    viewer.world.addHandler("item-index-change", function(event) {\n        var item = _this.world.getItemAt(event.previousIndex);\n        _this.world.setItemIndex(item, event.newIndex);\n    });\n\n    viewer.world.addHandler("remove-item", function(event) {\n        var theirItem = event.item;\n        var myItem = _this._getMatchingItem(theirItem);\n        if (myItem) {\n            _this.world.removeItem(myItem);\n        }\n    });\n\n    this.update(viewer.viewport);\n};\n\n$.extend( $.Navigator.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.Navigator.prototype */{\n\n    /**\n     * Used to notify the navigator when its size has changed.\n     * Especially useful when {@link OpenSeadragon.Options}.navigatorAutoResize is set to false and the navigator is resizable.\n     * @function\n     */\n    updateSize: function () {\n        if ( this.viewport ) {\n            var containerSize = new $.Point(\n                    (this.container.clientWidth === 0 ? 1 : this.container.clientWidth),\n                    (this.container.clientHeight === 0 ? 1 : this.container.clientHeight)\n                );\n\n            if ( !containerSize.equals( this.oldContainerSize ) ) {\n                this.viewport.resize( containerSize, true );\n                this.viewport.goHome(true);\n                this.oldContainerSize = containerSize;\n                this.drawer.clear();\n                this.world.draw();\n            }\n        }\n    },\n\n    /**\n     * Used to update the navigator minimap\'s viewport rectangle when a change in the viewer\'s viewport occurs.\n     * @function\n     * @param {OpenSeadragon.Viewport} The viewport this navigator is tracking.\n     */\n    update: function( viewport ) {\n\n        var viewerSize,\n            newWidth,\n            newHeight,\n            bounds,\n            topleft,\n            bottomright;\n\n        viewerSize = $.getElementSize( this.viewer.element );\n        if ( this._resizeWithViewer && viewerSize.x && viewerSize.y && !viewerSize.equals( this.oldViewerSize ) ) {\n            this.oldViewerSize = viewerSize;\n\n            if ( this.maintainSizeRatio || !this.elementArea) {\n                newWidth  = viewerSize.x * this.sizeRatio;\n                newHeight = viewerSize.y * this.sizeRatio;\n            } else {\n                newWidth = Math.sqrt(this.elementArea * (viewerSize.x / viewerSize.y));\n                newHeight = this.elementArea / newWidth;\n            }\n\n            this.element.style.width  = Math.round( newWidth ) + \'px\';\n            this.element.style.height = Math.round( newHeight ) + \'px\';\n\n            if (!this.elementArea) {\n                this.elementArea = newWidth * newHeight;\n            }\n\n            this.updateSize();\n        }\n\n        if (viewport && this.viewport) {\n            bounds      = viewport.getBoundsNoRotate(true);\n            topleft     = this.viewport.pixelFromPointNoRotate(bounds.getTopLeft(), false);\n            bottomright = this.viewport.pixelFromPointNoRotate(bounds.getBottomRight(), false)\n                .minus( this.totalBorderWidths );\n\n            //update style for navigator-box\n            var style = this.displayRegion.style;\n            style.display = this.world.getItemCount() ? \'block\' : \'none\';\n\n            style.top    = Math.round( topleft.y ) + \'px\';\n            style.left   = Math.round( topleft.x ) + \'px\';\n\n            var width = Math.abs( topleft.x - bottomright.x );\n            var height = Math.abs( topleft.y - bottomright.y );\n            // make sure width and height are non-negative so IE doesn\'t throw\n            style.width  = Math.round( Math.max( width, 0 ) ) + \'px\';\n            style.height = Math.round( Math.max( height, 0 ) ) + \'px\';\n        }\n\n    },\n\n    // overrides Viewer.addTiledImage\n    addTiledImage: function(options) {\n        var _this = this;\n\n        var original = options.originalTiledImage;\n        delete options.original;\n\n        var optionsClone = $.extend({}, options, {\n            success: function(event) {\n                var myItem = event.item;\n                myItem._originalForNavigator = original;\n                _this._matchBounds(myItem, original, true);\n\n                original.addHandler(\'bounds-change\', function() {\n                    _this._matchBounds(myItem, original);\n                });\n            }\n        });\n\n        return $.Viewer.prototype.addTiledImage.apply(this, [optionsClone]);\n    },\n\n    // private\n    _getMatchingItem: function(theirItem) {\n        var count = this.world.getItemCount();\n        var item;\n        for (var i = 0; i < count; i++) {\n            item = this.world.getItemAt(i);\n            if (item._originalForNavigator === theirItem) {\n                return item;\n            }\n        }\n\n        return null;\n    },\n\n    // private\n    _matchBounds: function(myItem, theirItem, immediately) {\n        var bounds = theirItem.getBounds();\n        myItem.setPosition(bounds.getTopLeft(), immediately);\n        myItem.setWidth(bounds.width, immediately);\n    }\n});\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onCanvasClick( event ) {\n    if ( event.quick && this.viewer.viewport ) {\n        this.viewer.viewport.panTo(this.viewport.pointFromPixel(event.position));\n        this.viewer.viewport.applyConstraints();\n    }\n}\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onCanvasDrag( event ) {\n    if ( this.viewer.viewport ) {\n        if( !this.panHorizontal ){\n            event.delta.x = 0;\n        }\n        if( !this.panVertical ){\n            event.delta.y = 0;\n        }\n        this.viewer.viewport.panBy(\n            this.viewport.deltaPointsFromPixels(\n                event.delta\n            )\n        );\n    }\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onCanvasRelease( event ) {\n    if ( event.insideElementPressed && this.viewer.viewport ) {\n        this.viewer.viewport.applyConstraints();\n    }\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onCanvasScroll( event ) {\n    /**\n     * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#navigator} element (mouse wheel, touch pinch, etc.).\n     *\n     * @event navigator-scroll\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} scroll - The scroll delta for the event.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */\n    this.viewer.raiseEvent( \'navigator-scroll\', {\n        tracker: event.eventSource,\n        position: event.position,\n        scroll: event.scroll,\n        shift: event.shift,\n        originalEvent: event.originalEvent\n    });\n\n    //dont scroll the page up and down if the user is scrolling\n    //in the navigator\n    return false;\n}\n\n/**\n    * @function\n    * @private\n    * @param {Object} element\n    * @param {Number} degrees\n    */\nfunction _setTransformRotate (element, degrees) {\n    element.style.webkitTransform = "rotate(" + degrees + "deg)";\n    element.style.mozTransform = "rotate(" + degrees + "deg)";\n    element.style.msTransform = "rotate(" + degrees + "deg)";\n    element.style.oTransform = "rotate(" + degrees + "deg)";\n    element.style.transform = "rotate(" + degrees + "deg)";\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - getString/setString\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n//TODO: I guess this is where the i18n needs to be reimplemented.  I\'ll look\n//      into existing patterns for i18n in javascript but i think that mimicking\n//      pythons gettext might be a reasonable approach.\nvar I18N = {\n    Errors: {\n        Dzc:            "Sorry, we don\'t support Deep Zoom Collections!",\n        Dzi:            "Hmm, this doesn\'t appear to be a valid Deep Zoom Image.",\n        Xml:            "Hmm, this doesn\'t appear to be a valid Deep Zoom Image.",\n        ImageFormat:    "Sorry, we don\'t support {0}-based Deep Zoom Images.",\n        Security:       "It looks like a security restriction stopped us from " +\n                        "loading this Deep Zoom Image.",\n        Status:         "This space unintentionally left blank ({0} {1}).",\n        OpenFailed:     "Unable to open {0}: {1}"\n    },\n\n    Tooltips: {\n        FullPage:       "Toggle full page",\n        Home:           "Go home",\n        ZoomIn:         "Zoom in",\n        ZoomOut:        "Zoom out",\n        NextPage:       "Next page",\n        PreviousPage:   "Previous page",\n        RotateLeft:     "Rotate left",\n        RotateRight:    "Rotate right"\n    }\n};\n\n$.extend( $, /** @lends OpenSeadragon */{\n\n    /**\n     * @function\n     * @param {String} property\n     */\n    getString: function( prop ) {\n\n        var props   = prop.split(\'.\'),\n            string  = null,\n            args    = arguments,\n            container = I18N,\n            i;\n\n        for ( i = 0; i < props.length-1; i++ ) {\n            // in case not a subproperty\n            container = container[ props[ i ] ] || {};\n        }\n        string = container[ props[ i ] ];\n\n        if ( typeof( string ) != "string" ) {\n            $.console.debug( "Untranslated source string:", prop );\n            string = ""; // FIXME: this breaks gettext()-style convention, which would return source\n        }\n\n        return string.replace(/\\{\\d+\\}/g, function(capture) {\n            var i = parseInt( capture.match( /\\d+/ ), 10 ) + 1;\n            return i < args.length ?\n                args[ i ] :\n                "";\n        });\n    },\n\n    /**\n     * @function\n     * @param {String} property\n     * @param {*} value\n     */\n    setString: function( prop, value ) {\n\n        var props     = prop.split(\'.\'),\n            container = I18N,\n            i;\n\n        for ( i = 0; i < props.length - 1; i++ ) {\n            if ( !container[ props[ i ] ] ) {\n                container[ props[ i ] ] = {};\n            }\n            container = container[ props[ i ] ];\n        }\n\n        container[ props[ i ] ] = value;\n    }\n\n});\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Point\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class Point\n * @classdesc A Point is really used as a 2-dimensional vector, equally useful for\n * representing a point on a plane, or the height and width of a plane\n * not requiring any other frame of reference.\n *\n * @memberof OpenSeadragon\n * @param {Number} [x] The vector component \'x\'. Defaults to the origin at 0.\n * @param {Number} [y] The vector component \'y\'. Defaults to the origin at 0.\n */\n$.Point = function( x, y ) {\n    /**\n     * The vector component \'x\'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Point#\n     */\n    this.x = typeof ( x ) == "number" ? x : 0;\n    /**\n     * The vector component \'y\'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Point#\n     */\n    this.y = typeof ( y ) == "number" ? y : 0;\n};\n\n/** @lends OpenSeadragon.Point.prototype */\n$.Point.prototype = {\n    /**\n     * @function\n     * @returns {OpenSeadragon.Point} a duplicate of this Point\n     */\n    clone: function() {\n        return new $.Point(this.x, this.y);\n    },\n\n    /**\n     * Add another Point to this point and return a new Point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to add vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the sum of the\n     *  vector components\n     */\n    plus: function( point ) {\n        return new $.Point(\n            this.x + point.x,\n            this.y + point.y\n        );\n    },\n\n    /**\n     * Substract another Point to this point and return a new Point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to substract vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the substraction of the\n     *  vector components\n     */\n    minus: function( point ) {\n        return new $.Point(\n            this.x - point.x,\n            this.y - point.y\n        );\n    },\n\n    /**\n     * Multiply this point by a factor and return a new Point.\n     * @function\n     * @param {Number} factor The factor to multiply vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the multiplication\n     *  of the vector components by the factor\n     */\n    times: function( factor ) {\n        return new $.Point(\n            this.x * factor,\n            this.y * factor\n        );\n    },\n\n    /**\n     * Divide this point by a factor and return a new Point.\n     * @function\n     * @param {Number} factor The factor to divide vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the division of the\n     *  vector components by the factor\n     */\n    divide: function( factor ) {\n        return new $.Point(\n            this.x / factor,\n            this.y / factor\n        );\n    },\n\n    /**\n     * Compute the opposite of this point and return a new Point.\n     * @function\n     * @returns {OpenSeadragon.Point} A new point representing the opposite of the\n     *  vector components\n     */\n    negate: function() {\n        return new $.Point( -this.x, -this.y );\n    },\n\n    /**\n     * Compute the distance between this point and another point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to compute the distance with.\n     * @returns {Number} The distance between the 2 points\n     */\n    distanceTo: function( point ) {\n        return Math.sqrt(\n            Math.pow( this.x - point.x, 2 ) +\n            Math.pow( this.y - point.y, 2 )\n        );\n    },\n\n    /**\n     * Apply a function to each coordinate of this point and return a new point.\n     * @function\n     * @param {function} func The function to apply to each coordinate.\n     * @returns {OpenSeadragon.Point} A new point with the coordinates computed\n     * by the specified function\n     */\n    apply: function( func ) {\n        return new $.Point( func( this.x ), func( this.y ) );\n    },\n\n    /**\n     * Check if this point is equal to another one.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to compare this point with.\n     * @returns {Boolean} true if they are equal, false otherwise.\n     */\n    equals: function( point ) {\n        return (\n            point instanceof $.Point\n        ) && (\n            this.x === point.x\n        ) && (\n            this.y === point.y\n        );\n    },\n\n    /**\n     * Rotates the point around the specified pivot\n     * From http://stackoverflow.com/questions/4465931/rotate-rectangle-around-a-point\n     * @function\n     * @param {Number} degress to rotate around the pivot.\n     * @param {OpenSeadragon.Point} [pivot=(0,0)] Point around which to rotate.\n     * Defaults to the origin.\n     * @returns {OpenSeadragon.Point}. A new point representing the point rotated around the specified pivot\n     */\n    rotate: function (degrees, pivot) {\n        pivot = pivot || new $.Point(0, 0);\n        var cos;\n        var sin;\n        // Avoid float computations when possible\n        if (degrees % 90 === 0) {\n            var d = degrees % 360;\n            if (d < 0) {\n                d += 360;\n            }\n            switch (d) {\n                case 0:\n                    cos = 1;\n                    sin = 0;\n                    break;\n                case 90:\n                    cos = 0;\n                    sin = 1;\n                    break;\n                case 180:\n                    cos = -1;\n                    sin = 0;\n                    break;\n                case 270:\n                    cos = 0;\n                    sin = -1;\n                    break;\n            }\n        } else {\n            var angle = degrees * Math.PI / 180.0;\n            cos = Math.cos(angle);\n            sin = Math.sin(angle);\n        }\n        var x = cos * (this.x - pivot.x) - sin * (this.y - pivot.y) + pivot.x;\n        var y = sin * (this.x - pivot.x) + cos * (this.y - pivot.y) + pivot.y;\n        return new $.Point(x, y);\n    },\n\n    /**\n     * Convert this point to a string in the format (x,y) where x and y are\n     * rounded to the nearest integer.\n     * @function\n     * @returns {String} A string representation of this point.\n     */\n    toString: function() {\n        return "(" + (Math.round(this.x * 100) / 100) + "," + (Math.round(this.y * 100) / 100) + ")";\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - TileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n\n/**\n * @class TileSource\n * @classdesc The TileSource contains the most basic implementation required to create a\n * smooth transition between layers in an image pyramid. It has only a single key\n * interface that must be implemented to complete its key functionality:\n * \'getTileUrl\'.  It also has several optional interfaces that can be\n * implemented if a new TileSource wishes to support configuration via a simple\n * object or array (\'configure\') and if the tile source supports or requires\n * configuration via retrieval of a document on the network ala AJAX or JSONP,\n * (\'getImageInfo\').\n * <br/>\n * By default the image pyramid is split into N layers where the image\'s longest\n * side in M (in pixels), where N is the smallest integer which satisfies\n *      <strong>2^(N+1) >= M</strong>.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n *      You can either specify a URL, or literally define the TileSource (by specifying\n *      width, height, tileSize, tileOverlap, minLevel, and maxLevel). For the former,\n *      the extending class is expected to implement \'getImageInfo\' and \'configure\'.\n *      For the latter, the construction is assumed to occur through\n *      the extending classes implementation of \'configure\'.\n * @param {String} [options.url]\n *      The URL for the data necessary for this TileSource.\n * @param {Function} [options.success]\n *      A function to be called upon successful creation.\n * @param {Boolean} [options.ajaxWithCredentials]\n *      If this TileSource needs to make an AJAX call, this specifies whether to set\n *      the XHR\'s withCredentials (for accessing secure data).\n * @param {Number} [options.width]\n *      Width of the source image at max resolution in pixels.\n * @param {Number} [options.height]\n *      Height of the source image at max resolution in pixels.\n * @param {Number} [options.tileSize]\n *      The size of the tiles to assumed to make up each pyramid layer in pixels.\n *      Tile size determines the point at which the image pyramid must be\n *      divided into a matrix of smaller images.\n *      Use options.tileWidth and options.tileHeight to support non-square tiles.\n * @param {Number} [options.tileWidth]\n *      The width of the tiles to assumed to make up each pyramid layer in pixels.\n * @param {Number} [options.tileHeight]\n *      The height of the tiles to assumed to make up each pyramid layer in pixels.\n * @param {Number} [options.tileOverlap]\n *      The number of pixels each tile is expected to overlap touching tiles.\n * @param {Number} [options.minLevel]\n *      The minimum level to attempt to load.\n * @param {Number} [options.maxLevel]\n *      The maximum level to attempt to load.\n */\n$.TileSource = function( width, height, tileSize, tileOverlap, minLevel, maxLevel ) {\n    var _this = this;\n\n    var args = arguments,\n        options,\n        i;\n\n    if( $.isPlainObject( width ) ){\n        options = width;\n    }else{\n        options = {\n            width: args[0],\n            height: args[1],\n            tileSize: args[2],\n            tileOverlap: args[3],\n            minLevel: args[4],\n            maxLevel: args[5]\n        };\n    }\n\n    //Tile sources supply some events, namely \'ready\' when they must be configured\n    //by asynchronously fetching their configuration data.\n    $.EventSource.call( this );\n\n    //we allow options to override anything we dont treat as\n    //required via idiomatic options or which is functionally\n    //set depending on the state of the readiness of this tile\n    //source\n    $.extend( true, this, options );\n\n    if (!this.success) {\n        //Any functions that are passed as arguments are bound to the ready callback\n        for ( i = 0; i < arguments.length; i++ ) {\n            if ( $.isFunction( arguments[ i ] ) ) {\n                this.success = arguments[ i ];\n                //only one callback per constructor\n                break;\n            }\n        }\n    }\n\n    if (this.success) {\n        this.addHandler( \'ready\', function ( event ) {\n            _this.success( event );\n        } );\n    }\n\n    /**\n     * Ratio of width to height\n     * @member {Number} aspectRatio\n     * @memberof OpenSeadragon.TileSource#\n     */\n    /**\n     * Vector storing x and y dimensions ( width and height respectively ).\n     * @member {OpenSeadragon.Point} dimensions\n     * @memberof OpenSeadragon.TileSource#\n     */\n    /**\n     * The overlap in pixels each tile shares with its adjacent neighbors.\n     * @member {Number} tileOverlap\n     * @memberof OpenSeadragon.TileSource#\n     */\n    /**\n     * The minimum pyramid level this tile source supports or should attempt to load.\n     * @member {Number} minLevel\n     * @memberof OpenSeadragon.TileSource#\n     */\n    /**\n     * The maximum pyramid level this tile source supports or should attempt to load.\n     * @member {Number} maxLevel\n     * @memberof OpenSeadragon.TileSource#\n     */\n    /**\n     *\n     * @member {Boolean} ready\n     * @memberof OpenSeadragon.TileSource#\n     */\n\n    if( \'string\' == $.type( arguments[ 0 ] ) ){\n        this.url = arguments[0];\n    }\n\n    if (this.url) {\n        //in case the getImageInfo method is overriden and/or implies an\n        //async mechanism set some safe defaults first\n        this.aspectRatio = 1;\n        this.dimensions  = new $.Point( 10, 10 );\n        this._tileWidth  = 0;\n        this._tileHeight = 0;\n        this.tileOverlap = 0;\n        this.minLevel    = 0;\n        this.maxLevel    = 0;\n        this.ready       = false;\n        //configuration via url implies the extending class\n        //implements and \'configure\'\n        this.getImageInfo( this.url );\n\n    } else {\n\n        //explicit configuration via positional args in constructor\n        //or the more idiomatic \'options\' object\n        this.ready       = true;\n        this.aspectRatio = ( options.width && options.height ) ?\n            (  options.width / options.height ) : 1;\n        this.dimensions  = new $.Point( options.width, options.height );\n\n        if ( this.tileSize ){\n            this._tileWidth = this._tileHeight = this.tileSize;\n            delete this.tileSize;\n        } else {\n            if( this.tileWidth ){\n                // We were passed tileWidth in options, but we want to rename it\n                // with a leading underscore to make clear that it is not safe to directly modify it\n                this._tileWidth = this.tileWidth;\n                delete this.tileWidth;\n            } else {\n                this._tileWidth = 0;\n            }\n\n            if( this.tileHeight ){\n                // See note above about renaming this.tileWidth\n                this._tileHeight = this.tileHeight;\n                delete this.tileHeight;\n            } else {\n                this._tileHeight = 0;\n            }\n        }\n\n        this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0;\n        this.minLevel    = options.minLevel ? options.minLevel : 0;\n        this.maxLevel    = ( undefined !== options.maxLevel && null !== options.maxLevel ) ?\n            options.maxLevel : (\n                ( options.width && options.height ) ? Math.ceil(\n                    Math.log( Math.max( options.width, options.height ) ) /\n                    Math.log( 2 )\n                ) : 0\n            );\n        if( this.success && $.isFunction( this.success ) ){\n            this.success( this );\n        }\n    }\n\n\n};\n\n/** @lends OpenSeadragon.TileSource.prototype */\n$.TileSource.prototype = {\n\n    getTileSize: function( level ) {\n        $.console.error(\n            "[TileSource.getTileSize] is deprecated." +\n            "Use TileSource.getTileWidth() and TileSource.getTileHeight() instead"\n        );\n        return this._tileWidth;\n    },\n\n    /**\n     * Return the tileWidth for a given level.\n     * Subclasses should override this if tileWidth can be different at different levels\n     *   such as in IIIFTileSource.  Code should use this function rather than reading\n     *   from ._tileWidth directly.\n     * @function\n     * @param {Number} level\n     */\n    getTileWidth: function( level ) {\n        if (!this._tileWidth) {\n            return this.getTileSize(level);\n        }\n        return this._tileWidth;\n    },\n\n    /**\n     * Return the tileHeight for a given level.\n     * Subclasses should override this if tileHeight can be different at different levels\n     *   such as in IIIFTileSource.  Code should use this function rather than reading\n     *   from ._tileHeight directly.\n     * @function\n     * @param {Number} level\n     */\n    getTileHeight: function( level ) {\n        if (!this._tileHeight) {\n            return this.getTileSize(level);\n        }\n        return this._tileHeight;\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getLevelScale: function( level ) {\n\n        // see https://github.com/openseadragon/openseadragon/issues/22\n        // we use the tilesources implementation of getLevelScale to generate\n        // a memoized re-implementation\n        var levelScaleCache = {},\n            i;\n        for( i = 0; i <= this.maxLevel; i++ ){\n            levelScaleCache[ i ] = 1 / Math.pow(2, this.maxLevel - i);\n        }\n        this.getLevelScale = function( _level ){\n            return levelScaleCache[ _level ];\n        };\n        return this.getLevelScale( level );\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getNumTiles: function( level ) {\n        var scale = this.getLevelScale( level ),\n            x = Math.ceil( scale * this.dimensions.x / this.getTileWidth(level) ),\n            y = Math.ceil( scale * this.dimensions.y / this.getTileHeight(level) );\n\n        return new $.Point( x, y );\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getPixelRatio: function( level ) {\n        var imageSizeScaled = this.dimensions.times( this.getLevelScale( level ) ),\n            rx = 1.0 / imageSizeScaled.x,\n            ry = 1.0 / imageSizeScaled.y;\n\n        return new $.Point(rx, ry);\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getClosestLevel: function( rect ) {\n        var i,\n            tilesPerSide,\n            tiles;\n\n        for( i = this.minLevel; i < this.maxLevel; i++ ){\n            tiles = this.getNumTiles( i );\n            tilesPerSide = new $.Point(\n              Math.floor( rect.x / this.getTileWidth(i) ),\n              Math.floor( rect.y / this.getTileHeight(i) )\n            );\n\n            if( tiles.x + 1 >= tilesPerSide.x && tiles.y + 1 >= tilesPerSide.y ){\n                break;\n            }\n        }\n        return Math.max( 0, i - 1 );\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {OpenSeadragon.Point} point\n     */\n    getTileAtPoint: function( level, point ) {\n        var pixel = point.times( this.dimensions.x ).times( this.getLevelScale(level) ),\n            tx = Math.floor( pixel.x / this.getTileWidth(level) ),\n            ty = Math.floor( pixel.y / this.getTileHeight(level) );\n\n        return new $.Point( tx, ty );\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    getTileBounds: function( level, x, y ) {\n        var dimensionsScaled = this.dimensions.times( this.getLevelScale( level ) ),\n            tileWidth = this.getTileWidth(level),\n            tileHeight = this.getTileHeight(level),\n            px = ( x === 0 ) ? 0 : tileWidth * x - this.tileOverlap,\n            py = ( y === 0 ) ? 0 : tileHeight * y - this.tileOverlap,\n            sx = tileWidth + ( x === 0 ? 1 : 2 ) * this.tileOverlap,\n            sy = tileHeight + ( y === 0 ? 1 : 2 ) * this.tileOverlap,\n            scale = 1.0 / dimensionsScaled.x;\n\n        sx = Math.min( sx, dimensionsScaled.x - px );\n        sy = Math.min( sy, dimensionsScaled.y - py );\n\n        return new $.Rect( px * scale, py * scale, sx * scale, sy * scale );\n    },\n\n\n    /**\n     * Responsible for retrieving, and caching the\n     * image metadata pertinent to this TileSources implementation.\n     * @function\n     * @param {String} url\n     * @throws {Error}\n     */\n    getImageInfo: function( url ) {\n        var _this = this,\n            callbackName,\n            callback,\n            readySource,\n            options,\n            urlParts,\n            filename,\n            lastDot;\n\n\n        if( url ) {\n            urlParts = url.split( \'/\' );\n            filename = urlParts[ urlParts.length - 1 ];\n            lastDot  = filename.lastIndexOf( \'.\' );\n            if ( lastDot > -1 ) {\n                urlParts[ urlParts.length - 1 ] = filename.slice( 0, lastDot );\n            }\n        }\n\n        callback = function( data ){\n            if( typeof(data) === "string" ) {\n                data = $.parseXml( data );\n            }\n            var $TileSource = $.TileSource.determineType( _this, data, url );\n            if ( !$TileSource ) {\n                /**\n                 * Raised when an error occurs loading a TileSource.\n                 *\n                 * @event open-failed\n                 * @memberof OpenSeadragon.TileSource\n                 * @type {object}\n                 * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n                 * @property {String} message\n                 * @property {String} source\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( \'open-failed\', { message: "Unable to load TileSource", source: url } );\n                return;\n            }\n\n            options = $TileSource.prototype.configure.apply( _this, [ data, url ]);\n            if (options.ajaxWithCredentials === undefined) {\n                options.ajaxWithCredentials = _this.ajaxWithCredentials;\n            }\n\n            readySource = new $TileSource( options );\n            _this.ready = true;\n            /**\n             * Raised when a TileSource is opened and initialized.\n             *\n             * @event ready\n             * @memberof OpenSeadragon.TileSource\n             * @type {object}\n             * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n             * @property {Object} tileSource\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            _this.raiseEvent( \'ready\', { tileSource: readySource } );\n        };\n\n        if( url.match(/\\.js$/) ){\n            //TODO: Its not very flexible to require tile sources to end jsonp\n            //      request for info  with a url that ends with \'.js\' but for\n            //      now it\'s the only way I see to distinguish uniformly.\n            callbackName = url.split( \'/\' ).pop().replace(\'.js\',\'\');\n            $.jsonp({\n                url: url,\n                async: false,\n                callbackName: callbackName,\n                callback: callback\n            });\n        } else {\n            // request info via xhr asynchronously.\n            $.makeAjaxRequest( {\n                url: url,\n                withCredentials: this.ajaxWithCredentials,\n                success: function( xhr ) {\n                    var data = processResponse( xhr );\n                    callback( data );\n                },\n                error: function ( xhr, exc ) {\n                    var msg;\n\n                    /*\n                        IE < 10 will block XHR requests to different origins. Any property access on the request\n                        object will raise an exception which we\'ll attempt to handle by formatting the original\n                        exception rather than the second one raised when we try to access xhr.status\n                     */\n                    try {\n                        msg = "HTTP " + xhr.status + " attempting to load TileSource";\n                    } catch ( e ) {\n                        var formattedExc;\n                        if ( typeof( exc ) == "undefined" || !exc.toString ) {\n                            formattedExc = "Unknown error";\n                        } else {\n                            formattedExc = exc.toString();\n                        }\n\n                        msg = formattedExc + " attempting to load TileSource";\n                    }\n\n                    /***\n                     * Raised when an error occurs loading a TileSource.\n                     *\n                     * @event open-failed\n                     * @memberof OpenSeadragon.TileSource\n                     * @type {object}\n                     * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n                     * @property {String} message\n                     * @property {String} source\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */\n                    _this.raiseEvent( \'open-failed\', {\n                        message: msg,\n                        source: url\n                    });\n                }\n            });\n        }\n\n    },\n\n    /**\n     * Responsible determining if a the particular TileSource supports the\n     * data format ( and allowed to apply logic against the url the data was\n     * loaded from, if any ). Overriding implementations are expected to do\n     * something smart with data and / or url to determine support.  Also\n     * understand that iteration order of TileSources is not guarunteed so\n     * please make sure your data or url is expressive enough to ensure a simple\n     * and sufficient mechanisim for clear determination.\n     * @function\n     * @param {String|Object|Array|Document} data\n     * @param {String} url - the url the data was loaded\n     *      from if any.\n     * @return {Boolean}\n     */\n    supports: function( data, url ) {\n        return false;\n    },\n\n    /**\n     * Responsible for parsing and configuring the\n     * image metadata pertinent to this TileSources implementation.\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {String|Object|Array|Document} data\n     * @param {String} url - the url the data was loaded\n     *      from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     * @throws {Error}\n     */\n    configure: function( data, url ) {\n        throw new Error( "Method not implemented." );\n    },\n\n    /**\n     * Responsible for retriving the url which will return an image for the\n     * region specified by the given x, y, and level components.\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */\n    getTileUrl: function( level, x, y ) {\n        throw new Error( "Method not implemented." );\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    tileExists: function( level, x, y ) {\n        var numTiles = this.getNumTiles( level );\n        return  level >= this.minLevel &&\n                level <= this.maxLevel &&\n                x >= 0 &&\n                y >= 0 &&\n                x < numTiles.x &&\n                y < numTiles.y;\n    }\n};\n\n\n$.extend( true, $.TileSource.prototype, $.EventSource.prototype );\n\n\n/**\n * Decides whether to try to process the response as xml, json, or hand back\n * the text\n * @private\n * @inner\n * @function\n * @param {XMLHttpRequest} xhr - the completed network request\n */\nfunction processResponse( xhr ){\n    var responseText = xhr.responseText,\n        status       = xhr.status,\n        statusText,\n        data;\n\n    if ( !xhr ) {\n        throw new Error( $.getString( "Errors.Security" ) );\n    } else if ( xhr.status !== 200 && xhr.status !== 0 ) {\n        status     = xhr.status;\n        statusText = ( status == 404 ) ?\n            "Not Found" :\n            xhr.statusText;\n        throw new Error( $.getString( "Errors.Status", status, statusText ) );\n    }\n\n    if( responseText.match(/\\s*<.*/) ){\n        try{\n        data = ( xhr.responseXML && xhr.responseXML.documentElement ) ?\n            xhr.responseXML :\n            $.parseXml( responseText );\n        } catch (e){\n            data = xhr.responseText;\n        }\n    }else if( responseText.match(/\\s*[\\{\\[].*/) ){\n        data = $.parseJSON(responseText);\n    }else{\n        data = responseText;\n    }\n    return data;\n}\n\n\n/**\n * Determines the TileSource Implementation by introspection of OpenSeadragon\n * namespace, calling each TileSource implementation of \'isType\'\n * @private\n * @inner\n * @function\n * @param {Object|Array|Document} data - the tile source configuration object\n * @param {String} url - the url where the tile source configuration object was\n *      loaded from, if any.\n */\n$.TileSource.determineType = function( tileSource, data, url ){\n    var property;\n    for( property in OpenSeadragon ){\n        if( property.match(/.+TileSource$/) &&\n            $.isFunction( OpenSeadragon[ property ] ) &&\n            $.isFunction( OpenSeadragon[ property ].prototype.supports ) &&\n            OpenSeadragon[ property ].prototype.supports.call( tileSource, data, url )\n        ){\n            return OpenSeadragon[ property ];\n        }\n    }\n\n    $.console.error( "No TileSource was able to open %s %s", url, data );\n};\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - DziTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class DziTileSource\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n * @param {String} fileFormat\n * @param {OpenSeadragon.DisplayRect[]} displayRects\n * @property {String} tilesUrl\n * @property {String} fileFormat\n * @property {OpenSeadragon.DisplayRect[]} displayRects\n */\n$.DziTileSource = function( width, height, tileSize, tileOverlap, tilesUrl, fileFormat, displayRects, minLevel, maxLevel ) {\n    var i,\n        rect,\n        level,\n        options;\n\n    if( $.isPlainObject( width ) ){\n        options = width;\n    }else{\n        options = {\n            width: arguments[ 0 ],\n            height: arguments[ 1 ],\n            tileSize: arguments[ 2 ],\n            tileOverlap: arguments[ 3 ],\n            tilesUrl: arguments[ 4 ],\n            fileFormat: arguments[ 5 ],\n            displayRects: arguments[ 6 ],\n            minLevel: arguments[ 7 ],\n            maxLevel: arguments[ 8 ]\n        };\n    }\n\n    this._levelRects  = {};\n    this.tilesUrl     = options.tilesUrl;\n    this.fileFormat   = options.fileFormat;\n    this.displayRects = options.displayRects;\n\n    if ( this.displayRects ) {\n        for ( i = this.displayRects.length - 1; i >= 0; i-- ) {\n            rect = this.displayRects[ i ];\n            for ( level = rect.minLevel; level <= rect.maxLevel; level++ ) {\n                if ( !this._levelRects[ level ] ) {\n                    this._levelRects[ level ] = [];\n                }\n                this._levelRects[ level ].push( rect );\n            }\n        }\n    }\n\n    $.TileSource.apply( this, [ options ] );\n\n};\n\n$.extend( $.DziTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.DziTileSource.prototype */{\n\n\n    /**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */\n    supports: function( data, url ){\n        var ns;\n        if ( data.Image ) {\n            ns = data.Image.xmlns;\n        } else if ( data.documentElement) {\n            if ("Image" == data.documentElement.localName || "Image" == data.documentElement.tagName) {\n                ns = data.documentElement.namespaceURI;\n            }\n        }\n\n        return ( "http://schemas.microsoft.com/deepzoom/2008" == ns ||\n            "http://schemas.microsoft.com/deepzoom/2009" == ns );\n    },\n\n    /**\n     *\n     * @function\n     * @param {Object|XMLDocument} data - the raw configuration\n     * @param {String} url - the url the data was retreived from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */\n    configure: function( data, url ){\n\n        var options;\n\n        if( !$.isPlainObject(data) ){\n\n            options = configureFromXML( this, data );\n\n        }else{\n\n            options = configureFromObject( this, data );\n        }\n\n        if (url && !options.tilesUrl) {\n            options.tilesUrl = url.replace(\n                    /([^\\/]+?)(\\.(dzi|xml|js))?\\/?(\\?.*)?$/, \'$1_files/\');\n\n            if (url.search(/\\.(dzi|xml|js)\\?/) != -1) {\n                options.queryParams = url.match(/\\?.*/);\n            }else{\n                options.queryParams = \'\';\n            }\n        }\n\n        return options;\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    getTileUrl: function( level, x, y ) {\n        return [ this.tilesUrl, level, \'/\', x, \'_\', y, \'.\', this.fileFormat, this.queryParams ].join( \'\' );\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    tileExists: function( level, x, y ) {\n        var rects = this._levelRects[ level ],\n            rect,\n            scale,\n            xMin,\n            yMin,\n            xMax,\n            yMax,\n            i;\n\n        if ( !rects || !rects.length ) {\n            return true;\n        }\n\n        for ( i = rects.length - 1; i >= 0; i-- ) {\n            rect = rects[ i ];\n\n            if ( level < rect.minLevel || level > rect.maxLevel ) {\n                continue;\n            }\n\n            scale = this.getLevelScale( level );\n            xMin = rect.x * scale;\n            yMin = rect.y * scale;\n            xMax = xMin + rect.width * scale;\n            yMax = yMin + rect.height * scale;\n\n            xMin = Math.floor( xMin / this.tileSize );\n            yMin = Math.floor( yMin / this.tileSize );\n            xMax = Math.ceil( xMax / this.tileSize );\n            yMax = Math.ceil( yMax / this.tileSize );\n\n            if ( xMin <= x && x < xMax && yMin <= y && y < yMax ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n});\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction configureFromXML( tileSource, xmlDoc ){\n\n    if ( !xmlDoc || !xmlDoc.documentElement ) {\n        throw new Error( $.getString( "Errors.Xml" ) );\n    }\n\n    var root           = xmlDoc.documentElement,\n        rootName       = root.localName || root.tagName,\n        ns             = xmlDoc.documentElement.namespaceURI,\n        configuration  = null,\n        displayRects   = [],\n        dispRectNodes,\n        dispRectNode,\n        rectNode,\n        sizeNode,\n        i;\n\n    if ( rootName == "Image" ) {\n\n        try {\n            sizeNode = root.getElementsByTagName("Size" )[ 0 ];\n            if (sizeNode === undefined) {\n                sizeNode = root.getElementsByTagNameNS(ns, "Size" )[ 0 ];\n            }\n\n            configuration = {\n                Image: {\n                    xmlns:       "http://schemas.microsoft.com/deepzoom/2008",\n                    Url:         root.getAttribute( "Url" ),\n                    Format:      root.getAttribute( "Format" ),\n                    DisplayRect: null,\n                    Overlap:     parseInt( root.getAttribute( "Overlap" ), 10 ),\n                    TileSize:    parseInt( root.getAttribute( "TileSize" ), 10 ),\n                    Size: {\n                        Height: parseInt( sizeNode.getAttribute( "Height" ), 10 ),\n                        Width:  parseInt( sizeNode.getAttribute( "Width" ), 10 )\n                    }\n                }\n            };\n\n            if ( !$.imageFormatSupported( configuration.Image.Format ) ) {\n                throw new Error(\n                    $.getString( "Errors.ImageFormat", configuration.Image.Format.toUpperCase() )\n                );\n            }\n\n            dispRectNodes = root.getElementsByTagName("DisplayRect" );\n            if (dispRectNodes === undefined) {\n                dispRectNodes = root.getElementsByTagNameNS(ns, "DisplayRect" )[ 0 ];\n            }\n\n            for ( i = 0; i < dispRectNodes.length; i++ ) {\n                dispRectNode = dispRectNodes[ i ];\n                rectNode     = dispRectNode.getElementsByTagName("Rect" )[ 0 ];\n                if (rectNode === undefined) {\n                    rectNode = dispRectNode.getElementsByTagNameNS(ns, "Rect" )[ 0 ];\n                }\n\n                displayRects.push({\n                    Rect: {\n                        X: parseInt( rectNode.getAttribute( "X" ), 10 ),\n                        Y: parseInt( rectNode.getAttribute( "Y" ), 10 ),\n                        Width: parseInt( rectNode.getAttribute( "Width" ), 10 ),\n                        Height: parseInt( rectNode.getAttribute( "Height" ), 10 ),\n                        MinLevel: parseInt( dispRectNode.getAttribute( "MinLevel" ), 10 ),\n                        MaxLevel: parseInt( dispRectNode.getAttribute( "MaxLevel" ), 10 )\n                    }\n                });\n            }\n\n            if( displayRects.length ){\n                configuration.Image.DisplayRect = displayRects;\n            }\n\n            return configureFromObject( tileSource, configuration );\n\n        } catch ( e ) {\n            throw (e instanceof Error) ?\n                e :\n                new Error( $.getString("Errors.Dzi") );\n        }\n    } else if ( rootName == "Collection" ) {\n        throw new Error( $.getString( "Errors.Dzc" ) );\n    } else if ( rootName == "Error" ) {\n        var messageNode = root.getElementsByTagName("Message")[0];\n        var message = messageNode.firstChild.nodeValue;\n        throw new Error(message);\n    }\n\n    throw new Error( $.getString( "Errors.Dzi" ) );\n}\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction configureFromObject( tileSource, configuration ){\n    var imageData     = configuration.Image,\n        tilesUrl      = imageData.Url,\n        fileFormat    = imageData.Format,\n        sizeData      = imageData.Size,\n        dispRectData  = imageData.DisplayRect || [],\n        width         = parseInt( sizeData.Width, 10 ),\n        height        = parseInt( sizeData.Height, 10 ),\n        tileSize      = parseInt( imageData.TileSize, 10 ),\n        tileOverlap   = parseInt( imageData.Overlap, 10 ),\n        displayRects  = [],\n        rectData,\n        i;\n\n    //TODO: need to figure out out to better handle image format compatibility\n    //      which actually includes additional file formats like xml and pdf\n    //      and plain text for various tilesource implementations to avoid low\n    //      level errors.\n    //\n    //      For now, just don\'t perform the check.\n    //\n    /*if ( !imageFormatSupported( fileFormat ) ) {\n        throw new Error(\n            $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )\n        );\n    }*/\n\n    for ( i = 0; i < dispRectData.length; i++ ) {\n        rectData = dispRectData[ i ].Rect;\n\n        displayRects.push( new $.DisplayRect(\n            parseInt( rectData.X, 10 ),\n            parseInt( rectData.Y, 10 ),\n            parseInt( rectData.Width, 10 ),\n            parseInt( rectData.Height, 10 ),\n            parseInt( rectData.MinLevel, 10 ),\n            parseInt( rectData.MaxLevel, 10 )\n        ));\n    }\n\n    return $.extend(true, {\n        width: width, /* width *required */\n        height: height, /* height *required */\n        tileSize: tileSize, /* tileSize *required */\n        tileOverlap: tileOverlap, /* tileOverlap *required */\n        minLevel: null, /* minLevel */\n        maxLevel: null, /* maxLevel */\n        tilesUrl: tilesUrl, /* tilesUrl */\n        fileFormat: fileFormat, /* fileFormat */\n        displayRects: displayRects /* displayRects */\n    }, configuration );\n\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - IIIFTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class IIIFTileSource\n * @classdesc A client implementation of the International Image Interoperability Framework\n * Format: Image API 1.0 - 2.1\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @see http://iiif.io/api/image/\n */\n$.IIIFTileSource = function( options ){\n\n\n    $.extend( true, this, options );\n\n    if ( !( this.height && this.width && this[\'@id\'] ) ) {\n        throw new Error( \'IIIF required parameters not provided.\' );\n    }\n\n    options.tileSizePerScaleFactor = {};\n\n    // N.B. 2.0 renamed scale_factors to scaleFactors\n    if ( this.tile_width && this.tile_height ) {\n        options.tileWidth = this.tile_width;\n        options.tileHeight = this.tile_height;\n    } else if ( this.tile_width ) {\n        options.tileSize = this.tile_width;\n    } else if ( this.tile_height ) {\n        options.tileSize = this.tile_height;\n    } else if ( this.tiles ) {\n        // Version 2.0 forwards\n        if ( this.tiles.length == 1 ) {\n            options.tileWidth  = this.tiles[0].width;\n            // Use height if provided, otherwise assume square tiles and use width.\n            options.tileHeight = this.tiles[0].height || this.tiles[0].width;\n            this.scale_factors = this.tiles[0].scaleFactors;\n        } else {\n            // Multiple tile sizes at different levels\n            this.scale_factors = [];\n            for (var t = 0; t < this.tiles.length; t++ ) {\n                for (var sf = 0; sf < this.tiles[t].scaleFactors.length; sf++) {\n                    var scaleFactor = this.tiles[t].scaleFactors[sf];\n                    this.scale_factors.push(scaleFactor);\n                    options.tileSizePerScaleFactor[scaleFactor] = {\n                        width: this.tiles[t].width,\n                        height: this.tiles[t].height || this.tiles[t].width\n                    };\n                }\n            }\n        }\n    } else if ( canBeTiled(options.profile) ) {\n        // use the largest of tileOptions that is smaller than the short dimension\n        var shortDim = Math.min( this.height, this.width ),\n            tileOptions = [256,512,1024],\n            smallerTiles = [];\n\n        for ( var c = 0; c < tileOptions.length; c++ ) {\n            if ( tileOptions[c] <= shortDim ) {\n                smallerTiles.push( tileOptions[c] );\n            }\n        }\n\n        if ( smallerTiles.length > 0 ) {\n            options.tileSize = Math.max.apply( null, smallerTiles );\n        } else {\n            // If we\'re smaller than 256, just use the short side.\n            options.tileSize = shortDim;\n        }\n    } else if (this.sizes && this.sizes.length > 0) {\n        // This info.json can\'t be tiled, but we can still construct a legacy pyramid from the sizes array. \n        // In this mode, IIIFTileSource will call functions from the abstract baseTileSource or the \n        // LegacyTileSource instead of performing IIIF tiling.      \n        this.emulateLegacyImagePyramid = true;\n        \n        options.levels = constructLevels( this );\n        // use the largest available size to define tiles\n        $.extend( true, options, {\n            width: options.levels[ options.levels.length - 1 ].width,\n            height: options.levels[ options.levels.length - 1 ].height,\n            tileSize: Math.max( options.height, options.width ),\n            tileOverlap: 0,\n            minLevel: 0,\n            maxLevel: options.levels.length - 1\n        });\n        this.levels = options.levels;\n    } else {\n        $.console.error("Nothing in the info.json to construct image pyramids from");\n    }\n\n    if (!options.maxLevel && !this.emulateLegacyImagePyramid) {\n        if (!this.scale_factors) {\n            options.maxLevel = Number(Math.ceil(Math.log(Math.max(this.width, this.height), 2)));\n        } else {\n            options.maxLevel = Math.floor(Math.pow(Math.max.apply(null, this.scale_factors), 0.5));\n        }\n    }\n\n    $.TileSource.apply( this, [ options ] );\n};\n\n$.extend( $.IIIFTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.IIIFTileSource.prototype */{\n    /**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */\n     \n    supports: function( data, url ) {\n        // Version 2.0 and forwards\n        if (data.protocol && data.protocol == \'http://iiif.io/api/image\') {\n            return true;\n        // Version 1.1\n        } else if ( data[\'@context\'] && (\n            data[\'@context\'] == "http://library.stanford.edu/iiif/image-api/1.1/context.json" ||\n            data[\'@context\'] == "http://iiif.io/api/image/1/context.json") ) {\n            // N.B. the iiif.io context is wrong, but where the representation lives so likely to be used\n            return true;\n\n        // Version 1.0\n        } else if ( data.profile &&\n            data.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html") === 0) {\n            return true;\n        } else if ( data.identifier && data.width && data.height ) {\n            return true;\n        } else if ( data.documentElement &&\n            "info" == data.documentElement.tagName &&\n            "http://library.stanford.edu/iiif/image-api/ns/" ==\n                data.documentElement.namespaceURI) {\n            return true;\n\n        // Not IIIF\n        } else {\n            return false;\n        }\n    },\n\n    /**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @example <caption>IIIF 1.1 Info Looks like this</caption>\n     * {\n     *   "@context" : "http://library.stanford.edu/iiif/image-api/1.1/context.json",\n     *   "@id" : "http://iiif.example.com/prefix/1E34750D-38DB-4825-A38A-B60A345E591C",\n     *   "width" : 6000,\n     *   "height" : 4000,\n     *   "scale_factors" : [ 1, 2, 4 ],\n     *   "tile_width" : 1024,\n     *   "tile_height" : 1024,\n     *   "formats" : [ "jpg", "png" ],\n     *   "qualities" : [ "native", "grey" ],\n     *   "profile" : "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0"\n     * }\n     */\n    configure: function( data, url ){\n        // Try to deduce our version and fake it upwards if needed\n        if ( !$.isPlainObject(data) ) {\n            var options = configureFromXml10( data );\n            options[\'@context\'] = "http://iiif.io/api/image/1.0/context.json";\n            options[\'@id\'] = url.replace(\'/info.xml\', \'\');\n            return options;\n        } else if ( !data[\'@context\'] ) {\n            data[\'@context\'] = \'http://iiif.io/api/image/1.0/context.json\';\n            data[\'@id\'] = url.replace(\'/info.json\', \'\');\n            return data;\n        } else {\n            return data;\n        }\n    },\n\n    /**\n     * Return the tileWidth for the given level.\n     * @function\n     * @param {Number} level\n     */\n    getTileWidth: function( level ) {\n\n        if(this.emulateLegacyImagePyramid) {\n            return $.TileSource.prototype.getTileWidth.call(this, level);\n        }\n\n        var scaleFactor = Math.pow(2, this.maxLevel - level);\n\n        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {\n            return this.tileSizePerScaleFactor[scaleFactor].width;\n        }\n        return this._tileWidth;\n    },\n\n    /**\n     * Return the tileHeight for the given level.\n     * @function\n     * @param {Number} level\n     */\n    getTileHeight: function( level ) {\n\n        if(this.emulateLegacyImagePyramid) {\n            return $.TileSource.prototype.getTileHeight.call(this, level);\n        }\n\n        var scaleFactor = Math.pow(2, this.maxLevel - level);\n\n        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {\n            return this.tileSizePerScaleFactor[scaleFactor].height;\n        }\n        return this._tileHeight;\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getLevelScale: function ( level ) {\n\n        if(this.emulateLegacyImagePyramid) {\n            var levelScale = NaN;\n            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {\n                levelScale =\n                    this.levels[level].width /\n                    this.levels[this.maxLevel].width;\n            }\n            return levelScale;\n        }\n\n        return $.TileSource.prototype.getLevelScale.call(this, level);\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getNumTiles: function( level ) {\n\n        if(this.emulateLegacyImagePyramid) {\n            var scale = this.getLevelScale(level);\n            if (scale) {\n                return new $.Point(1, 1);\n            } else {\n                return new $.Point(0, 0);\n            }\n        }\n\n        return $.TileSource.prototype.getNumTiles.call(this, level);\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {OpenSeadragon.Point} point\n     */\n    getTileAtPoint: function( level, point ) {\n\n        if(this.emulateLegacyImagePyramid) {\n            return new $.Point(0, 0);\n        }\n\n        return $.TileSource.prototype.getTileAtPoint.call(this, level, point);\n    },\n\n\n    /**\n     * Responsible for retrieving the url which will return an image for the\n     * region specified by the given x, y, and level components.\n     * @function\n     * @param {Number} level - z index\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */\n    getTileUrl: function( level, x, y ){\n\n        if(this.emulateLegacyImagePyramid) {\n            var url = null;\n            if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {\n                url = this.levels[ level ].url;\n            }\n            return url;\n        }\n\n        //# constants\n        var IIIF_ROTATION = \'0\',\n            //## get the scale (level as a decimal)\n            scale = Math.pow( 0.5, this.maxLevel - level ),\n\n            //# image dimensions at this level\n            levelWidth = Math.ceil( this.width * scale ),\n            levelHeight = Math.ceil( this.height * scale ),\n\n            //## iiif region\n            tileWidth,\n            tileHeight,\n            iiifTileSizeWidth,\n            iiifTileSizeHeight,\n            iiifRegion,\n            iiifTileX,\n            iiifTileY,\n            iiifTileW,\n            iiifTileH,\n            iiifSize,\n            iiifQuality,\n            uri;\n\n        tileWidth = this.getTileWidth(level);\n        tileHeight = this.getTileHeight(level);\n        iiifTileSizeWidth = Math.ceil( tileWidth / scale );\n        iiifTileSizeHeight = Math.ceil( tileHeight / scale );\n\n        if ( this[\'@context\'].indexOf(\'/1.0/context.json\') > -1 ||\n             this[\'@context\'].indexOf(\'/1.1/context.json\') > -1 ||\n             this[\'@context\'].indexOf(\'/1/context.json\') > -1 ) {\n            iiifQuality = "native.jpg";\n        } else {\n            iiifQuality = "default.jpg";\n        }\n\n        if ( levelWidth < tileWidth && levelHeight < tileHeight ){\n            iiifSize = levelWidth + ",";\n            iiifRegion = \'full\';\n        } else {\n            iiifTileX = x * iiifTileSizeWidth;\n            iiifTileY = y * iiifTileSizeHeight;\n            iiifTileW = Math.min( iiifTileSizeWidth, this.width - iiifTileX );\n            iiifTileH = Math.min( iiifTileSizeHeight, this.height - iiifTileY );\n            iiifSize = Math.ceil( iiifTileW * scale ) + ",";\n            iiifRegion = [ iiifTileX, iiifTileY, iiifTileW, iiifTileH ].join( \',\' );\n        }\n        uri = [ this[\'@id\'], iiifRegion, iiifSize, IIIF_ROTATION, iiifQuality ].join( \'/\' );\n\n        return uri;\n    }\n\n  });\n\n    /**\n     * Determine whether arbitrary tile requests can be made against a service with the given profile\n     * @function\n     * @param {object} profile - IIIF profile object\n     * @throws {Error}\n     */\n    function canBeTiled (profile ) {\n        var level0Profiles = [\n            "http://library.stanford.edu/iiif/image-api/compliance.html#level0",\n            "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0",\n            "http://iiif.io/api/image/2/level0.json"\n        ];\n        var isLevel0 = (level0Profiles.indexOf(profile[0]) != -1);\n        return !isLevel0 || (profile.indexOf("sizeByW") != -1);\n    }\n\n    /**\n     * Build the legacy pyramid URLs (one tile per level)\n     * @function\n     * @param {object} options - infoJson\n     * @throws {Error}\n     */\n    function constructLevels(options) {\n        var levels = [];\n        for(var i=0; i<options.sizes.length; i++) {\n            levels.push({\n                url: options[\'@id\'] + \'/full/\' + options.sizes[i].width + \',/0/default.jpg\',\n                width: options.sizes[i].width,\n                height: options.sizes[i].height\n            });\n        }\n        return levels.sort(function(a,b){return a.width - b.width;});\n    }\n\n\n    function configureFromXml10(xmlDoc) {\n        //parse the xml\n        if ( !xmlDoc || !xmlDoc.documentElement ) {\n            throw new Error( $.getString( "Errors.Xml" ) );\n        }\n\n        var root            = xmlDoc.documentElement,\n            rootName        = root.tagName,\n            configuration   = null;\n\n        if ( rootName == "info" ) {\n            try {\n                configuration = {};\n                parseXML10( root, configuration );\n                return configuration;\n\n            } catch ( e ) {\n                throw (e instanceof Error) ?\n                    e :\n                    new Error( $.getString("Errors.IIIF") );\n            }\n        }\n        throw new Error( $.getString( "Errors.IIIF" ) );\n    }\n\n    function parseXML10( node, configuration, property ) {\n        var i,\n            value;\n        if ( node.nodeType == 3 && property ) {//text node\n            value = node.nodeValue.trim();\n            if( value.match(/^\\d*$/)){\n                value = Number( value );\n            }\n            if( !configuration[ property ] ){\n                configuration[ property ] = value;\n            }else{\n                if( !$.isArray( configuration[ property ] ) ){\n                    configuration[ property ] = [ configuration[ property ] ];\n                }\n                configuration[ property ].push( value );\n            }\n        } else if( node.nodeType == 1 ){\n            for( i = 0; i < node.childNodes.length; i++ ){\n                parseXML10( node.childNodes[ i ], configuration, node.nodeName );\n            }\n        }\n    }\n\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - OsmTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * Derived from the OSM tile source in Rainer Simon\'s seajax-utils project\n * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed\n * the included code to the OpenSeadragon project under the New BSD license;\n * see <https://github.com/openseadragon/openseadragon/issues/58>.\n */\n\n\n(function( $ ){\n\n/**\n * @class OsmTileSource\n * @classdesc A tilesource implementation for OpenStreetMap.<br><br>\n *\n * Note 1. Zoomlevels. Deep Zoom and OSM define zoom levels differently. In  Deep\n * Zoom, level 0 equals an image of 1x1 pixels. In OSM, level 0 equals an image of\n * 256x256 levels (see http://gasi.ch/blog/inside-deep-zoom-2). I.e. there is a\n * difference of log2(256)=8 levels.<br><br>\n *\n * Note 2. Image dimension. According to the OSM Wiki\n * (http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels)\n * the highest Mapnik zoom level has 256.144x256.144 tiles, with a 256x256\n * pixel size. I.e. the Deep Zoom image dimension is 65.572.864x65.572.864\n * pixels.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n */\n$.OsmTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {\n    var options;\n\n    if( $.isPlainObject( width ) ){\n        options = width;\n    }else{\n        options = {\n            width: arguments[0],\n            height: arguments[1],\n            tileSize: arguments[2],\n            tileOverlap: arguments[3],\n            tilesUrl: arguments[4]\n        };\n    }\n    //apply default setting for standard public OpenStreatMaps service\n    //but allow them to be specified so fliks can host there own instance\n    //or apply against other services supportting the same standard\n    if( !options.width || !options.height ){\n        options.width = 65572864;\n        options.height = 65572864;\n    }\n    if( !options.tileSize ){\n        options.tileSize = 256;\n        options.tileOverlap = 0;\n    }\n    if( !options.tilesUrl ){\n        options.tilesUrl = "http://tile.openstreetmap.org/";\n    }\n    options.minLevel = 8;\n\n    $.TileSource.apply( this, [ options ] );\n\n};\n\n$.extend( $.OsmTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.OsmTileSource.prototype */{\n\n\n    /**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */\n    supports: function( data, url ){\n        return (\n            data.type &&\n            "openstreetmaps" == data.type\n        );\n    },\n\n    /**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @param {String} url - the url the data was retreived from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */\n    configure: function( data, url ){\n        return data;\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    getTileUrl: function( level, x, y ) {\n        return this.tilesUrl + (level - 8) + "/" + x + "/" + y + ".png";\n    }\n});\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - TmsTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * Derived from the TMS tile source in Rainer Simon\'s seajax-utils project\n * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed\n * the included code to the OpenSeadragon project under the New BSD license;\n * see <https://github.com/openseadragon/openseadragon/issues/58>.\n */\n\n\n(function( $ ){\n\n/**\n * @class TmsTileSource\n * @classdesc A tilesource implementation for Tiled Map Services (TMS).\n * TMS tile scheme ( [ as supported by OpenLayers ] is described here\n * ( http://openlayers.org/dev/examples/tms.html ).\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n */\n$.TmsTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {\n    var options;\n\n    if( $.isPlainObject( width ) ){\n        options = width;\n    }else{\n        options = {\n            width: arguments[0],\n            height: arguments[1],\n            tileSize: arguments[2],\n            tileOverlap: arguments[3],\n            tilesUrl: arguments[4]\n        };\n    }\n    // TMS has integer multiples of 256 for width/height and adds buffer\n    // if necessary -> account for this!\n    var bufferedWidth = Math.ceil(options.width / 256) * 256,\n        bufferedHeight = Math.ceil(options.height / 256) * 256,\n        max;\n\n    // Compute number of zoomlevels in this tileset\n    if (bufferedWidth > bufferedHeight) {\n        max = bufferedWidth / 256;\n    } else {\n        max = bufferedHeight / 256;\n    }\n    options.maxLevel = Math.ceil(Math.log(max)/Math.log(2)) - 1;\n    options.tileSize = 256;\n    options.width = bufferedWidth;\n    options.height = bufferedHeight;\n\n    $.TileSource.apply( this, [ options ] );\n\n};\n\n$.extend( $.TmsTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.TmsTileSource.prototype */{\n\n\n    /**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */\n    supports: function( data, url ){\n        return ( data.type && "tiledmapservice" == data.type );\n    },\n\n    /**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @param {String} url - the url the data was retreived from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */\n    configure: function( data, url ){\n        return data;\n    },\n\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */\n    getTileUrl: function( level, x, y ) {\n        // Convert from Deep Zoom definition to TMS zoom definition\n        var yTiles = this.getNumTiles( level ).y - 1;\n\n        return this.tilesUrl + level + "/" + x + "/" +  (yTiles - y) + ".png";\n    }\n});\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - LegacyTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class LegacyTileSource\n * @classdesc The LegacyTileSource allows simple, traditional image pyramids to be loaded\n * into an OpenSeadragon Viewer.  Basically, this translates to the historically\n * common practice of starting with a \'master\' image, maybe a tiff for example,\n * and generating a set of \'service\' images like one or more thumbnails, a medium\n * resolution image and a high resolution image in standard web formats like\n * png or jpg.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Array} levels An array of file descriptions, each is an object with\n *      a \'url\', a \'width\', and a \'height\'.  Overriding classes can expect more\n *      properties but these properties are sufficient for this implementation.\n *      Additionally, the levels are required to be listed in order from\n *      smallest to largest.\n * @property {Number} aspectRatio\n * @property {Number} dimensions\n * @property {Number} tileSize\n * @property {Number} tileOverlap\n * @property {Number} minLevel\n * @property {Number} maxLevel\n * @property {Array}  levels\n */\n$.LegacyTileSource = function( levels ) {\n\n    var options,\n        width,\n        height;\n\n    if( $.isArray( levels ) ){\n        options = {\n            type: \'legacy-image-pyramid\',\n            levels: levels\n        };\n    }\n\n    //clean up the levels to make sure we support all formats\n    options.levels = filterFiles( options.levels );\n\n    if ( options.levels.length > 0 ) {\n        width = options.levels[ options.levels.length - 1 ].width;\n        height = options.levels[ options.levels.length - 1 ].height;\n    }\n    else {\n        width = 0;\n        height = 0;\n        $.console.error( "No supported image formats found" );\n    }\n\n    $.extend( true, options, {\n        width: width,\n        height: height,\n        tileSize: Math.max( height, width ),\n        tileOverlap: 0,\n        minLevel: 0,\n        maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0\n    } );\n\n    $.TileSource.apply( this, [ options ] );\n\n    this.levels = options.levels;\n};\n\n$.extend( $.LegacyTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.LegacyTileSource.prototype */{\n    /**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */\n    supports: function( data, url ){\n        return (\n            data.type &&\n            "legacy-image-pyramid" == data.type\n        ) || (\n            data.documentElement &&\n            "legacy-image-pyramid" == data.documentElement.getAttribute(\'type\')\n        );\n    },\n\n\n    /**\n     *\n     * @function\n     * @param {Object|XMLDocument} configuration - the raw configuration\n     * @param {String} dataUrl - the url the data was retreived from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */\n    configure: function( configuration, dataUrl ){\n\n        var options;\n\n        if( !$.isPlainObject(configuration) ){\n\n            options = configureFromXML( this, configuration );\n\n        }else{\n\n            options = configureFromObject( this, configuration );\n        }\n\n        return options;\n\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getLevelScale: function ( level ) {\n        var levelScale = NaN;\n        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {\n            levelScale =\n                this.levels[ level ].width /\n                this.levels[ this.maxLevel ].width;\n        }\n        return levelScale;\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     */\n    getNumTiles: function( level ) {\n        var scale = this.getLevelScale( level );\n        if ( scale ){\n            return new $.Point( 1, 1 );\n        } else {\n            return new $.Point( 0, 0 );\n        }\n    },\n\n    /**\n     * @function\n     * @param {Number} level\n     * @param {OpenSeadragon.Point} point\n     */\n    getTileAtPoint: function( level, point ) {\n        return new $.Point( 0, 0 );\n    },\n\n\n    /**\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */\n    getTileUrl: function ( level, x, y ) {\n        var url = null;\n        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {\n            url = this.levels[ level ].url;\n        }\n        return url;\n    }\n} );\n\n/**\n * This method removes any files from the Array which dont conform to our\n * basic requirements for a \'level\' in the LegacyTileSource.\n * @private\n * @inner\n * @function\n */\nfunction filterFiles( files ){\n    var filtered = [],\n        file,\n        i;\n    for( i = 0; i < files.length; i++ ){\n        file = files[ i ];\n        if( file.height &&\n            file.width &&\n            file.url && (\n                file.url.toLowerCase().match(/^.*\\.(png|jpg|jpeg|gif)(?:\\?.*)?$/) || (\n                    file.mimetype &&\n                    file.mimetype.toLowerCase().match(/^.*\\/(png|jpg|jpeg|gif)$/)\n                )\n            ) ){\n            //This is sufficient to serve as a level\n            filtered.push({\n                url: file.url,\n                width: Number( file.width ),\n                height: Number( file.height )\n            });\n        }\n        else {\n            $.console.error( \'Unsupported image format: %s\', file.url ? file.url : \'<no URL>\' );\n        }\n    }\n\n    return filtered.sort(function(a,b){\n        return a.height - b.height;\n    });\n\n}\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction configureFromXML( tileSource, xmlDoc ){\n\n    if ( !xmlDoc || !xmlDoc.documentElement ) {\n        throw new Error( $.getString( "Errors.Xml" ) );\n    }\n\n    var root         = xmlDoc.documentElement,\n        rootName     = root.tagName,\n        conf         = null,\n        levels       = [],\n        level,\n        i;\n\n    if ( rootName == "image" ) {\n\n        try {\n            conf = {\n                type:        root.getAttribute( "type" ),\n                levels:      []\n            };\n\n            levels = root.getElementsByTagName( "level" );\n            for ( i = 0; i < levels.length; i++ ) {\n                level = levels[ i ];\n\n                conf.levels .push({\n                    url:    level.getAttribute( "url" ),\n                    width:  parseInt( level.getAttribute( "width" ), 10 ),\n                    height: parseInt( level.getAttribute( "height" ), 10 )\n                });\n            }\n\n            return configureFromObject( tileSource, conf );\n\n        } catch ( e ) {\n            throw (e instanceof Error) ?\n                e :\n                new Error( \'Unknown error parsing Legacy Image Pyramid XML.\' );\n        }\n    } else if ( rootName == "collection" ) {\n        throw new Error( \'Legacy Image Pyramid Collections not yet supported.\' );\n    } else if ( rootName == "error" ) {\n        throw new Error( \'Error: \' + xmlDoc );\n    }\n\n    throw new Error( \'Unknown element \' + rootName );\n}\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction configureFromObject( tileSource, configuration ){\n\n    return configuration.levels;\n\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - ImageTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function ($) {\n\n    /**\n     * @class ImageTileSource\n     * @classdesc The ImageTileSource allows a simple image to be loaded\n     * into an OpenSeadragon Viewer.\n     * There are 2 ways to open an ImageTileSource:\n     * 1. viewer.open({type: \'image\', url: fooUrl});\n     * 2. viewer.open(new OpenSeadragon.ImageTileSource({url: fooUrl}));\n     *\n     * With the first syntax, the crossOriginPolicy, ajaxWithCredentials and\n     * useCanvas options are inherited from the viewer if they are not\n     * specified directly in the options object.\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.TileSource\n     * @param {Object} options Options object.\n     * @param {String} options.url URL of the image\n     * @param {Boolean} [options.buildPyramid=true] If set to true (default), a\n     * pyramid will be built internally to provide a better downsampling.\n     * @param {String|Boolean} [options.crossOriginPolicy=false] Valid values are\n     * \'Anonymous\', \'use-credentials\', and false. If false, image requests will\n     * not use CORS preventing internal pyramid building for images from other\n     * domains.\n     * @param {String|Boolean} [options.ajaxWithCredentials=false] Whether to set\n     * the withCredentials XHR flag for AJAX requests (when loading tile sources).\n     * @param {Boolean} [options.useCanvas=true] Set to false to prevent any use\n     * of the canvas API.\n     */\n    $.ImageTileSource = function (options) {\n\n        options = $.extend({\n            buildPyramid: true,\n            crossOriginPolicy: false,\n            ajaxWithCredentials: false,\n            useCanvas: true\n        }, options);\n        $.TileSource.apply(this, [options]);\n\n    };\n\n    $.extend($.ImageTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.ImageTileSource.prototype */{\n        /**\n         * Determine if the data and/or url imply the image service is supported by\n         * this tile source.\n         * @function\n         * @param {Object|Array} data\n         * @param {String} optional - url\n         */\n        supports: function (data, url) {\n            return data.type && data.type === "image";\n        },\n        /**\n         *\n         * @function\n         * @param {Object} options - the options\n         * @param {String} dataUrl - the url the image was retreived from, if any.\n         * @return {Object} options - A dictionary of keyword arguments sufficient\n         *      to configure this tile sources constructor.\n         */\n        configure: function (options, dataUrl) {\n            return options;\n        },\n        /**\n         * Responsible for retrieving, and caching the\n         * image metadata pertinent to this TileSources implementation.\n         * @function\n         * @param {String} url\n         * @throws {Error}\n         */\n        getImageInfo: function (url) {\n            var image = this._image = new Image();\n            var _this = this;\n\n            if (this.crossOriginPolicy) {\n                image.crossOrigin = this.crossOriginPolicy;\n            }\n            if (this.ajaxWithCredentials) {\n                image.useCredentials = this.ajaxWithCredentials;\n            }\n\n            $.addEvent(image, \'load\', function () {\n                _this.width = image.naturalWidth;\n                _this.height = image.naturalHeight;\n                _this.aspectRatio = _this.width / _this.height;\n                _this.dimensions = new $.Point(_this.width, _this.height);\n                _this._tileWidth = _this.width;\n                _this._tileHeight = _this.height;\n                _this.tileOverlap = 0;\n                _this.minLevel = 0;\n                _this.levels = _this._buildLevels();\n                _this.maxLevel = _this.levels.length - 1;\n\n                _this.ready = true;\n\n                // Note: this event is documented elsewhere, in TileSource\n                _this.raiseEvent(\'ready\', {tileSource: _this});\n            });\n\n            $.addEvent(image, \'error\', function () {\n                // Note: this event is documented elsewhere, in TileSource\n                _this.raiseEvent(\'open-failed\', {\n                    message: "Error loading image at " + url,\n                    source: url\n                });\n            });\n\n            image.src = url;\n        },\n        /**\n         * @function\n         * @param {Number} level\n         */\n        getLevelScale: function (level) {\n            var levelScale = NaN;\n            if (level >= this.minLevel && level <= this.maxLevel) {\n                levelScale =\n                        this.levels[level].width /\n                        this.levels[this.maxLevel].width;\n            }\n            return levelScale;\n        },\n        /**\n         * @function\n         * @param {Number} level\n         */\n        getNumTiles: function (level) {\n            var scale = this.getLevelScale(level);\n            if (scale) {\n                return new $.Point(1, 1);\n            } else {\n                return new $.Point(0, 0);\n            }\n        },\n        /**\n         * @function\n         * @param {Number} level\n         * @param {OpenSeadragon.Point} point\n         */\n        getTileAtPoint: function (level, point) {\n            return new $.Point(0, 0);\n        },\n        /**\n         * Retrieves a tile url\n         * @function\n         * @param {Number} level Level of the tile\n         * @param {Number} x x coordinate of the tile\n         * @param {Number} y y coordinate of the tile\n         */\n        getTileUrl: function (level, x, y) {\n            var url = null;\n            if (level >= this.minLevel && level <= this.maxLevel) {\n                url = this.levels[level].url;\n            }\n            return url;\n        },\n        /**\n         * Retrieves a tile context 2D\n         * @function\n         * @param {Number} level Level of the tile\n         * @param {Number} x x coordinate of the tile\n         * @param {Number} y y coordinate of the tile\n         */\n        getContext2D: function (level, x, y) {\n            var context = null;\n            if (level >= this.minLevel && level <= this.maxLevel) {\n                context = this.levels[level].context2D;\n            }\n            return context;\n        },\n\n        // private\n        //\n        // Builds the differents levels of the pyramid if possible\n        // (i.e. if canvas API enabled and no canvas tainting issue).\n        _buildLevels: function () {\n            var levels = [{\n                    url: this._image.src,\n                    width: this._image.naturalWidth,\n                    height: this._image.naturalHeight\n                }];\n\n            if (!this.buildPyramid || !$.supportsCanvas || !this.useCanvas) {\n                // We don\'t need the image anymore. Allows it to be GC.\n                delete this._image;\n                return levels;\n            }\n\n            var currentWidth = this._image.naturalWidth;\n            var currentHeight = this._image.naturalHeight;\n\n            var bigCanvas = document.createElement("canvas");\n            var bigContext = bigCanvas.getContext("2d");\n\n            bigCanvas.width = currentWidth;\n            bigCanvas.height = currentHeight;\n            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight);\n            // We cache the context of the highest level because the browser\n            // is a lot faster at downsampling something it already has\n            // downsampled before.\n            levels[0].context2D = bigContext;\n            // We don\'t need the image anymore. Allows it to be GC.\n            delete this._image;\n\n            if ($.isCanvasTainted(bigCanvas)) {\n                // If the canvas is tainted, we can\'t compute the pyramid.\n                return levels;\n            }\n\n            // We build smaller levels until either width or height becomes\n            // 1 pixel wide.\n            while (currentWidth >= 2 && currentHeight >= 2) {\n                currentWidth = Math.floor(currentWidth / 2);\n                currentHeight = Math.floor(currentHeight / 2);\n                var smallCanvas = document.createElement("canvas");\n                var smallContext = smallCanvas.getContext("2d");\n                smallCanvas.width = currentWidth;\n                smallCanvas.height = currentHeight;\n                smallContext.drawImage(bigCanvas, 0, 0, currentWidth, currentHeight);\n\n                levels.splice(0, 0, {\n                    context2D: smallContext,\n                    width: currentWidth,\n                    height: currentHeight\n                });\n\n                bigCanvas = smallCanvas;\n                bigContext = smallContext;\n            }\n            return levels;\n        }\n    });\n\n}(OpenSeadragon));\n\n/*\n * OpenSeadragon - TileSourceCollection\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n// deprecated\n$.TileSourceCollection = function( tileSize, tileSources, rows, layout  ) {\n    $.console.error(\'TileSourceCollection is deprecated; use World instead\');\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Button\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * An enumeration of button states\n * @member ButtonState\n * @memberof OpenSeadragon\n * @static\n * @type {Object}\n * @property {Number} REST\n * @property {Number} GROUP\n * @property {Number} HOVER\n * @property {Number} DOWN\n */\n$.ButtonState = {\n    REST:   0,\n    GROUP:  1,\n    HOVER:  2,\n    DOWN:   3\n};\n\n/**\n * @class Button\n * @classdesc Manages events, hover states for individual buttons, tool-tips, as well\n * as fading the buttons out when the user has not interacted with them\n * for a specified period.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n * @param {Element} [options.element=null] Element to use as the button. If not specified, an HTML &lt;button&gt; element is created.\n * @param {String} [options.tooltip=null] Provides context help for the button when the\n *  user hovers over it.\n * @param {String} [options.srcRest=null] URL of image to use in \'rest\' state.\n * @param {String} [options.srcGroup=null] URL of image to use in \'up\' state.\n * @param {String} [options.srcHover=null] URL of image to use in \'hover\' state.\n * @param {String} [options.srcDown=null] URL of image to use in \'down\' state.\n * @param {Number} [options.fadeDelay=0] How long to wait before fading.\n * @param {Number} [options.fadeLength=2000] How long should it take to fade the button.\n * @param {OpenSeadragon.EventHandler} [options.onPress=null] Event handler callback for {@link OpenSeadragon.Button.event:press}.\n * @param {OpenSeadragon.EventHandler} [options.onRelease=null] Event handler callback for {@link OpenSeadragon.Button.event:release}.\n * @param {OpenSeadragon.EventHandler} [options.onClick=null] Event handler callback for {@link OpenSeadragon.Button.event:click}.\n * @param {OpenSeadragon.EventHandler} [options.onEnter=null] Event handler callback for {@link OpenSeadragon.Button.event:enter}.\n * @param {OpenSeadragon.EventHandler} [options.onExit=null] Event handler callback for {@link OpenSeadragon.Button.event:exit}.\n * @param {OpenSeadragon.EventHandler} [options.onFocus=null] Event handler callback for {@link OpenSeadragon.Button.event:focus}.\n * @param {OpenSeadragon.EventHandler} [options.onBlur=null] Event handler callback for {@link OpenSeadragon.Button.event:blur}.\n */\n$.Button = function( options ) {\n\n    var _this = this;\n\n    $.EventSource.call( this );\n\n    $.extend( true, this, {\n\n        tooltip:            null,\n        srcRest:            null,\n        srcGroup:           null,\n        srcHover:           null,\n        srcDown:            null,\n        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,\n        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,\n        /**\n         * How long to wait before fading.\n         * @member {Number} fadeDelay\n         * @memberof OpenSeadragon.Button#\n         */\n        fadeDelay:          0,\n        /**\n         * How long should it take to fade the button.\n         * @member {Number} fadeLength\n         * @memberof OpenSeadragon.Button#\n         */\n        fadeLength:         2000,\n        onPress:            null,\n        onRelease:          null,\n        onClick:            null,\n        onEnter:            null,\n        onExit:             null,\n        onFocus:            null,\n        onBlur:             null\n\n    }, options );\n\n    /**\n     * The button element.\n     * @member {Element} element\n     * @memberof OpenSeadragon.Button#\n     */\n    this.element        = options.element   || $.makeNeutralElement( "div" );\n\n    //if the user has specified the element to bind the control to explicitly\n    //then do not add the default control images\n    if ( !options.element ) {\n        this.imgRest      = $.makeTransparentImage( this.srcRest );\n        this.imgGroup     = $.makeTransparentImage( this.srcGroup );\n        this.imgHover     = $.makeTransparentImage( this.srcHover );\n        this.imgDown      = $.makeTransparentImage( this.srcDown );\n\n        this.imgRest.alt  =\n        this.imgGroup.alt =\n        this.imgHover.alt =\n        this.imgDown.alt  =\n            this.tooltip;\n\n        this.element.style.position = "relative";\n        $.setElementTouchActionNone( this.element );\n\n        this.imgGroup.style.position =\n        this.imgHover.style.position =\n        this.imgDown.style.position  =\n            "absolute";\n\n        this.imgGroup.style.top =\n        this.imgHover.style.top =\n        this.imgDown.style.top  =\n            "0px";\n\n        this.imgGroup.style.left =\n        this.imgHover.style.left =\n        this.imgDown.style.left  =\n            "0px";\n\n        this.imgHover.style.visibility =\n        this.imgDown.style.visibility  =\n            "hidden";\n\n        if ( $.Browser.vendor == $.BROWSERS.FIREFOX  && $.Browser.version < 3 ){\n            this.imgGroup.style.top =\n            this.imgHover.style.top =\n            this.imgDown.style.top  =\n                "";\n        }\n\n        this.element.appendChild( this.imgRest );\n        this.element.appendChild( this.imgGroup );\n        this.element.appendChild( this.imgHover );\n        this.element.appendChild( this.imgDown );\n    }\n\n\n    this.addHandler( "press",     this.onPress );\n    this.addHandler( "release",   this.onRelease );\n    this.addHandler( "click",     this.onClick );\n    this.addHandler( "enter",     this.onEnter );\n    this.addHandler( "exit",      this.onExit );\n    this.addHandler( "focus",     this.onFocus );\n    this.addHandler( "blur",      this.onBlur );\n\n    /**\n     * The button\'s current state.\n     * @member {OpenSeadragon.ButtonState} currentState\n     * @memberof OpenSeadragon.Button#\n     */\n    this.currentState = $.ButtonState.GROUP;\n\n    // When the button last began to fade.\n    this.fadeBeginTime  = null;\n    // Whether this button should fade after user stops interacting with the viewport.\n    this.shouldFade     = false;\n\n    this.element.style.display  = "inline-block";\n    this.element.style.position = "relative";\n    this.element.title          = this.tooltip;\n\n    /**\n     * Tracks mouse/touch/key events on the button.\n     * @member {OpenSeadragon.MouseTracker} tracker\n     * @memberof OpenSeadragon.Button#\n     */\n    this.tracker = new $.MouseTracker({\n\n        element:            this.element,\n        clickTimeThreshold: this.clickTimeThreshold,\n        clickDistThreshold: this.clickDistThreshold,\n\n        enterHandler: function( event ) {\n            if ( event.insideElementPressed ) {\n                inTo( _this, $.ButtonState.DOWN );\n                /**\n                 * Raised when the cursor enters the Button element.\n                 *\n                 * @event enter\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( "enter", { originalEvent: event.originalEvent } );\n            } else if ( !event.buttonDownAny ) {\n                inTo( _this, $.ButtonState.HOVER );\n            }\n        },\n\n        focusHandler: function ( event ) {\n            this.enterHandler( event );\n            /**\n             * Raised when the Button element receives focus.\n             *\n             * @event focus\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            _this.raiseEvent( "focus", { originalEvent: event.originalEvent } );\n        },\n\n        exitHandler: function( event ) {\n            outTo( _this, $.ButtonState.GROUP );\n            if ( event.insideElementPressed ) {\n                /**\n                 * Raised when the cursor leaves the Button element.\n                 *\n                 * @event exit\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( "exit", { originalEvent: event.originalEvent } );\n            }\n        },\n\n        blurHandler: function ( event ) {\n            this.exitHandler( event );\n            /**\n             * Raised when the Button element loses focus.\n             *\n             * @event blur\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            _this.raiseEvent( "blur", { originalEvent: event.originalEvent } );\n        },\n\n        pressHandler: function ( event ) {\n            inTo( _this, $.ButtonState.DOWN );\n            /**\n             * Raised when a mouse button is pressed or touch occurs in the Button element.\n             *\n             * @event press\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            _this.raiseEvent( "press", { originalEvent: event.originalEvent } );\n        },\n\n        releaseHandler: function( event ) {\n            if ( event.insideElementPressed && event.insideElementReleased ) {\n                outTo( _this, $.ButtonState.HOVER );\n                /**\n                 * Raised when the mouse button is released or touch ends in the Button element.\n                 *\n                 * @event release\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );\n            } else if ( event.insideElementPressed ) {\n                outTo( _this, $.ButtonState.GROUP );\n            } else {\n                inTo( _this, $.ButtonState.HOVER );\n            }\n        },\n\n        clickHandler: function( event ) {\n            if ( event.quick ) {\n                /**\n                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.\n                 *\n                 * @event click\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent("click", { originalEvent: event.originalEvent });\n            }\n        },\n\n        keyHandler: function( event ){\n            //console.log( "%s : handling key %s!", _this.tooltip, event.keyCode);\n            if( 13 === event.keyCode ){\n                /***\n                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.\n                 *\n                 * @event click\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( "click", { originalEvent: event.originalEvent } );\n                /***\n                 * Raised when the mouse button is released or touch ends in the Button element.\n                 *\n                 * @event release\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */\n                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );\n                return false;\n            }\n            return true;\n        }\n\n    });\n\n    outTo( this, $.ButtonState.REST );\n};\n\n$.extend( $.Button.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.Button.prototype */{\n\n    /**\n     * TODO: Determine what this function is intended to do and if it\'s actually\n     * useful as an API point.\n     * @function\n     */\n    notifyGroupEnter: function() {\n        inTo( this, $.ButtonState.GROUP );\n    },\n\n    /**\n     * TODO: Determine what this function is intended to do and if it\'s actually\n     * useful as an API point.\n     * @function\n     */\n    notifyGroupExit: function() {\n        outTo( this, $.ButtonState.REST );\n    },\n\n    /**\n     * @function\n     */\n    disable: function(){\n        this.notifyGroupExit();\n        this.element.disabled = true;\n        $.setElementOpacity( this.element, 0.2, true );\n    },\n\n    /**\n     * @function\n     */\n    enable: function(){\n        this.element.disabled = false;\n        $.setElementOpacity( this.element, 1.0, true );\n        this.notifyGroupEnter();\n    }\n\n});\n\n\nfunction scheduleFade( button ) {\n    $.requestAnimationFrame(function(){\n        updateFade( button );\n    });\n}\n\nfunction updateFade( button ) {\n    var currentTime,\n        deltaTime,\n        opacity;\n\n    if ( button.shouldFade ) {\n        currentTime = $.now();\n        deltaTime   = currentTime - button.fadeBeginTime;\n        opacity     = 1.0 - deltaTime / button.fadeLength;\n        opacity     = Math.min( 1.0, opacity );\n        opacity     = Math.max( 0.0, opacity );\n\n        if( button.imgGroup ){\n            $.setElementOpacity( button.imgGroup, opacity, true );\n        }\n        if ( opacity > 0 ) {\n            // fade again\n            scheduleFade( button );\n        }\n    }\n}\n\nfunction beginFading( button ) {\n    button.shouldFade = true;\n    button.fadeBeginTime = $.now() + button.fadeDelay;\n    window.setTimeout( function(){\n        scheduleFade( button );\n    }, button.fadeDelay );\n}\n\nfunction stopFading( button ) {\n    button.shouldFade = false;\n    if( button.imgGroup ){\n        $.setElementOpacity( button.imgGroup, 1.0, true );\n    }\n}\n\nfunction inTo( button, newState ) {\n\n    if( button.element.disabled ){\n        return;\n    }\n\n    if ( newState >= $.ButtonState.GROUP &&\n         button.currentState == $.ButtonState.REST ) {\n        stopFading( button );\n        button.currentState = $.ButtonState.GROUP;\n    }\n\n    if ( newState >= $.ButtonState.HOVER &&\n         button.currentState == $.ButtonState.GROUP ) {\n        if( button.imgHover ){\n            button.imgHover.style.visibility = "";\n        }\n        button.currentState = $.ButtonState.HOVER;\n    }\n\n    if ( newState >= $.ButtonState.DOWN &&\n         button.currentState == $.ButtonState.HOVER ) {\n        if( button.imgDown ){\n            button.imgDown.style.visibility = "";\n        }\n        button.currentState = $.ButtonState.DOWN;\n    }\n}\n\n\nfunction outTo( button, newState ) {\n\n    if( button.element.disabled ){\n        return;\n    }\n\n    if ( newState <= $.ButtonState.HOVER &&\n         button.currentState == $.ButtonState.DOWN ) {\n        if( button.imgDown ){\n            button.imgDown.style.visibility = "hidden";\n        }\n        button.currentState = $.ButtonState.HOVER;\n    }\n\n    if ( newState <= $.ButtonState.GROUP &&\n         button.currentState == $.ButtonState.HOVER ) {\n        if( button.imgHover ){\n            button.imgHover.style.visibility = "hidden";\n        }\n        button.currentState = $.ButtonState.GROUP;\n    }\n\n    if ( newState <= $.ButtonState.REST &&\n         button.currentState == $.ButtonState.GROUP ) {\n        beginFading( button );\n        button.currentState = $.ButtonState.REST;\n    }\n}\n\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - ButtonGroup\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n/**\n * @class ButtonGroup\n * @classdesc Manages events on groups of buttons.\n *\n * @memberof OpenSeadragon\n * @param {Object} options - A dictionary of settings applied against the entire group of buttons.\n * @param {Array} options.buttons Array of buttons\n * @param {Element} [options.element] Element to use as the container\n **/\n$.ButtonGroup = function( options ) {\n\n    $.extend( true, this, {\n        /**\n         * An array containing the buttons themselves.\n         * @member {Array} buttons\n         * @memberof OpenSeadragon.ButtonGroup#\n         */\n        buttons:            [],\n        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,\n        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,\n        labelText:          ""\n    }, options );\n\n    // copy the button elements  TODO: Why?\n    var buttons = this.buttons.concat([]),\n        _this = this,\n        i;\n\n    /**\n     * The shared container for the buttons.\n     * @member {Element} element\n     * @memberof OpenSeadragon.ButtonGroup#\n     */\n    this.element = options.element || $.makeNeutralElement( "div" );\n\n    // TODO What if there IS an options.group specified?\n    if( !options.group ){\n        this.label   = $.makeNeutralElement( "label" );\n        //TODO: support labels for ButtonGroups\n        //this.label.innerHTML = this.labelText;\n        this.element.style.display = "inline-block";\n        this.element.appendChild( this.label );\n        for ( i = 0; i < buttons.length; i++ ) {\n            this.element.appendChild( buttons[ i ].element );\n        }\n    }\n\n    $.setElementTouchActionNone( this.element );\n\n    /**\n     * Tracks mouse/touch/key events accross the group of buttons.\n     * @member {OpenSeadragon.MouseTracker} tracker\n     * @memberof OpenSeadragon.ButtonGroup#\n     */\n    this.tracker = new $.MouseTracker({\n        element:            this.element,\n        clickTimeThreshold: this.clickTimeThreshold,\n        clickDistThreshold: this.clickDistThreshold,\n        enterHandler: function ( event ) {\n            var i;\n            for ( i = 0; i < _this.buttons.length; i++ ) {\n                _this.buttons[ i ].notifyGroupEnter();\n            }\n        },\n        exitHandler: function ( event ) {\n            var i;\n            if ( !event.insideElementPressed ) {\n                for ( i = 0; i < _this.buttons.length; i++ ) {\n                    _this.buttons[ i ].notifyGroupExit();\n                }\n            }\n        },\n    });\n};\n\n/** @lends OpenSeadragon.ButtonGroup.prototype */\n$.ButtonGroup.prototype = {\n\n    /**\n     * TODO: Figure out why this is used on the public API and if a more useful\n     * api can be created.\n     * @function\n     * @private\n     */\n    emulateEnter: function() {\n        this.tracker.enterHandler( { eventSource: this.tracker } );\n    },\n\n    /**\n     * TODO: Figure out why this is used on the public API and if a more useful\n     * api can be created.\n     * @function\n     * @private\n     */\n    emulateExit: function() {\n        this.tracker.exitHandler( { eventSource: this.tracker } );\n    }\n};\n\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Rect\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function($) {\n\n/**\n * @class Rect\n * @classdesc A Rectangle is described by it top left coordinates (x, y), width,\n * height and degrees of rotation around (x, y).\n * Note that the coordinate system used is the one commonly used with images:\n * x increases when going to the right\n * y increases when going to the bottom\n * degrees increases clockwise with 0 being the horizontal\n *\n * The constructor normalizes the rectangle to always have 0 <= degrees < 90\n *\n * @memberof OpenSeadragon\n * @param {Number} [x=0] The vector component \'x\'.\n * @param {Number} [y=0] The vector component \'y\'.\n * @param {Number} [width=0] The vector component \'width\'.\n * @param {Number} [height=0] The vector component \'height\'.\n * @param {Number} [degrees=0] Rotation of the rectangle around (x,y) in degrees.\n */\n$.Rect = function(x, y, width, height, degrees) {\n    /**\n     * The vector component \'x\'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Rect#\n     */\n    this.x = typeof(x) === "number" ? x : 0;\n    /**\n     * The vector component \'y\'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Rect#\n     */\n    this.y = typeof(y) === "number" ? y : 0;\n    /**\n     * The vector component \'width\'.\n     * @member {Number} width\n     * @memberof OpenSeadragon.Rect#\n     */\n    this.width  = typeof(width) === "number" ? width : 0;\n    /**\n     * The vector component \'height\'.\n     * @member {Number} height\n     * @memberof OpenSeadragon.Rect#\n     */\n    this.height = typeof(height) === "number" ? height : 0;\n\n    this.degrees = typeof(degrees) === "number" ? degrees : 0;\n\n    // Normalizes the rectangle.\n    this.degrees = this.degrees % 360;\n    if (this.degrees < 0) {\n        this.degrees += 360;\n    }\n    var newTopLeft, newWidth;\n    if (this.degrees >= 270) {\n        newTopLeft = this.getTopRight();\n        this.x = newTopLeft.x;\n        this.y = newTopLeft.y;\n        newWidth = this.height;\n        this.height = this.width;\n        this.width = newWidth;\n        this.degrees -= 270;\n    } else if (this.degrees >= 180) {\n        newTopLeft = this.getBottomRight();\n        this.x = newTopLeft.x;\n        this.y = newTopLeft.y;\n        this.degrees -= 180;\n    } else if (this.degrees >= 90) {\n        newTopLeft = this.getBottomLeft();\n        this.x = newTopLeft.x;\n        this.y = newTopLeft.y;\n        newWidth = this.height;\n        this.height = this.width;\n        this.width = newWidth;\n        this.degrees -= 90;\n    }\n};\n\n/**\n * Builds a rectangle having the 3 specified points as summits.\n * @static\n * @memberof OpenSeadragon.Rect\n * @param {OpenSeadragon.Point} topLeft\n * @param {OpenSeadragon.Point} topRight\n * @param {OpenSeadragon.Point} bottomLeft\n * @returns {OpenSeadragon.Rect}\n */\n$.Rect.fromSummits = function(topLeft, topRight, bottomLeft) {\n    var width = topLeft.distanceTo(topRight);\n    var height = topLeft.distanceTo(bottomLeft);\n    var diff = topRight.minus(topLeft);\n    var radians = Math.atan(diff.y / diff.x);\n    if (diff.x < 0) {\n        radians += Math.PI;\n    } else if (diff.y < 0) {\n        radians += 2 * Math.PI;\n    }\n    return new $.Rect(\n        topLeft.x,\n        topLeft.y,\n        width,\n        height,\n        radians / Math.PI * 180);\n};\n\n/** @lends OpenSeadragon.Rect.prototype */\n$.Rect.prototype = {\n    /**\n     * @function\n     * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n     */\n    clone: function() {\n        return new $.Rect(\n            this.x,\n            this.y,\n            this.width,\n            this.height,\n            this.degrees);\n    },\n\n    /**\n     * The aspect ratio is simply the ratio of width to height.\n     * @function\n     * @returns {Number} The ratio of width to height.\n     */\n    getAspectRatio: function() {\n        return this.width / this.height;\n    },\n\n    /**\n     * Provides the coordinates of the upper-left corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the upper-left corner of\n     *  the rectangle.\n     */\n    getTopLeft: function() {\n        return new $.Point(\n            this.x,\n            this.y\n        );\n    },\n\n    /**\n     * Provides the coordinates of the bottom-right corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the bottom-right corner of\n     *  the rectangle.\n     */\n    getBottomRight: function() {\n        return new $.Point(this.x + this.width, this.y + this.height)\n            .rotate(this.degrees, this.getTopLeft());\n    },\n\n    /**\n     * Provides the coordinates of the top-right corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the top-right corner of\n     *  the rectangle.\n     */\n    getTopRight: function() {\n        return new $.Point(this.x + this.width, this.y)\n            .rotate(this.degrees, this.getTopLeft());\n    },\n\n    /**\n     * Provides the coordinates of the bottom-left corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the bottom-left corner of\n     *  the rectangle.\n     */\n    getBottomLeft: function() {\n        return new $.Point(this.x, this.y + this.height)\n            .rotate(this.degrees, this.getTopLeft());\n    },\n\n    /**\n     * Computes the center of the rectangle.\n     * @function\n     * @returns {OpenSeadragon.Point} The center of the rectangle as represented\n     *  as represented by a 2-dimensional vector (x,y)\n     */\n    getCenter: function() {\n        return new $.Point(\n            this.x + this.width / 2.0,\n            this.y + this.height / 2.0\n        ).rotate(this.degrees, this.getTopLeft());\n    },\n\n    /**\n     * Returns the width and height component as a vector OpenSeadragon.Point\n     * @function\n     * @returns {OpenSeadragon.Point} The 2 dimensional vector representing the\n     *  the width and height of the rectangle.\n     */\n    getSize: function() {\n        return new $.Point(this.width, this.height);\n    },\n\n    /**\n     * Determines if two Rectangles have equivalent components.\n     * @function\n     * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n     * @return {Boolean} \'true\' if all components are equal, otherwise \'false\'.\n     */\n    equals: function(other) {\n        return (other instanceof $.Rect) &&\n            this.x === other.x &&\n            this.y === other.y &&\n            this.width === other.width &&\n            this.height === other.height &&\n            this.degrees === other.degrees;\n    },\n\n    /**\n    * Multiply all dimensions (except degrees) in this Rect by a factor and\n    * return a new Rect.\n    * @function\n    * @param {Number} factor The factor to multiply vector components.\n    * @returns {OpenSeadragon.Rect} A new rect representing the multiplication\n    *  of the vector components by the factor\n    */\n    times: function(factor) {\n        return new $.Rect(\n            this.x * factor,\n            this.y * factor,\n            this.width * factor,\n            this.height * factor,\n            this.degrees);\n    },\n\n    /**\n    * Translate/move this Rect by a vector and return new Rect.\n    * @function\n    * @param {OpenSeadragon.Point} delta The translation vector.\n    * @returns {OpenSeadragon.Rect} A new rect with altered position\n    */\n    translate: function(delta) {\n        return new $.Rect(\n            this.x + delta.x,\n            this.y + delta.y,\n            this.width,\n            this.height,\n            this.degrees);\n    },\n\n    /**\n     * Returns the smallest rectangle that will contain this and the given\n     * rectangle bounding boxes.\n     * @param {OpenSeadragon.Rect} rect\n     * @return {OpenSeadragon.Rect} The new rectangle.\n     */\n    union: function(rect) {\n        var thisBoundingBox = this.getBoundingBox();\n        var otherBoundingBox = rect.getBoundingBox();\n\n        var left = Math.min(thisBoundingBox.x, otherBoundingBox.x);\n        var top = Math.min(thisBoundingBox.y, otherBoundingBox.y);\n        var right = Math.max(\n            thisBoundingBox.x + thisBoundingBox.width,\n            otherBoundingBox.x + otherBoundingBox.width);\n        var bottom = Math.max(\n            thisBoundingBox.y + thisBoundingBox.height,\n            otherBoundingBox.y + otherBoundingBox.height);\n\n        return new $.Rect(\n            left,\n            top,\n            right - left,\n            bottom - top);\n    },\n\n    /**\n     * Returns the bounding box of the intersection of this rectangle with the\n     * given rectangle.\n     * @param {OpenSeadragon.Rect} rect\n     * @return {OpenSeadragon.Rect} the bounding box of the intersection\n     * or null if the rectangles don\'t intersect.\n     */\n    intersection: function(rect) {\n        // Simplified version of Weiler Atherton clipping algorithm\n        // https://en.wikipedia.org/wiki/Weiler%E2%80%93Atherton_clipping_algorithm\n        // Because we just want the bounding box of the intersection,\n        // we can just compute the bounding box of:\n        // 1. all the summits of this which are inside rect\n        // 2. all the summits of rect which are inside this\n        // 3. all the intersections of rect and this\n        var EPSILON = 0.0000000001;\n\n        var intersectionPoints = [];\n\n        var thisTopLeft = this.getTopLeft();\n        if (rect.containsPoint(thisTopLeft, EPSILON)) {\n            intersectionPoints.push(thisTopLeft);\n        }\n        var thisTopRight = this.getTopRight();\n        if (rect.containsPoint(thisTopRight, EPSILON)) {\n            intersectionPoints.push(thisTopRight);\n        }\n        var thisBottomLeft = this.getBottomLeft();\n        if (rect.containsPoint(thisBottomLeft, EPSILON)) {\n            intersectionPoints.push(thisBottomLeft);\n        }\n        var thisBottomRight = this.getBottomRight();\n        if (rect.containsPoint(thisBottomRight, EPSILON)) {\n            intersectionPoints.push(thisBottomRight);\n        }\n\n        var rectTopLeft = rect.getTopLeft();\n        if (this.containsPoint(rectTopLeft, EPSILON)) {\n            intersectionPoints.push(rectTopLeft);\n        }\n        var rectTopRight = rect.getTopRight();\n        if (this.containsPoint(rectTopRight, EPSILON)) {\n            intersectionPoints.push(rectTopRight);\n        }\n        var rectBottomLeft = rect.getBottomLeft();\n        if (this.containsPoint(rectBottomLeft, EPSILON)) {\n            intersectionPoints.push(rectBottomLeft);\n        }\n        var rectBottomRight = rect.getBottomRight();\n        if (this.containsPoint(rectBottomRight, EPSILON)) {\n            intersectionPoints.push(rectBottomRight);\n        }\n\n        var thisSegments = this._getSegments();\n        var rectSegments = rect._getSegments();\n        for (var i = 0; i < thisSegments.length; i++) {\n            var thisSegment = thisSegments[i];\n            for (var j = 0; j < rectSegments.length; j++) {\n                var rectSegment = rectSegments[j];\n                var intersect = getIntersection(thisSegment[0], thisSegment[1],\n                    rectSegment[0], rectSegment[1]);\n                if (intersect) {\n                    intersectionPoints.push(intersect);\n                }\n            }\n        }\n\n        // Get intersection point of segments [a,b] and [c,d]\n        function getIntersection(a, b, c, d) {\n            // http://stackoverflow.com/a/1968345/1440403\n            var abVector = b.minus(a);\n            var cdVector = d.minus(c);\n\n            var denom = -cdVector.x * abVector.y + abVector.x * cdVector.y;\n            if (denom === 0) {\n                return null;\n            }\n\n            var s = (abVector.x * (a.y - c.y) - abVector.y * (a.x - c.x)) / denom;\n            var t = (cdVector.x * (a.y - c.y) - cdVector.y * (a.x - c.x)) / denom;\n\n            if (-EPSILON <= s && s <= 1 - EPSILON &&\n                -EPSILON <= t && t <= 1 - EPSILON) {\n                return new $.Point(a.x + t * abVector.x, a.y + t * abVector.y);\n            }\n            return null;\n        }\n\n        if (intersectionPoints.length === 0) {\n            return null;\n        }\n\n        var minX = intersectionPoints[0].x;\n        var maxX = intersectionPoints[0].x;\n        var minY = intersectionPoints[0].y;\n        var maxY = intersectionPoints[0].y;\n        for (var k = 1; k < intersectionPoints.length; k++) {\n            var point = intersectionPoints[k];\n            if (point.x < minX) {\n                minX = point.x;\n            }\n            if (point.x > maxX) {\n                maxX = point.x;\n            }\n            if (point.y < minY) {\n                minY = point.y;\n            }\n            if (point.y > maxY) {\n                maxY = point.y;\n            }\n        }\n        return new $.Rect(minX, minY, maxX - minX, maxY - minY);\n    },\n\n    // private\n    _getSegments: function() {\n        var topLeft = this.getTopLeft();\n        var topRight = this.getTopRight();\n        var bottomLeft = this.getBottomLeft();\n        var bottomRight = this.getBottomRight();\n        return [[topLeft, topRight],\n            [topRight, bottomRight],\n            [bottomRight, bottomLeft],\n            [bottomLeft, topLeft]];\n    },\n\n    /**\n     * Rotates a rectangle around a point.\n     * @function\n     * @param {Number} degrees The angle in degrees to rotate.\n     * @param {OpenSeadragon.Point} [pivot] The point about which to rotate.\n     * Defaults to the center of the rectangle.\n     * @return {OpenSeadragon.Rect}\n     */\n    rotate: function(degrees, pivot) {\n        degrees = degrees % 360;\n        if (degrees === 0) {\n            return this.clone();\n        }\n        if (degrees < 0) {\n            degrees += 360;\n        }\n\n        pivot = pivot || this.getCenter();\n        var newTopLeft = this.getTopLeft().rotate(degrees, pivot);\n        var newTopRight = this.getTopRight().rotate(degrees, pivot);\n\n        var diff = newTopRight.minus(newTopLeft);\n        var radians = Math.atan(diff.y / diff.x);\n        if (diff.x < 0) {\n            radians += Math.PI;\n        } else if (diff.y < 0) {\n            radians += 2 * Math.PI;\n        }\n        return new $.Rect(\n            newTopLeft.x,\n            newTopLeft.y,\n            this.width,\n            this.height,\n            radians / Math.PI * 180);\n    },\n\n    /**\n     * Retrieves the smallest horizontal (degrees=0) rectangle which contains\n     * this rectangle.\n     * @returns {OpenSeadragon.Rect}\n     */\n    getBoundingBox: function() {\n        if (this.degrees === 0) {\n            return this.clone();\n        }\n        var topLeft = this.getTopLeft();\n        var topRight = this.getTopRight();\n        var bottomLeft = this.getBottomLeft();\n        var bottomRight = this.getBottomRight();\n        var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        return new $.Rect(\n            minX,\n            minY,\n            maxX - minX,\n            maxY - minY);\n    },\n\n    /**\n     * Retrieves the smallest horizontal (degrees=0) rectangle which contains\n     * this rectangle and has integers x, y, width and height\n     * @returns {OpenSeadragon.Rect}\n     */\n    getIntegerBoundingBox: function() {\n        var boundingBox = this.getBoundingBox();\n        var x = Math.floor(boundingBox.x);\n        var y = Math.floor(boundingBox.y);\n        var width = Math.ceil(boundingBox.width + boundingBox.x - x);\n        var height = Math.ceil(boundingBox.height + boundingBox.y - y);\n        return new $.Rect(x, y, width, height);\n    },\n\n    /**\n     * Determines whether a point is inside this rectangle (edge included).\n     * @function\n     * @param {OpenSeadragon.Point} point\n     * @param {Number} [epsilon=0] the margin of error allowed\n     * @returns {Boolean} true if the point is inside this rectangle, false\n     * otherwise.\n     */\n    containsPoint: function(point, epsilon) {\n        epsilon = epsilon || 0;\n\n        // See http://stackoverflow.com/a/2752754/1440403 for explanation\n        var topLeft = this.getTopLeft();\n        var topRight = this.getTopRight();\n        var bottomLeft = this.getBottomLeft();\n        var topDiff = topRight.minus(topLeft);\n        var leftDiff = bottomLeft.minus(topLeft);\n\n        return ((point.x - topLeft.x) * topDiff.x +\n            (point.y - topLeft.y) * topDiff.y >= -epsilon) &&\n\n            ((point.x - topRight.x) * topDiff.x +\n            (point.y - topRight.y) * topDiff.y <= epsilon) &&\n\n            ((point.x - topLeft.x) * leftDiff.x +\n            (point.y - topLeft.y) * leftDiff.y >= -epsilon) &&\n\n            ((point.x - bottomLeft.x) * leftDiff.x +\n            (point.y - bottomLeft.y) * leftDiff.y <= epsilon);\n    },\n\n    /**\n     * Provides a string representation of the rectangle which is useful for\n     * debugging.\n     * @function\n     * @returns {String} A string representation of the rectangle.\n     */\n    toString: function() {\n        return "[" +\n            (Math.round(this.x * 100) / 100) + ", " +\n            (Math.round(this.y * 100) / 100) + ", " +\n            (Math.round(this.width * 100) / 100) + "x" +\n            (Math.round(this.height * 100) / 100) + ", " +\n            (Math.round(this.degrees * 100) / 100) + "deg" +\n            "]";\n    }\n};\n\n\n}(OpenSeadragon));\n\n/*\n * OpenSeadragon - ReferenceStrip\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function ( $ ) {\n\n// dictionary from id to private properties\nvar THIS = {};\n\n/**\n *  The CollectionDrawer is a reimplementation if the Drawer API that\n *  focuses on allowing a viewport to be redefined as a collection\n *  of smaller viewports, defined by a clear number of rows and / or\n *  columns of which each item in the matrix of viewports has its own\n *  source.\n *\n *  This idea is a reexpression of the idea of dzi collections\n *  which allows a clearer algorithm to reuse the tile sources already\n *  supported by OpenSeadragon, in heterogenious or homogenious\n *  sequences just like mixed groups already supported by the viewer\n *  for the purpose of image sequnces.\n *\n *  TODO:   The difficult part of this feature is figuring out how to express\n *          this functionality as a combination of the functionality already\n *          provided by Drawer, Viewport, TileSource, and Navigator.  It may\n *          require better abstraction at those points in order to effeciently\n *          reuse those paradigms.\n */\n/**\n * @class ReferenceStrip\n * @memberof OpenSeadragon\n * @param {Object} options\n */\n$.ReferenceStrip = function ( options ) {\n\n    var _this       = this,\n        viewer      = options.viewer,\n        viewerSize  = $.getElementSize( viewer.element ),\n        element,\n        style,\n        i;\n\n    //We may need to create a new element and id if they did not\n    //provide the id for the existing element\n    if ( !options.id ) {\n        options.id              = \'referencestrip-\' + $.now();\n        this.element            = $.makeNeutralElement( "div" );\n        this.element.id         = options.id;\n        this.element.className  = \'referencestrip\';\n    }\n\n    options = $.extend( true, {\n        sizeRatio:  $.DEFAULT_SETTINGS.referenceStripSizeRatio,\n        position:   $.DEFAULT_SETTINGS.referenceStripPosition,\n        scroll:     $.DEFAULT_SETTINGS.referenceStripScroll,\n        clickTimeThreshold:  $.DEFAULT_SETTINGS.clickTimeThreshold\n    }, options, {\n        //required overrides\n        element:                this.element,\n        //These need to be overridden to prevent recursion since\n        //the navigator is a viewer and a viewer has a navigator\n        showNavigator:          false,\n        mouseNavEnabled:        false,\n        showNavigationControl:  false,\n        showSequenceControl:    false\n    } );\n\n    $.extend( this, options );\n    //Private state properties\n    THIS[this.id] = {\n        "animating":           false\n    };\n\n    this.minPixelRatio = this.viewer.minPixelRatio;\n\n    style = this.element.style;\n    style.marginTop     = \'0px\';\n    style.marginRight   = \'0px\';\n    style.marginBottom  = \'0px\';\n    style.marginLeft    = \'0px\';\n    style.left          = \'0px\';\n    style.bottom        = \'0px\';\n    style.border        = \'0px\';\n    style.background    = \'#000\';\n    style.position      = \'relative\';\n\n    $.setElementTouchActionNone( this.element );\n\n    $.setElementOpacity( this.element, 0.8 );\n\n    this.viewer = viewer;\n    this.innerTracker = new $.MouseTracker( {\n        element:        this.element,\n        dragHandler:    $.delegate( this, onStripDrag ),\n        scrollHandler:  $.delegate( this, onStripScroll ),\n        enterHandler:   $.delegate( this, onStripEnter ),\n        exitHandler:    $.delegate( this, onStripExit ),\n        keyDownHandler: $.delegate( this, onKeyDown ),\n        keyHandler:     $.delegate( this, onKeyPress )\n    } );\n\n    //Controls the position and orientation of the reference strip and sets the\n    //appropriate width and height\n    if ( options.width && options.height ) {\n        this.element.style.width  = options.width + \'px\';\n        this.element.style.height = options.height + \'px\';\n        viewer.addControl(\n            this.element,\n            { anchor: $.ControlAnchor.BOTTOM_LEFT }\n        );\n    } else {\n        if ( "horizontal" == options.scroll ) {\n            this.element.style.width = (\n                viewerSize.x *\n                options.sizeRatio *\n                viewer.tileSources.length\n            ) + ( 12 * viewer.tileSources.length ) + \'px\';\n\n            this.element.style.height = (\n                viewerSize.y *\n                options.sizeRatio\n            ) + \'px\';\n\n            viewer.addControl(\n                this.element,\n                { anchor: $.ControlAnchor.BOTTOM_LEFT }\n            );\n        } else {\n            this.element.style.height = (\n                viewerSize.y *\n                options.sizeRatio *\n                viewer.tileSources.length\n            ) + ( 12 * viewer.tileSources.length ) + \'px\';\n\n            this.element.style.width = (\n                viewerSize.x *\n                options.sizeRatio\n            ) + \'px\';\n\n            viewer.addControl(\n                this.element,\n                { anchor: $.ControlAnchor.TOP_LEFT }\n            );\n\n        }\n    }\n\n    this.panelWidth = ( viewerSize.x * this.sizeRatio ) + 8;\n    this.panelHeight = ( viewerSize.y * this.sizeRatio ) + 8;\n    this.panels = [];\n\n    /*jshint loopfunc:true*/\n    for ( i = 0; i < viewer.tileSources.length; i++ ) {\n\n        element = $.makeNeutralElement( \'div\' );\n        element.id = this.element.id + "-" + i;\n\n        element.style.width         = _this.panelWidth + \'px\';\n        element.style.height        = _this.panelHeight + \'px\';\n        element.style.display       = \'inline\';\n        element.style.float         = \'left\'; //Webkit\n        element.style.cssFloat      = \'left\'; //Firefox\n        element.style.styleFloat    = \'left\'; //IE\n        element.style.padding       = \'2px\';\n        $.setElementTouchActionNone( element );\n\n        element.innerTracker = new $.MouseTracker( {\n            element:            element,\n            clickTimeThreshold: this.clickTimeThreshold,\n            clickDistThreshold: this.clickDistThreshold,\n            pressHandler: function ( event ) {\n                event.eventSource.dragging = $.now();\n            },\n            releaseHandler: function ( event ) {\n                var tracker = event.eventSource,\n                    id      = tracker.element.id,\n                    page    = Number( id.split( \'-\' )[2] ),\n                    now     = $.now();\n\n                if ( event.insideElementPressed &&\n                     event.insideElementReleased &&\n                     tracker.dragging &&\n                     ( now - tracker.dragging ) < tracker.clickTimeThreshold ) {\n                    tracker.dragging = null;\n                    viewer.goToPage( page );\n                }\n            }\n        } );\n\n        this.element.appendChild( element );\n\n        element.activePanel = false;\n\n        this.panels.push( element );\n\n    }\n    loadPanels( this, this.scroll == \'vertical\' ? viewerSize.y : viewerSize.x, 0 );\n    this.setFocus( 0 );\n\n};\n\n$.extend( $.ReferenceStrip.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.ReferenceStrip.prototype */{\n\n    /**\n     * @function\n     */\n    setFocus: function ( page ) {\n        var element      = $.getElement( this.element.id + \'-\' + page ),\n            viewerSize   = $.getElementSize( this.viewer.canvas ),\n            scrollWidth  = Number( this.element.style.width.replace( \'px\', \'\' ) ),\n            scrollHeight = Number( this.element.style.height.replace( \'px\', \'\' ) ),\n            offsetLeft   = -Number( this.element.style.marginLeft.replace( \'px\', \'\' ) ),\n            offsetTop    = -Number( this.element.style.marginTop.replace( \'px\', \'\' ) ),\n            offset;\n\n        if ( this.currentSelected !== element ) {\n            if ( this.currentSelected ) {\n                this.currentSelected.style.background = \'#000\';\n            }\n            this.currentSelected = element;\n            this.currentSelected.style.background = \'#999\';\n\n            if ( \'horizontal\' == this.scroll ) {\n                //right left\n                offset = ( Number( page ) ) * ( this.panelWidth + 3 );\n                if ( offset > offsetLeft + viewerSize.x - this.panelWidth ) {\n                    offset = Math.min( offset, ( scrollWidth - viewerSize.x ) );\n                    this.element.style.marginLeft = -offset + \'px\';\n                    loadPanels( this, viewerSize.x, -offset );\n                } else if ( offset < offsetLeft ) {\n                    offset = Math.max( 0, offset - viewerSize.x / 2 );\n                    this.element.style.marginLeft = -offset + \'px\';\n                    loadPanels( this, viewerSize.x, -offset );\n                }\n            } else {\n                offset = ( Number( page ) ) * ( this.panelHeight + 3 );\n                if ( offset > offsetTop + viewerSize.y - this.panelHeight ) {\n                    offset = Math.min( offset, ( scrollHeight - viewerSize.y ) );\n                    this.element.style.marginTop = -offset + \'px\';\n                    loadPanels( this, viewerSize.y, -offset );\n                } else if ( offset < offsetTop ) {\n                    offset = Math.max( 0, offset - viewerSize.y / 2 );\n                    this.element.style.marginTop = -offset + \'px\';\n                    loadPanels( this, viewerSize.y, -offset );\n                }\n            }\n\n            this.currentPage = page;\n            onStripEnter.call( this, { eventSource: this.innerTracker } );\n        }\n    },\n\n    /**\n     * @function\n     */\n    update: function () {\n        if ( THIS[this.id].animating ) {\n            $.console.log( \'image reference strip update\' );\n            return true;\n        }\n        return false;\n    },\n\n    // Overrides Viewer.destroy\n    destroy: function() {\n        if (this.element) {\n            this.element.parentNode.removeChild(this.element);\n        }\n    }\n\n} );\n\n\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onStripDrag( event ) {\n\n    var offsetLeft   = Number( this.element.style.marginLeft.replace( \'px\', \'\' ) ),\n        offsetTop    = Number( this.element.style.marginTop.replace( \'px\', \'\' ) ),\n        scrollWidth  = Number( this.element.style.width.replace( \'px\', \'\' ) ),\n        scrollHeight = Number( this.element.style.height.replace( \'px\', \'\' ) ),\n        viewerSize   = $.getElementSize( this.viewer.canvas );\n    this.dragging = true;\n    if ( this.element ) {\n        if ( \'horizontal\' == this.scroll ) {\n            if ( -event.delta.x > 0 ) {\n                //forward\n                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {\n                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + \'px\';\n                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );\n                }\n            } else if ( -event.delta.x < 0 ) {\n                //reverse\n                if ( offsetLeft < 0 ) {\n                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + \'px\';\n                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );\n                }\n            }\n        } else {\n            if ( -event.delta.y > 0 ) {\n                //forward\n                if ( offsetTop > -( scrollHeight - viewerSize.y ) ) {\n                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + \'px\';\n                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );\n                }\n            } else if ( -event.delta.y < 0 ) {\n                //reverse\n                if ( offsetTop < 0 ) {\n                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + \'px\';\n                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );\n                }\n            }\n        }\n    }\n    return false;\n\n}\n\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onStripScroll( event ) {\n    var offsetLeft   = Number( this.element.style.marginLeft.replace( \'px\', \'\' ) ),\n        offsetTop    = Number( this.element.style.marginTop.replace( \'px\', \'\' ) ),\n        scrollWidth  = Number( this.element.style.width.replace( \'px\', \'\' ) ),\n        scrollHeight = Number( this.element.style.height.replace( \'px\', \'\' ) ),\n        viewerSize   = $.getElementSize( this.viewer.canvas );\n    if ( this.element ) {\n        if ( \'horizontal\' == this.scroll ) {\n            if ( event.scroll > 0 ) {\n                //forward\n                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {\n                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + \'px\';\n                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );\n                }\n            } else if ( event.scroll < 0 ) {\n                //reverse\n                if ( offsetLeft < 0 ) {\n                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + \'px\';\n                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );\n                }\n            }\n        } else {\n            if ( event.scroll < 0 ) {\n                //scroll up\n                if ( offsetTop > viewerSize.y - scrollHeight ) {\n                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + \'px\';\n                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );\n                }\n            } else if ( event.scroll > 0 ) {\n                //scroll dowm\n                if ( offsetTop < 0 ) {\n                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + \'px\';\n                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );\n                }\n            }\n        }\n    }\n    //cancels event\n    return false;\n}\n\n\nfunction loadPanels( strip, viewerSize, scroll ) {\n    var panelSize,\n        activePanelsStart,\n        activePanelsEnd,\n        miniViewer,\n        style,\n        i,\n        element;\n    if ( \'horizontal\' == strip.scroll ) {\n        panelSize = strip.panelWidth;\n    } else {\n        panelSize = strip.panelHeight;\n    }\n    activePanelsStart = Math.ceil( viewerSize / panelSize ) + 5;\n    activePanelsEnd = Math.ceil( ( Math.abs( scroll ) + viewerSize ) / panelSize ) + 1;\n    activePanelsStart = activePanelsEnd - activePanelsStart;\n    activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart;\n\n    for ( i = activePanelsStart; i < activePanelsEnd && i < strip.panels.length; i++ ) {\n        element = strip.panels[i];\n        if ( !element.activePanel ) {\n            miniViewer = new $.Viewer( {\n                id:                     element.id,\n                tileSources:            [strip.viewer.tileSources[i]],\n                element:                element,\n                navigatorSizeRatio:     strip.sizeRatio,\n                showNavigator:          false,\n                mouseNavEnabled:        false,\n                showNavigationControl:  false,\n                showSequenceControl:    false,\n                immediateRender:        true,\n                blendTime:              0,\n                animationTime:          0\n            } );\n\n            miniViewer.displayRegion           = $.makeNeutralElement( "div" );\n            miniViewer.displayRegion.id        = element.id + \'-displayregion\';\n            miniViewer.displayRegion.className = \'displayregion\';\n\n            style               = miniViewer.displayRegion.style;\n            style.position      = \'relative\';\n            style.top           = \'0px\';\n            style.left          = \'0px\';\n            style.fontSize      = \'0px\';\n            style.overflow      = \'hidden\';\n            style.float         = \'left\'; //Webkit\n            style.cssFloat      = \'left\'; //Firefox\n            style.styleFloat    = \'left\'; //IE\n            style.zIndex        = 999999999;\n            style.cursor        = \'default\';\n            style.width         = ( strip.panelWidth - 4 ) + \'px\';\n            style.height        = ( strip.panelHeight - 4 ) + \'px\';\n\n            // TODO: What is this for? Future keyboard navigation support?\n            miniViewer.displayRegion.innerTracker = new $.MouseTracker( {\n                element: miniViewer.displayRegion,\n                startDisabled: true\n            } );\n\n            element.getElementsByTagName( \'div\' )[0].appendChild(\n                miniViewer.displayRegion\n            );\n\n            element.activePanel = true;\n        }\n    }\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onStripEnter( event ) {\n    var element = event.eventSource.element;\n\n    //$.setElementOpacity(element, 0.8);\n\n    //element.style.border = \'1px solid #555\';\n    //element.style.background = \'#000\';\n\n    if ( \'horizontal\' == this.scroll ) {\n\n        //element.style.paddingTop = "0px";\n        element.style.marginBottom = "0px";\n\n    } else {\n\n        //element.style.paddingRight = "0px";\n        element.style.marginLeft = "0px";\n\n    }\n    return false;\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onStripExit( event ) {\n    var element = event.eventSource.element;\n\n    if ( \'horizontal\' == this.scroll ) {\n\n        //element.style.paddingTop = "10px";\n        element.style.marginBottom = "-" + ( $.getElementSize( element ).y / 2 ) + "px";\n\n    } else {\n\n        //element.style.paddingRight = "10px";\n        element.style.marginLeft = "-" + ( $.getElementSize( element ).x / 2 ) + "px";\n\n    }\n    return false;\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onKeyDown( event ) {\n    //console.log( event.keyCode );\n\n    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {\n        switch ( event.keyCode ) {\n            case 38: //up arrow\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );\n                return false;\n            case 40: //down arrow\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );\n                return false;\n            case 37: //left arrow\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );\n                return false;\n            case 39: //right arrow\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );\n                return false;\n            default:\n                //console.log( \'navigator keycode %s\', event.keyCode );\n                return true;\n        }\n    } else {\n        return true;\n    }\n}\n\n\n/**\n * @private\n * @inner\n * @function\n */\nfunction onKeyPress( event ) {\n    //console.log( event.keyCode );\n\n    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {\n        switch ( event.keyCode ) {\n            case 61: //=|+\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );\n                return false;\n            case 45: //-|_\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );\n                return false;\n            case 48: //0|)\n            case 119: //w\n            case 87: //W\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );\n                return false;\n            case 115: //s\n            case 83: //S\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );\n                return false;\n            case 97: //a\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );\n                return false;\n            case 100: //d\n                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );\n                return false;\n            default:\n                //console.log( \'navigator keycode %s\', event.keyCode );\n                return true;\n        }\n    } else {\n        return true;\n    }\n}\n\n\n\n} ( OpenSeadragon ) );\n\n/*\n * OpenSeadragon - DisplayRect\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class DisplayRect\n * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds two\n * fields, \'minLevel\' and \'maxLevel\' which denote the supported zoom levels\n * for this rectangle.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.Rect\n * @param {Number} x The vector component \'x\'.\n * @param {Number} y The vector component \'y\'.\n * @param {Number} width The vector component \'height\'.\n * @param {Number} height The vector component \'width\'.\n * @param {Number} minLevel The lowest zoom level supported.\n * @param {Number} maxLevel The highest zoom level supported.\n */\n$.DisplayRect = function( x, y, width, height, minLevel, maxLevel ) {\n    $.Rect.apply( this, [ x, y, width, height ] );\n\n    /**\n     * The lowest zoom level supported.\n     * @member {Number} minLevel\n     * @memberof OpenSeadragon.DisplayRect#\n     */\n    this.minLevel = minLevel;\n    /**\n     * The highest zoom level supported.\n     * @member {Number} maxLevel\n     * @memberof OpenSeadragon.DisplayRect#\n     */\n    this.maxLevel = maxLevel;\n};\n\n$.extend( $.DisplayRect.prototype, $.Rect.prototype );\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Spring\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class Spring\n * @memberof OpenSeadragon\n * @param {Object} options - Spring configuration settings.\n * @param {Number} options.springStiffness - Spring stiffness. Must be greater than zero.\n * The closer to zero, the closer to linear animation.\n * @param {Number} options.animationTime - Animation duration per spring, in seconds.\n * Must be zero or greater.\n * @param {Number} [options.initial=0] - Initial value of spring.\n * @param {Boolean} [options.exponential=false] - Whether this spring represents\n * an exponential scale (such as zoom) and should be animated accordingly. Note that\n * exponential springs must have non-zero values.\n */\n$.Spring = function( options ) {\n    var args = arguments;\n\n    if( typeof( options ) != \'object\' ){\n        //allows backward compatible use of ( initialValue, config ) as\n        //constructor parameters\n        options = {\n            initial: args.length && typeof ( args[ 0 ] ) == "number" ?\n                args[ 0 ] :\n                undefined,\n            /**\n             * Spring stiffness.\n             * @member {Number} springStiffness\n             * @memberof OpenSeadragon.Spring#\n             */\n            springStiffness: args.length > 1 ?\n                args[ 1 ].springStiffness :\n                5.0,\n            /**\n             * Animation duration per spring.\n             * @member {Number} animationTime\n             * @memberof OpenSeadragon.Spring#\n             */\n            animationTime: args.length > 1 ?\n                args[ 1 ].animationTime :\n                1.5\n        };\n    }\n\n    $.console.assert(typeof options.springStiffness === "number" && options.springStiffness !== 0,\n        "[OpenSeadragon.Spring] options.springStiffness must be a non-zero number");\n\n    $.console.assert(typeof options.animationTime === "number" && options.animationTime >= 0,\n        "[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0");\n\n    if (options.exponential) {\n        this._exponential = true;\n        delete options.exponential;\n    }\n\n    $.extend( true, this, options);\n\n    /**\n     * @member {Object} current\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */\n    this.current = {\n        value: typeof ( this.initial ) == "number" ?\n            this.initial :\n            (this._exponential ? 0 : 1),\n        time:  $.now() // always work in milliseconds\n    };\n\n    $.console.assert(!this._exponential || this.current.value !== 0,\n        "[OpenSeadragon.Spring] value must be non-zero for exponential springs");\n\n    /**\n     * @member {Object} start\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */\n    this.start = {\n        value: this.current.value,\n        time:  this.current.time\n    };\n\n    /**\n     * @member {Object} target\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */\n    this.target = {\n        value: this.current.value,\n        time:  this.current.time\n    };\n\n    if (this._exponential) {\n        this.start._logValue = Math.log(this.start.value);\n        this.target._logValue = Math.log(this.target.value);\n        this.current._logValue = Math.log(this.current.value);\n    }\n};\n\n/** @lends OpenSeadragon.Spring.prototype */\n$.Spring.prototype = {\n\n    /**\n     * @function\n     * @param {Number} target\n     */\n    resetTo: function( target ) {\n        $.console.assert(!this._exponential || target !== 0,\n            "[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs");\n\n        this.start.value = this.target.value = this.current.value = target;\n        this.start.time = this.target.time = this.current.time = $.now();\n\n        if (this._exponential) {\n            this.start._logValue = Math.log(this.start.value);\n            this.target._logValue = Math.log(this.target.value);\n            this.current._logValue = Math.log(this.current.value);\n        }\n    },\n\n    /**\n     * @function\n     * @param {Number} target\n     */\n    springTo: function( target ) {\n        $.console.assert(!this._exponential || target !== 0,\n            "[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs");\n\n        this.start.value  = this.current.value;\n        this.start.time   = this.current.time;\n        this.target.value = target;\n        this.target.time  = this.start.time + 1000 * this.animationTime;\n\n        if (this._exponential) {\n            this.start._logValue = Math.log(this.start.value);\n            this.target._logValue = Math.log(this.target.value);\n        }\n    },\n\n    /**\n     * @function\n     * @param {Number} delta\n     */\n    shiftBy: function( delta ) {\n        this.start.value  += delta;\n        this.target.value += delta;\n\n        if (this._exponential) {\n            $.console.assert(this.target.value !== 0 && this.start.value !== 0,\n                "[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs");\n\n            this.start._logValue = Math.log(this.start.value);\n            this.target._logValue = Math.log(this.target.value);\n        }\n    },\n\n    setExponential: function(value) {\n        this._exponential = value;\n\n        if (this._exponential) {\n            $.console.assert(this.current.value !== 0 && this.target.value !== 0 && this.start.value !== 0,\n                "[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs");\n\n            this.start._logValue = Math.log(this.start.value);\n            this.target._logValue = Math.log(this.target.value);\n            this.current._logValue = Math.log(this.current.value);\n        }\n    },\n\n    /**\n     * @function\n     */\n    update: function() {\n        this.current.time  = $.now();\n\n        var startValue, targetValue;\n        if (this._exponential) {\n            startValue = this.start._logValue;\n            targetValue = this.target._logValue;\n        } else {\n            startValue = this.start.value;\n            targetValue = this.target.value;\n        }\n\n        var currentValue = (this.current.time >= this.target.time) ?\n            targetValue :\n            startValue +\n                ( targetValue - startValue ) *\n                transform(\n                    this.springStiffness,\n                    ( this.current.time - this.start.time ) /\n                    ( this.target.time  - this.start.time )\n                );\n\n        if (this._exponential) {\n            this.current.value = Math.exp(currentValue);\n        } else {\n            this.current.value = currentValue;\n        }\n    },\n\n    /**\n     * Returns whether the spring is at the target value\n     * @function\n     * @returns {Boolean} True if at target value, false otherwise\n     */\n    isAtTargetValue: function() {\n        return this.current.value === this.target.value;\n    }\n};\n\n/**\n * @private\n */\nfunction transform( stiffness, x ) {\n    return ( 1.0 - Math.exp( stiffness * -x ) ) /\n        ( 1.0 - Math.exp( -stiffness ) );\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - ImageLoader\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n// private class\nfunction ImageJob ( options ) {\n\n    $.extend( true, this, {\n        timeout:        $.DEFAULT_SETTINGS.timeout,\n        jobId:          null\n    }, options );\n\n    /**\n     * Image object which will contain downloaded image.\n     * @member {Image} image\n     * @memberof OpenSeadragon.ImageJob#\n     */\n    this.image = null;\n}\n\nImageJob.prototype = {\n    errorMsg: null,\n    start: function(){\n        var _this = this;\n\n        this.image = new Image();\n\n        if ( this.crossOriginPolicy !== false ) {\n            this.image.crossOrigin = this.crossOriginPolicy;\n        }\n\n        this.image.onload = function(){\n            _this.finish( true );\n        };\n        this.image.onabort = this.image.onerror = function(){\n            _this.errorMsg = "Image load aborted";\n            _this.finish( false );\n        };\n\n        this.jobId = window.setTimeout( function(){\n            _this.errorMsg = "Image load exceeded timeout";\n            _this.finish( false );\n        }, this.timeout);\n\n        this.image.src = this.src;\n    },\n\n    finish: function( successful ) {\n        this.image.onload = this.image.onerror = this.image.onabort = null;\n        if (!successful) {\n            this.image = null;\n        }\n\n        if ( this.jobId ) {\n            window.clearTimeout( this.jobId );\n        }\n\n        this.callback( this );\n    }\n\n};\n\n/**\n * @class ImageLoader\n * @memberof OpenSeadragon\n * @classdesc Handles downloading of a set of images using asynchronous queue pattern.\n * You generally won\'t have to interact with the ImageLoader directly.\n * @param {Object} options - Options for this ImageLoader.\n * @param {Number} [options.jobLimit] - The number of concurrent image requests. See imageLoaderLimit in {@link OpenSeadragon.Options} for details.\n */\n$.ImageLoader = function( options ) {\n\n    $.extend( true, this, {\n        jobLimit:       $.DEFAULT_SETTINGS.imageLoaderLimit,\n        jobQueue:       [],\n        jobsInProgress: 0\n    }, options );\n\n};\n\n/** @lends OpenSeadragon.ImageLoader.prototype */\n$.ImageLoader.prototype = {\n\n    /**\n     * Add an unloaded image to the loader queue.\n     * @method\n     * @param {String} src - URL of image to download.\n     * @param {String} crossOriginPolicy - CORS policy to use for downloads\n     * @param {Function} callback - Called once image has been downloaded.\n     */\n    addJob: function( options ) {\n        var _this = this,\n            complete = function( job ) {\n                completeJob( _this, job, options.callback );\n            },\n            jobOptions = {\n                src: options.src,\n                crossOriginPolicy: options.crossOriginPolicy,\n                callback: complete,\n                abort: options.abort\n            },\n            newJob = new ImageJob( jobOptions );\n\n        if ( !this.jobLimit || this.jobsInProgress < this.jobLimit ) {\n            newJob.start();\n            this.jobsInProgress++;\n        }\n        else {\n            this.jobQueue.push( newJob );\n        }\n    },\n\n    /**\n     * Clear any unstarted image loading jobs from the queue.\n     * @method\n     */\n    clear: function() {\n        for( var i = 0; i < this.jobQueue.length; i++ ) {\n            var job = this.jobQueue[i];\n            if ( typeof job.abort === "function" ) {\n                job.abort();\n            }\n        }\n\n        this.jobQueue = [];\n    }\n};\n\n/**\n * Cleans up ImageJob once completed.\n * @method\n * @private\n * @param loader - ImageLoader used to start job.\n * @param job - The ImageJob that has completed.\n * @param callback - Called once cleanup is finished.\n */\nfunction completeJob( loader, job, callback ) {\n    var nextJob;\n\n    loader.jobsInProgress--;\n\n    if ( (!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) && loader.jobQueue.length > 0) {\n        nextJob = loader.jobQueue.shift();\n        nextJob.start();\n        loader.jobsInProgress++;\n    }\n\n    callback( job.image, job.errorMsg );\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Tile\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class Tile\n * @memberof OpenSeadragon\n * @param {Number} level The zoom level this tile belongs to.\n * @param {Number} x The vector component \'x\'.\n * @param {Number} y The vector component \'y\'.\n * @param {OpenSeadragon.Point} bounds Where this tile fits, in normalized\n *      coordinates.\n * @param {Boolean} exists Is this tile a part of a sparse image? ( Also has\n *      this tile failed to load? )\n * @param {String} url The URL of this tile\'s image.\n * @param {CanvasRenderingContext2D} context2D The context2D of this tile if it\n * is provided directly by the tile source.\n */\n$.Tile = function(level, x, y, bounds, exists, url, context2D) {\n    /**\n     * The zoom level this tile belongs to.\n     * @member {Number} level\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.level   = level;\n    /**\n     * The vector component \'x\'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.x       = x;\n    /**\n     * The vector component \'y\'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.y       = y;\n    /**\n     * Where this tile fits, in normalized coordinates\n     * @member {OpenSeadragon.Rect} bounds\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.bounds  = bounds;\n    /**\n     * Is this tile a part of a sparse image? Also has this tile failed to load?\n     * @member {Boolean} exists\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.exists  = exists;\n    /**\n     * The URL of this tile\'s image.\n     * @member {String} url\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.url     = url;\n    /**\n     * The context2D of this tile if it is provided directly by the tile source.\n     * @member {CanvasRenderingContext2D} context2D\n     * @memberOf OpenSeadragon.Tile#\n     */\n    this.context2D = context2D;\n    /**\n     * Is this tile loaded?\n     * @member {Boolean} loaded\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.loaded  = false;\n    /**\n     * Is this tile loading?\n     * @member {Boolean} loading\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.loading = false;\n\n    /**\n     * The HTML div element for this tile\n     * @member {Element} element\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.element    = null;\n    /**\n     * The HTML img element for this tile.\n     * @member {Element} imgElement\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.imgElement = null;\n    /**\n     * The Image object for this tile.\n     * @member {Object} image\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.image      = null;\n\n    /**\n     * The alias of this.element.style.\n     * @member {String} style\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.style      = null;\n    /**\n     * This tile\'s position on screen, in pixels.\n     * @member {OpenSeadragon.Point} position\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.position   = null;\n    /**\n     * This tile\'s size on screen, in pixels.\n     * @member {OpenSeadragon.Point} size\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.size       = null;\n    /**\n     * The start time of this tile\'s blending.\n     * @member {Number} blendStart\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.blendStart = null;\n    /**\n     * The current opacity this tile should be.\n     * @member {Number} opacity\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.opacity    = null;\n    /**\n     * The distance of this tile to the viewport center.\n     * @member {Number} distance\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.distance   = null;\n    /**\n     * The visibility score of this tile.\n     * @member {Number} visibility\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.visibility = null;\n\n    /**\n     * Whether this tile is currently being drawn.\n     * @member {Boolean} beingDrawn\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.beingDrawn     = false;\n    /**\n     * Timestamp the tile was last touched.\n     * @member {Number} lastTouchTime\n     * @memberof OpenSeadragon.Tile#\n     */\n    this.lastTouchTime  = 0;\n};\n\n/** @lends OpenSeadragon.Tile.prototype */\n$.Tile.prototype = {\n\n    /**\n     * Provides a string representation of this tiles level and (x,y)\n     * components.\n     * @function\n     * @returns {String}\n     */\n    toString: function() {\n        return this.level + "/" + this.x + "_" + this.y;\n    },\n\n    // private\n    _hasTransparencyChannel: function() {\n        return !!this.context2D || this.url.match(\'.png\');\n    },\n\n    /**\n     * Renders the tile in an html container.\n     * @function\n     * @param {Element} container\n     */\n    drawHTML: function( container ) {\n        if (!this.cacheImageRecord) {\n            $.console.warn(\n                \'[Tile.drawHTML] attempting to draw tile %s when it\\\'s not cached\',\n                this.toString());\n            return;\n        }\n\n        if ( !this.loaded ) {\n            $.console.warn(\n                "Attempting to draw tile %s when it\'s not yet loaded.",\n                this.toString()\n            );\n            return;\n        }\n\n        //EXPERIMENTAL - trying to figure out how to scale the container\n        //               content during animation of the container size.\n\n        if ( !this.element ) {\n            this.element                              = $.makeNeutralElement( "div" );\n            this.imgElement                           = this.cacheImageRecord.getImage().cloneNode();\n            this.imgElement.style.msInterpolationMode = "nearest-neighbor";\n            this.imgElement.style.width               = "100%";\n            this.imgElement.style.height              = "100%";\n\n            this.style                     = this.element.style;\n            this.style.position            = "absolute";\n        }\n        if ( this.element.parentNode != container ) {\n            container.appendChild( this.element );\n        }\n        if ( this.imgElement.parentNode != this.element ) {\n            this.element.appendChild( this.imgElement );\n        }\n\n        this.style.top     = this.position.y + "px";\n        this.style.left    = this.position.x + "px";\n        this.style.height  = this.size.y + "px";\n        this.style.width   = this.size.x + "px";\n\n        $.setElementOpacity( this.element, this.opacity );\n    },\n\n    /**\n     * Renders the tile in a canvas-based context.\n     * @function\n     * @param {Canvas} context\n     * @param {Function} drawingHandler - Method for firing the drawing event.\n     * drawingHandler({context, tile, rendered})\n     * where <code>rendered</code> is the context with the pre-drawn image.\n     * @param {Number} [scale=1] - Apply a scale to position and size\n     * @param {OpenSeadragon.Point} [translate] - A translation vector\n     */\n    drawCanvas: function( context, drawingHandler, scale, translate ) {\n\n        var position = this.position.times($.pixelDensityRatio),\n            size     = this.size.times($.pixelDensityRatio),\n            rendered;\n\n        if (!this.context2D && !this.cacheImageRecord) {\n            $.console.warn(\n                \'[Tile.drawCanvas] attempting to draw tile %s when it\\\'s not cached\',\n                this.toString());\n            return;\n        }\n\n        rendered = this.context2D || this.cacheImageRecord.getRenderedContext();\n\n        if ( !this.loaded || !rendered ){\n            $.console.warn(\n                "Attempting to draw tile %s when it\'s not yet loaded.",\n                this.toString()\n            );\n\n            return;\n        }\n\n        context.save();\n\n        context.globalAlpha = this.opacity;\n\n        if (typeof scale === \'number\' && scale !== 1) {\n            // draw tile at a different scale\n            position = position.times(scale);\n            size = size.times(scale);\n        }\n\n        if (translate instanceof $.Point) {\n            // shift tile position slightly\n            position = position.plus(translate);\n        }\n\n        //if we are supposed to be rendering fully opaque rectangle,\n        //ie its done fading or fading is turned off, and if we are drawing\n        //an image with an alpha channel, then the only way\n        //to avoid seeing the tile underneath is to clear the rectangle\n        if (context.globalAlpha === 1 && this._hasTransparencyChannel()) {\n            //clearing only the inside of the rectangle occupied\n            //by the png prevents edge flikering\n            context.clearRect(\n                position.x + 1,\n                position.y + 1,\n                size.x - 2,\n                size.y - 2\n            );\n        }\n\n        // This gives the application a chance to make image manipulation\n        // changes as we are rendering the image\n        drawingHandler({context: context, tile: this, rendered: rendered});\n\n        context.drawImage(\n            rendered.canvas,\n            0,\n            0,\n            rendered.canvas.width,\n            rendered.canvas.height,\n            position.x,\n            position.y,\n            size.x,\n            size.y\n        );\n\n        context.restore();\n    },\n\n    /**\n     * Get the ratio between current and original size.\n     * @function\n     * @return {Float}\n     */\n    getScaleForEdgeSmoothing: function() {\n        var context;\n        if (this.cacheImageRecord) {\n            context = this.cacheImageRecord.getRenderedContext();\n        } else if (this.context2D) {\n            context = this.context2D;\n        } else {\n            $.console.warn(\n                \'[Tile.drawCanvas] attempting to get tile scale %s when tile\\\'s not cached\',\n                this.toString());\n            return 1;\n        }\n        return context.canvas.width / (this.size.x * $.pixelDensityRatio);\n    },\n\n    /**\n     * Get a translation vector that when applied to the tile position produces integer coordinates.\n     * Needed to avoid swimming and twitching.\n     * @function\n     * @param {Number} [scale=1] - Scale to be applied to position.\n     * @return {OpenSeadragon.Point}\n     */\n    getTranslationForEdgeSmoothing: function(scale, canvasSize, sketchCanvasSize) {\n        // The translation vector must have positive values, otherwise the image goes a bit off\n        // the sketch canvas to the top and left and we must use negative coordinates to repaint it\n        // to the main canvas. In that case, some browsers throw:\n        // INDEX_SIZE_ERR: DOM Exception 1: Index or size was negative, or greater than the allowed value.\n        var x = Math.max(1, Math.ceil((sketchCanvasSize.x - canvasSize.x) / 2));\n        var y = Math.max(1, Math.ceil((sketchCanvasSize.y - canvasSize.y) / 2));\n        return new $.Point(x, y).minus(\n            this.position\n                .times($.pixelDensityRatio)\n                .times(scale || 1)\n                .apply(function(x) {\n                    return x % 1;\n                })\n        );\n    },\n\n    /**\n     * Removes tile from its container.\n     * @function\n     */\n    unload: function() {\n        if ( this.imgElement && this.imgElement.parentNode ) {\n            this.imgElement.parentNode.removeChild( this.imgElement );\n        }\n        if ( this.element && this.element.parentNode ) {\n            this.element.parentNode.removeChild( this.element );\n        }\n\n        this.element    = null;\n        this.imgElement = null;\n        this.loaded     = false;\n        this.loading    = false;\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Overlay\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function($) {\n\n    /**\n     * An enumeration of positions that an overlay may be assigned relative to\n     * the viewport.\n     * It is identical to OpenSeadragon.Placement but is kept for backward\n     * compatibility.\n     * @member OverlayPlacement\n     * @memberof OpenSeadragon\n     * @static\n     * @readonly\n     * @type {Object}\n     * @property {Number} CENTER\n     * @property {Number} TOP_LEFT\n     * @property {Number} TOP\n     * @property {Number} TOP_RIGHT\n     * @property {Number} RIGHT\n     * @property {Number} BOTTOM_RIGHT\n     * @property {Number} BOTTOM\n     * @property {Number} BOTTOM_LEFT\n     * @property {Number} LEFT\n     */\n    $.OverlayPlacement = $.Placement;\n\n    /**\n     * An enumeration of possible ways to handle overlays rotation\n     * @member OverlayRotationMode\n     * @memberOf OpenSeadragon\n     * @static\n     * @readonly\n     * @property {Number} NO_ROTATION The overlay ignore the viewport rotation.\n     * @property {Number} EXACT The overlay use CSS 3 transforms to rotate with\n     * the viewport. If the overlay contains text, it will get rotated as well.\n     * @property {Number} BOUNDING_BOX The overlay adjusts for rotation by\n     * taking the size of the bounding box of the rotated bounds.\n     * Only valid for overlays with Rect location and scalable in both directions.\n     */\n    $.OverlayRotationMode = $.freezeObject({\n        NO_ROTATION: 1,\n        EXACT: 2,\n        BOUNDING_BOX: 3\n    });\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will be located at this location with respect\n     * to the placement option. If a {@link OpenSeadragon.Rect} is specified,\n     * the overlay will be placed at this location with the corresponding width\n     * and height and placement TOP_LEFT.\n     * @param {OpenSeadragon.Placement} [options.placement=OpenSeadragon.Placement.TOP_LEFT]\n     * Defines what part of the overlay should be at the specified options.location\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn in the directions\n     * which are not scaled. It will improve performances but will cause a\n     * misalignment if the overlay size changes.\n     * @param {Number} [options.width] The width of the overlay in viewport\n     * coordinates. If specified, the width of the overlay will be adjusted when\n     * the zoom changes.\n     * @param {Number} [options.height] The height of the overlay in viewport\n     * coordinates. If specified, the height of the overlay will be adjusted when\n     * the zoom changes.\n     * @param {Boolean} [options.rotationMode=OpenSeadragon.OverlayRotationMode.EXACT]\n     * How to handle the rotation of the viewport.\n     */\n    $.Overlay = function(element, location, placement) {\n\n        /**\n         * onDraw callback signature used by {@link OpenSeadragon.Overlay}.\n         *\n         * @callback OnDrawCallback\n         * @memberof OpenSeadragon.Overlay\n         * @param {OpenSeadragon.Point} position\n         * @param {OpenSeadragon.Point} size\n         * @param {Element} element\n         */\n\n        var options;\n        if ($.isPlainObject(element)) {\n            options = element;\n        } else {\n            options = {\n                element: element,\n                location: location,\n                placement: placement\n            };\n        }\n\n        this.element = options.element;\n        this.style = options.element.style;\n        this._init(options);\n    };\n\n    /** @lends OpenSeadragon.Overlay.prototype */\n    $.Overlay.prototype = {\n\n        // private\n        _init: function(options) {\n            this.location = options.location;\n            this.placement = options.placement === undefined ?\n                $.Placement.TOP_LEFT : options.placement;\n            this.onDraw = options.onDraw;\n            this.checkResize = options.checkResize === undefined ?\n                true : options.checkResize;\n\n            // When this.width is not null, the overlay get scaled horizontally\n            this.width = options.width === undefined ? null : options.width;\n\n            // When this.height is not null, the overlay get scaled vertically\n            this.height = options.height === undefined ? null : options.height;\n\n            this.rotationMode = options.rotationMode || $.OverlayRotationMode.EXACT;\n\n            // Having a rect as location is a syntactic sugar\n            if (this.location instanceof $.Rect) {\n                this.width = this.location.width;\n                this.height = this.location.height;\n                this.location = this.location.getTopLeft();\n                this.placement = $.Placement.TOP_LEFT;\n            }\n\n            // Deprecated properties kept for backward compatibility.\n            this.scales = this.width !== null && this.height !== null;\n            this.bounds = new $.Rect(\n                this.location.x, this.location.y, this.width, this.height);\n            this.position = this.location;\n        },\n\n        /**\n         * Internal function to adjust the position of an overlay\n         * depending on it size and placement.\n         * @function\n         * @param {OpenSeadragon.Point} position\n         * @param {OpenSeadragon.Point} size\n         */\n        adjust: function(position, size) {\n            var properties = $.Placement.properties[this.placement];\n            if (!properties) {\n                return;\n            }\n            if (properties.isHorizontallyCentered) {\n                position.x -= size.x / 2;\n            } else if (properties.isRight) {\n                position.x -= size.x;\n            }\n            if (properties.isVerticallyCentered) {\n                position.y -= size.y / 2;\n            } else if (properties.isBottom) {\n                position.y -= size.y;\n            }\n        },\n\n        /**\n         * @function\n         */\n        destroy: function() {\n            var element = this.element;\n            var style = this.style;\n\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n                //this should allow us to preserve overlays when required between\n                //pages\n                if (element.prevElementParent) {\n                    style.display = \'none\';\n                    //element.prevElementParent.insertBefore(\n                    //    element,\n                    //    element.prevNextSibling\n                    //);\n                    document.body.appendChild(element);\n                }\n            }\n\n            // clear the onDraw callback\n            this.onDraw = null;\n\n            style.top = "";\n            style.left = "";\n            style.position = "";\n\n            if (this.width !== null) {\n                style.width = "";\n            }\n            if (this.height !== null) {\n                style.height = "";\n            }\n            var transformOriginProp = $.getCssPropertyWithVendorPrefix(\n                \'transformOrigin\');\n            var transformProp = $.getCssPropertyWithVendorPrefix(\n                \'transform\');\n            if (transformOriginProp && transformProp) {\n                style[transformOriginProp] = "";\n                style[transformProp] = "";\n            }\n        },\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function(container, viewport) {\n            var element = this.element;\n            if (element.parentNode !== container) {\n                //save the source parent for later if we need it\n                element.prevElementParent = element.parentNode;\n                element.prevNextSibling = element.nextSibling;\n                container.appendChild(element);\n\n                // this.size is used by overlays which don\'t get scaled in at\n                // least one direction when this.checkResize is set to false.\n                this.size = $.getElementSize(element);\n            }\n\n            var positionAndSize = this._getOverlayPositionAndSize(viewport);\n\n            var position = positionAndSize.position;\n            var size = this.size = positionAndSize.size;\n            var rotate = positionAndSize.rotate;\n\n            // call the onDraw callback if it exists to allow one to overwrite\n            // the drawing/positioning/sizing of the overlay\n            if (this.onDraw) {\n                this.onDraw(position, size, this.element);\n            } else {\n                var style = this.style;\n                style.left = position.x + "px";\n                style.top = position.y + "px";\n                if (this.width !== null) {\n                    style.width = size.x + "px";\n                }\n                if (this.height !== null) {\n                    style.height = size.y + "px";\n                }\n                var transformOriginProp = $.getCssPropertyWithVendorPrefix(\n                    \'transformOrigin\');\n                var transformProp = $.getCssPropertyWithVendorPrefix(\n                    \'transform\');\n                if (transformOriginProp && transformProp) {\n                    if (rotate) {\n                        style[transformOriginProp] = this._getTransformOrigin();\n                        style[transformProp] = "rotate(" + rotate + "deg)";\n                    } else {\n                        style[transformOriginProp] = "";\n                        style[transformProp] = "";\n                    }\n                }\n                style.position = "absolute";\n\n                if (style.display !== \'none\') {\n                    style.display = \'block\';\n                }\n            }\n        },\n\n        // private\n        _getOverlayPositionAndSize: function(viewport) {\n            var position = viewport.pixelFromPoint(this.location, true);\n            var size = this._getSizeInPixels(viewport);\n            this.adjust(position, size);\n\n            var rotate = 0;\n            if (viewport.degrees &&\n                this.rotationMode !== $.OverlayRotationMode.NO_ROTATION) {\n                // BOUNDING_BOX is only valid if both directions get scaled.\n                // Get replaced by EXACT otherwise.\n                if (this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX &&\n                    this.width !== null && this.height !== null) {\n                    var rect = new $.Rect(position.x, position.y, size.x, size.y);\n                    var boundingBox = this._getBoundingBox(rect, viewport.degrees);\n                    position = boundingBox.getTopLeft();\n                    size = boundingBox.getSize();\n                } else {\n                    rotate = viewport.degrees;\n                }\n            }\n\n            return {\n                position: position,\n                size: size,\n                rotate: rotate\n            };\n        },\n\n        // private\n        _getSizeInPixels: function(viewport) {\n            var width = this.size.x;\n            var height = this.size.y;\n            if (this.width !== null || this.height !== null) {\n                var scaledSize = viewport.deltaPixelsFromPointsNoRotate(\n                    new $.Point(this.width || 0, this.height || 0), true);\n                if (this.width !== null) {\n                    width = scaledSize.x;\n                }\n                if (this.height !== null) {\n                    height = scaledSize.y;\n                }\n            }\n            if (this.checkResize &&\n                (this.width === null || this.height === null)) {\n                var eltSize = this.size = $.getElementSize(this.element);\n                if (this.width === null) {\n                    width = eltSize.x;\n                }\n                if (this.height === null) {\n                    height = eltSize.y;\n                }\n            }\n            return new $.Point(width, height);\n        },\n\n        // private\n        _getBoundingBox: function(rect, degrees) {\n            var refPoint = this._getPlacementPoint(rect);\n            return rect.rotate(degrees, refPoint).getBoundingBox();\n        },\n\n        // private\n        _getPlacementPoint: function(rect) {\n            var result = new $.Point(rect.x, rect.y);\n            var properties = $.Placement.properties[this.placement];\n            if (properties) {\n                if (properties.isHorizontallyCentered) {\n                    result.x += rect.width / 2;\n                } else if (properties.isRight) {\n                    result.x += rect.width;\n                }\n                if (properties.isVerticallyCentered) {\n                    result.y += rect.height / 2;\n                } else if (properties.isBottom) {\n                    result.y += rect.height;\n                }\n            }\n            return result;\n        },\n\n        // private\n        _getTransformOrigin: function() {\n            var result = "";\n            var properties = $.Placement.properties[this.placement];\n            if (!properties) {\n                return result;\n            }\n            if (properties.isLeft) {\n                result = "left";\n            } else if (properties.isRight) {\n                result = "right";\n            }\n            if (properties.isTop) {\n                result += " top";\n            } else if (properties.isBottom) {\n                result += " bottom";\n            }\n            return result;\n        },\n\n        /**\n         * Changes the overlay settings.\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect|Object} location\n         * If an object is specified, the options are the same than the constructor\n         * except for the element which can not be changed.\n         * @param {OpenSeadragon.Placement} position\n         */\n        update: function(location, placement) {\n            var options = $.isPlainObject(location) ? location : {\n                location: location,\n                placement: placement\n            };\n            this._init({\n                location: options.location || this.location,\n                placement: options.placement !== undefined ?\n                    options.placement : this.placement,\n                onDraw: options.onDraw || this.onDraw,\n                checkResize: options.checkResize || this.checkResize,\n                width: options.width !== undefined ? options.width : this.width,\n                height: options.height !== undefined ? options.height : this.height,\n                rotationMode: options.rotationMode || this.rotationMode\n            });\n        },\n\n        /**\n         * Returns the current bounds of the overlay in viewport coordinates\n         * @function\n         * @param {OpenSeadragon.Viewport} viewport the viewport\n         * @returns {OpenSeadragon.Rect} overlay bounds\n         */\n        getBounds: function(viewport) {\n            $.console.assert(viewport,\n                \'A viewport must now be passed to Overlay.getBounds.\');\n            var width = this.width;\n            var height = this.height;\n            if (width === null || height === null) {\n                var size = viewport.deltaPointsFromPixelsNoRotate(this.size, true);\n                if (width === null) {\n                    width = size.x;\n                }\n                if (height === null) {\n                    height = size.y;\n                }\n            }\n            var location = this.location.clone();\n            this.adjust(location, new $.Point(width, height));\n            return this._adjustBoundsForRotation(\n                viewport, new $.Rect(location.x, location.y, width, height));\n        },\n\n        // private\n        _adjustBoundsForRotation: function(viewport, bounds) {\n            if (!viewport ||\n                viewport.degrees === 0 ||\n                this.rotationMode === $.OverlayRotationMode.EXACT) {\n                return bounds;\n            }\n            if (this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX) {\n                // If overlay not fully scalable, BOUNDING_BOX falls back to EXACT\n                if (this.width === null || this.height === null) {\n                    return bounds;\n                }\n                // It is easier to just compute the position and size and\n                // convert to viewport coordinates.\n                var positionAndSize = this._getOverlayPositionAndSize(viewport);\n                return viewport.viewerElementToViewportRectangle(new $.Rect(\n                    positionAndSize.position.x,\n                    positionAndSize.position.y,\n                    positionAndSize.size.x,\n                    positionAndSize.size.y));\n            }\n\n            // NO_ROTATION case\n            return bounds.rotate(-viewport.degrees,\n                this._getPlacementPoint(bounds));\n        }\n    };\n\n}(OpenSeadragon));\n\n/*\n * OpenSeadragon - Drawer\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class Drawer\n * @memberof OpenSeadragon\n * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.\n * @param {Object} options - Options for this Drawer.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this Drawer.\n * @param {OpenSeadragon.Viewport} options.viewport - Reference to Viewer viewport.\n * @param {Element} options.element - Parent element.\n * @param {Number} [options.debugGridColor] - See debugGridColor in {@link OpenSeadragon.Options} for details.\n */\n$.Drawer = function( options ) {\n\n    $.console.assert( options.viewer, "[Drawer] options.viewer is required" );\n\n    //backward compatibility for positional args while prefering more\n    //idiomatic javascript options object as the only argument\n    var args  = arguments;\n\n    if( !$.isPlainObject( options ) ){\n        options = {\n            source:     args[ 0 ], // Reference to Viewer tile source.\n            viewport:   args[ 1 ], // Reference to Viewer viewport.\n            element:    args[ 2 ]  // Parent element.\n        };\n    }\n\n    $.console.assert( options.viewport, "[Drawer] options.viewport is required" );\n    $.console.assert( options.element, "[Drawer] options.element is required" );\n\n    if ( options.source ) {\n        $.console.error( "[Drawer] options.source is no longer accepted; use TiledImage instead" );\n    }\n\n    this.viewer = options.viewer;\n    this.viewport = options.viewport;\n    this.debugGridColor = options.debugGridColor || $.DEFAULT_SETTINGS.debugGridColor;\n    if (options.opacity) {\n        $.console.error( "[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead" );\n    }\n\n    this.useCanvas  = $.supportsCanvas && ( this.viewer ? this.viewer.useCanvas : true );\n    /**\n     * The parent element of this Drawer instance, passed in when the Drawer was created.\n     * The parent of {@link OpenSeadragon.Drawer#canvas}.\n     * @member {Element} container\n     * @memberof OpenSeadragon.Drawer#\n     */\n    this.container  = $.getElement( options.element );\n    /**\n     * A &lt;canvas&gt; element if the browser supports them, otherwise a &lt;div&gt; element.\n     * Child element of {@link OpenSeadragon.Drawer#container}.\n     * @member {Element} canvas\n     * @memberof OpenSeadragon.Drawer#\n     */\n    this.canvas     = $.makeNeutralElement( this.useCanvas ? "canvas" : "div" );\n    /**\n     * 2d drawing context for {@link OpenSeadragon.Drawer#canvas} if it\'s a &lt;canvas&gt; element, otherwise null.\n     * @member {Object} context\n     * @memberof OpenSeadragon.Drawer#\n     */\n    this.context    = this.useCanvas ? this.canvas.getContext( "2d" ) : null;\n\n    /**\n     * Sketch canvas used to temporarily draw tiles which cannot be drawn directly\n     * to the main canvas due to opacity. Lazily initialized.\n     */\n    this.sketchCanvas = null;\n    this.sketchContext = null;\n\n    /**\n     * @member {Element} element\n     * @memberof OpenSeadragon.Drawer#\n     * @deprecated Alias for {@link OpenSeadragon.Drawer#container}.\n     */\n    this.element    = this.container;\n\n    // We force our container to ltr because our drawing math doesn\'t work in rtl.\n    // This issue only affects our canvas renderer, but we do it always for consistency.\n    // Note that this means overlays you want to be rtl need to be explicitly set to rtl.\n    this.container.dir = \'ltr\';\n\n    // check canvas available width and height, set canvas width and height such that the canvas backing store is set to the proper pixel density\n    if (this.useCanvas) {\n        var viewportSize = this._calculateCanvasSize();\n        this.canvas.width = viewportSize.x;\n        this.canvas.height = viewportSize.y;\n    }\n\n    this.canvas.style.width     = "100%";\n    this.canvas.style.height    = "100%";\n    this.canvas.style.position  = "absolute";\n    $.setElementOpacity( this.canvas, this.opacity, true );\n\n    // explicit left-align\n    this.container.style.textAlign = "left";\n    this.container.appendChild( this.canvas );\n};\n\n/** @lends OpenSeadragon.Drawer.prototype */\n$.Drawer.prototype = {\n    // deprecated\n    addOverlay: function( element, location, placement, onDraw ) {\n        $.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead.");\n        this.viewer.addOverlay( element, location, placement, onDraw );\n        return this;\n    },\n\n    // deprecated\n    updateOverlay: function( element, location, placement ) {\n        $.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.");\n        this.viewer.updateOverlay( element, location, placement );\n        return this;\n    },\n\n    // deprecated\n    removeOverlay: function( element ) {\n        $.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.");\n        this.viewer.removeOverlay( element );\n        return this;\n    },\n\n    // deprecated\n    clearOverlays: function() {\n        $.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.");\n        this.viewer.clearOverlays();\n        return this;\n    },\n\n    /**\n     * Set the opacity of the drawer.\n     * @param {Number} opacity\n     * @return {OpenSeadragon.Drawer} Chainable.\n     */\n    setOpacity: function( opacity ) {\n        $.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");\n        var world = this.viewer.world;\n        for (var i = 0; i < world.getItemCount(); i++) {\n            world.getItemAt( i ).setOpacity( opacity );\n        }\n        return this;\n    },\n\n    /**\n     * Get the opacity of the drawer.\n     * @returns {Number}\n     */\n    getOpacity: function() {\n        $.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");\n        var world = this.viewer.world;\n        var maxOpacity = 0;\n        for (var i = 0; i < world.getItemCount(); i++) {\n            var opacity = world.getItemAt( i ).getOpacity();\n            if ( opacity > maxOpacity ) {\n                maxOpacity = opacity;\n            }\n        }\n        return maxOpacity;\n    },\n\n    // deprecated\n    needsUpdate: function() {\n        $.console.error( "[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead." );\n        return this.viewer.world.needsDraw();\n    },\n\n    // deprecated\n    numTilesLoaded: function() {\n        $.console.error( "[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead." );\n        return this.viewer.tileCache.numTilesLoaded();\n    },\n\n    // deprecated\n    reset: function() {\n        $.console.error( "[Drawer.reset] this function is deprecated. Use World.resetItems instead." );\n        this.viewer.world.resetItems();\n        return this;\n    },\n\n    // deprecated\n    update: function() {\n        $.console.error( "[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead." );\n        this.clear();\n        this.viewer.world.draw();\n        return this;\n    },\n\n    /**\n     * @return {Boolean} True if rotation is supported.\n     */\n    canRotate: function() {\n        return this.useCanvas;\n    },\n\n    /**\n     * Destroy the drawer (unload current loaded tiles)\n     */\n    destroy: function() {\n        //force unloading of current canvas (1x1 will be gc later, trick not necessarily needed)\n        this.canvas.width  = 1;\n        this.canvas.height = 1;\n        this.sketchCanvas = null;\n        this.sketchContext = null;\n    },\n\n    /**\n     * Clears the Drawer so it\'s ready to draw another frame.\n     */\n    clear: function() {\n        this.canvas.innerHTML = "";\n        if ( this.useCanvas ) {\n            var viewportSize = this._calculateCanvasSize();\n            if( this.canvas.width != viewportSize.x ||\n                this.canvas.height != viewportSize.y ) {\n                this.canvas.width = viewportSize.x;\n                this.canvas.height = viewportSize.y;\n                if ( this.sketchCanvas !== null ) {\n                    var sketchCanvasSize = this._calculateSketchCanvasSize();\n                    this.sketchCanvas.width = sketchCanvasSize.x;\n                    this.sketchCanvas.height = sketchCanvasSize.y;\n                }\n            }\n            this._clear();\n        }\n    },\n\n    _clear: function (useSketch, bounds) {\n        if (!this.useCanvas) {\n            return;\n        }\n        var context = this._getContext(useSketch);\n        if (bounds) {\n            context.clearRect(bounds.x, bounds.y, bounds.width, bounds.height);\n        } else {\n            var canvas = context.canvas;\n            context.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    },\n\n    /**\n     * Scale from OpenSeadragon viewer rectangle to drawer rectangle\n     * (ignoring rotation)\n     * @param {OpenSeadragon.Rect} rectangle - The rectangle in viewport coordinate system.\n     * @return {OpenSeadragon.Rect} Rectangle in drawer coordinate system.\n     */\n    viewportToDrawerRectangle: function(rectangle) {\n        var topLeft = this.viewport.pixelFromPointNoRotate(rectangle.getTopLeft(), true);\n        var size = this.viewport.deltaPixelsFromPointsNoRotate(rectangle.getSize(), true);\n\n        return new $.Rect(\n            topLeft.x * $.pixelDensityRatio,\n            topLeft.y * $.pixelDensityRatio,\n            size.x    * $.pixelDensityRatio,\n            size.y    * $.pixelDensityRatio\n        );\n    },\n\n    /**\n     * Draws the given tile.\n     * @param {OpenSeadragon.Tile} tile - The tile to draw.\n     * @param {Function} drawingHandler - Method for firing the drawing event if using canvas.\n     * drawingHandler({context, tile, rendered})\n     * @param {Boolean} useSketch - Whether to use the sketch canvas or not.\n     * where <code>rendered</code> is the context with the pre-drawn image.\n     * @param {Float} [scale=1] - Apply a scale to tile position and size. Defaults to 1.\n     * @param {OpenSeadragon.Point} [translate] A translation vector to offset tile position\n     */\n    drawTile: function(tile, drawingHandler, useSketch, scale, translate) {\n        $.console.assert(tile, \'[Drawer.drawTile] tile is required\');\n        $.console.assert(drawingHandler, \'[Drawer.drawTile] drawingHandler is required\');\n\n        if (this.useCanvas) {\n            var context = this._getContext(useSketch);\n            scale = scale || 1;\n            tile.drawCanvas(context, drawingHandler, scale, translate);\n        } else {\n            tile.drawHTML( this.canvas );\n        }\n    },\n\n    _getContext: function( useSketch ) {\n        var context = this.context;\n        if ( useSketch ) {\n            if (this.sketchCanvas === null) {\n                this.sketchCanvas = document.createElement( "canvas" );\n                var sketchCanvasSize = this._calculateSketchCanvasSize();\n                this.sketchCanvas.width = sketchCanvasSize.x;\n                this.sketchCanvas.height = sketchCanvasSize.y;\n                this.sketchContext = this.sketchCanvas.getContext( "2d" );\n\n                // If the viewport is not currently rotated, the sketchCanvas\n                // will have the same size as the main canvas. However, if\n                // the viewport get rotated later on, we will need to resize it.\n                if (this.viewport.getRotation() === 0) {\n                    var self = this;\n                    this.viewer.addHandler(\'rotate\', function resizeSketchCanvas() {\n                        self.viewer.removeHandler(\'rotate\', resizeSketchCanvas);\n                        var sketchCanvasSize = self._calculateSketchCanvasSize();\n                        self.sketchCanvas.width = sketchCanvasSize.x;\n                        self.sketchCanvas.height = sketchCanvasSize.y;\n                    });\n                }\n            }\n            context = this.sketchContext;\n        }\n        return context;\n    },\n\n    // private\n    saveContext: function( useSketch ) {\n        if (!this.useCanvas) {\n            return;\n        }\n\n        this._getContext( useSketch ).save();\n    },\n\n    // private\n    restoreContext: function( useSketch ) {\n        if (!this.useCanvas) {\n            return;\n        }\n\n        this._getContext( useSketch ).restore();\n    },\n\n    // private\n    setClip: function(rect, useSketch) {\n        if (!this.useCanvas) {\n            return;\n        }\n\n        var context = this._getContext( useSketch );\n        context.beginPath();\n        context.rect(rect.x, rect.y, rect.width, rect.height);\n        context.clip();\n    },\n\n    // private\n    drawRectangle: function(rect, fillStyle, useSketch) {\n        if (!this.useCanvas) {\n            return;\n        }\n\n        var context = this._getContext( useSketch );\n        context.save();\n        context.fillStyle = fillStyle;\n        context.fillRect(rect.x, rect.y, rect.width, rect.height);\n        context.restore();\n    },\n\n    /**\n     * Blends the sketch canvas in the main canvas.\n     * @param {Object} options The options\n     * @param {Float} options.opacity The opacity of the blending.\n     * @param {Float} [options.scale=1] The scale at which tiles were drawn on\n     * the sketch. Default is 1.\n     * Use scale to draw at a lower scale and then enlarge onto the main canvas.\n     * @param {OpenSeadragon.Point} [options.translate] A translation vector\n     * that was used to draw the tiles\n     * @param {String} [options.compositeOperation] - How the image is\n     * composited onto other images; see compositeOperation in\n     * {@link OpenSeadragon.Options} for possible values.\n     * @param {OpenSeadragon.Rect} [options.bounds] The part of the sketch\n     * canvas to blend in the main canvas. If specified, options.scale and\n     * options.translate get ignored.\n     */\n    blendSketch: function(opacity, scale, translate, compositeOperation) {\n        var options = opacity;\n        if (!$.isPlainObject(options)) {\n            options = {\n                opacity: opacity,\n                scale: scale,\n                translate: translate,\n                compositeOperation: compositeOperation\n            };\n        }\n        if (!this.useCanvas || !this.sketchCanvas) {\n            return;\n        }\n        opacity = options.opacity;\n        compositeOperation = options.compositeOperation;\n        var bounds = options.bounds;\n\n        this.context.save();\n        this.context.globalAlpha = opacity;\n        if (compositeOperation) {\n            this.context.globalCompositeOperation = compositeOperation;\n        }\n        if (bounds) {\n            this.context.drawImage(\n                this.sketchCanvas,\n                bounds.x,\n                bounds.y,\n                bounds.width,\n                bounds.height,\n                bounds.x,\n                bounds.y,\n                bounds.width,\n                bounds.height\n            );\n        } else {\n            scale = options.scale || 1;\n            translate = options.translate;\n            var position = translate instanceof $.Point ?\n                translate : new $.Point(0, 0);\n\n            var widthExt = 0;\n            var heightExt = 0;\n            if (translate) {\n                var widthDiff = this.sketchCanvas.width - this.canvas.width;\n                var heightDiff = this.sketchCanvas.height - this.canvas.height;\n                widthExt = Math.round(widthDiff / 2);\n                heightExt = Math.round(heightDiff / 2);\n            }\n            this.context.drawImage(\n                this.sketchCanvas,\n                position.x - widthExt * scale,\n                position.y - heightExt * scale,\n                (this.canvas.width + 2 * widthExt) * scale,\n                (this.canvas.height  + 2 * heightExt) * scale,\n                -widthExt,\n                -heightExt,\n                this.canvas.width + 2 * widthExt,\n                this.canvas.height + 2 * heightExt\n            );\n        }\n        this.context.restore();\n    },\n\n    // private\n    drawDebugInfo: function( tile, count, i ){\n        if ( !this.useCanvas ) {\n            return;\n        }\n\n        var context = this.context;\n        context.save();\n        context.lineWidth = 2 * $.pixelDensityRatio;\n        context.font = \'small-caps bold \' + (13 * $.pixelDensityRatio) + \'px arial\';\n        context.strokeStyle = this.debugGridColor;\n        context.fillStyle = this.debugGridColor;\n\n        if ( this.viewport.degrees !== 0 ) {\n            this._offsetForRotation(this.viewport.degrees);\n        }\n\n        context.strokeRect(\n            tile.position.x * $.pixelDensityRatio,\n            tile.position.y * $.pixelDensityRatio,\n            tile.size.x * $.pixelDensityRatio,\n            tile.size.y * $.pixelDensityRatio\n        );\n\n        var tileCenterX = (tile.position.x + (tile.size.x / 2)) * $.pixelDensityRatio;\n        var tileCenterY = (tile.position.y + (tile.size.y / 2)) * $.pixelDensityRatio;\n\n        // Rotate the text the right way around.\n        context.translate( tileCenterX, tileCenterY );\n        context.rotate( Math.PI / 180 * -this.viewport.degrees );\n        context.translate( -tileCenterX, -tileCenterY );\n\n        if( tile.x === 0 && tile.y === 0 ){\n            context.fillText(\n                "Zoom: " + this.viewport.getZoom(),\n                tile.position.x * $.pixelDensityRatio,\n                (tile.position.y - 30) * $.pixelDensityRatio\n            );\n            context.fillText(\n                "Pan: " + this.viewport.getBounds().toString(),\n                tile.position.x * $.pixelDensityRatio,\n                (tile.position.y - 20) * $.pixelDensityRatio\n            );\n        }\n        context.fillText(\n            "Level: " + tile.level,\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 20) * $.pixelDensityRatio\n        );\n        context.fillText(\n            "Column: " + tile.x,\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 30) * $.pixelDensityRatio\n        );\n        context.fillText(\n            "Row: " + tile.y,\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 40) * $.pixelDensityRatio\n        );\n        context.fillText(\n            "Order: " + i + " of " + count,\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 50) * $.pixelDensityRatio\n        );\n        context.fillText(\n            "Size: " + tile.size.toString(),\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 60) * $.pixelDensityRatio\n        );\n        context.fillText(\n            "Position: " + tile.position.toString(),\n            (tile.position.x + 10) * $.pixelDensityRatio,\n            (tile.position.y + 70) * $.pixelDensityRatio\n        );\n\n        if ( this.viewport.degrees !== 0 ) {\n            this._restoreRotationChanges();\n        }\n        context.restore();\n    },\n\n    // private\n    debugRect: function(rect) {\n        if ( this.useCanvas ) {\n            var context = this.context;\n            context.save();\n            context.lineWidth = 2 * $.pixelDensityRatio;\n            context.strokeStyle = this.debugGridColor;\n            context.fillStyle = this.debugGridColor;\n\n            context.strokeRect(\n                rect.x * $.pixelDensityRatio,\n                rect.y * $.pixelDensityRatio,\n                rect.width * $.pixelDensityRatio,\n                rect.height * $.pixelDensityRatio\n            );\n\n            context.restore();\n        }\n    },\n\n    /**\n     * Get the canvas size\n     * @param {Boolean} sketch If set to true return the size of the sketch canvas\n     * @returns {OpenSeadragon.Point} The size of the canvas\n     */\n    getCanvasSize: function(sketch) {\n        var canvas = this._getContext(sketch).canvas;\n        return new $.Point(canvas.width, canvas.height);\n    },\n\n    // private\n    _offsetForRotation: function(degrees, useSketch) {\n        var cx = this.canvas.width / 2;\n        var cy = this.canvas.height / 2;\n\n        var context = this._getContext(useSketch);\n        context.save();\n\n        context.translate(cx, cy);\n        context.rotate(Math.PI / 180 * degrees);\n        context.translate(-cx, -cy);\n    },\n\n    // private\n    _restoreRotationChanges: function(useSketch) {\n        var context = this._getContext(useSketch);\n        context.restore();\n    },\n\n    // private\n    _calculateCanvasSize: function() {\n        var pixelDensityRatio = $.pixelDensityRatio;\n        var viewportSize = this.viewport.getContainerSize();\n        return {\n            x: viewportSize.x * pixelDensityRatio,\n            y: viewportSize.y * pixelDensityRatio\n        };\n    },\n\n    // private\n    _calculateSketchCanvasSize: function() {\n        var canvasSize = this._calculateCanvasSize();\n        if (this.viewport.getRotation() === 0) {\n            return canvasSize;\n        }\n        // If the viewport is rotated, we need a larger sketch canvas in order\n        // to support edge smoothing.\n        var sketchCanvasSize = Math.ceil(Math.sqrt(\n            canvasSize.x * canvasSize.x +\n            canvasSize.y * canvasSize.y));\n        return {\n            x: sketchCanvasSize,\n            y: sketchCanvasSize\n        };\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - Viewport\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n\n/**\n * @class Viewport\n * @memberof OpenSeadragon\n * @classdesc Handles coordinate-related functionality (zoom, pan, rotation, etc.)\n * for an {@link OpenSeadragon.Viewer}.\n * @param {Object} options - Options for this Viewport.\n * @param {Object} [options.margins] - See viewportMargins in {@link OpenSeadragon.Options}.\n * @param {Number} [options.springStiffness] - See springStiffness in {@link OpenSeadragon.Options}.\n * @param {Number} [options.animationTime] - See animationTime in {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomImageRatio] - See minZoomImageRatio in {@link OpenSeadragon.Options}.\n * @param {Number} [options.maxZoomPixelRatio] - See maxZoomPixelRatio in {@link OpenSeadragon.Options}.\n * @param {Number} [options.visibilityRatio] - See visibilityRatio in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapHorizontal] - See wrapHorizontal in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapVertical] - See wrapVertical in {@link OpenSeadragon.Options}.\n * @param {Number} [options.defaultZoomLevel] - See defaultZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomLevel] - See minZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.maxZoomLevel] - See maxZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.degrees] - See degrees in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.homeFillsViewer] - See homeFillsViewer in {@link OpenSeadragon.Options}.\n */\n$.Viewport = function( options ) {\n\n    //backward compatibility for positional args while prefering more\n    //idiomatic javascript options object as the only argument\n    var args = arguments;\n    if(  args.length && args[ 0 ] instanceof $.Point ){\n        options = {\n            containerSize:  args[ 0 ],\n            contentSize:    args[ 1 ],\n            config:         args[ 2 ]\n        };\n    }\n\n    //options.config and the general config argument are deprecated\n    //in favor of the more direct specification of optional settings\n    //being passed directly on the options object\n    if ( options.config ){\n        $.extend( true, options, options.config );\n        delete options.config;\n    }\n\n    this._margins = $.extend({\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n    }, options.margins || {});\n\n    delete options.margins;\n\n    $.extend( true, this, {\n\n        //required settings\n        containerSize:      null,\n        contentSize:        null,\n\n        //internal state properties\n        zoomPoint:          null,\n        viewer:           null,\n\n        //configurable options\n        springStiffness:    $.DEFAULT_SETTINGS.springStiffness,\n        animationTime:      $.DEFAULT_SETTINGS.animationTime,\n        minZoomImageRatio:  $.DEFAULT_SETTINGS.minZoomImageRatio,\n        maxZoomPixelRatio:  $.DEFAULT_SETTINGS.maxZoomPixelRatio,\n        visibilityRatio:    $.DEFAULT_SETTINGS.visibilityRatio,\n        wrapHorizontal:     $.DEFAULT_SETTINGS.wrapHorizontal,\n        wrapVertical:       $.DEFAULT_SETTINGS.wrapVertical,\n        defaultZoomLevel:   $.DEFAULT_SETTINGS.defaultZoomLevel,\n        minZoomLevel:       $.DEFAULT_SETTINGS.minZoomLevel,\n        maxZoomLevel:       $.DEFAULT_SETTINGS.maxZoomLevel,\n        degrees:            $.DEFAULT_SETTINGS.degrees,\n        homeFillsViewer:    $.DEFAULT_SETTINGS.homeFillsViewer\n\n    }, options );\n\n    this._updateContainerInnerSize();\n\n    this.centerSpringX = new $.Spring({\n        initial: 0,\n        springStiffness: this.springStiffness,\n        animationTime:   this.animationTime\n    });\n    this.centerSpringY = new $.Spring({\n        initial: 0,\n        springStiffness: this.springStiffness,\n        animationTime:   this.animationTime\n    });\n    this.zoomSpring    = new $.Spring({\n        exponential: true,\n        initial: 1,\n        springStiffness: this.springStiffness,\n        animationTime:   this.animationTime\n    });\n\n    this._oldCenterX = this.centerSpringX.current.value;\n    this._oldCenterY = this.centerSpringY.current.value;\n    this._oldZoom    = this.zoomSpring.current.value;\n\n    this._setContentBounds(new $.Rect(0, 0, 1, 1), 1);\n\n    this.goHome(true);\n    this.update();\n};\n\n/** @lends OpenSeadragon.Viewport.prototype */\n$.Viewport.prototype = {\n    /**\n     * Updates the viewport\'s home bounds and constraints for the given content size.\n     * @function\n     * @param {OpenSeadragon.Point} contentSize - size of the content in content units\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:reset-size\n     */\n    resetContentSize: function(contentSize) {\n        $.console.assert(contentSize, "[Viewport.resetContentSize] contentSize is required");\n        $.console.assert(contentSize instanceof $.Point, "[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point");\n        $.console.assert(contentSize.x > 0, "[Viewport.resetContentSize] contentSize.x must be greater than 0");\n        $.console.assert(contentSize.y > 0, "[Viewport.resetContentSize] contentSize.y must be greater than 0");\n\n        this._setContentBounds(new $.Rect(0, 0, 1, contentSize.y / contentSize.x), contentSize.x);\n        return this;\n    },\n\n    // deprecated\n    setHomeBounds: function(bounds, contentFactor) {\n        $.console.error("[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.");\n        this._setContentBounds(bounds, contentFactor);\n    },\n\n    // Set the viewport\'s content bounds\n    // @param {OpenSeadragon.Rect} bounds - the new bounds in viewport coordinates\n    // without rotation\n    // @param {Number} contentFactor - how many content units per viewport unit\n    // @fires OpenSeadragon.Viewer.event:reset-size\n    // @private\n    _setContentBounds: function(bounds, contentFactor) {\n        $.console.assert(bounds, "[Viewport._setContentBounds] bounds is required");\n        $.console.assert(bounds instanceof $.Rect, "[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect");\n        $.console.assert(bounds.width > 0, "[Viewport._setContentBounds] bounds.width must be greater than 0");\n        $.console.assert(bounds.height > 0, "[Viewport._setContentBounds] bounds.height must be greater than 0");\n\n        this._contentBoundsNoRotate = bounds.clone();\n        this._contentSizeNoRotate = this._contentBoundsNoRotate.getSize().times(\n            contentFactor);\n\n        this._contentBounds = bounds.rotate(this.degrees).getBoundingBox();\n        this._contentSize = this._contentBounds.getSize().times(contentFactor);\n        this._contentAspectRatio = this._contentSize.x / this._contentSize.y;\n\n        if (this.viewer) {\n            /**\n             * Raised when the viewer\'s content size or home bounds are reset\n             * (see {@link OpenSeadragon.Viewport#resetContentSize}).\n             *\n             * @event reset-size\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} contentSize\n             * @property {OpenSeadragon.Rect} contentBounds - Content bounds.\n             * @property {OpenSeadragon.Rect} homeBounds - Content bounds.\n             * Deprecated use contentBounds instead.\n             * @property {Number} contentFactor\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent(\'reset-size\', {\n                contentSize: this._contentSizeNoRotate.clone(),\n                contentFactor: contentFactor,\n                homeBounds: this._contentBoundsNoRotate.clone(),\n                contentBounds: this._contentBounds.clone()\n            });\n        }\n    },\n\n    /**\n     * Returns the home zoom in "viewport zoom" value.\n     * @function\n     * @returns {Number} The home zoom in "viewport zoom".\n     */\n    getHomeZoom: function() {\n        if (this.defaultZoomLevel) {\n            return this.defaultZoomLevel;\n        }\n\n        var aspectFactor = this._contentAspectRatio / this.getAspectRatio();\n        var output;\n        if (this.homeFillsViewer) { // fill the viewer and clip the image\n            output = aspectFactor >= 1 ? aspectFactor : 1;\n        } else {\n            output = aspectFactor >= 1 ? 1 : aspectFactor;\n        }\n\n        return output / this._contentBounds.width;\n    },\n\n    /**\n     * Returns the home bounds in viewport coordinates.\n     * @function\n     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.\n     */\n    getHomeBounds: function() {\n        return this.getHomeBoundsNoRotate().rotate(-this.getRotation());\n    },\n\n    /**\n     * Returns the home bounds in viewport coordinates.\n     * This method ignores the viewport rotation. Use\n     * {@link OpenSeadragon.Viewport#getHomeBounds} to take it into account.\n     * @function\n     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.\n     */\n    getHomeBoundsNoRotate: function() {\n        var center = this._contentBounds.getCenter();\n        var width  = 1.0 / this.getHomeZoom();\n        var height = width / this.getAspectRatio();\n\n        return new $.Rect(\n            center.x - (width / 2.0),\n            center.y - (height / 2.0),\n            width,\n            height\n        );\n    },\n\n    /**\n     * @function\n     * @param {Boolean} immediately\n     * @fires OpenSeadragon.Viewer.event:home\n     */\n    goHome: function(immediately) {\n        if (this.viewer) {\n            /**\n             * Raised when the "home" operation occurs (see {@link OpenSeadragon.Viewport#goHome}).\n             *\n             * @event home\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent(\'home\', {\n                immediately: immediately\n            });\n        }\n        return this.fitBounds(this.getHomeBounds(), immediately);\n    },\n\n    /**\n     * @function\n     */\n    getMinZoom: function() {\n        var homeZoom = this.getHomeZoom(),\n            zoom = this.minZoomLevel ?\n            this.minZoomLevel :\n                this.minZoomImageRatio * homeZoom;\n\n        return zoom;\n    },\n\n    /**\n     * @function\n     */\n    getMaxZoom: function() {\n        var zoom = this.maxZoomLevel;\n        if (!zoom) {\n            zoom = this._contentSize.x * this.maxZoomPixelRatio / this._containerInnerSize.x;\n            zoom /= this._contentBounds.width;\n        }\n\n        return Math.max( zoom, this.getHomeZoom() );\n    },\n\n    /**\n     * @function\n     */\n    getAspectRatio: function() {\n        return this._containerInnerSize.x / this._containerInnerSize.y;\n    },\n\n    /**\n     * @function\n     * @returns {OpenSeadragon.Point} The size of the container, in screen coordinates.\n     */\n    getContainerSize: function() {\n        return new $.Point(\n            this.containerSize.x,\n            this.containerSize.y\n        );\n    },\n\n    /**\n     * The margins push the "home" region in from the sides by the specified amounts.\n     * @function\n     * @returns {Object} Properties (Numbers, in screen coordinates): left, top, right, bottom.\n     */\n    getMargins: function() {\n        return $.extend({}, this._margins); // Make a copy so we are not returning our original\n    },\n\n    /**\n     * The margins push the "home" region in from the sides by the specified amounts.\n     * @function\n     * @param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.\n     */\n    setMargins: function(margins) {\n        $.console.assert($.type(margins) === \'object\', \'[Viewport.setMargins] margins must be an object\');\n\n        this._margins = $.extend({\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        }, margins);\n\n        this._updateContainerInnerSize();\n        if (this.viewer) {\n            this.viewer.forceRedraw();\n        }\n    },\n\n    /**\n     * Returns the bounds of the visible area in viewport coordinates.\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.\n     */\n    getBounds: function(current) {\n        return this.getBoundsNoRotate(current).rotate(-this.getRotation());\n    },\n\n    /**\n     * Returns the bounds of the visible area in viewport coordinates.\n     * This method ignores the viewport rotation. Use\n     * {@link OpenSeadragon.Viewport#getBounds} to take it into account.\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.\n     */\n    getBoundsNoRotate: function(current) {\n        var center = this.getCenter(current);\n        var width  = 1.0 / this.getZoom(current);\n        var height = width / this.getAspectRatio();\n\n        return new $.Rect(\n            center.x - (width / 2.0),\n            center.y - (height / 2.0),\n            width,\n            height\n        );\n    },\n\n    /**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,\n     * including the space taken by margins, in viewport coordinates.\n     */\n    getBoundsWithMargins: function(current) {\n        return this.getBoundsNoRotateWithMargins(current).rotate(\n            -this.getRotation(), this.getCenter(current));\n    },\n\n    /**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,\n     * including the space taken by margins, in viewport coordinates.\n     */\n    getBoundsNoRotateWithMargins: function(current) {\n        var bounds = this.getBoundsNoRotate(current);\n        var factor = this._containerInnerSize.x * this.getZoom(current);\n        bounds.x -= this._margins.left / factor;\n        bounds.y -= this._margins.top / factor;\n        bounds.width += (this._margins.left + this._margins.right) / factor;\n        bounds.height += (this._margins.top + this._margins.bottom) / factor;\n        return bounds;\n    },\n\n    /**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     */\n    getCenter: function( current ) {\n        var centerCurrent = new $.Point(\n                this.centerSpringX.current.value,\n                this.centerSpringY.current.value\n            ),\n            centerTarget = new $.Point(\n                this.centerSpringX.target.value,\n                this.centerSpringY.target.value\n            ),\n            oldZoomPixel,\n            zoom,\n            width,\n            height,\n            bounds,\n            newZoomPixel,\n            deltaZoomPixels,\n            deltaZoomPoints;\n\n        if ( current ) {\n            return centerCurrent;\n        } else if ( !this.zoomPoint ) {\n            return centerTarget;\n        }\n\n        oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);\n\n        zoom    = this.getZoom();\n        width   = 1.0 / zoom;\n        height  = width / this.getAspectRatio();\n        bounds  = new $.Rect(\n            centerCurrent.x - width / 2.0,\n            centerCurrent.y - height / 2.0,\n            width,\n            height\n        );\n\n        newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds);\n        deltaZoomPixels = newZoomPixel.minus( oldZoomPixel );\n        deltaZoomPoints = deltaZoomPixels.divide( this._containerInnerSize.x * zoom );\n\n        return centerTarget.plus( deltaZoomPoints );\n    },\n\n    /**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     */\n    getZoom: function( current ) {\n        if ( current ) {\n            return this.zoomSpring.current.value;\n        } else {\n            return this.zoomSpring.target.value;\n        }\n    },\n\n    // private\n    _applyZoomConstraints: function(zoom) {\n        return Math.max(\n            Math.min(zoom, this.getMaxZoom()),\n            this.getMinZoom());\n    },\n\n    /**\n     * @function\n     * @private\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Rect} constrained bounds.\n     */\n    _applyBoundaryConstraints: function(bounds, immediately) {\n        var newBounds = new $.Rect(\n                bounds.x,\n                bounds.y,\n                bounds.width,\n                bounds.height);\n\n        if (this.wrapHorizontal) {\n            //do nothing\n        } else {\n            var horizontalThreshold = this.visibilityRatio * newBounds.width;\n            var boundsRight = newBounds.x + newBounds.width;\n            var contentRight = this._contentBoundsNoRotate.x + this._contentBoundsNoRotate.width;\n            var leftDx = this._contentBoundsNoRotate.x - boundsRight + horizontalThreshold;\n            var rightDx = contentRight - newBounds.x - horizontalThreshold;\n\n            if (horizontalThreshold > this._contentBoundsNoRotate.width) {\n                newBounds.x += (leftDx + rightDx) / 2;\n            } else if (rightDx < 0) {\n                newBounds.x += rightDx;\n            } else if (leftDx > 0) {\n                newBounds.x += leftDx;\n            }\n        }\n\n        if (this.wrapVertical) {\n            //do nothing\n        } else {\n            var verticalThreshold   = this.visibilityRatio * newBounds.height;\n            var boundsBottom = newBounds.y + newBounds.height;\n            var contentBottom = this._contentBoundsNoRotate.y + this._contentBoundsNoRotate.height;\n            var topDy = this._contentBoundsNoRotate.y - boundsBottom + verticalThreshold;\n            var bottomDy = contentBottom - newBounds.y - verticalThreshold;\n\n            if (verticalThreshold > this._contentBoundsNoRotate.height) {\n                newBounds.y += (topDy + bottomDy) / 2;\n            } else if (bottomDy < 0) {\n                newBounds.y += bottomDy;\n            } else if (topDy > 0) {\n                newBounds.y += topDy;\n            }\n        }\n\n        if (this.viewer) {\n            /**\n             * Raised when the viewport constraints are applied (see {@link OpenSeadragon.Viewport#applyConstraints}).\n             *\n             * @event constrain\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent( \'constrain\', {\n                immediately: immediately\n            });\n        }\n\n        return newBounds;\n    },\n\n    /**\n     * Enforces the minZoom, maxZoom and visibilityRatio constraints by\n     * zooming and panning to the closest acceptable zoom and location.\n     * @function\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:constrain\n     */\n    applyConstraints: function(immediately) {\n        var actualZoom = this.getZoom();\n        var constrainedZoom = this._applyZoomConstraints(actualZoom);\n\n        if (actualZoom !== constrainedZoom) {\n            this.zoomTo(constrainedZoom, this.zoomPoint, immediately);\n        }\n\n        var bounds = this.getBoundsNoRotate();\n        var constrainedBounds = this._applyBoundaryConstraints(\n            bounds, immediately);\n\n        if (bounds.x !== constrainedBounds.x ||\n            bounds.y !== constrainedBounds.y ||\n            immediately) {\n            this.fitBounds(\n                constrainedBounds.rotate(-this.getRotation()),\n                immediately);\n        }\n        return this;\n    },\n\n    /**\n     * Equivalent to {@link OpenSeadragon.Viewport#applyConstraints}\n     * @function\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:constrain\n     */\n    ensureVisible: function(immediately) {\n        return this.applyConstraints(immediately);\n    },\n\n    /**\n     * @function\n     * @private\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Object} options (immediately=false, constraints=false)\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    _fitBounds: function(bounds, options) {\n        options = options || {};\n        var immediately = options.immediately || false;\n        var constraints = options.constraints || false;\n\n        var aspect = this.getAspectRatio();\n        var center = bounds.getCenter();\n\n        // Compute width and height of bounding box.\n        var newBounds = new $.Rect(\n            bounds.x,\n            bounds.y,\n            bounds.width,\n            bounds.height,\n            bounds.degrees + this.getRotation())\n            .getBoundingBox();\n\n        if (newBounds.getAspectRatio() >= aspect) {\n            newBounds.height = newBounds.width / aspect;\n        } else {\n            newBounds.width = newBounds.height * aspect;\n        }\n\n        // Compute x and y from width, height and center position\n        newBounds.x = center.x - newBounds.width / 2;\n        newBounds.y = center.y - newBounds.height / 2;\n        var newZoom = 1.0 / newBounds.width;\n\n        if (constraints) {\n            var newBoundsAspectRatio = newBounds.getAspectRatio();\n            var newConstrainedZoom = this._applyZoomConstraints(newZoom);\n\n            if (newZoom !== newConstrainedZoom) {\n                newZoom = newConstrainedZoom;\n                newBounds.width = 1.0 / newZoom;\n                newBounds.x = center.x - newBounds.width / 2;\n                newBounds.height = newBounds.width / newBoundsAspectRatio;\n                newBounds.y = center.y - newBounds.height / 2;\n            }\n\n            newBounds = this._applyBoundaryConstraints(newBounds, immediately);\n            center = newBounds.getCenter();\n        }\n\n        if (immediately) {\n            this.panTo(center, true);\n            return this.zoomTo(newZoom, null, true);\n        }\n\n        this.panTo(this.getCenter(true), true);\n        this.zoomTo(this.getZoom(true), null, true);\n\n        var oldBounds = this.getBounds();\n        var oldZoom   = this.getZoom();\n\n        if (oldZoom === 0 || Math.abs(newZoom / oldZoom - 1) < 0.00000001) {\n            this.zoomTo(newZoom, true);\n            return this.panTo(center, immediately);\n        }\n\n        newBounds = newBounds.rotate(-this.getRotation());\n        var referencePoint = newBounds.getTopLeft().times(newZoom)\n            .minus(oldBounds.getTopLeft().times(oldZoom))\n            .divide(newZoom - oldZoom);\n\n        return this.zoomTo(newZoom, referencePoint, immediately);\n    },\n\n    /**\n     * Makes the viewport zoom and pan so that the specified bounds take\n     * as much space as possible in the viewport.\n     * Note: this method ignores the constraints (minZoom, maxZoom and\n     * visibilityRatio).\n     * Use {@link OpenSeadragon.Viewport#fitBoundsWithConstraints} to enforce\n     * them.\n     * @function\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    fitBounds: function(bounds, immediately) {\n        return this._fitBounds(bounds, {\n            immediately: immediately,\n            constraints: false\n        });\n    },\n\n    /**\n     * Makes the viewport zoom and pan so that the specified bounds take\n     * as much space as possible in the viewport while enforcing the constraints\n     * (minZoom, maxZoom and visibilityRatio).\n     * Note: because this method enforces the constraints, part of the\n     * provided bounds may end up outside of the viewport.\n     * Use {@link OpenSeadragon.Viewport#fitBounds} to ignore them.\n     * @function\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    fitBoundsWithConstraints: function(bounds, immediately) {\n        return this._fitBounds(bounds, {\n            immediately: immediately,\n            constraints: true\n        });\n    },\n\n    /**\n     * Zooms so the image just fills the viewer vertically.\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    fitVertically: function(immediately) {\n        var box = new $.Rect(\n            this._contentBounds.x + (this._contentBounds.width / 2),\n            this._contentBounds.y,\n            0,\n            this._contentBounds.height);\n        return this.fitBounds(box, immediately);\n    },\n\n    /**\n     * Zooms so the image just fills the viewer horizontally.\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    fitHorizontally: function(immediately) {\n        var box = new $.Rect(\n            this._contentBounds.x,\n            this._contentBounds.y + (this._contentBounds.height / 2),\n            this._contentBounds.width,\n            0);\n        return this.fitBounds(box, immediately);\n    },\n\n\n    /**\n     * @function\n     * @param {OpenSeadragon.Point} delta\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pan\n     */\n    panBy: function( delta, immediately ) {\n        var center = new $.Point(\n            this.centerSpringX.target.value,\n            this.centerSpringY.target.value\n        );\n        return this.panTo( center.plus( delta ), immediately );\n    },\n\n    /**\n     * @function\n     * @param {OpenSeadragon.Point} center\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pan\n     */\n    panTo: function( center, immediately ) {\n        if ( immediately ) {\n            this.centerSpringX.resetTo( center.x );\n            this.centerSpringY.resetTo( center.y );\n        } else {\n            this.centerSpringX.springTo( center.x );\n            this.centerSpringY.springTo( center.y );\n        }\n\n        if( this.viewer ){\n            /**\n             * Raised when the viewport is panned (see {@link OpenSeadragon.Viewport#panBy} and {@link OpenSeadragon.Viewport#panTo}).\n             *\n             * @event pan\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} center\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent( \'pan\', {\n                center: center,\n                immediately: immediately\n            });\n        }\n\n        return this;\n    },\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:zoom\n     */\n    zoomBy: function(factor, refPoint, immediately) {\n        return this.zoomTo(\n            this.zoomSpring.target.value * factor, refPoint, immediately);\n    },\n\n    /**\n     * Zooms to the specified zoom level\n     * @function\n     * @param {Number} zoom The zoom level to zoom to.\n     * @param {OpenSeadragon.Point} [refPoint] The point which will stay at\n     * the same screen location. Defaults to the viewport center.\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:zoom\n     */\n    zoomTo: function( zoom, refPoint, immediately ) {\n\n        this.zoomPoint = refPoint instanceof $.Point &&\n            !isNaN(refPoint.x) &&\n            !isNaN(refPoint.y) ?\n            refPoint :\n            null;\n\n        if ( immediately ) {\n            this.zoomSpring.resetTo( zoom );\n        } else {\n            this.zoomSpring.springTo( zoom );\n        }\n\n        if( this.viewer ){\n            /**\n             * Raised when the viewport zoom level changes (see {@link OpenSeadragon.Viewport#zoomBy} and {@link OpenSeadragon.Viewport#zoomTo}).\n             *\n             * @event zoom\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Number} zoom\n             * @property {OpenSeadragon.Point} refPoint\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent( \'zoom\', {\n                zoom: zoom,\n                refPoint: refPoint,\n                immediately: immediately\n            });\n        }\n\n        return this;\n    },\n\n    /**\n     * Rotates this viewport to the angle specified.\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */\n    setRotation: function(degrees) {\n        if (!this.viewer || !this.viewer.drawer.canRotate()) {\n            return this;\n        }\n\n        degrees = degrees % 360;\n        if (degrees < 0) {\n            degrees += 360;\n        }\n        this.degrees = degrees;\n        this._setContentBounds(\n            this.viewer.world.getHomeBounds(),\n            this.viewer.world.getContentFactor());\n        this.viewer.forceRedraw();\n\n        /**\n         * Raised when rotation has been changed.\n         *\n         * @event rotate\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Number} degrees - The number of degrees the rotation was set to.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.viewer.raiseEvent(\'rotate\', {"degrees": degrees});\n        return this;\n    },\n\n    /**\n     * Gets the current rotation in degrees.\n     * @function\n     * @return {Number} The current rotation in degrees.\n     */\n    getRotation: function() {\n        return this.degrees;\n    },\n\n    /**\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:resize\n     */\n    resize: function( newContainerSize, maintain ) {\n        var oldBounds = this.getBoundsNoRotate(),\n            newBounds = oldBounds,\n            widthDeltaFactor;\n\n        this.containerSize.x = newContainerSize.x;\n        this.containerSize.y = newContainerSize.y;\n\n        this._updateContainerInnerSize();\n\n        if ( maintain ) {\n            // TODO: widthDeltaFactor will always be 1; probably not what\'s intended\n            widthDeltaFactor = newContainerSize.x / this.containerSize.x;\n            newBounds.width  = oldBounds.width * widthDeltaFactor;\n            newBounds.height = newBounds.width / this.getAspectRatio();\n        }\n\n        if( this.viewer ){\n            /**\n             * Raised when the viewer is resized (see {@link OpenSeadragon.Viewport#resize}).\n             *\n             * @event resize\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} newContainerSize\n             * @property {Boolean} maintain\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.viewer.raiseEvent( \'resize\', {\n                newContainerSize: newContainerSize,\n                maintain: maintain\n            });\n        }\n\n        return this.fitBounds( newBounds, true );\n    },\n\n    // private\n    _updateContainerInnerSize: function() {\n        this._containerInnerSize = new $.Point(\n            Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),\n            Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))\n        );\n    },\n\n    /**\n     * Update the zoom and center (X and Y) springs.\n     * @function\n     * @returns {Boolean} True if any change has been made, false otherwise.\n     */\n    update: function() {\n\n        if (this.zoomPoint) {\n            var oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);\n            this.zoomSpring.update();\n            var newZoomPixel = this.pixelFromPoint(this.zoomPoint, true);\n\n            var deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);\n            var deltaZoomPoints = this.deltaPointsFromPixels(\n                deltaZoomPixels, true);\n\n            this.centerSpringX.shiftBy(deltaZoomPoints.x);\n            this.centerSpringY.shiftBy(deltaZoomPoints.y);\n\n            if (this.zoomSpring.isAtTargetValue()) {\n                this.zoomPoint = null;\n            }\n        } else {\n            this.zoomSpring.update();\n        }\n\n        this.centerSpringX.update();\n        this.centerSpringY.update();\n\n        var changed = this.centerSpringX.current.value !== this._oldCenterX ||\n            this.centerSpringY.current.value !== this._oldCenterY ||\n            this.zoomSpring.current.value !== this._oldZoom;\n\n        this._oldCenterX = this.centerSpringX.current.value;\n        this._oldCenterY = this.centerSpringY.current.value;\n        this._oldZoom    = this.zoomSpring.current.value;\n\n        return changed;\n    },\n\n    /**\n     * Convert a delta (translation vector) from viewport coordinates to pixels\n     * coordinates. This method does not take rotation into account.\n     * Consider using deltaPixelsFromPoints if you need to account for rotation.\n     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    deltaPixelsFromPointsNoRotate: function(deltaPoints, current) {\n        return deltaPoints.times(\n            this._containerInnerSize.x * this.getZoom(current)\n        );\n    },\n\n    /**\n     * Convert a delta (translation vector) from viewport coordinates to pixels\n     * coordinates.\n     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    deltaPixelsFromPoints: function(deltaPoints, current) {\n        return this.deltaPixelsFromPointsNoRotate(\n            deltaPoints.rotate(this.getRotation()),\n            current);\n    },\n\n    /**\n     * Convert a delta (translation vector) from pixels coordinates to viewport\n     * coordinates. This method does not take rotation into account.\n     * Consider using deltaPointsFromPixels if you need to account for rotation.\n     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    deltaPointsFromPixelsNoRotate: function(deltaPixels, current) {\n        return deltaPixels.divide(\n            this._containerInnerSize.x * this.getZoom(current)\n        );\n    },\n\n    /**\n     * Convert a delta (translation vector) from pixels coordinates to viewport\n     * coordinates.\n     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    deltaPointsFromPixels: function(deltaPixels, current) {\n        return this.deltaPointsFromPixelsNoRotate(deltaPixels, current)\n            .rotate(-this.getRotation());\n    },\n\n    /**\n     * Convert viewport coordinates to pixels coordinates.\n     * This method does not take rotation into account.\n     * Consider using pixelFromPoint if you need to account for rotation.\n     * @param {OpenSeadragon.Point} point the viewport coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    pixelFromPointNoRotate: function(point, current) {\n        return this._pixelFromPointNoRotate(\n            point, this.getBoundsNoRotate(current));\n    },\n\n    /**\n     * Convert viewport coordinates to pixel coordinates.\n     * @param {OpenSeadragon.Point} point the viewport coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    pixelFromPoint: function(point, current) {\n        return this._pixelFromPoint(point, this.getBoundsNoRotate(current));\n    },\n\n    // private\n    _pixelFromPointNoRotate: function(point, bounds) {\n        return point.minus(\n            bounds.getTopLeft()\n        ).times(\n            this._containerInnerSize.x / bounds.width\n        ).plus(\n            new $.Point(this._margins.left, this._margins.top)\n        );\n    },\n\n    // private\n    _pixelFromPoint: function(point, bounds) {\n        return this._pixelFromPointNoRotate(\n            point.rotate(this.getRotation(), this.getCenter(true)),\n            bounds);\n    },\n\n    /**\n     * Convert pixel coordinates to viewport coordinates.\n     * This method does not take rotation into account.\n     * Consider using pointFromPixel if you need to account for rotation.\n     * @param {OpenSeadragon.Point} pixel Pixel coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    pointFromPixelNoRotate: function(pixel, current) {\n        var bounds = this.getBoundsNoRotate(current);\n        return pixel.minus(\n            new $.Point(this._margins.left, this._margins.top)\n        ).divide(\n            this._containerInnerSize.x / bounds.width\n        ).plus(\n            bounds.getTopLeft()\n        );\n    },\n\n    /**\n     * Convert pixel coordinates to viewport coordinates.\n     * @param {OpenSeadragon.Point} pixel Pixel coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */\n    pointFromPixel: function(pixel, current) {\n        return this.pointFromPixelNoRotate(pixel, current).rotate(\n            -this.getRotation(),\n            this.getCenter(true)\n        );\n    },\n\n    // private\n    _viewportToImageDelta: function( viewerX, viewerY ) {\n        var scale = this._contentBoundsNoRotate.width;\n        return new $.Point(\n            viewerX * this._contentSizeNoRotate.x / scale,\n            viewerY * this._contentSizeNoRotate.x / scale);\n    },\n\n    /**\n     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.\n     * This method can be called either by passing X,Y coordinates or an\n     * OpenSeadragon.Point\n     * Note: not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.\n     * @function\n     * @param {(OpenSeadragon.Point|Number)} viewerX either a point or the X\n     * coordinate in viewport coordinate system.\n     * @param {Number} [viewerY] Y coordinate in viewport coordinate system.\n     * @return {OpenSeadragon.Point} a point representing the coordinates in the image.\n     */\n    viewportToImageCoordinates: function(viewerX, viewerY) {\n        if (viewerX instanceof $.Point) {\n            //they passed a point instead of individual components\n            return this.viewportToImageCoordinates(viewerX.x, viewerX.y);\n        }\n\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.viewportToImageCoordinates] is not accurate \' +\n                    \'with multi-image; use TiledImage.viewportToImageCoordinates instead.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.viewportToImageCoordinates\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.viewportToImageCoordinates(viewerX, viewerY, true);\n            }\n        }\n\n        return this._viewportToImageDelta(\n            viewerX - this._contentBoundsNoRotate.x,\n            viewerY - this._contentBoundsNoRotate.y);\n    },\n\n    // private\n    _imageToViewportDelta: function( imageX, imageY ) {\n        var scale = this._contentBoundsNoRotate.width;\n        return new $.Point(\n            imageX / this._contentSizeNoRotate.x * scale,\n            imageY / this._contentSizeNoRotate.x * scale);\n    },\n\n    /**\n     * Translates from image coordinate system to OpenSeadragon viewer coordinate system\n     * This method can be called either by passing X,Y coordinates or an\n     * OpenSeadragon.Point\n     * Note: not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.\n     * @function\n     * @param {(OpenSeadragon.Point | Number)} imageX the point or the\n     * X coordinate in image coordinate system.\n     * @param {Number} [imageY] Y coordinate in image coordinate system.\n     * @return {OpenSeadragon.Point} a point representing the coordinates in the viewport.\n     */\n    imageToViewportCoordinates: function(imageX, imageY) {\n        if (imageX instanceof $.Point) {\n            //they passed a point instead of individual components\n            return this.imageToViewportCoordinates(imageX.x, imageX.y);\n        }\n\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.imageToViewportCoordinates] is not accurate \' +\n                    \'with multi-image; use TiledImage.imageToViewportCoordinates instead.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.viewportToImageCoordinates\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.imageToViewportCoordinates(imageX, imageY, true);\n            }\n        }\n\n        var point = this._imageToViewportDelta(imageX, imageY);\n        point.x += this._contentBoundsNoRotate.x;\n        point.y += this._contentBoundsNoRotate.y;\n        return point;\n    },\n\n    /**\n     * Translates from a rectangle which describes a portion of the image in\n     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an\n     * OpenSeadragon.Rect\n     * Note: not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.\n     * @function\n     * @param {(OpenSeadragon.Rect | Number)} imageX the rectangle or the X\n     * coordinate of the top left corner of the rectangle in image coordinate system.\n     * @param {Number} [imageY] the Y coordinate of the top left corner of the rectangle\n     * in image coordinate system.\n     * @param {Number} [pixelWidth] the width in pixel of the rectangle.\n     * @param {Number} [pixelHeight] the height in pixel of the rectangle.\n     */\n    imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight) {\n        var rect = imageX;\n        if (!(rect instanceof $.Rect)) {\n            //they passed individual components instead of a rectangle\n            rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight);\n        }\n\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.imageToViewportRectangle] is not accurate \' +\n                    \'with multi-image; use TiledImage.imageToViewportRectangle instead.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.imageToViewportRectangle\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.imageToViewportRectangle(\n                    imageX, imageY, pixelWidth, pixelHeight, true);\n            }\n        }\n\n        var coordA = this.imageToViewportCoordinates(rect.x, rect.y);\n        var coordB = this._imageToViewportDelta(rect.width, rect.height);\n        return new $.Rect(\n            coordA.x,\n            coordA.y,\n            coordB.x,\n            coordB.y,\n            rect.degrees\n        );\n    },\n\n    /**\n     * Translates from a rectangle which describes a portion of\n     * the viewport in point coordinates to image rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an\n     * OpenSeadragon.Rect\n     * Note: not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.\n     * @function\n     * @param {(OpenSeadragon.Rect | Number)} viewerX either a rectangle or\n     * the X coordinate of the top left corner of the rectangle in viewport\n     * coordinate system.\n     * @param {Number} [viewerY] the Y coordinate of the top left corner of the rectangle\n     * in viewport coordinate system.\n     * @param {Number} [pointWidth] the width of the rectangle in viewport coordinate system.\n     * @param {Number} [pointHeight] the height of the rectangle in viewport coordinate system.\n     */\n    viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight) {\n        var rect = viewerX;\n        if (!(rect instanceof $.Rect)) {\n            //they passed individual components instead of a rectangle\n            rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight);\n        }\n\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.viewportToImageRectangle] is not accurate \' +\n                    \'with multi-image; use TiledImage.viewportToImageRectangle instead.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.viewportToImageCoordinates\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.viewportToImageRectangle(\n                    viewerX, viewerY, pointWidth, pointHeight, true);\n            }\n        }\n\n        var coordA = this.viewportToImageCoordinates(rect.x, rect.y);\n        var coordB = this._viewportToImageDelta(rect.width, rect.height);\n        return new $.Rect(\n            coordA.x,\n            coordA.y,\n            coordB.x,\n            coordB.y,\n            rect.degrees\n        );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the viewer element to image\n     * coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    viewerElementToImageCoordinates: function( pixel ) {\n        var point = this.pointFromPixel( pixel, true );\n        return this.viewportToImageCoordinates( point );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the image to\n     * viewer element coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    imageToViewerElementCoordinates: function( pixel ) {\n        var point = this.imageToViewportCoordinates( pixel );\n        return this.pixelFromPoint( point, true );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the window to image coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    windowToImageCoordinates: function(pixel) {\n        $.console.assert(this.viewer,\n            "[Viewport.windowToImageCoordinates] the viewport must have a viewer.");\n        var viewerCoordinates = pixel.minus(\n                $.getElementPosition(this.viewer.element));\n        return this.viewerElementToImageCoordinates(viewerCoordinates);\n    },\n\n    /**\n     * Convert image coordinates to pixel coordinates relative to the window.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    imageToWindowCoordinates: function(pixel) {\n        $.console.assert(this.viewer,\n            "[Viewport.imageToWindowCoordinates] the viewport must have a viewer.");\n        var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);\n        return viewerCoordinates.plus(\n                $.getElementPosition(this.viewer.element));\n    },\n\n    /**\n     * Convert pixel coordinates relative to the viewer element to viewport\n     * coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    viewerElementToViewportCoordinates: function( pixel ) {\n        return this.pointFromPixel( pixel, true );\n    },\n\n    /**\n     * Convert viewport coordinates to pixel coordinates relative to the\n     * viewer element.\n     * @param {OpenSeadragon.Point} point\n     * @returns {OpenSeadragon.Point}\n     */\n    viewportToViewerElementCoordinates: function( point ) {\n        return this.pixelFromPoint( point, true );\n    },\n\n    /**\n     * Convert a rectangle in pixel coordinates relative to the viewer element\n     * to viewport coordinates.\n     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert\n     * @returns {OpenSeadragon.Rect} the converted rectangle\n     */\n    viewerElementToViewportRectangle: function(rectangle) {\n        return $.Rect.fromSummits(\n            this.pointFromPixel(rectangle.getTopLeft(), true),\n            this.pointFromPixel(rectangle.getTopRight(), true),\n            this.pointFromPixel(rectangle.getBottomLeft(), true)\n        );\n    },\n\n    /**\n     * Convert a rectangle in viewport coordinates to pixel coordinates relative\n     * to the viewer element.\n     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert\n     * @returns {OpenSeadragon.Rect} the converted rectangle\n     */\n    viewportToViewerElementRectangle: function(rectangle) {\n        return $.Rect.fromSummits(\n            this.pixelFromPoint(rectangle.getTopLeft(), true),\n            this.pixelFromPoint(rectangle.getTopRight(), true),\n            this.pixelFromPoint(rectangle.getBottomLeft(), true)\n        );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the window to viewport coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    windowToViewportCoordinates: function(pixel) {\n        $.console.assert(this.viewer,\n            "[Viewport.windowToViewportCoordinates] the viewport must have a viewer.");\n        var viewerCoordinates = pixel.minus(\n                $.getElementPosition(this.viewer.element));\n        return this.viewerElementToViewportCoordinates(viewerCoordinates);\n    },\n\n    /**\n     * Convert viewport coordinates to pixel coordinates relative to the window.\n     * @param {OpenSeadragon.Point} point\n     * @returns {OpenSeadragon.Point}\n     */\n    viewportToWindowCoordinates: function(point) {\n        $.console.assert(this.viewer,\n            "[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.");\n        var viewerCoordinates = this.viewportToViewerElementCoordinates(point);\n        return viewerCoordinates.plus(\n                $.getElementPosition(this.viewer.element));\n    },\n\n    /**\n     * Convert a viewport zoom to an image zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image\'s width to viewport\'s width.\n     * 1 means identical width, 2 means image\'s width is twice the viewport\'s width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} viewportZoom The viewport zoom\n     * target zoom.\n     * @returns {Number} imageZoom The image zoom\n     */\n    viewportToImageZoom: function(viewportZoom) {\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.viewportToImageZoom] is not \' +\n                    \'accurate with multi-image.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.viewportToImageZoom\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.viewportToImageZoom(viewportZoom);\n            }\n        }\n\n        var imageWidth = this._contentSizeNoRotate.x;\n        var containerWidth = this._containerInnerSize.x;\n        var scale = this._contentBoundsNoRotate.width;\n        var viewportToImageZoomRatio = (containerWidth / imageWidth) * scale;\n        return viewportZoom * viewportToImageZoomRatio;\n    },\n\n    /**\n     * Convert an image zoom to a viewport zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image\'s width to viewport\'s width.\n     * 1 means identical width, 2 means image\'s width is twice the viewport\'s width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} imageZoom The image zoom\n     * target zoom.\n     * @returns {Number} viewportZoom The viewport zoom\n     */\n    imageToViewportZoom: function(imageZoom) {\n        if (this.viewer) {\n            var count = this.viewer.world.getItemCount();\n            if (count > 1) {\n                $.console.error(\'[Viewport.imageToViewportZoom] is not accurate \' +\n                    \'with multi-image.\');\n            } else if (count === 1) {\n                // It is better to use TiledImage.imageToViewportZoom\n                // because this._contentBoundsNoRotate can not be relied on\n                // with clipping.\n                var item = this.viewer.world.getItemAt(0);\n                return item.imageToViewportZoom(imageZoom);\n            }\n        }\n\n        var imageWidth = this._contentSizeNoRotate.x;\n        var containerWidth = this._containerInnerSize.x;\n        var scale = this._contentBoundsNoRotate.width;\n        var viewportToImageZoomRatio = (imageWidth / containerWidth) / scale;\n        return imageZoom * viewportToImageZoomRatio;\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - TiledImage\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * You shouldn\'t have to create a TiledImage directly; use {@link OpenSeadragon.Viewer#open}\n * or {@link OpenSeadragon.Viewer#addTiledImage} instead.\n * @class TiledImage\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.\n * A new instance is created for each TileSource opened.\n * @param {Object} options - Configuration for this TiledImage.\n * @param {OpenSeadragon.TileSource} options.source - The TileSource that defines this TiledImage.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this TiledImage.\n * @param {OpenSeadragon.TileCache} options.tileCache - The TileCache for this TiledImage to use.\n * @param {OpenSeadragon.Drawer} options.drawer - The Drawer for this TiledImage to draw onto.\n * @param {OpenSeadragon.ImageLoader} options.imageLoader - The ImageLoader for this TiledImage to use.\n * @param {Number} [options.x=0] - Left position, in viewport coordinates.\n * @param {Number} [options.y=0] - Top position, in viewport coordinates.\n * @param {Number} [options.width=1] - Width, in viewport coordinates.\n * @param {Number} [options.height] - Height, in viewport coordinates.\n * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates\n * to fit the image into. If specified, x, y, width and height get ignored.\n * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]\n * How to anchor the image in the bounds if options.fitBounds is set.\n * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to\n * (portions of the image outside of this area will not be visible). Only works on\n * browsers that support the HTML5 canvas.\n * @param {Number} [options.springStiffness] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.animationTime] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomImageRatio] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapHorizontal] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapVertical] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.immediateRender] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.blendTime] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.alwaysBlend] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.minPixelRatio] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.smoothTileEdgesMinZoom] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.iOSDevice] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.opacity=1] - Opacity the tiled image should be drawn at.\n * @param {String} [options.compositeOperation] - How the image is composited onto other images; see compositeOperation in {@link OpenSeadragon.Options} for possible values.\n * @param {Boolean} [options.debugMode] - See {@link OpenSeadragon.Options}.\n * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.\n * @param {String|Boolean} [options.crossOriginPolicy] - See {@link OpenSeadragon.Options}.\n */\n$.TiledImage = function( options ) {\n    var _this = this;\n\n    $.console.assert( options.tileCache, "[TiledImage] options.tileCache is required" );\n    $.console.assert( options.drawer, "[TiledImage] options.drawer is required" );\n    $.console.assert( options.viewer, "[TiledImage] options.viewer is required" );\n    $.console.assert( options.imageLoader, "[TiledImage] options.imageLoader is required" );\n    $.console.assert( options.source, "[TiledImage] options.source is required" );\n    $.console.assert(!options.clip || options.clip instanceof $.Rect,\n        "[TiledImage] options.clip must be an OpenSeadragon.Rect if present");\n\n    $.EventSource.call( this );\n\n    this._tileCache = options.tileCache;\n    delete options.tileCache;\n\n    this._drawer = options.drawer;\n    delete options.drawer;\n\n    this._imageLoader = options.imageLoader;\n    delete options.imageLoader;\n\n    if (options.clip instanceof $.Rect) {\n        this._clip = options.clip.clone();\n    }\n\n    delete options.clip;\n\n    var x = options.x || 0;\n    delete options.x;\n    var y = options.y || 0;\n    delete options.y;\n\n    // Ratio of zoomable image height to width.\n    this.normHeight = options.source.dimensions.y / options.source.dimensions.x;\n    this.contentAspectX = options.source.dimensions.x / options.source.dimensions.y;\n\n    var scale = 1;\n    if ( options.width ) {\n        scale = options.width;\n        delete options.width;\n\n        if ( options.height ) {\n            $.console.error( "specifying both width and height to a tiledImage is not supported" );\n            delete options.height;\n        }\n    } else if ( options.height ) {\n        scale = options.height / this.normHeight;\n        delete options.height;\n    }\n\n    var fitBounds = options.fitBounds;\n    delete options.fitBounds;\n    var fitBoundsPlacement = options.fitBoundsPlacement || OpenSeadragon.Placement.CENTER;\n    delete options.fitBoundsPlacement;\n\n    $.extend( true, this, {\n\n        //internal state properties\n        viewer:         null,\n        tilesMatrix:    {},    // A \'3d\' dictionary [level][x][y] --\x3e Tile.\n        coverage:       {},    // A \'3d\' dictionary [level][x][y] --\x3e Boolean.\n        lastDrawn:      [],    // An unordered list of Tiles drawn last frame.\n        lastResetTime:  0,     // Last time for which the tiledImage was reset.\n        _midDraw:       false, // Is the tiledImage currently updating the viewport?\n        _needsDraw:     true,  // Does the tiledImage need to update the viewport again?\n        _hasOpaqueTile: false,  // Do we have even one fully opaque tile?\n        //configurable settings\n        springStiffness:        $.DEFAULT_SETTINGS.springStiffness,\n        animationTime:          $.DEFAULT_SETTINGS.animationTime,\n        minZoomImageRatio:      $.DEFAULT_SETTINGS.minZoomImageRatio,\n        wrapHorizontal:         $.DEFAULT_SETTINGS.wrapHorizontal,\n        wrapVertical:           $.DEFAULT_SETTINGS.wrapVertical,\n        immediateRender:        $.DEFAULT_SETTINGS.immediateRender,\n        blendTime:              $.DEFAULT_SETTINGS.blendTime,\n        alwaysBlend:            $.DEFAULT_SETTINGS.alwaysBlend,\n        minPixelRatio:          $.DEFAULT_SETTINGS.minPixelRatio,\n        smoothTileEdgesMinZoom: $.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,\n        iOSDevice:              $.DEFAULT_SETTINGS.iOSDevice,\n        debugMode:              $.DEFAULT_SETTINGS.debugMode,\n        crossOriginPolicy:      $.DEFAULT_SETTINGS.crossOriginPolicy,\n        placeholderFillStyle:   $.DEFAULT_SETTINGS.placeholderFillStyle,\n        opacity:                $.DEFAULT_SETTINGS.opacity,\n        compositeOperation:     $.DEFAULT_SETTINGS.compositeOperation\n\n    }, options );\n\n    this._xSpring = new $.Spring({\n        initial: x,\n        springStiffness: this.springStiffness,\n        animationTime: this.animationTime\n    });\n\n    this._ySpring = new $.Spring({\n        initial: y,\n        springStiffness: this.springStiffness,\n        animationTime: this.animationTime\n    });\n\n    this._scaleSpring = new $.Spring({\n        initial: scale,\n        springStiffness: this.springStiffness,\n        animationTime: this.animationTime\n    });\n\n    this._updateForScale();\n\n    if (fitBounds) {\n        this.fitBounds(fitBounds, fitBoundsPlacement, true);\n    }\n\n    // We need a callback to give image manipulation a chance to happen\n    this._drawingHandler = function(args) {\n      /**\n       * This event is fired just before the tile is drawn giving the application a chance to alter the image.\n       *\n       * NOTE: This event is only fired when the drawer is using a &lt;canvas&gt;.\n       *\n       * @event tile-drawing\n       * @memberof OpenSeadragon.Viewer\n       * @type {object}\n       * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n       * @property {OpenSeadragon.Tile} tile - The Tile being drawn.\n       * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n       * @property {OpenSeadragon.Tile} context - The HTML canvas context being drawn into.\n       * @property {OpenSeadragon.Tile} rendered - The HTML canvas context containing the tile imagery.\n       * @property {?Object} userData - Arbitrary subscriber-defined object.\n       */\n        _this.viewer.raiseEvent(\'tile-drawing\', $.extend({\n            tiledImage: _this\n        }, args));\n    };\n};\n\n$.extend($.TiledImage.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.TiledImage.prototype */{\n    /**\n     * @returns {Boolean} Whether the TiledImage needs to be drawn.\n     */\n    needsDraw: function() {\n        return this._needsDraw;\n    },\n\n    /**\n     * Clears all tiles and triggers an update on the next call to\n     * {@link OpenSeadragon.TiledImage#update}.\n     */\n    reset: function() {\n        this._tileCache.clearTilesFor(this);\n        this.lastResetTime = $.now();\n        this._needsDraw = true;\n    },\n\n    /**\n     * Updates the TiledImage\'s bounds, animating if needed.\n     * @returns {Boolean} Whether the TiledImage animated.\n     */\n    update: function() {\n        var oldX = this._xSpring.current.value;\n        var oldY = this._ySpring.current.value;\n        var oldScale = this._scaleSpring.current.value;\n\n        this._xSpring.update();\n        this._ySpring.update();\n        this._scaleSpring.update();\n\n        if (this._xSpring.current.value !== oldX || this._ySpring.current.value !== oldY ||\n                this._scaleSpring.current.value !== oldScale) {\n            this._updateForScale();\n            this._needsDraw = true;\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Draws the TiledImage to its Drawer.\n     */\n    draw: function() {\n        if (this.opacity !== 0) {\n            this._midDraw = true;\n            updateViewport(this);\n            this._midDraw = false;\n        }\n    },\n\n    /**\n     * Destroy the TiledImage (unload current loaded tiles).\n     */\n    destroy: function() {\n        this.reset();\n    },\n\n    /**\n     * @returns {OpenSeadragon.Rect} This TiledImage\'s bounds in viewport coordinates.\n     * @param {Boolean} [current=false] - Pass true for the current location; false for target location.\n     */\n    getBounds: function(current) {\n        if (current) {\n            return new $.Rect( this._xSpring.current.value, this._ySpring.current.value,\n                this._worldWidthCurrent, this._worldHeightCurrent );\n        }\n\n        return new $.Rect( this._xSpring.target.value, this._ySpring.target.value,\n            this._worldWidthTarget, this._worldHeightTarget );\n    },\n\n    // deprecated\n    getWorldBounds: function() {\n        $.console.error(\'[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead\');\n        return this.getBounds();\n    },\n\n    /**\n     * Get the bounds of the displayed part of the tiled image.\n     * @param {Boolean} [current=false] Pass true for the current location,\n     * false for the target location.\n     * @returns {$.Rect} The clipped bounds in viewport coordinates.\n     */\n    getClippedBounds: function(current) {\n        var bounds = this.getBounds(current);\n        if (this._clip) {\n            var ratio = this._worldWidthCurrent / this.source.dimensions.x;\n            var clip = this._clip.times(ratio);\n            bounds = new $.Rect(\n                bounds.x + clip.x,\n                bounds.y + clip.y,\n                clip.width,\n                clip.height);\n        }\n        return bounds;\n    },\n\n    /**\n     * @returns {OpenSeadragon.Point} This TiledImage\'s content size, in original pixels.\n     */\n    getContentSize: function() {\n        return new $.Point(this.source.dimensions.x, this.source.dimensions.y);\n    },\n\n    // private\n    _viewportToImageDelta: function( viewerX, viewerY, current ) {\n        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);\n        return new $.Point(viewerX * (this.source.dimensions.x / scale),\n            viewerY * ((this.source.dimensions.y * this.contentAspectX) / scale));\n    },\n\n    /**\n     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.\n     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.\n     * @param {Number|OpenSeadragon.Point} viewerX - The X coordinate or point in viewport coordinate system.\n     * @param {Number} [viewerY] - The Y coordinate in viewport coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Point} A point representing the coordinates in the image.\n     */\n    viewportToImageCoordinates: function( viewerX, viewerY, current ) {\n        if (viewerX instanceof $.Point) {\n            //they passed a point instead of individual components\n            current = viewerY;\n            viewerY = viewerX.y;\n            viewerX = viewerX.x;\n        }\n\n        if (current) {\n            return this._viewportToImageDelta(viewerX - this._xSpring.current.value,\n                viewerY - this._ySpring.current.value);\n        }\n\n        return this._viewportToImageDelta(viewerX - this._xSpring.target.value,\n            viewerY - this._ySpring.target.value);\n    },\n\n    // private\n    _imageToViewportDelta: function( imageX, imageY, current ) {\n        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);\n        return new $.Point((imageX / this.source.dimensions.x) * scale,\n            (imageY / this.source.dimensions.y / this.contentAspectX) * scale);\n    },\n\n    /**\n     * Translates from image coordinate system to OpenSeadragon viewer coordinate system\n     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.\n     * @param {Number|OpenSeadragon.Point} imageX - The X coordinate or point in image coordinate system.\n     * @param {Number} [imageY] - The Y coordinate in image coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Point} A point representing the coordinates in the viewport.\n     */\n    imageToViewportCoordinates: function( imageX, imageY, current ) {\n        if (imageX instanceof $.Point) {\n            //they passed a point instead of individual components\n            current = imageY;\n            imageY = imageX.y;\n            imageX = imageX.x;\n        }\n\n        var point = this._imageToViewportDelta(imageX, imageY);\n        if (current) {\n            point.x += this._xSpring.current.value;\n            point.y += this._ySpring.current.value;\n        } else {\n            point.x += this._xSpring.target.value;\n            point.y += this._ySpring.target.value;\n        }\n\n        return point;\n    },\n\n    /**\n     * Translates from a rectangle which describes a portion of the image in\n     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.\n     * @param {Number|OpenSeadragon.Rect} imageX - The left coordinate or rectangle in image coordinate system.\n     * @param {Number} [imageY] - The top coordinate in image coordinate system.\n     * @param {Number} [pixelWidth] - The width in pixel of the rectangle.\n     * @param {Number} [pixelHeight] - The height in pixel of the rectangle.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the viewport.\n     */\n    imageToViewportRectangle: function( imageX, imageY, pixelWidth, pixelHeight, current ) {\n        var rect = imageX;\n        if (rect instanceof $.Rect) {\n            //they passed a rect instead of individual components\n            current = imageY;\n        } else {\n            rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight);\n        }\n\n        var coordA = this.imageToViewportCoordinates(rect.getTopLeft(), current);\n        var coordB = this._imageToViewportDelta(rect.width, rect.height, current);\n\n        return new $.Rect(\n            coordA.x,\n            coordA.y,\n            coordB.x,\n            coordB.y,\n            rect.degrees\n        );\n    },\n\n    /**\n     * Translates from a rectangle which describes a portion of\n     * the viewport in point coordinates to image rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.\n     * @param {Number|OpenSeadragon.Rect} viewerX - The left coordinate or rectangle in viewport coordinate system.\n     * @param {Number} [viewerY] - The top coordinate in viewport coordinate system.\n     * @param {Number} [pointWidth] - The width in viewport coordinate system.\n     * @param {Number} [pointHeight] - The height in viewport coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the image.\n     */\n    viewportToImageRectangle: function( viewerX, viewerY, pointWidth, pointHeight, current ) {\n        var rect = viewerX;\n        if (viewerX instanceof $.Rect) {\n            //they passed a rect instead of individual components\n            current = viewerY;\n        } else {\n            rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight);\n        }\n\n        var coordA = this.viewportToImageCoordinates(rect.getTopLeft(), current);\n        var coordB = this._viewportToImageDelta(rect.width, rect.height, current);\n\n        return new $.Rect(\n            coordA.x,\n            coordA.y,\n            coordB.x,\n            coordB.y,\n            rect.degrees\n        );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the viewer element to image\n     * coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    viewerElementToImageCoordinates: function( pixel ) {\n        var point = this.viewport.pointFromPixel( pixel, true );\n        return this.viewportToImageCoordinates( point );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the image to\n     * viewer element coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    imageToViewerElementCoordinates: function( pixel ) {\n        var point = this.imageToViewportCoordinates( pixel );\n        return this.viewport.pixelFromPoint( point, true );\n    },\n\n    /**\n     * Convert pixel coordinates relative to the window to image coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    windowToImageCoordinates: function( pixel ) {\n        var viewerCoordinates = pixel.minus(\n                OpenSeadragon.getElementPosition( this.viewer.element ));\n        return this.viewerElementToImageCoordinates( viewerCoordinates );\n    },\n\n    /**\n     * Convert image coordinates to pixel coordinates relative to the window.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */\n    imageToWindowCoordinates: function( pixel ) {\n        var viewerCoordinates = this.imageToViewerElementCoordinates( pixel );\n        return viewerCoordinates.plus(\n                OpenSeadragon.getElementPosition( this.viewer.element ));\n    },\n\n    /**\n     * Convert a viewport zoom to an image zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image\'s width to viewport\'s width.\n     * 1 means identical width, 2 means image\'s width is twice the viewport\'s width...\n     * @function\n     * @param {Number} viewportZoom The viewport zoom\n     * @returns {Number} imageZoom The image zoom\n     */\n    viewportToImageZoom: function( viewportZoom ) {\n        var ratio = this._scaleSpring.current.value *\n                this.viewport._containerInnerSize.x / this.source.dimensions.x;\n        return ratio * viewportZoom ;\n    },\n\n    /**\n     * Convert an image zoom to a viewport zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image\'s width to viewport\'s width.\n     * 1 means identical width, 2 means image\'s width is twice the viewport\'s width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} imageZoom The image zoom\n     * @returns {Number} viewportZoom The viewport zoom\n     */\n    imageToViewportZoom: function( imageZoom ) {\n        var ratio = this._scaleSpring.current.value *\n                this.viewport._containerInnerSize.x / this.source.dimensions.x;\n        return imageZoom / ratio;\n    },\n\n    /**\n     * Sets the TiledImage\'s position in the world.\n     * @param {OpenSeadragon.Point} position - The new position, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new position or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */\n    setPosition: function(position, immediately) {\n        var sameTarget = (this._xSpring.target.value === position.x &&\n            this._ySpring.target.value === position.y);\n\n        if (immediately) {\n            if (sameTarget && this._xSpring.current.value === position.x &&\n                    this._ySpring.current.value === position.y) {\n                return;\n            }\n\n            this._xSpring.resetTo(position.x);\n            this._ySpring.resetTo(position.y);\n            this._needsDraw = true;\n        } else {\n            if (sameTarget) {\n                return;\n            }\n\n            this._xSpring.springTo(position.x);\n            this._ySpring.springTo(position.y);\n            this._needsDraw = true;\n        }\n\n        if (!sameTarget) {\n            this._raiseBoundsChange();\n        }\n    },\n\n    /**\n     * Sets the TiledImage\'s width in the world, adjusting the height to match based on aspect ratio.\n     * @param {Number} width - The new width, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */\n    setWidth: function(width, immediately) {\n        this._setScale(width, immediately);\n    },\n\n    /**\n     * Sets the TiledImage\'s height in the world, adjusting the width to match based on aspect ratio.\n     * @param {Number} height - The new height, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */\n    setHeight: function(height, immediately) {\n        this._setScale(height / this.normHeight, immediately);\n    },\n\n    /**\n     * Positions and scales the TiledImage to fit in the specified bounds.\n     * Note: this method fires OpenSeadragon.TiledImage.event:bounds-change\n     * twice\n     * @param {OpenSeadragon.Rect} bounds The bounds to fit the image into.\n     * @param {OpenSeadragon.Placement} [anchor=OpenSeadragon.Placement.CENTER]\n     * How to anchor the image in the bounds.\n     * @param {Boolean} [immediately=false] Whether to animate to the new size\n     * or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */\n    fitBounds: function(bounds, anchor, immediately) {\n        anchor = anchor || $.Placement.CENTER;\n        var anchorProperties = $.Placement.properties[anchor];\n        var aspectRatio = this.contentAspectX;\n        var xOffset = 0;\n        var yOffset = 0;\n        var displayedWidthRatio = 1;\n        var displayedHeightRatio = 1;\n        if (this._clip) {\n            aspectRatio = this._clip.getAspectRatio();\n            displayedWidthRatio = this._clip.width / this.source.dimensions.x;\n            displayedHeightRatio = this._clip.height / this.source.dimensions.y;\n            if (bounds.getAspectRatio() > aspectRatio) {\n                xOffset = this._clip.x / this._clip.height * bounds.height;\n                yOffset = this._clip.y / this._clip.height * bounds.height;\n            } else {\n                xOffset = this._clip.x / this._clip.width * bounds.width;\n                yOffset = this._clip.y / this._clip.width * bounds.width;\n            }\n        }\n\n        if (bounds.getAspectRatio() > aspectRatio) {\n            // We will have margins on the X axis\n            var height = bounds.height / displayedHeightRatio;\n            var marginLeft = 0;\n            if (anchorProperties.isHorizontallyCentered) {\n                marginLeft = (bounds.width - bounds.height * aspectRatio) / 2;\n            } else if (anchorProperties.isRight) {\n                marginLeft = bounds.width - bounds.height * aspectRatio;\n            }\n            this.setPosition(\n                new $.Point(bounds.x - xOffset + marginLeft, bounds.y - yOffset),\n                immediately);\n            this.setHeight(height, immediately);\n        } else {\n            // We will have margins on the Y axis\n            var width = bounds.width / displayedWidthRatio;\n            var marginTop = 0;\n            if (anchorProperties.isVerticallyCentered) {\n                marginTop = (bounds.height - bounds.width / aspectRatio) / 2;\n            } else if (anchorProperties.isBottom) {\n                marginTop = bounds.height - bounds.width / aspectRatio;\n            }\n            this.setPosition(\n                new $.Point(bounds.x - xOffset, bounds.y - yOffset + marginTop),\n                immediately);\n            this.setWidth(width, immediately);\n        }\n    },\n\n    /**\n     * @returns {OpenSeadragon.Rect|null} The TiledImage\'s current clip rectangle,\n     * in image pixels, or null if none.\n     */\n    getClip: function() {\n        if (this._clip) {\n            return this._clip.clone();\n        }\n\n        return null;\n    },\n\n    /**\n     * @param {OpenSeadragon.Rect|null} newClip - An area, in image pixels, to clip to\n     * (portions of the image outside of this area will not be visible). Only works on\n     * browsers that support the HTML5 canvas.\n     */\n    setClip: function(newClip) {\n        $.console.assert(!newClip || newClip instanceof $.Rect,\n            "[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null");\n\n        if (newClip instanceof $.Rect) {\n            this._clip = newClip.clone();\n        } else {\n            this._clip = null;\n        }\n\n        this._needsDraw = true;\n    },\n\n    /**\n     * @returns {Number} The TiledImage\'s current opacity.\n     */\n    getOpacity: function() {\n        return this.opacity;\n    },\n\n    /**\n     * @param {Number} opacity Opacity the tiled image should be drawn at.\n     */\n    setOpacity: function(opacity) {\n        this.opacity = opacity;\n        this._needsDraw = true;\n    },\n\n    /**\n     * @returns {String} The TiledImage\'s current compositeOperation.\n     */\n    getCompositeOperation: function() {\n        return this.compositeOperation;\n    },\n\n    /**\n     * @param {String} compositeOperation the tiled image should be drawn with this globalCompositeOperation.\n     */\n    setCompositeOperation: function(compositeOperation) {\n        this.compositeOperation = compositeOperation;\n        this._needsDraw = true;\n    },\n\n    // private\n    _setScale: function(scale, immediately) {\n        var sameTarget = (this._scaleSpring.target.value === scale);\n        if (immediately) {\n            if (sameTarget && this._scaleSpring.current.value === scale) {\n                return;\n            }\n\n            this._scaleSpring.resetTo(scale);\n            this._updateForScale();\n            this._needsDraw = true;\n        } else {\n            if (sameTarget) {\n                return;\n            }\n\n            this._scaleSpring.springTo(scale);\n            this._updateForScale();\n            this._needsDraw = true;\n        }\n\n        if (!sameTarget) {\n            this._raiseBoundsChange();\n        }\n    },\n\n    // private\n    _updateForScale: function() {\n        this._worldWidthTarget = this._scaleSpring.target.value;\n        this._worldHeightTarget = this.normHeight * this._scaleSpring.target.value;\n        this._worldWidthCurrent = this._scaleSpring.current.value;\n        this._worldHeightCurrent = this.normHeight * this._scaleSpring.current.value;\n    },\n\n    // private\n    _raiseBoundsChange: function() {\n        /**\n         * Raised when the TiledImage\'s bounds are changed.\n         * Note that this event is triggered only when the animation target is changed;\n         * not for every frame of animation.\n         * @event bounds-change\n         * @memberOf OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {OpenSeadragon.World} eventSource - A reference to the TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent(\'bounds-change\');\n    },\n\n    // private\n    _isBottomItem: function() {\n        return this.viewer.world.getItemAt(0) === this;\n    }\n});\n\n/**\n * @private\n * @inner\n * Pretty much every other line in this needs to be documented so it\'s clear\n * how each piece of this routine contributes to the drawing process.  That\'s\n * why there are so many TODO\'s inside this function.\n */\nfunction updateViewport( tiledImage ) {\n\n    tiledImage._needsDraw = false;\n\n    var tile,\n        level,\n        best            = null,\n        haveDrawn       = false,\n        currentTime     = $.now(),\n        viewportBounds  = tiledImage.viewport.getBoundsWithMargins( true ),\n        zeroRatioC      = tiledImage.viewport.deltaPixelsFromPointsNoRotate(\n            tiledImage.source.getPixelRatio( 0 ),\n            true\n        ).x * tiledImage._scaleSpring.current.value,\n        lowestLevel     = Math.max(\n            tiledImage.source.minLevel,\n            Math.floor(\n                Math.log( tiledImage.minZoomImageRatio ) /\n                Math.log( 2 )\n            )\n        ),\n        highestLevel    = Math.min(\n            Math.abs(tiledImage.source.maxLevel),\n            Math.abs(Math.floor(\n                Math.log( zeroRatioC / tiledImage.minPixelRatio ) /\n                Math.log( 2 )\n            ))\n        ),\n        renderPixelRatioC,\n        renderPixelRatioT,\n        zeroRatioT,\n        optimalRatio,\n        levelOpacity,\n        levelVisibility;\n\n    // Reset tile\'s internal drawn state\n    while (tiledImage.lastDrawn.length > 0) {\n        tile = tiledImage.lastDrawn.pop();\n        tile.beingDrawn = false;\n    }\n\n    if (!tiledImage.wrapHorizontal && !tiledImage.wrapVertical) {\n        var tiledImageBounds = tiledImage.getClippedBounds(true);\n        var intersection = viewportBounds.intersection(tiledImageBounds);\n        if (intersection === null) {\n            return;\n        }\n        viewportBounds = intersection;\n    }\n    viewportBounds = viewportBounds.getBoundingBox();\n    viewportBounds.x -= tiledImage._xSpring.current.value;\n    viewportBounds.y -= tiledImage._ySpring.current.value;\n\n    var viewportTL = viewportBounds.getTopLeft();\n    var viewportBR = viewportBounds.getBottomRight();\n\n    //Don\'t draw if completely outside of the viewport\n    if  ( !tiledImage.wrapHorizontal && (viewportBR.x < 0 || viewportTL.x > tiledImage._worldWidthCurrent ) ) {\n        return;\n    }\n\n    if ( !tiledImage.wrapVertical && ( viewportBR.y < 0 || viewportTL.y > tiledImage._worldHeightCurrent ) ) {\n        return;\n    }\n\n    // Calculate viewport rect / bounds\n    if ( !tiledImage.wrapHorizontal ) {\n        viewportTL.x = Math.max( viewportTL.x, 0 );\n        viewportBR.x = Math.min( viewportBR.x, tiledImage._worldWidthCurrent );\n    }\n\n    if ( !tiledImage.wrapVertical ) {\n        viewportTL.y = Math.max( viewportTL.y, 0 );\n        viewportBR.y = Math.min( viewportBR.y, tiledImage._worldHeightCurrent );\n    }\n\n    // Calculations for the interval of levels to draw\n    // (above in initial var statement)\n    // can return invalid intervals; fix that here if necessary\n    lowestLevel = Math.min( lowestLevel, highestLevel );\n\n    // Update any level that will be drawn\n    var drawLevel; // FIXME: drawLevel should have a more explanatory name\n    for ( level = highestLevel; level >= lowestLevel; level-- ) {\n        drawLevel = false;\n\n        //Avoid calculations for draw if we have already drawn this\n        renderPixelRatioC = tiledImage.viewport.deltaPixelsFromPointsNoRotate(\n            tiledImage.source.getPixelRatio( level ),\n            true\n        ).x * tiledImage._scaleSpring.current.value;\n\n        if ( ( !haveDrawn && renderPixelRatioC >= tiledImage.minPixelRatio ) ||\n             ( level == lowestLevel ) ) {\n            drawLevel = true;\n            haveDrawn = true;\n        } else if ( !haveDrawn ) {\n            continue;\n        }\n\n        //Perform calculations for draw if we haven\'t drawn this\n        renderPixelRatioT = tiledImage.viewport.deltaPixelsFromPointsNoRotate(\n            tiledImage.source.getPixelRatio( level ),\n            false\n        ).x * tiledImage._scaleSpring.current.value;\n\n        zeroRatioT      = tiledImage.viewport.deltaPixelsFromPointsNoRotate(\n            tiledImage.source.getPixelRatio(\n                Math.max(\n                    tiledImage.source.getClosestLevel( tiledImage.viewport.containerSize ) - 1,\n                    0\n                )\n            ),\n            false\n        ).x * tiledImage._scaleSpring.current.value;\n\n        optimalRatio    = tiledImage.immediateRender ?\n            1 :\n            zeroRatioT;\n\n        levelOpacity    = Math.min( 1, ( renderPixelRatioC - 0.5 ) / 0.5 );\n\n        levelVisibility = optimalRatio / Math.abs(\n            optimalRatio - renderPixelRatioT\n        );\n\n        // Update the level and keep track of \'best\' tile to load\n        best = updateLevel(\n            tiledImage,\n            haveDrawn,\n            drawLevel,\n            level,\n            levelOpacity,\n            levelVisibility,\n            viewportTL,\n            viewportBR,\n            currentTime,\n            best\n        );\n\n        // Stop the loop if lower-res tiles would all be covered by\n        // already drawn tiles\n        if (  providesCoverage( tiledImage.coverage, level ) ) {\n            break;\n        }\n    }\n\n    // Perform the actual drawing\n    drawTiles( tiledImage, tiledImage.lastDrawn );\n\n    // Load the new \'best\' tile\n    if (best && !best.context2D) {\n        loadTile( tiledImage, best, currentTime );\n    }\n\n}\n\n\nfunction updateLevel( tiledImage, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, viewportTL, viewportBR, currentTime, best ){\n\n    var x, y,\n        tileTL,\n        tileBR,\n        numberOfTiles,\n        viewportCenter  = tiledImage.viewport.pixelFromPoint( tiledImage.viewport.getCenter() );\n\n\n    if( tiledImage.viewer ){\n        /**\n         * <em>- Needs documentation -</em>\n         *\n         * @event update-level\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n         * @property {Object} havedrawn\n         * @property {Object} level\n         * @property {Object} opacity\n         * @property {Object} visibility\n         * @property {Object} topleft\n         * @property {Object} bottomright\n         * @property {Object} currenttime\n         * @property {Object} best\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        tiledImage.viewer.raiseEvent( \'update-level\', {\n            tiledImage: tiledImage,\n            havedrawn: haveDrawn,\n            level: level,\n            opacity: levelOpacity,\n            visibility: levelVisibility,\n            topleft: viewportTL,\n            bottomright: viewportBR,\n            currenttime: currentTime,\n            best: best\n        });\n    }\n\n    //OK, a new drawing so do your calculations\n    tileTL    = tiledImage.source.getTileAtPoint( level, viewportTL.divide( tiledImage._scaleSpring.current.value ));\n    tileBR    = tiledImage.source.getTileAtPoint( level, viewportBR.divide( tiledImage._scaleSpring.current.value ));\n    numberOfTiles  = tiledImage.source.getNumTiles( level );\n\n    resetCoverage( tiledImage.coverage, level );\n\n    if ( !tiledImage.wrapHorizontal ) {\n        tileBR.x = Math.min( tileBR.x, numberOfTiles.x - 1 );\n    }\n    if ( !tiledImage.wrapVertical ) {\n        tileBR.y = Math.min( tileBR.y, numberOfTiles.y - 1 );\n    }\n\n    for ( x = tileTL.x; x <= tileBR.x; x++ ) {\n        for ( y = tileTL.y; y <= tileBR.y; y++ ) {\n\n            best = updateTile(\n                tiledImage,\n                drawLevel,\n                haveDrawn,\n                x, y,\n                level,\n                levelOpacity,\n                levelVisibility,\n                viewportCenter,\n                numberOfTiles,\n                currentTime,\n                best\n            );\n\n        }\n    }\n\n    return best;\n}\n\nfunction updateTile( tiledImage, drawLevel, haveDrawn, x, y, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best){\n\n    var tile = getTile(\n            x, y,\n            level,\n            tiledImage.source,\n            tiledImage.tilesMatrix,\n            currentTime,\n            numberOfTiles,\n            tiledImage._worldWidthCurrent,\n            tiledImage._worldHeightCurrent\n        ),\n        drawTile = drawLevel;\n\n    if( tiledImage.viewer ){\n        /**\n         * <em>- Needs documentation -</em>\n         *\n         * @event update-tile\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n         * @property {OpenSeadragon.Tile} tile\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        tiledImage.viewer.raiseEvent( \'update-tile\', {\n            tiledImage: tiledImage,\n            tile: tile\n        });\n    }\n\n    setCoverage( tiledImage.coverage, level, x, y, false );\n\n    if ( !tile.exists ) {\n        return best;\n    }\n\n    if ( haveDrawn && !drawTile ) {\n        if ( isCovered( tiledImage.coverage, level, x, y ) ) {\n            setCoverage( tiledImage.coverage, level, x, y, true );\n        } else {\n            drawTile = true;\n        }\n    }\n\n    if ( !drawTile ) {\n        return best;\n    }\n\n    positionTile(\n        tile,\n        tiledImage.source.tileOverlap,\n        tiledImage.viewport,\n        viewportCenter,\n        levelVisibility,\n        tiledImage\n    );\n\n    if (!tile.loaded) {\n        if (tile.context2D) {\n            setTileLoaded(tiledImage, tile);\n        } else {\n            var imageRecord = tiledImage._tileCache.getImageRecord(tile.url);\n            if (imageRecord) {\n                var image = imageRecord.getImage();\n                setTileLoaded(tiledImage, tile, image);\n            }\n        }\n    }\n\n    if ( tile.loaded ) {\n        var needsDraw = blendTile(\n            tiledImage,\n            tile,\n            x, y,\n            level,\n            levelOpacity,\n            currentTime\n        );\n\n        if ( needsDraw ) {\n            tiledImage._needsDraw = true;\n        }\n    } else if ( tile.loading ) {\n        // the tile is already in the download queue\n        // thanks josh1093 for finally translating this typo\n    } else {\n        best = compareTiles( best, tile );\n    }\n\n    return best;\n}\n\nfunction getTile( x, y, level, tileSource, tilesMatrix, time, numTiles, worldWidth, worldHeight ) {\n    var xMod,\n        yMod,\n        bounds,\n        exists,\n        url,\n        context2D,\n        tile;\n\n    if ( !tilesMatrix[ level ] ) {\n        tilesMatrix[ level ] = {};\n    }\n    if ( !tilesMatrix[ level ][ x ] ) {\n        tilesMatrix[ level ][ x ] = {};\n    }\n\n    if ( !tilesMatrix[ level ][ x ][ y ] ) {\n        xMod    = ( numTiles.x + ( x % numTiles.x ) ) % numTiles.x;\n        yMod    = ( numTiles.y + ( y % numTiles.y ) ) % numTiles.y;\n        bounds  = tileSource.getTileBounds( level, xMod, yMod );\n        exists  = tileSource.tileExists( level, xMod, yMod );\n        url     = tileSource.getTileUrl( level, xMod, yMod );\n        context2D = tileSource.getContext2D ?\n            tileSource.getContext2D(level, xMod, yMod) : undefined;\n\n        bounds.x += ( x - xMod ) / numTiles.x;\n        bounds.y += (worldHeight / worldWidth) * (( y - yMod ) / numTiles.y);\n\n        tilesMatrix[ level ][ x ][ y ] = new $.Tile(\n            level,\n            x,\n            y,\n            bounds,\n            exists,\n            url,\n            context2D\n        );\n    }\n\n    tile = tilesMatrix[ level ][ x ][ y ];\n    tile.lastTouchTime = time;\n\n    return tile;\n}\n\nfunction loadTile( tiledImage, tile, time ) {\n    tile.loading = true;\n    tiledImage._imageLoader.addJob({\n        src: tile.url,\n        crossOriginPolicy: tiledImage.crossOriginPolicy,\n        callback: function( image, errorMsg ){\n            onTileLoad( tiledImage, tile, time, image, errorMsg );\n        },\n        abort: function() {\n            tile.loading = false;\n        }\n    });\n}\n\nfunction onTileLoad( tiledImage, tile, time, image, errorMsg ) {\n    if ( !image ) {\n        $.console.log( "Tile %s failed to load: %s - error: %s", tile, tile.url, errorMsg );\n        /**\n         * Triggered when a tile fails to load.\n         *\n         * @event tile-load-failed\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Tile} tile - The tile that failed to load.\n         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image the tile belongs to.\n         * @property {number} time - The time in milliseconds when the tile load began.\n         * @property {string} message - The error message.\n         */\n        tiledImage.viewer.raiseEvent("tile-load-failed", {tile: tile, tiledImage: tiledImage, time: time, message: errorMsg});\n        tile.loading = false;\n        tile.exists = false;\n        return;\n    }\n\n    if ( time < tiledImage.lastResetTime ) {\n        $.console.log( "Ignoring tile %s loaded before reset: %s", tile, tile.url );\n        tile.loading = false;\n        return;\n    }\n\n    var finish = function() {\n        var cutoff = Math.ceil( Math.log(\n            tiledImage.source.getTileWidth(tile.level) ) / Math.log( 2 ) );\n        setTileLoaded(tiledImage, tile, image, cutoff);\n    };\n\n    // Check if we\'re mid-update; this can happen on IE8 because image load events for\n    // cached images happen immediately there\n    if ( !tiledImage._midDraw ) {\n        finish();\n    } else {\n        // Wait until after the update, in case caching unloads any tiles\n        window.setTimeout( finish, 1);\n    }\n}\n\nfunction setTileLoaded(tiledImage, tile, image, cutoff) {\n    var increment = 0;\n\n    function getCompletionCallback() {\n        increment++;\n        return completionCallback;\n    }\n\n    function completionCallback() {\n        increment--;\n        if (increment === 0) {\n            tile.loading = false;\n            tile.loaded = true;\n            if (!tile.context2D) {\n                tiledImage._tileCache.cacheTile({\n                    image: image,\n                    tile: tile,\n                    cutoff: cutoff,\n                    tiledImage: tiledImage\n                });\n            }\n            tiledImage._needsDraw = true;\n        }\n    }\n\n    /**\n     * Triggered when a tile has just been loaded in memory. That means that the\n     * image has been downloaded and can be modified before being drawn to the canvas.\n     *\n     * @event tile-loaded\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {Image} image - The image of the tile.\n     * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the loaded tile.\n     * @property {OpenSeadragon.Tile} tile - The tile which has been loaded.\n     * @property {function} getCompletionCallback - A function giving a callback to call\n     * when the asynchronous processing of the image is done. The image will be\n     * marked as entirely loaded when the callback has been called once for each\n     * call to getCompletionCallback.\n     */\n    tiledImage.viewer.raiseEvent("tile-loaded", {\n        tile: tile,\n        tiledImage: tiledImage,\n        image: image,\n        getCompletionCallback: getCompletionCallback\n    });\n    // In case the completion callback is never called, we at least force it once.\n    getCompletionCallback()();\n}\n\nfunction positionTile( tile, overlap, viewport, viewportCenter, levelVisibility, tiledImage ){\n    var boundsTL     = tile.bounds.getTopLeft();\n\n    boundsTL.x *= tiledImage._scaleSpring.current.value;\n    boundsTL.y *= tiledImage._scaleSpring.current.value;\n    boundsTL.x += tiledImage._xSpring.current.value;\n    boundsTL.y += tiledImage._ySpring.current.value;\n\n    var boundsSize   = tile.bounds.getSize();\n\n    boundsSize.x *= tiledImage._scaleSpring.current.value;\n    boundsSize.y *= tiledImage._scaleSpring.current.value;\n\n    var positionC    = viewport.pixelFromPointNoRotate(boundsTL, true),\n        positionT    = viewport.pixelFromPointNoRotate(boundsTL, false),\n        sizeC        = viewport.deltaPixelsFromPointsNoRotate(boundsSize, true),\n        sizeT        = viewport.deltaPixelsFromPointsNoRotate(boundsSize, false),\n        tileCenter   = positionT.plus( sizeT.divide( 2 ) ),\n        tileDistance = viewportCenter.distanceTo( tileCenter );\n\n    if ( !overlap ) {\n        sizeC = sizeC.plus( new $.Point( 1, 1 ) );\n    }\n\n    tile.position   = positionC;\n    tile.size       = sizeC;\n    tile.distance   = tileDistance;\n    tile.visibility = levelVisibility;\n}\n\n\nfunction blendTile( tiledImage, tile, x, y, level, levelOpacity, currentTime ){\n    var blendTimeMillis = 1000 * tiledImage.blendTime,\n        deltaTime,\n        opacity;\n\n    if ( !tile.blendStart ) {\n        tile.blendStart = currentTime;\n    }\n\n    deltaTime   = currentTime - tile.blendStart;\n    opacity     = blendTimeMillis ? Math.min( 1, deltaTime / ( blendTimeMillis ) ) : 1;\n\n    if ( tiledImage.alwaysBlend ) {\n        opacity *= levelOpacity;\n    }\n\n    tile.opacity = opacity;\n\n    tiledImage.lastDrawn.push( tile );\n\n    if ( opacity == 1 ) {\n        setCoverage( tiledImage.coverage, level, x, y, true );\n        tiledImage._hasOpaqueTile = true;\n    } else if ( deltaTime < blendTimeMillis ) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * @private\n * @inner\n * Returns true if the given tile provides coverage to lower-level tiles of\n * lower resolution representing the same content. If neither x nor y is\n * given, returns true if the entire visible level provides coverage.\n *\n * Note that out-of-bounds tiles provide coverage in this sense, since\n * there\'s no content that they would need to cover. Tiles at non-existent\n * levels that are within the image bounds, however, do not.\n */\nfunction providesCoverage( coverage, level, x, y ) {\n    var rows,\n        cols,\n        i, j;\n\n    if ( !coverage[ level ] ) {\n        return false;\n    }\n\n    if ( x === undefined || y === undefined ) {\n        rows = coverage[ level ];\n        for ( i in rows ) {\n            if ( rows.hasOwnProperty( i ) ) {\n                cols = rows[ i ];\n                for ( j in cols ) {\n                    if ( cols.hasOwnProperty( j ) && !cols[ j ] ) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    return (\n        coverage[ level ][ x] === undefined ||\n        coverage[ level ][ x ][ y ] === undefined ||\n        coverage[ level ][ x ][ y ] === true\n    );\n}\n\n/**\n * @private\n * @inner\n * Returns true if the given tile is completely covered by higher-level\n * tiles of higher resolution representing the same content. If neither x\n * nor y is given, returns true if the entire visible level is covered.\n */\nfunction isCovered( coverage, level, x, y ) {\n    if ( x === undefined || y === undefined ) {\n        return providesCoverage( coverage, level + 1 );\n    } else {\n        return (\n             providesCoverage( coverage, level + 1, 2 * x, 2 * y ) &&\n             providesCoverage( coverage, level + 1, 2 * x, 2 * y + 1 ) &&\n             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y ) &&\n             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y + 1 )\n        );\n    }\n}\n\n/**\n * @private\n * @inner\n * Sets whether the given tile provides coverage or not.\n */\nfunction setCoverage( coverage, level, x, y, covers ) {\n    if ( !coverage[ level ] ) {\n        $.console.warn(\n            "Setting coverage for a tile before its level\'s coverage has been reset: %s",\n            level\n        );\n        return;\n    }\n\n    if ( !coverage[ level ][ x ] ) {\n        coverage[ level ][ x ] = {};\n    }\n\n    coverage[ level ][ x ][ y ] = covers;\n}\n\n/**\n * @private\n * @inner\n * Resets coverage information for the given level. This should be called\n * after every draw routine. Note that at the beginning of the next draw\n * routine, coverage for every visible tile should be explicitly set.\n */\nfunction resetCoverage( coverage, level ) {\n    coverage[ level ] = {};\n}\n\n/**\n * @private\n * @inner\n * Determines whether the \'last best\' tile for the area is better than the\n * tile in question.\n */\nfunction compareTiles( previousBest, tile ) {\n    if ( !previousBest ) {\n        return tile;\n    }\n\n    if ( tile.visibility > previousBest.visibility ) {\n        return tile;\n    } else if ( tile.visibility == previousBest.visibility ) {\n        if ( tile.distance < previousBest.distance ) {\n            return tile;\n        }\n    }\n\n    return previousBest;\n}\n\nfunction drawTiles( tiledImage, lastDrawn ) {\n    if (lastDrawn.length === 0) {\n        return;\n    }\n    var tile = lastDrawn[0];\n\n    var useSketch = tiledImage.opacity < 1 ||\n        (tiledImage.compositeOperation &&\n            tiledImage.compositeOperation !== \'source-over\') ||\n        (!tiledImage._isBottomItem() && tile._hasTransparencyChannel());\n\n    var sketchScale;\n    var sketchTranslate;\n\n    var zoom = tiledImage.viewport.getZoom(true);\n    var imageZoom = tiledImage.viewportToImageZoom(zoom);\n    if (imageZoom > tiledImage.smoothTileEdgesMinZoom && !tiledImage.iOSDevice) {\n        // When zoomed in a lot (>100%) the tile edges are visible.\n        // So we have to composite them at ~100% and scale them up together.\n        // Note: Disabled on iOS devices per default as it causes a native crash\n        useSketch = true;\n        sketchScale = tile.getScaleForEdgeSmoothing();\n        sketchTranslate = tile.getTranslationForEdgeSmoothing(sketchScale,\n            tiledImage._drawer.getCanvasSize(false),\n            tiledImage._drawer.getCanvasSize(true));\n    }\n\n    var bounds;\n    if (useSketch) {\n        if (!sketchScale) {\n            // Except when edge smoothing, we only clean the part of the\n            // sketch canvas we are going to use for performance reasons.\n            bounds = tiledImage.viewport.viewportToViewerElementRectangle(\n                tiledImage.getClippedBounds(true))\n                .getIntegerBoundingBox()\n                .times($.pixelDensityRatio);\n        }\n        tiledImage._drawer._clear(true, bounds);\n    }\n\n    // When scaling, we must rotate only when blending the sketch canvas to avoid\n    // interpolation\n    if (tiledImage.viewport.degrees !== 0 && !sketchScale) {\n        tiledImage._drawer._offsetForRotation(tiledImage.viewport.degrees, useSketch);\n    }\n\n    var usedClip = false;\n    if ( tiledImage._clip ) {\n        tiledImage._drawer.saveContext(useSketch);\n\n        var box = tiledImage.imageToViewportRectangle(tiledImage._clip, true);\n        var clipRect = tiledImage._drawer.viewportToDrawerRectangle(box);\n        if (sketchScale) {\n            clipRect = clipRect.times(sketchScale);\n        }\n        if (sketchTranslate) {\n            clipRect = clipRect.translate(sketchTranslate);\n        }\n        tiledImage._drawer.setClip(clipRect, useSketch);\n\n        usedClip = true;\n    }\n\n    if ( tiledImage.placeholderFillStyle && tiledImage._hasOpaqueTile === false ) {\n        var placeholderRect = tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));\n        if (sketchScale) {\n            placeholderRect = placeholderRect.times(sketchScale);\n        }\n        if (sketchTranslate) {\n            placeholderRect = placeholderRect.translate(sketchTranslate);\n        }\n\n        var fillStyle = null;\n        if ( typeof tiledImage.placeholderFillStyle === "function" ) {\n            fillStyle = tiledImage.placeholderFillStyle(tiledImage, tiledImage._drawer.context);\n        }\n        else {\n            fillStyle = tiledImage.placeholderFillStyle;\n        }\n\n        tiledImage._drawer.drawRectangle(placeholderRect, fillStyle, useSketch);\n    }\n\n    for (var i = lastDrawn.length - 1; i >= 0; i--) {\n        tile = lastDrawn[ i ];\n        tiledImage._drawer.drawTile( tile, tiledImage._drawingHandler, useSketch, sketchScale, sketchTranslate );\n        tile.beingDrawn = true;\n\n        if( tiledImage.viewer ){\n            /**\n             * <em>- Needs documentation -</em>\n             *\n             * @event tile-drawn\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n             * @property {OpenSeadragon.Tile} tile\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            tiledImage.viewer.raiseEvent( \'tile-drawn\', {\n                tiledImage: tiledImage,\n                tile: tile\n            });\n        }\n    }\n\n    if ( usedClip ) {\n        tiledImage._drawer.restoreContext( useSketch );\n    }\n\n    if (tiledImage.viewport.degrees !== 0 && !sketchScale) {\n        tiledImage._drawer._restoreRotationChanges(useSketch);\n    }\n\n    if (useSketch) {\n        var offsetForRotation = tiledImage.viewport.degrees !== 0 && sketchScale;\n        if (offsetForRotation) {\n            tiledImage._drawer._offsetForRotation(tiledImage.viewport.degrees, false);\n        }\n        tiledImage._drawer.blendSketch({\n            opacity: tiledImage.opacity,\n            scale: sketchScale,\n            translate: sketchTranslate,\n            compositeOperation: tiledImage.compositeOperation,\n            bounds: bounds\n        });\n        if (offsetForRotation) {\n            tiledImage._drawer._restoreRotationChanges(false);\n        }\n    }\n    drawDebugInfo( tiledImage, lastDrawn );\n}\n\nfunction drawDebugInfo( tiledImage, lastDrawn ) {\n    if( tiledImage.debugMode ) {\n        for ( var i = lastDrawn.length - 1; i >= 0; i-- ) {\n            var tile = lastDrawn[ i ];\n            try {\n                tiledImage._drawer.drawDebugInfo( tile, lastDrawn.length, i );\n            } catch(e) {\n                $.console.error(e);\n            }\n        }\n    }\n}\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - TileCache\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n// private class\nvar TileRecord = function( options ) {\n    $.console.assert( options, "[TileCache.cacheTile] options is required" );\n    $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );\n    $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );\n    this.tile = options.tile;\n    this.tiledImage = options.tiledImage;\n};\n\n// private class\nvar ImageRecord = function(options) {\n    $.console.assert( options, "[ImageRecord] options is required" );\n    $.console.assert( options.image, "[ImageRecord] options.image is required" );\n    this._image = options.image;\n    this._tiles = [];\n};\n\nImageRecord.prototype = {\n    destroy: function() {\n        this._image = null;\n        this._renderedContext = null;\n        this._tiles = null;\n    },\n\n    getImage: function() {\n        return this._image;\n    },\n\n    getRenderedContext: function() {\n        if (!this._renderedContext) {\n            var canvas = document.createElement( \'canvas\' );\n            canvas.width = this._image.width;\n            canvas.height = this._image.height;\n            this._renderedContext = canvas.getContext(\'2d\');\n            this._renderedContext.drawImage( this._image, 0, 0 );\n            //since we are caching the prerendered image on a canvas\n            //allow the image to not be held in memory\n            this._image = null;\n        }\n        return this._renderedContext;\n    },\n\n    setRenderedContext: function(renderedContext) {\n        $.console.error("ImageRecord.setRenderedContext is deprecated. " +\n                "The rendered context should be created by the ImageRecord " +\n                "itself when calling ImageRecord.getRenderedContext.");\n        this._renderedContext = renderedContext;\n    },\n\n    addTile: function(tile) {\n        $.console.assert(tile, \'[ImageRecord.addTile] tile is required\');\n        this._tiles.push(tile);\n    },\n\n    removeTile: function(tile) {\n        for (var i = 0; i < this._tiles.length; i++) {\n            if (this._tiles[i] === tile) {\n                this._tiles.splice(i, 1);\n                return;\n            }\n        }\n\n        $.console.warn(\'[ImageRecord.removeTile] trying to remove unknown tile\', tile);\n    },\n\n    getTileCount: function() {\n        return this._tiles.length;\n    }\n};\n\n/**\n * @class TileCache\n * @memberof OpenSeadragon\n * @classdesc Stores all the tiles displayed in a {@link OpenSeadragon.Viewer}.\n * You generally won\'t have to interact with the TileCache directly.\n * @param {Object} options - Configuration for this TileCache.\n * @param {Number} [options.maxImageCacheCount] - See maxImageCacheCount in\n * {@link OpenSeadragon.Options} for details.\n */\n$.TileCache = function( options ) {\n    options = options || {};\n\n    this._maxImageCacheCount = options.maxImageCacheCount || $.DEFAULT_SETTINGS.maxImageCacheCount;\n    this._tilesLoaded = [];\n    this._imagesLoaded = [];\n    this._imagesLoadedCount = 0;\n};\n\n/** @lends OpenSeadragon.TileCache.prototype */\n$.TileCache.prototype = {\n    /**\n     * @returns {Number} The total number of tiles that have been loaded by\n     * this TileCache.\n     */\n    numTilesLoaded: function() {\n        return this._tilesLoaded.length;\n    },\n\n    /**\n     * Caches the specified tile, removing an old tile if necessary to stay under the\n     * maxImageCacheCount specified on construction. Note that if multiple tiles reference\n     * the same image, there may be more tiles than maxImageCacheCount; the goal is to keep\n     * the number of images below that number. Note, as well, that even the number of images\n     * may temporarily surpass that number, but should eventually come back down to the max specified.\n     * @param {Object} options - Tile info.\n     * @param {OpenSeadragon.Tile} options.tile - The tile to cache.\n     * @param {Image} options.image - The image of the tile to cache.\n     * @param {OpenSeadragon.TiledImage} options.tiledImage - The TiledImage that owns that tile.\n     * @param {Number} [options.cutoff=0] - If adding this tile goes over the cache max count, this\n     * function will release an old tile. The cutoff option specifies a tile level at or below which\n     * tiles will not be released.\n     */\n    cacheTile: function( options ) {\n        $.console.assert( options, "[TileCache.cacheTile] options is required" );\n        $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );\n        $.console.assert( options.tile.url, "[TileCache.cacheTile] options.tile.url is required" );\n        $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );\n\n        var cutoff = options.cutoff || 0;\n        var insertionIndex = this._tilesLoaded.length;\n\n        var imageRecord = this._imagesLoaded[options.tile.url];\n        if (!imageRecord) {\n            $.console.assert( options.image, "[TileCache.cacheTile] options.image is required to create an ImageRecord" );\n            imageRecord = this._imagesLoaded[options.tile.url] = new ImageRecord({\n                image: options.image\n            });\n\n            this._imagesLoadedCount++;\n        }\n\n        imageRecord.addTile(options.tile);\n        options.tile.cacheImageRecord = imageRecord;\n\n        // Note that just because we\'re unloading a tile doesn\'t necessarily mean\n        // we\'re unloading an image. With repeated calls it should sort itself out, though.\n        if ( this._imagesLoadedCount > this._maxImageCacheCount ) {\n            var worstTile       = null;\n            var worstTileIndex  = -1;\n            var worstTileRecord = null;\n            var prevTile, worstTime, worstLevel, prevTime, prevLevel, prevTileRecord;\n\n            for ( var i = this._tilesLoaded.length - 1; i >= 0; i-- ) {\n                prevTileRecord = this._tilesLoaded[ i ];\n                prevTile = prevTileRecord.tile;\n\n                if ( prevTile.level <= cutoff || prevTile.beingDrawn ) {\n                    continue;\n                } else if ( !worstTile ) {\n                    worstTile       = prevTile;\n                    worstTileIndex  = i;\n                    worstTileRecord = prevTileRecord;\n                    continue;\n                }\n\n                prevTime    = prevTile.lastTouchTime;\n                worstTime   = worstTile.lastTouchTime;\n                prevLevel   = prevTile.level;\n                worstLevel  = worstTile.level;\n\n                if ( prevTime < worstTime ||\n                   ( prevTime == worstTime && prevLevel > worstLevel ) ) {\n                    worstTile       = prevTile;\n                    worstTileIndex  = i;\n                    worstTileRecord = prevTileRecord;\n                }\n            }\n\n            if ( worstTile && worstTileIndex >= 0 ) {\n                this._unloadTile(worstTileRecord);\n                insertionIndex = worstTileIndex;\n            }\n        }\n\n        this._tilesLoaded[ insertionIndex ] = new TileRecord({\n            tile: options.tile,\n            tiledImage: options.tiledImage\n        });\n    },\n\n    /**\n     * Clears all tiles associated with the specified tiledImage.\n     * @param {OpenSeadragon.TiledImage} tiledImage\n     */\n    clearTilesFor: function( tiledImage ) {\n        $.console.assert(tiledImage, \'[TileCache.clearTilesFor] tiledImage is required\');\n        var tileRecord;\n        for ( var i = 0; i < this._tilesLoaded.length; ++i ) {\n            tileRecord = this._tilesLoaded[ i ];\n            if ( tileRecord.tiledImage === tiledImage ) {\n                this._unloadTile(tileRecord);\n                this._tilesLoaded.splice( i, 1 );\n                i--;\n            }\n        }\n    },\n\n    // private\n    getImageRecord: function(url) {\n        $.console.assert(url, \'[TileCache.getImageRecord] url is required\');\n        return this._imagesLoaded[url];\n    },\n\n    // private\n    _unloadTile: function(tileRecord) {\n        $.console.assert(tileRecord, \'[TileCache._unloadTile] tileRecord is required\');\n        var tile = tileRecord.tile;\n        var tiledImage = tileRecord.tiledImage;\n\n        tile.unload();\n        tile.cacheImageRecord = null;\n\n        var imageRecord = this._imagesLoaded[tile.url];\n        imageRecord.removeTile(tile);\n        if (!imageRecord.getTileCount()) {\n            imageRecord.destroy();\n            delete this._imagesLoaded[tile.url];\n            this._imagesLoadedCount--;\n        }\n\n        /**\n         * Triggered when a tile has just been unloaded from memory.\n         *\n         * @event tile-unloaded\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the unloaded tile.\n         * @property {OpenSeadragon.Tile} tile - The tile which has been unloaded.\n         */\n        tiledImage.viewer.raiseEvent("tile-unloaded", {\n            tile: tile,\n            tiledImage: tiledImage\n        });\n    }\n};\n\n}( OpenSeadragon ));\n\n/*\n * OpenSeadragon - World\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ){\n\n/**\n * @class World\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @classdesc Keeps track of all of the tiled images in the scene.\n * @param {Object} options - World options.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this World.\n **/\n$.World = function( options ) {\n    var _this = this;\n\n    $.console.assert( options.viewer, "[World] options.viewer is required" );\n\n    $.EventSource.call( this );\n\n    this.viewer = options.viewer;\n    this._items = [];\n    this._needsDraw = false;\n    this._autoRefigureSizes = true;\n    this._needsSizesFigured = false;\n    this._delegatedFigureSizes = function(event) {\n        if (_this._autoRefigureSizes) {\n            _this._figureSizes();\n        } else {\n            _this._needsSizesFigured = true;\n        }\n    };\n\n    this._figureSizes();\n};\n\n$.extend( $.World.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.World.prototype */{\n    /**\n     * Add the specified item.\n     * @param {OpenSeadragon.TiledImage} item - The item to add.\n     * @param {Number} [options.index] - Index for the item. If not specified, goes at the top.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */\n    addItem: function( item, options ) {\n        $.console.assert(item, "[World.addItem] item is required");\n        $.console.assert(item instanceof $.TiledImage, "[World.addItem] only TiledImages supported at this time");\n\n        options = options || {};\n        if (options.index !== undefined) {\n            var index = Math.max(0, Math.min(this._items.length, options.index));\n            this._items.splice(index, 0, item);\n        } else {\n            this._items.push( item );\n        }\n\n        if (this._autoRefigureSizes) {\n            this._figureSizes();\n        } else {\n            this._needsSizesFigured = true;\n        }\n\n        this._needsDraw = true;\n\n        item.addHandler(\'bounds-change\', this._delegatedFigureSizes);\n\n        /**\n         * Raised when an item is added to the World.\n         * @event add-item\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item that has been added.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'add-item\', {\n            item: item\n        } );\n    },\n\n    /**\n     * Get the item at the specified index.\n     * @param {Number} index - The item\'s index.\n     * @returns {OpenSeadragon.TiledImage} The item at the specified index.\n     */\n    getItemAt: function( index ) {\n        $.console.assert(index !== undefined, "[World.getItemAt] index is required");\n        return this._items[ index ];\n    },\n\n    /**\n     * Get the index of the given item or -1 if not present.\n     * @param {OpenSeadragon.TiledImage} item - The item.\n     * @returns {Number} The index of the item or -1 if not present.\n     */\n    getIndexOfItem: function( item ) {\n        $.console.assert(item, "[World.getIndexOfItem] item is required");\n        return $.indexOf( this._items, item );\n    },\n\n    /**\n     * @returns {Number} The number of items used.\n     */\n    getItemCount: function() {\n        return this._items.length;\n    },\n\n    /**\n     * Change the index of a item so that it appears over or under others.\n     * @param {OpenSeadragon.TiledImage} item - The item to move.\n     * @param {Number} index - The new index.\n     * @fires OpenSeadragon.World.event:item-index-change\n     */\n    setItemIndex: function( item, index ) {\n        $.console.assert(item, "[World.setItemIndex] item is required");\n        $.console.assert(index !== undefined, "[World.setItemIndex] index is required");\n\n        var oldIndex = this.getIndexOfItem( item );\n\n        if ( index >= this._items.length ) {\n            throw new Error( "Index bigger than number of layers." );\n        }\n\n        if ( index === oldIndex || oldIndex === -1 ) {\n            return;\n        }\n\n        this._items.splice( oldIndex, 1 );\n        this._items.splice( index, 0, item );\n        this._needsDraw = true;\n\n        /**\n         * Raised when the order of the indexes has been changed.\n         * @event item-index-change\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item whose index has\n         * been changed\n         * @property {Number} previousIndex - The previous index of the item\n         * @property {Number} newIndex - The new index of the item\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'item-index-change\', {\n            item: item,\n            previousIndex: oldIndex,\n            newIndex: index\n        } );\n    },\n\n    /**\n     * Remove an item.\n     * @param {OpenSeadragon.TiledImage} item - The item to remove.\n     * @fires OpenSeadragon.World.event:remove-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */\n    removeItem: function( item ) {\n        $.console.assert(item, "[World.removeItem] item is required");\n\n        var index = $.indexOf(this._items, item );\n        if ( index === -1 ) {\n            return;\n        }\n\n        item.removeHandler(\'bounds-change\', this._delegatedFigureSizes);\n        item.destroy();\n        this._items.splice( index, 1 );\n        this._figureSizes();\n        this._needsDraw = true;\n        this._raiseRemoveItem(item);\n    },\n\n    /**\n     * Remove all items.\n     * @fires OpenSeadragon.World.event:remove-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */\n    removeAll: function() {\n        // We need to make sure any pending images are canceled so the world items don\'t get messed up\n        this.viewer._cancelPendingImages();\n        var item;\n        for (var i = 0; i < this._items.length; i++) {\n            item = this._items[i];\n            item.removeHandler(\'bounds-change\', this._delegatedFigureSizes);\n            item.destroy();\n        }\n\n        var removedItems = this._items;\n        this._items = [];\n        this._figureSizes();\n        this._needsDraw = true;\n\n        for (i = 0; i < removedItems.length; i++) {\n            item = removedItems[i];\n            this._raiseRemoveItem(item);\n        }\n    },\n\n    /**\n     * Clears all tiles and triggers updates for all items.\n     */\n    resetItems: function() {\n        for ( var i = 0; i < this._items.length; i++ ) {\n            this._items[i].reset();\n        }\n    },\n\n    /**\n     * Updates (i.e. animates bounds of) all items.\n     */\n    update: function() {\n        var animated = false;\n        for ( var i = 0; i < this._items.length; i++ ) {\n            animated = this._items[i].update() || animated;\n        }\n\n        return animated;\n    },\n\n    /**\n     * Draws all items.\n     */\n    draw: function() {\n        for ( var i = 0; i < this._items.length; i++ ) {\n            this._items[i].draw();\n        }\n\n        this._needsDraw = false;\n    },\n\n    /**\n     * @returns {Boolean} true if any items need updating.\n     */\n    needsDraw: function() {\n        for ( var i = 0; i < this._items.length; i++ ) {\n            if ( this._items[i].needsDraw() ) {\n                return true;\n            }\n        }\n        return this._needsDraw;\n    },\n\n    /**\n     * @returns {OpenSeadragon.Rect} The smallest rectangle that encloses all items, in viewport coordinates.\n     */\n    getHomeBounds: function() {\n        return this._homeBounds.clone();\n    },\n\n    /**\n     * To facilitate zoom constraints, we keep track of the pixel density of the\n     * densest item in the World (i.e. the item whose content size to viewport size\n     * ratio is the highest) and save it as this "content factor".\n     * @returns {Number} the number of content units per viewport unit.\n     */\n    getContentFactor: function() {\n        return this._contentFactor;\n    },\n\n    /**\n     * As a performance optimization, setting this flag to false allows the bounds-change event handler\n     * on tiledImages to skip calculations on the world bounds. If a lot of images are going to be positioned in\n     * rapid succession, this is a good idea. When finished, setAutoRefigureSizes should be called with true\n     * or the system may behave oddly.\n     * @param {Boolean} [value] The value to which to set the flag.\n     */\n    setAutoRefigureSizes: function(value) {\n        this._autoRefigureSizes = value;\n        if (value & this._needsSizesFigured) {\n            this._figureSizes();\n            this._needsSizesFigured = false;\n        }\n    },\n\n    /**\n     * Arranges all of the TiledImages with the specified settings.\n     * @param {Object} options - Specifies how to arrange.\n     * @param {Boolean} [options.immediately=false] - Whether to animate to the new arrangement.\n     * @param {String} [options.layout] - See collectionLayout in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.rows] - See collectionRows in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.columns] - See collectionColumns in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.tileSize] - See collectionTileSize in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.tileMargin] - See collectionTileMargin in {@link OpenSeadragon.Options}.\n     * @fires OpenSeadragon.World.event:metrics-change\n     */\n    arrange: function(options) {\n        options = options || {};\n        var immediately = options.immediately || false;\n        var layout = options.layout || $.DEFAULT_SETTINGS.collectionLayout;\n        var rows = options.rows || $.DEFAULT_SETTINGS.collectionRows;\n        var columns = options.columns || $.DEFAULT_SETTINGS.collectionColumns;\n        var tileSize = options.tileSize || $.DEFAULT_SETTINGS.collectionTileSize;\n        var tileMargin = options.tileMargin || $.DEFAULT_SETTINGS.collectionTileMargin;\n        var increment = tileSize + tileMargin;\n        var wrap;\n        if (!options.rows && columns) {\n            wrap = columns;\n        } else {\n            wrap = Math.ceil(this._items.length / rows);\n        }\n        var x = 0;\n        var y = 0;\n        var item, box, width, height, position;\n\n        this.setAutoRefigureSizes(false);\n        for (var i = 0; i < this._items.length; i++) {\n            if (i && (i % wrap) === 0) {\n                if (layout === \'horizontal\') {\n                    y += increment;\n                    x = 0;\n                } else {\n                    x += increment;\n                    y = 0;\n                }\n            }\n\n            item = this._items[i];\n            box = item.getBounds();\n            if (box.width > box.height) {\n                width = tileSize;\n            } else {\n                width = tileSize * (box.width / box.height);\n            }\n\n            height = width * (box.height / box.width);\n            position = new $.Point(x + ((tileSize - width) / 2),\n                y + ((tileSize - height) / 2));\n\n            item.setPosition(position, immediately);\n            item.setWidth(width, immediately);\n\n            if (layout === \'horizontal\') {\n                x += increment;\n            } else {\n                y += increment;\n            }\n        }\n        this.setAutoRefigureSizes(true);\n    },\n\n    // private\n    _figureSizes: function() {\n        var oldHomeBounds = this._homeBounds ? this._homeBounds.clone() : null;\n        var oldContentSize = this._contentSize ? this._contentSize.clone() : null;\n        var oldContentFactor = this._contentFactor || 0;\n\n        if (!this._items.length) {\n            this._homeBounds = new $.Rect(0, 0, 1, 1);\n            this._contentSize = new $.Point(1, 1);\n            this._contentFactor = 1;\n        } else {\n            var item = this._items[0];\n            var bounds = item.getBounds();\n            this._contentFactor = item.getContentSize().x / bounds.width;\n            var clippedBounds = item.getClippedBounds();\n            var left = clippedBounds.x;\n            var top = clippedBounds.y;\n            var right = clippedBounds.x + clippedBounds.width;\n            var bottom = clippedBounds.y + clippedBounds.height;\n            for (var i = 1; i < this._items.length; i++) {\n                item = this._items[i];\n                bounds = item.getBounds();\n                this._contentFactor = Math.max(this._contentFactor,\n                    item.getContentSize().x / bounds.width);\n                clippedBounds = item.getClippedBounds();\n                left = Math.min(left, clippedBounds.x);\n                top = Math.min(top, clippedBounds.y);\n                right = Math.max(right, clippedBounds.x + clippedBounds.width);\n                bottom = Math.max(bottom, clippedBounds.y + clippedBounds.height);\n            }\n\n            this._homeBounds = new $.Rect(left, top, right - left, bottom - top);\n            this._contentSize = new $.Point(\n                this._homeBounds.width * this._contentFactor,\n                this._homeBounds.height * this._contentFactor);\n        }\n\n        if (this._contentFactor !== oldContentFactor ||\n            !this._homeBounds.equals(oldHomeBounds) ||\n            !this._contentSize.equals(oldContentSize)) {\n            /**\n             * Raised when the home bounds or content factor change.\n             * @event metrics-change\n             * @memberOf OpenSeadragon.World\n             * @type {object}\n             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */\n            this.raiseEvent(\'metrics-change\', {});\n        }\n    },\n\n    // private\n    _raiseRemoveItem: function(item) {\n        /**\n         * Raised when an item is removed.\n         * @event remove-item\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item\'s underlying item.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */\n        this.raiseEvent( \'remove-item\', { item: item } );\n    }\n});\n\n}( OpenSeadragon ));\n\n//# sourceMappingURL=openseadragon.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L29wZW5zZWFkcmFnb24vYnVpbGQvb3BlbnNlYWRyYWdvbi9vcGVuc2VhZHJhZ29uLmpzPzdmYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLHNFQUFzRTtBQUN0RSxTQUFTLGdDQUFnQztBQUN6QztBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQSxTQUFTLHlDQUF5QztBQUNsRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBLGVBQWUsNEJBQTRCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxrREFBa0Q7QUFDakU7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxrREFBa0Q7QUFDakU7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxrREFBa0Q7QUFDakU7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtEQUFrRDtBQUNqRTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNEJBQTRCO0FBQzNDO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsMkNBQTJDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QiwyQ0FBMkM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNB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QSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxnREFBZ0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEy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QUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxvQ0FBb0M7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7O0FBRWIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw2Q0FBNkMsUUFBUTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FB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Q0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrQ0FBa0MsRUFBRSxTQUFTOztBQUUzRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7O0FBRXJDLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsNEJBQTRCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1QkFBdUI7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsV0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFD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d0JBQXdCLDBCQUEwQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLGdCQUFnQix5QkFBeUI7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRCxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNB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OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLCtCQUErQjs7QUFFL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsNkNBQTZDO0FBQzdDLDZDQUE2QztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkMsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixlQUFlO0FBQ3RDLDJCQUEyQixlQUFlOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsc0JBQXNCLHFCQUFxQjtBQUMzQyxzQkFBc0IseUJBQXlCO0FBQy9DLHNCQUFzQixtQkFBbUI7QUFDekMsc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixzQkFBc0IsbUJBQW1CO0FBQ3pDLHNCQUFzQix5QkFBeUI7QUFDL0Msc0JBQXNCLE9BQU87QUFDN0Isc0JBQXNCLE9BQU87QUFDN0I7QUFDQSwwREFBMEQsa0VBQWtFO0FBQzVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Qsa0JBQWtCLE1BQU07QUFDeEIsa0JBQWtCLHlCQUF5QjtBQUMzQyxrQkFBa0IsbUJBQW1CO0FBQ3JDLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVB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QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHdCQUF3QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLDBCQUEwQixvQkFBb0I7QUFDOUMsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixzQkFBc0Isb0JBQW9CO0FBQzFDLHNCQUFzQix5QkFBeUI7QUFDL0Msc0JBQXNCLFFBQVE7QUFDOUI7QUFDQSx5Q0FBeUMsYUFBYTtBQUN0RDtBQUNBLENBQUM7O0FBRUQsQ0FBQzs7QUFFRCIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vISBvcGVuc2VhZHJhZ29uIDIuMi4xXG4vLyEgQnVpbHQgb24gMjAxNi0wNy0wMVxuLy8hIEdpdCBjb21taXQ6IHYyLjIuMS0wLWJhYmRlZmRcbi8vISBodHRwOi8vb3BlbnNlYWRyYWdvbi5naXRodWIuaW9cbi8vISBMaWNlbnNlOiBodHRwOi8vb3BlbnNlYWRyYWdvbi5naXRodWIuaW8vbGljZW5zZS9cblxuLypcbiAqIE9wZW5TZWFkcmFnb25cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLypcbiAqIFBvcnRpb25zIG9mIHRoaXMgc291cmNlIGZpbGUgdGFrZW4gZnJvbSBqUXVlcnk6XG4gKlxuICogQ29weXJpZ2h0IDIwMTEgSm9obiBSZXNpZ1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gKiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbiAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qXG4gKiBQb3J0aW9ucyBvZiB0aGlzIHNvdXJjZSBmaWxlIHRha2VuIGZyb20gbWF0dHNuaWRlci5jb206XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDA2LTIwMTMgTWF0dCBTbmlkZXJcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLFxuICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuICogdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsXG4gKiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUXG4gKiBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1JcbiAqIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cblxuLyoqXG4gKiBAbmFtZXNwYWNlIE9wZW5TZWFkcmFnb25cbiAqIEB2ZXJzaW9uIG9wZW5zZWFkcmFnb24gMi4yLjFcbiAqIEBjbGFzc2Rlc2MgVGhlIHJvb3QgbmFtZXNwYWNlIGZvciBPcGVuU2VhZHJhZ29uLiAgQWxsIHV0aWxpdHkgbWV0aG9kc1xuICogYW5kIGNsYXNzZXMgYXJlIGRlZmluZWQgb24gb3IgYmVsb3cgdGhpcyBuYW1lc3BhY2UuXG4gKlxuICovXG5cblxuLy8gVHlwZWRlZnNcblxuIC8qKlxuICAqIEFsbCByZXF1aXJlZCBhbmQgb3B0aW9uYWwgc2V0dGluZ3MgZm9yIGluc3RhbnRpYXRpbmcgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gT3BlblNlYWRyYWdvbiBpbWFnZSB2aWV3ZXIuXG4gICpcbiAgKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBpZFxuICAqICAgICBJZCBvZiB0aGUgZWxlbWVudCB0byBhcHBlbmQgdGhlIHZpZXdlcidzIGNvbnRhaW5lciBlbGVtZW50IHRvLiBJZiBub3QgcHJvdmlkZWQsIHRoZSAnZWxlbWVudCcgcHJvcGVydHkgbXVzdCBiZSBwcm92aWRlZC5cbiAgKiAgICAgSWYgYm90aCB0aGUgZWxlbWVudCBhbmQgaWQgcHJvcGVydGllcyBhcmUgc3BlY2lmaWVkLCB0aGUgdmlld2VyIGlzIGFwcGVuZGVkIHRvIHRoZSBlbGVtZW50IHByb3ZpZGVkIGluIHRoZSBlbGVtZW50IHByb3BlcnR5LlxuICAqXG4gICogQHByb3BlcnR5IHtFbGVtZW50fSBlbGVtZW50XG4gICogICAgIFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0aGUgdmlld2VyJ3MgY29udGFpbmVyIGVsZW1lbnQgdG8uIElmIG5vdCBwcm92aWRlZCwgdGhlICdpZCcgcHJvcGVydHkgbXVzdCBiZSBwcm92aWRlZC5cbiAgKiAgICAgSWYgYm90aCB0aGUgZWxlbWVudCBhbmQgaWQgcHJvcGVydGllcyBhcmUgc3BlY2lmaWVkLCB0aGUgdmlld2VyIGlzIGFwcGVuZGVkIHRvIHRoZSBlbGVtZW50IHByb3ZpZGVkIGluIHRoZSBlbGVtZW50IHByb3BlcnR5LlxuICAqXG4gICogQHByb3BlcnR5IHtBcnJheXxTdHJpbmd8RnVuY3Rpb258T2JqZWN0fSBbdGlsZVNvdXJjZXM9bnVsbF1cbiAgKiAgICAgVGlsZSBzb3VyY2UocykgdG8gb3BlbiBpbml0aWFsbHkuIFRoaXMgaXMgYSBjb21wbGV4IHBhcmFtZXRlcjsgc2VlXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNvcGVufSBmb3IgZGV0YWlscy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdGFiSW5kZXg9MF1cbiAgKiAgICAgVGFiYmluZyBvcmRlciBpbmRleCB0byBhc3NpZ24gdG8gdGhlIHZpZXdlciBlbGVtZW50LiBQb3NpdGl2ZSB2YWx1ZXMgYXJlIHNlbGVjdGVkIGluIGluY3JlYXNpbmcgb3JkZXIuIFdoZW4gdGFiSW5kZXggaXMgMFxuICAqICAgICBzb3VyY2Ugb3JkZXIgaXMgdXNlZC4gQSBuZWdhdGl2ZSB2YWx1ZSBvbWl0cyB0aGUgdmlld2VyIGZyb20gdGhlIHRhYmJpbmcgb3JkZXIuXG4gICpcbiAgKiBAcHJvcGVydHkge0FycmF5fSBvdmVybGF5cyBBcnJheSBvZiBvYmplY3RzIGRlZmluaW5nIHBlcm1hbmVudCBvdmVybGF5cyBvZlxuICAqICAgICB0aGUgdmlld2VyLiBUaGUgb3ZlcmxheXMgYWRkZWQgdmlhIHRoaXMgb3B0aW9uIGFuZCBsYXRlciByZW1vdmVkIHdpdGhcbiAgKiAgICAge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3JlbW92ZU92ZXJsYXl9IHdpbGwgYmUgYWRkZWQgYmFjayB3aGVuIGEgbmV3XG4gICogICAgIGltYWdlIGlzIG9wZW5lZC5cbiAgKiAgICAgVG8gYWRkIG92ZXJsYXlzIHdoaWNoIGNhbiBiZSBkZWZpbml0aXZlbHkgcmVtb3ZlZCwgb25lIG11c3QgdXNlXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNhZGRPdmVybGF5fVxuICAqICAgICBJZiBkaXNwbGF5aW5nIGEgc2VxdWVuY2Ugb2YgaW1hZ2VzLCB0aGUgb3ZlcmxheXMgY2FuIGJlIGFzc29jaWF0ZWRcbiAgKiAgICAgd2l0aCBhIHNwZWNpZmljIHBhZ2UgYnkgcGFzc2luZyB0aGUgb3ZlcmxheXMgYXJyYXkgdG8gdGhlIHBhZ2Unc1xuICAqICAgICB0aWxlIHNvdXJjZSBjb25maWd1cmF0aW9uLlxuICAqICAgICBFeHBlY3RlZCBwcm9wZXJ0aWVzOlxuICAqICAgICAqIHgsIHksIChvciBweCwgcHkgZm9yIHBpeGVsIGNvb3JkaW5hdGVzKSB0byBkZWZpbmUgdGhlIGxvY2F0aW9uLlxuICAqICAgICAqIHdpZHRoLCBoZWlnaHQgaW4gcG9pbnQgaWYgdXNpbmcgeCx5IG9yIGluIHBpeGVscyBpZiB1c2luZyBweCxweS4gSWYgd2lkdGhcbiAgKiAgICAgICBhbmQgaGVpZ2h0IGFyZSBzcGVjaWZpZWQsIHRoZSBvdmVybGF5IHNpemUgaXMgYWRqdXN0ZWQgd2hlbiB6b29taW5nLFxuICAqICAgICAgIG90aGVyd2lzZSB0aGUgc2l6ZSBzdGF5cyB0aGUgc2l6ZSBvZiB0aGUgY29udGVudCAob3IgdGhlIHNpemUgZGVmaW5lZCBieSBDU1MpLlxuICAqICAgICAqIGNsYXNzTmFtZSB0byBhc3NvY2lhdGUgYSBjbGFzcyB0byB0aGUgb3ZlcmxheVxuICAqICAgICAqIGlkIHRvIHNldCB0aGUgb3ZlcmxheSBlbGVtZW50LiBJZiBhbiBlbGVtZW50IHdpdGggdGhpcyBpZCBhbHJlYWR5IGV4aXN0cyxcbiAgKiAgICAgICBpdCBpcyByZXVzZWQsIG90aGVyd2lzZSBpdCBpcyBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBhIG5ldyBlbGVtZW50IGlzXG4gICogICAgICAgY3JlYXRlZC5cbiAgKiAgICAgKiBwbGFjZW1lbnQgYSBzdHJpbmcgdG8gZGVmaW5lIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiB0byB0aGUgdmlld3BvcnQuXG4gICogICAgICAgT25seSB1c2VkIGlmIG5vIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHNwZWNpZmllZC4gRGVmYXVsdDogJ1RPUF9MRUZUJy5cbiAgKiAgICAgICBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBmb3IgcG9zc2libGUgdmFsdWVzLlxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IFt4bWxQYXRoPW51bGxdXG4gICogICAgIDxzdHJvbmc+REVQUkVDQVRFRDwvc3Ryb25nPi4gQSByZWxhdGl2ZSBwYXRoIHRvIGxvYWQgYSBEWkkgZmlsZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICogICAgIFByZWZlciB0aGUgbmV3ZXIgT3B0aW9ucy50aWxlU291cmNlcy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbcHJlZml4VXJsPScvaW1hZ2VzLyddXG4gICogICAgIFByZXBlbmRzIHRoZSBwcmVmaXhVcmwgdG8gbmF2SW1hZ2VzIHBhdGhzLCB3aGljaCBpcyB2ZXJ5IHVzZWZ1bFxuICAqICAgICBzaW5jZSB0aGUgZGVmYXVsdCBwYXRocyBhcmUgcmFyZWx5IHVzZWZ1bCBmb3IgcHJvZHVjdGlvblxuICAqICAgICBlbnZpcm9ubWVudHMuXG4gICpcbiAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uTmF2SW1hZ2VzfSBbbmF2SW1hZ2VzXVxuICAqICAgICBBbiBvYmplY3Qgd2l0aCBhIHByb3BlcnR5IGZvciBlYWNoIGJ1dHRvbiBvciBvdGhlciBidWlsdC1pbiBuYXZpZ2F0aW9uXG4gICogICAgIGNvbnRyb2wsIGVnIHRoZSBjdXJyZW50ICd6b29tSW4nLCAnem9vbU91dCcsICdob21lJywgYW5kICdmdWxscGFnZScuXG4gICogICAgIEVhY2ggb2YgdGhvc2UgaW4gdHVybiBwcm92aWRlcyBhbiBpbWFnZSBwYXRoIGZvciBlYWNoIHN0YXRlIG9mIHRoZSBidXR0b25cbiAgKiAgICAgb3IgbmF2aWdhdGlvbiBjb250cm9sLCBlZyAnUkVTVCcsICdHUk9VUCcsICdIT1ZFUicsICdQUkVTUycuIEZpbmFsbHkgdGhlXG4gICogICAgIGltYWdlIHBhdGhzLCBieSBkZWZhdWx0IGFzc3VtZSB0aGVyZSBpcyBhIGZvbGRlciBvbiB0aGUgc2VydmVycyByb290IHBhdGhcbiAgKiAgICAgY2FsbGVkICcvaW1hZ2VzJywgZWcgJy9pbWFnZXMvem9vbWluX3Jlc3QucG5nJy4gIElmIHlvdSBuZWVkIHRvIGFkanVzdFxuICAqICAgICB0aGVzZSBwYXRocywgcHJlZmVyIHNldHRpbmcgdGhlIG9wdGlvbi5wcmVmaXhVcmwgcmF0aGVyIHRoYW4gb3ZlcnJpZGluZ1xuICAqICAgICBldmVyeSBpbWFnZSBwYXRoIGRpcmVjdGx5IHRocm91Z2ggdGhpcyBzZXR0aW5nLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZGVidWdNb2RlPWZhbHNlXVxuICAqICAgICBUT0RPOiBwcm92aWRlIGFuIGluLXNjcmVlbiBwYW5lbCBwcm92aWRpbmcgZXZlbnQgZGV0YWlsIGZlZWRiYWNrLlxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IFtkZWJ1Z0dyaWRDb2xvcj0nIzQzN0FCMiddXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2JsZW5kVGltZT0wXVxuICAqICAgICBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIGFuaW1hdGlvbiBhcyBoaWdoZXIgb3IgbG93ZXIgbGV2ZWwgdGlsZXMgYXJlXG4gICogICAgIHJlcGxhY2luZyB0aGUgZXhpc3RpbmcgdGlsZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2Fsd2F5c0JsZW5kPWZhbHNlXVxuICAqICAgICBGb3JjZXMgdGhlIHRpbGUgdG8gYWx3YXlzIGJsZW5kLiAgQnkgZGVmYXVsdCB0aGUgdGlsZXMgc2tpcCBibGVuZGluZ1xuICAqICAgICB3aGVuIHRoZSBibGVuZFRpbWUgaXMgc3VycGFzc2VkIGFuZCB0aGUgY3VycmVudCBhbmltYXRpb24gZnJhbWUgd291bGRcbiAgKiAgICAgbm90IGNvbXBsZXRlIHRoZSBibGVuZC5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2F1dG9IaWRlQ29udHJvbHM9dHJ1ZV1cbiAgKiAgICAgSWYgdGhlIHVzZXIgc3RvcHMgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgdmlld3BvcnQsIGZhZGUgdGhlIG5hdmlnYXRpb25cbiAgKiAgICAgY29udHJvbHMuICBVc2VmdWwgZm9yIHByZXNlbnRhdGlvbiBzaW5jZSB0aGUgY29udHJvbHMgYXJlIGJ5IGRlZmF1bHRcbiAgKiAgICAgZmxvYXRlZCBvbiB0b3Agb2YgdGhlIGltYWdlIHRoZSB1c2VyIGlzIHZpZXdpbmcuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtpbW1lZGlhdGVSZW5kZXI9ZmFsc2VdXG4gICogICAgIFJlbmRlciB0aGUgYmVzdCBjbG9zZXN0IGxldmVsIGZpcnN0LCBpZ25vcmluZyB0aGUgbG93ZXJpbmcgbGV2ZWxzIHdoaWNoXG4gICogICAgIHByb3ZpZGUgdGhlIGVmZmVjdCBvZiB2ZXJ5IGJsdXJyeSB0byBzaGFycC4gSXQgaXMgcmVjb21tZW5kZWQgdG8gY2hhbmdlXG4gICogICAgIHNldHRpbmcgdG8gdHJ1ZSBmb3IgbW9iaWxlIGRldmljZXMuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2RlZmF1bHRab29tTGV2ZWw9MF1cbiAgKiAgICAgWm9vbSBsZXZlbCB0byB1c2Ugd2hlbiBpbWFnZSBpcyBmaXJzdCBvcGVuZWQgb3IgdGhlIGhvbWUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICogICAgIElmIDAsIGFkanVzdHMgdG8gZml0IHZpZXdlci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbb3BhY2l0eT0xXVxuICAqICAgICBEZWZhdWx0IG9wYWNpdHkgb2YgdGhlIHRpbGVkIGltYWdlcyAoMT1vcGFxdWUsIDA9dHJhbnNwYXJlbnQpXG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gW2NvbXBvc2l0ZU9wZXJhdGlvbj1udWxsXVxuICAqICAgICBWYWxpZCB2YWx1ZXMgYXJlICdzb3VyY2Utb3ZlcicsICdzb3VyY2UtYXRvcCcsICdzb3VyY2UtaW4nLCAnc291cmNlLW91dCcsXG4gICogICAgICdkZXN0aW5hdGlvbi1vdmVyJywgJ2Rlc3RpbmF0aW9uLWF0b3AnLCAnZGVzdGluYXRpb24taW4nLFxuICAqICAgICAnZGVzdGluYXRpb24tb3V0JywgJ2xpZ2h0ZXInLCAnY29weScgb3IgJ3hvcidcbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfENhbnZhc0dyYWRpZW50fENhbnZhc1BhdHRlcm58RnVuY3Rpb259IFtwbGFjZWhvbGRlckZpbGxTdHlsZT1udWxsXVxuICAqICAgICBEcmF3cyBhIGNvbG9yZWQgcmVjdGFuZ2xlIGJlaGluZCB0aGUgdGlsZSBpZiBpdCBpcyBub3QgbG9hZGVkIHlldC5cbiAgKiAgICAgWW91IGNhbiBwYXNzIGEgQ1NTIGNvbG9yIHZhbHVlIGxpa2UgXCIjRkY4ODAwXCIuXG4gICogICAgIFdoZW4gcGFzc2luZyBhIGZ1bmN0aW9uIHRoZSB0aWxlZEltYWdlIGFuZCBjYW52YXMgY29udGV4dCBhcmUgYXZhaWxhYmxlIGFzIGFyZ3VtZW50IHdoaWNoIGlzIHVzZWZ1bCB3aGVuIHlvdSBkcmF3IGEgZ3JhZGllbnQgb3IgcGF0dGVybi5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZGVncmVlcz0wXVxuICAqICAgICBJbml0aWFsIHJvdGF0aW9uLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFttaW5ab29tTGV2ZWw9bnVsbF1cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWF4Wm9vbUxldmVsPW51bGxdXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtob21lRmlsbHNWaWV3ZXI9ZmFsc2VdXG4gICogICAgIE1ha2UgdGhlICdob21lJyBidXR0b24gZmlsbCB0aGUgdmlld2VyIGFuZCBjbGlwIHRoZSBpbWFnZSwgaW5zdGVhZFxuICAqICAgICBvZiBmaXR0aW5nIHRoZSBpbWFnZSB0byB0aGUgdmlld2VyIGFuZCBsZXR0ZXJib3hpbmcuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtwYW5Ib3Jpem9udGFsPXRydWVdXG4gICogICAgIEFsbG93IGhvcml6b250YWwgcGFuLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbcGFuVmVydGljYWw9dHJ1ZV1cbiAgKiAgICAgQWxsb3cgdmVydGljYWwgcGFuLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbY29uc3RyYWluRHVyaW5nUGFuPWZhbHNlXVxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbd3JhcEhvcml6b250YWw9ZmFsc2VdXG4gICogICAgIFNldCB0byB0cnVlIHRvIGZvcmNlIHRoZSBpbWFnZSB0byB3cmFwIGhvcml6b250YWxseSB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuICAqICAgICBVc2VmdWwgZm9yIG1hcHMgb3IgaW1hZ2VzIHJlcHJlc2VudGluZyB0aGUgc3VyZmFjZSBvZiBhIHNwaGVyZSBvciBjeWxpbmRlci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3dyYXBWZXJ0aWNhbD1mYWxzZV1cbiAgKiAgICAgU2V0IHRvIHRydWUgdG8gZm9yY2UgdGhlIGltYWdlIHRvIHdyYXAgdmVydGljYWxseSB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuICAqICAgICBVc2VmdWwgZm9yIG1hcHMgb3IgaW1hZ2VzIHJlcHJlc2VudGluZyB0aGUgc3VyZmFjZSBvZiBhIHNwaGVyZSBvciBjeWxpbmRlci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWluWm9vbUltYWdlUmF0aW89MC45XVxuICAqICAgICBUaGUgbWluaW11bSBwZXJjZW50YWdlICggZXhwcmVzc2VkIGFzIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSApIG9mXG4gICogICAgIHRoZSB2aWV3cG9ydCBoZWlnaHQgb3Igd2lkdGggYXQgd2hpY2ggdGhlIHpvb20gb3V0IHdpbGwgYmUgY29uc3RyYWluZWQuXG4gICogICAgIFNldHRpbmcgaXQgdG8gMCwgZm9yIGV4YW1wbGUgd2lsbCBhbGxvdyB5b3UgdG8gem9vbSBvdXQgaW5maW5pdHkuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW21heFpvb21QaXhlbFJhdGlvPTEuMV1cbiAgKiAgICAgVGhlIG1heGltdW0gcmF0aW8gdG8gYWxsb3cgYSB6b29tLWluIHRvIGFmZmVjdCB0aGUgaGlnaGVzdCBsZXZlbCBwaXhlbFxuICAqICAgICByYXRpby4gVGhpcyBjYW4gYmUgc2V0IHRvIEluZmluaXR5IHRvIGFsbG93ICdpbmZpbml0ZScgem9vbWluZyBpbnRvIHRoZVxuICAqICAgICBpbWFnZSB0aG91Z2ggaXQgaXMgbGVzcyBlZmZlY3RpdmUgdmlzdWFsbHkgaWYgdGhlIEhUTUw1IENhbnZhcyBpcyBub3RcbiAgKiAgICAgYXZhaWxibGUgb24gdGhlIHZpZXdpbmcgZGV2aWNlLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzbW9vdGhUaWxlRWRnZXNNaW5ab29tPTEuMV1cbiAgKiAgICAgQSB6b29tIHBlcmNlbnRhZ2UgKCB3aGVyZSAxIGlzIDEwMCUgKSBvZiB0aGUgaGlnaGVzdCByZXNvbHV0aW9uIGxldmVsLlxuICAqICAgICBXaGVuIHpvb21lZCBpbiBiZXlvbmQgdGhpcyB2YWx1ZSBhbHRlcm5hdGl2ZSBjb21wb3NpdGluZyB3aWxsIGJlIHVzZWQgdG9cbiAgKiAgICAgc21vb3RoIG91dCB0aGUgZWRnZXMgYmV0d2VlbiB0aWxlcy4gVGhpcyB3aWxsIGhhdmUgYSBwZXJmb3JtYW5jZSBpbXBhY3QuXG4gICogICAgIENhbiBiZSBzZXQgdG8gSW5maW5pdHkgdG8gdHVybiBpdCBvZmYuXG4gICogICAgIE5vdGU6IFRoaXMgc2V0dGluZyBpcyBpZ25vcmVkIG9uIGlPUyBkZXZpY2VzIGR1ZSB0byBhIGtub3duIGJ1ZyAoU2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vb3BlbnNlYWRyYWdvbi9vcGVuc2VhZHJhZ29uL2lzc3Vlcy85NTJ9KVxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbaU9TRGV2aWNlPT9dXG4gICogICAgIFRydWUgaWYgcnVubmluZyBvbiBhbiBpT1MgZGV2aWNlLCBmYWxzZSBvdGhlcndpc2UuXG4gICogICAgIFVzZWQgdG8gZGlzYWJsZSBjZXJ0YWluIGZlYXR1cmVzIHRoYXQgYmVoYXZlIGRpZmZlcmVudGx5IG9uIGlPUyBkZXZpY2VzLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbYXV0b1Jlc2l6ZT10cnVlXVxuICAqICAgICBTZXQgdG8gZmFsc2UgdG8gcHJldmVudCBwb2xsaW5nIGZvciB2aWV3ZXIgc2l6ZSBjaGFuZ2VzLiBVc2VmdWwgZm9yIHByb3ZpZGluZyBjdXN0b20gcmVzaXplIGJlaGF2aW9yLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbcHJlc2VydmVJbWFnZVNpemVPblJlc2l6ZT1mYWxzZV1cbiAgKiAgICAgU2V0IHRvIHRydWUgdG8gaGF2ZSB0aGUgaW1hZ2Ugc2l6ZSBwcmVzZXJ2ZWQgd2hlbiB0aGUgdmlld2VyIGlzIHJlc2l6ZWQuIFRoaXMgcmVxdWlyZXMgYXV0b1Jlc2l6ZT10cnVlIChkZWZhdWx0KS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWluU2Nyb2xsRGVsdGFUaW1lPTUwXVxuICAqICAgICBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gY2FudmFzLXNjcm9sbCBldmVudHMuIFRoaXMgdmFsdWUgaGVscHMgbm9ybWFsaXplIHRoZSByYXRlIG9mIGNhbnZhcy1zY3JvbGxcbiAgKiAgICAgZXZlbnRzIGJldHdlZW4gZGlmZmVyZW50IGRldmljZXMsIGNhdXNpbmcgdGhlIGZhc3RlciBkZXZpY2VzIHRvIHNsb3cgZG93biBlbm91Z2ggdG8gbWFrZSB0aGUgem9vbSBjb250cm9sXG4gICogICAgIG1vcmUgbWFuYWdlYWJsZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGl4ZWxzUGVyV2hlZWxMaW5lPTQwXVxuICAqICAgICBGb3IgcGl4ZWwtcmVzb2x1dGlvbiBzY3JvbGxpbmcgZGV2aWNlcywgdGhlIG51bWJlciBvZiBwaXhlbHMgZXF1YWwgdG8gb25lIHNjcm9sbCBsaW5lLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFt2aXNpYmlsaXR5UmF0aW89MC41XVxuICAqICAgICBUaGUgcGVyY2VudGFnZSAoIGFzIGEgbnVtYmVyIGZyb20gMCB0byAxICkgb2YgdGhlIHNvdXJjZSBpbWFnZSB3aGljaFxuICAqICAgICBtdXN0IGJlIGtlcHQgd2l0aGluIHRoZSB2aWV3cG9ydC4gIElmIHRoZSBpbWFnZSBpcyBkcmFnZ2VkIGJleW9uZCB0aGF0XG4gICogICAgIGxpbWl0LCBpdCB3aWxsICdib3VuY2UnIGJhY2sgdW50aWwgdGhlIG1pbmltdW0gdmlzaWJpbGl0eSByYXRpbyBpc1xuICAqICAgICBhY2hpZXZlZC4gIFNldHRpbmcgdGhpcyB0byAwIGFuZCB3cmFwSG9yaXpvbnRhbCAoIG9yIHdyYXBWZXJ0aWNhbCApIHRvXG4gICogICAgIHRydWUgd2lsbCBwcm92aWRlIHRoZSBlZmZlY3Qgb2YgYW4gaW5maW5pdGVseSBzY3JvbGxpbmcgdmlld3BvcnQuXG4gICpcbiAgKiBAcHJvcGVydHkge09iamVjdH0gW3ZpZXdwb3J0TWFyZ2lucz17fV1cbiAgKiAgICAgUHVzaGVzIHRoZSBcImhvbWVcIiByZWdpb24gaW4gZnJvbSB0aGUgc2lkZXMgYnkgdGhlIHNwZWNpZmllZCBhbW91bnRzLlxuICAqICAgICBQb3NzaWJsZSBzdWJwcm9wZXJ0aWVzIChOdW1iZXJzLCBpbiBzY3JlZW4gY29vcmRpbmF0ZXMpOiBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20uXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2ltYWdlTG9hZGVyTGltaXQ9MF1cbiAgKiAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGltYWdlIHJlcXVlc3RzIHRvIG1ha2UgY29uY3VycmVudGx5LiBCeSBkZWZhdWx0XG4gICogICAgIGl0IGlzIHNldCB0byAwIGFsbG93aW5nIHRoZSBicm93c2VyIHRvIG1ha2UgdGhlIG1heGltdW0gbnVtYmVyIG9mXG4gICogICAgIGltYWdlIHJlcXVlc3RzIGluIHBhcmFsbGVsIGFzIGFsbG93ZWQgYnkgdGhlIGJyb3dzZXJzIHBvbGljeS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbY2xpY2tUaW1lVGhyZXNob2xkPTMwMF1cbiAgKiAgICAgIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHdpdGhpbiB3aGljaCBhIHBvaW50ZXIgZG93bi11cCBldmVudCBjb21iaW5hdGlvblxuICAqICAgICAgd2lsbCBiZSB0cmVhdGVkIGFzIGEgY2xpY2sgZ2VzdHVyZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbY2xpY2tEaXN0VGhyZXNob2xkPTVdXG4gICogICAgICBUaGUgbWF4aW11bSBkaXN0YW5jZSBhbGxvd2VkIGJldHdlZW4gYSBwb2ludGVyIGRvd24gZXZlbnQgYW5kIGEgcG9pbnRlciB1cCBldmVudFxuICAqICAgICAgdG8gYmUgdHJlYXRlZCBhcyBhIGNsaWNrIGdlc3R1cmUuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2RibENsaWNrVGltZVRocmVzaG9sZD0zMDBdXG4gICogICAgICBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB3aXRoaW4gd2hpY2ggdHdvIHBvaW50ZXIgZG93bi11cCBldmVudCBjb21iaW5hdGlvbnNcbiAgKiAgICAgIHdpbGwgYmUgdHJlYXRlZCBhcyBhIGRvdWJsZS1jbGljayBnZXN0dXJlLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtkYmxDbGlja0Rpc3RUaHJlc2hvbGQ9MjBdXG4gICogICAgICBUaGUgbWF4aW11bSBkaXN0YW5jZSBhbGxvd2VkIGJldHdlZW4gdHdvIHBvaW50ZXIgY2xpY2sgZXZlbnRzXG4gICogICAgICB0byBiZSB0cmVhdGVkIGFzIGEgZG91YmxlLWNsaWNrIGdlc3R1cmUuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW3NwcmluZ1N0aWZmbmVzcz02LjVdXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2FuaW1hdGlvblRpbWU9MS4yXVxuICAqICAgICBTcGVjaWZpZXMgdGhlIGFuaW1hdGlvbiBkdXJhdGlvbiBwZXIgZWFjaCB7QGxpbmsgT3BlblNlYWRyYWdvbi5TcHJpbmd9XG4gICogICAgIHdoaWNoIG9jY3VyIHdoZW4gdGhlIGltYWdlIGlzIGRyYWdnZWQgb3Igem9vbWVkLlxuICAqXG4gICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLkdlc3R1cmVTZXR0aW5nc30gW2dlc3R1cmVTZXR0aW5nc01vdXNlXVxuICAqICAgICBTZXR0aW5ncyBmb3IgZ2VzdHVyZXMgZ2VuZXJhdGVkIGJ5IGEgbW91c2UgcG9pbnRlciBkZXZpY2UuIChTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uR2VzdHVyZVNldHRpbmdzfSlcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NNb3VzZS5zY3JvbGxUb1pvb209dHJ1ZV0gLSBab29tIG9uIHNjcm9sbCBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzTW91c2UuY2xpY2tUb1pvb209dHJ1ZV0gLSBab29tIG9uIGNsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NNb3VzZS5kYmxDbGlja1RvWm9vbT1mYWxzZV0gLSBab29tIG9uIGRvdWJsZS1jbGljayBnZXN0dXJlLiBOb3RlOiBJZiBzZXQgdG8gdHJ1ZVxuICAqICAgICB0aGVuIGNsaWNrVG9ab29tIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgdG8gcHJldmVudCBtdWx0aXBsZSB6b29tcy5cbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NNb3VzZS5waW5jaFRvWm9vbT1mYWxzZV0gLSBab29tIG9uIHBpbmNoIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NNb3VzZS5mbGlja0VuYWJsZWQ9ZmFsc2VdIC0gRW5hYmxlIGZsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2dlc3R1cmVTZXR0aW5nc01vdXNlLmZsaWNrTWluU3BlZWQ9MTIwXSAtIElmIGZsaWNrRW5hYmxlZCBpcyB0cnVlLCB0aGUgbWluaW11bSBzcGVlZCB0byBpbml0aWF0ZSBhIGZsaWNrIGdlc3R1cmUgKHBpeGVscy1wZXItc2Vjb25kKVxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2VzdHVyZVNldHRpbmdzTW91c2UuZmxpY2tNb21lbnR1bT0wLjI1XSAtIElmIGZsaWNrRW5hYmxlZCBpcyB0cnVlLCB0aGUgbW9tZW50dW0gZmFjdG9yIGZvciB0aGUgZmxpY2sgZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc01vdXNlLnBpbmNoUm90YXRlPWZhbHNlXSAtIElmIHBpbmNoUm90YXRlIGlzIHRydWUsIHRoZSB1c2VyIHdpbGwgaGF2ZSB0aGUgYWJpbGl0eSB0byByb3RhdGUgdGhlIGltYWdlIHVzaW5nIHRoZWlyIGZpbmdlcnMuXG4gICpcbiAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uR2VzdHVyZVNldHRpbmdzfSBbZ2VzdHVyZVNldHRpbmdzVG91Y2hdXG4gICogICAgIFNldHRpbmdzIGZvciBnZXN0dXJlcyBnZW5lcmF0ZWQgYnkgYSB0b3VjaCBwb2ludGVyIGRldmljZS4gKFNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5HZXN0dXJlU2V0dGluZ3N9KVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1RvdWNoLnNjcm9sbFRvWm9vbT1mYWxzZV0gLSBab29tIG9uIHNjcm9sbCBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzVG91Y2guY2xpY2tUb1pvb209ZmFsc2VdIC0gWm9vbSBvbiBjbGljayBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzVG91Y2guZGJsQ2xpY2tUb1pvb209dHJ1ZV0gLSBab29tIG9uIGRvdWJsZS1jbGljayBnZXN0dXJlLiBOb3RlOiBJZiBzZXQgdG8gdHJ1ZVxuICAqICAgICB0aGVuIGNsaWNrVG9ab29tIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgdG8gcHJldmVudCBtdWx0aXBsZSB6b29tcy5cbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NUb3VjaC5waW5jaFRvWm9vbT10cnVlXSAtIFpvb20gb24gcGluY2ggZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1RvdWNoLmZsaWNrRW5hYmxlZD10cnVlXSAtIEVuYWJsZSBmbGljayBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnZXN0dXJlU2V0dGluZ3NUb3VjaC5mbGlja01pblNwZWVkPTEyMF0gLSBJZiBmbGlja0VuYWJsZWQgaXMgdHJ1ZSwgdGhlIG1pbmltdW0gc3BlZWQgdG8gaW5pdGlhdGUgYSBmbGljayBnZXN0dXJlIChwaXhlbHMtcGVyLXNlY29uZClcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2dlc3R1cmVTZXR0aW5nc1RvdWNoLmZsaWNrTW9tZW50dW09MC4yNV0gLSBJZiBmbGlja0VuYWJsZWQgaXMgdHJ1ZSwgdGhlIG1vbWVudHVtIGZhY3RvciBmb3IgdGhlIGZsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NUb3VjaC5waW5jaFJvdGF0ZT1mYWxzZV0gLSBJZiBwaW5jaFJvdGF0ZSBpcyB0cnVlLCB0aGUgdXNlciB3aWxsIGhhdmUgdGhlIGFiaWxpdHkgdG8gcm90YXRlIHRoZSBpbWFnZSB1c2luZyB0aGVpciBmaW5nZXJzLlxuICAqXG4gICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLkdlc3R1cmVTZXR0aW5nc30gW2dlc3R1cmVTZXR0aW5nc1Blbl1cbiAgKiAgICAgU2V0dGluZ3MgZm9yIGdlc3R1cmVzIGdlbmVyYXRlZCBieSBhIHBlbiBwb2ludGVyIGRldmljZS4gKFNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5HZXN0dXJlU2V0dGluZ3N9KVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1Blbi5zY3JvbGxUb1pvb209ZmFsc2VdIC0gWm9vbSBvbiBzY3JvbGwgZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1Blbi5jbGlja1RvWm9vbT10cnVlXSAtIFpvb20gb24gY2xpY2sgZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1Blbi5kYmxDbGlja1RvWm9vbT1mYWxzZV0gLSBab29tIG9uIGRvdWJsZS1jbGljayBnZXN0dXJlLiBOb3RlOiBJZiBzZXQgdG8gdHJ1ZVxuICAqICAgICB0aGVuIGNsaWNrVG9ab29tIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgdG8gcHJldmVudCBtdWx0aXBsZSB6b29tcy5cbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NQZW4ucGluY2hUb1pvb209ZmFsc2VdIC0gWm9vbSBvbiBwaW5jaCBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzUGVuLmZsaWNrRW5hYmxlZD1mYWxzZV0gLSBFbmFibGUgZmxpY2sgZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2VzdHVyZVNldHRpbmdzUGVuLmZsaWNrTWluU3BlZWQ9MTIwXSAtIElmIGZsaWNrRW5hYmxlZCBpcyB0cnVlLCB0aGUgbWluaW11bSBzcGVlZCB0byBpbml0aWF0ZSBhIGZsaWNrIGdlc3R1cmUgKHBpeGVscy1wZXItc2Vjb25kKVxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2VzdHVyZVNldHRpbmdzUGVuLmZsaWNrTW9tZW50dW09MC4yNV0gLSBJZiBmbGlja0VuYWJsZWQgaXMgdHJ1ZSwgdGhlIG1vbWVudHVtIGZhY3RvciBmb3IgdGhlIGZsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NQZW4ucGluY2hSb3RhdGU9ZmFsc2VdIC0gSWYgcGluY2hSb3RhdGUgaXMgdHJ1ZSwgdGhlIHVzZXIgd2lsbCBoYXZlIHRoZSBhYmlsaXR5IHRvIHJvdGF0ZSB0aGUgaW1hZ2UgdXNpbmcgdGhlaXIgZmluZ2Vycy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5HZXN0dXJlU2V0dGluZ3N9IFtnZXN0dXJlU2V0dGluZ3NVbmtub3duXVxuICAqICAgICBTZXR0aW5ncyBmb3IgZ2VzdHVyZXMgZ2VuZXJhdGVkIGJ5IHVua25vd24gcG9pbnRlciBkZXZpY2VzLiAoU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLkdlc3R1cmVTZXR0aW5nc30pXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzVW5rbm93bi5zY3JvbGxUb1pvb209dHJ1ZV0gLSBab29tIG9uIHNjcm9sbCBnZXN0dXJlXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzVW5rbm93bi5jbGlja1RvWm9vbT1mYWxzZV0gLSBab29tIG9uIGNsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NVbmtub3duLmRibENsaWNrVG9ab29tPXRydWVdIC0gWm9vbSBvbiBkb3VibGUtY2xpY2sgZ2VzdHVyZS4gTm90ZTogSWYgc2V0IHRvIHRydWVcbiAgKiAgICAgdGhlbiBjbGlja1RvWm9vbSBzaG91bGQgYmUgc2V0IHRvIGZhbHNlIHRvIHByZXZlbnQgbXVsdGlwbGUgem9vbXMuXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbZ2VzdHVyZVNldHRpbmdzVW5rbm93bi5waW5jaFRvWm9vbT10cnVlXSAtIFpvb20gb24gcGluY2ggZ2VzdHVyZVxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2dlc3R1cmVTZXR0aW5nc1Vua25vd24uZmxpY2tFbmFibGVkPXRydWVdIC0gRW5hYmxlIGZsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2dlc3R1cmVTZXR0aW5nc1Vua25vd24uZmxpY2tNaW5TcGVlZD0xMjBdIC0gSWYgZmxpY2tFbmFibGVkIGlzIHRydWUsIHRoZSBtaW5pbXVtIHNwZWVkIHRvIGluaXRpYXRlIGEgZmxpY2sgZ2VzdHVyZSAocGl4ZWxzLXBlci1zZWNvbmQpXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnZXN0dXJlU2V0dGluZ3NVbmtub3duLmZsaWNrTW9tZW50dW09MC4yNV0gLSBJZiBmbGlja0VuYWJsZWQgaXMgdHJ1ZSwgdGhlIG1vbWVudHVtIGZhY3RvciBmb3IgdGhlIGZsaWNrIGdlc3R1cmVcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtnZXN0dXJlU2V0dGluZ3NVbmtub3duLnBpbmNoUm90YXRlPWZhbHNlXSAtIElmIHBpbmNoUm90YXRlIGlzIHRydWUsIHRoZSB1c2VyIHdpbGwgaGF2ZSB0aGUgYWJpbGl0eSB0byByb3RhdGUgdGhlIGltYWdlIHVzaW5nIHRoZWlyIGZpbmdlcnMuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW3pvb21QZXJDbGljaz0yLjBdXG4gICogICAgIFRoZSBcInpvb20gZGlzdGFuY2VcIiBwZXIgbW91c2UgY2xpY2sgb3IgdG91Y2ggdGFwLiA8ZW0+PHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBTZXR0aW5nIHRoaXMgdG8gMS4wIGVmZmVjdGl2ZWx5IGRpc2FibGVzIHRoZSBjbGljay10by16b29tIGZlYXR1cmUgKGFsc28gc2VlIGdlc3R1cmVTZXR0aW5nc1tNb3VzZXxUb3VjaHxQZW5dLmNsaWNrVG9ab29tL2RibENsaWNrVG9ab29tKS48L2VtPlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFt6b29tUGVyU2Nyb2xsPTEuMl1cbiAgKiAgICAgVGhlIFwiem9vbSBkaXN0YW5jZVwiIHBlciBtb3VzZSBzY3JvbGwgb3IgdG91Y2ggcGluY2guIDxlbT48c3Ryb25nPk5vdGU6PC9zdHJvbmc+IFNldHRpbmcgdGhpcyB0byAxLjAgZWZmZWN0aXZlbHkgZGlzYWJsZXMgdGhlIG1vdXNlLXdoZWVsIHpvb20gZmVhdHVyZSAoYWxzbyBzZWUgZ2VzdHVyZVNldHRpbmdzW01vdXNlfFRvdWNofFBlbl0uc2Nyb2xsVG9ab29tfSkuPC9lbT5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbem9vbVBlclNlY29uZD0xLjBdXG4gICogICAgIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byBhbmltYXRlIGEgc2luZ2xlIHpvb20gZXZlbnQgb3Zlci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3Nob3dOYXZpZ2F0b3I9ZmFsc2VdXG4gICogICAgIFNldCB0byB0cnVlIHRvIG1ha2UgdGhlIG5hdmlnYXRvciBtaW5pbWFwIGFwcGVhci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbbmF2aWdhdG9ySWQ9bmF2aWdhdG9yLUdFTkVSQVRFRCBEQVRFXVxuICAqICAgICBUaGUgSUQgb2YgYSBkaXYgdG8gaG9sZCB0aGUgbmF2aWdhdG9yIG1pbmltYXAuXG4gICogICAgIElmIGFuIElEIGlzIHNwZWNpZmllZCwgdGhlIG5hdmlnYXRvclBvc2l0aW9uLCBuYXZpZ2F0b3JTaXplUmF0aW8sIG5hdmlnYXRvck1haW50YWluU2l6ZVJhdGlvLCBuYXZpZ2F0b3JbVG9wfExlZnR8SGVpZ2h0fFdpZHRoXSBhbmQgbmF2aWdhdG9yQXV0b0ZhZGUgb3B0aW9ucyB3aWxsIGJlIGlnbm9yZWQuXG4gICogICAgIElmIGFuIElEIGlzIG5vdCBzcGVjaWZpZWQsIGEgZGl2IGVsZW1lbnQgd2lsbCBiZSBnZW5lcmF0ZWQgYW5kIHBsYWNlZCBvbiB0b3Agb2YgdGhlIG1haW4gaW1hZ2UuXG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gW25hdmlnYXRvclBvc2l0aW9uPSdUT1BfUklHSFQnXVxuICAqICAgICBWYWxpZCB2YWx1ZXMgYXJlICdUT1BfTEVGVCcsICdUT1BfUklHSFQnLCAnQk9UVE9NX0xFRlQnLCAnQk9UVE9NX1JJR0hUJywgb3IgJ0FCU09MVVRFJy48YnI+XG4gICogICAgIElmICdBQlNPTFVURScgaXMgc3BlY2lmaWVkLCB0aGVuIG5hdmlnYXRvcltUb3B8TGVmdHxIZWlnaHR8V2lkdGhdIGRldGVybWluZXMgdGhlIHNpemUgYW5kIHBvc2l0aW9uIG9mIHRoZSBuYXZpZ2F0b3IgbWluaW1hcCBpbiB0aGUgdmlld2VyLCBhbmQgbmF2aWdhdG9yU2l6ZVJhdGlvIGFuZCBuYXZpZ2F0b3JNYWludGFpblNpemVSYXRpbyBhcmUgaWdub3JlZC48YnI+XG4gICogICAgIEZvciAnVE9QX0xFRlQnLCAnVE9QX1JJR0hUJywgJ0JPVFRPTV9MRUZUJywgYW5kICdCT1RUT01fUklHSFQnLCB0aGUgbmF2aWdhdG9yU2l6ZVJhdGlvIG9yIG5hdmlnYXRvcltIZWlnaHR8V2lkdGhdIHZhbHVlcyBkZXRlcm1pbmUgdGhlIHNpemUgb2YgdGhlIG5hdmlnYXRvciBtaW5pbWFwLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtuYXZpZ2F0b3JTaXplUmF0aW89MC4yXVxuICAqICAgICBSYXRpbyBvZiBuYXZpZ2F0b3Igc2l6ZSB0byB2aWV3ZXIgc2l6ZS4gSWdub3JlZCBpZiBuYXZpZ2F0b3JbSGVpZ2h0fFdpZHRoXSBhcmUgc3BlY2lmaWVkLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbbmF2aWdhdG9yTWFpbnRhaW5TaXplUmF0aW89ZmFsc2VdXG4gICogICAgIElmIHRydWUsIHRoZSBuYXZpZ2F0b3IgbWluaW1hcCBpcyByZXNpemVkICh1c2luZyBuYXZpZ2F0b3JTaXplUmF0aW8pIHdoZW4gdGhlIHZpZXdlciBzaXplIGNoYW5nZXMuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcnxTdHJpbmd9IFtuYXZpZ2F0b3JUb3A9bnVsbF1cbiAgKiAgICAgU3BlY2lmaWVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgbmF2aWdhdG9yIG1pbmltYXAgKHNlZSBuYXZpZ2F0b3JQb3NpdGlvbikuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcnxTdHJpbmd9IFtuYXZpZ2F0b3JMZWZ0PW51bGxdXG4gICogICAgIFNwZWNpZmllcyB0aGUgbG9jYXRpb24gb2YgdGhlIG5hdmlnYXRvciBtaW5pbWFwIChzZWUgbmF2aWdhdG9yUG9zaXRpb24pLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ8U3RyaW5nfSBbbmF2aWdhdG9ySGVpZ2h0PW51bGxdXG4gICogICAgIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgbmF2aWdhdG9yIG1pbmltYXAgKHNlZSBuYXZpZ2F0b3JQb3NpdGlvbikuXG4gICogICAgIElmIHNwZWNpZmllZCwgbmF2aWdhdG9yU2l6ZVJhdGlvIGFuZCBuYXZpZ2F0b3JNYWludGFpblNpemVSYXRpbyBhcmUgaWdub3JlZC5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfFN0cmluZ30gW25hdmlnYXRvcldpZHRoPW51bGxdXG4gICogICAgIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgbmF2aWdhdG9yIG1pbmltYXAgKHNlZSBuYXZpZ2F0b3JQb3NpdGlvbikuXG4gICogICAgIElmIHNwZWNpZmllZCwgbmF2aWdhdG9yU2l6ZVJhdGlvIGFuZCBuYXZpZ2F0b3JNYWludGFpblNpemVSYXRpbyBhcmUgaWdub3JlZC5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW25hdmlnYXRvckF1dG9SZXNpemU9dHJ1ZV1cbiAgKiAgICAgU2V0IHRvIGZhbHNlIHRvIHByZXZlbnQgcG9sbGluZyBmb3IgbmF2aWdhdG9yIHNpemUgY2hhbmdlcy4gVXNlZnVsIGZvciBwcm92aWRpbmcgY3VzdG9tIHJlc2l6ZSBiZWhhdmlvci5cbiAgKiAgICAgU2V0dGluZyB0byBmYWxzZSBjYW4gYWxzbyBpbXByb3ZlIHBlcmZvcm1hbmNlIHdoZW4gdGhlIG5hdmlnYXRvciBpcyBjb25maWd1cmVkIHRvIGEgZml4ZWQgc2l6ZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW25hdmlnYXRvckF1dG9GYWRlPXRydWVdXG4gICogICAgIElmIHRoZSB1c2VyIHN0b3BzIGludGVyYWN0aW5nIHdpdGggdGhlIHZpZXdwb3J0LCBmYWRlIHRoZSBuYXZpZ2F0b3IgbWluaW1hcC5cbiAgKiAgICAgU2V0dGluZyB0byBmYWxzZSB3aWxsIG1ha2UgdGhlIG5hdmlnYXRvciBtaW5pbWFwIGFsd2F5cyB2aXNpYmxlLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbbmF2aWdhdG9yUm90YXRlPXRydWVdXG4gICogICAgIElmIHRydWUsIHRoZSBuYXZpZ2F0b3Igd2lsbCBiZSByb3RhdGVkIHRvZ2V0aGVyIHdpdGggdGhlIHZpZXdlci5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbY29udHJvbHNGYWRlRGVsYXk9MjAwMF1cbiAgKiAgICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBvbmNlIHRoZSB1c2VyIGhhcyBzdG9wcGVkIGludGVyYWN0aW5nXG4gICogICAgIHdpdGggdGhlIGludGVyZmFjZSBiZWZvcmUgYmVnaW5pbmcgdG8gZmFkZSB0aGUgY29udHJvbHMuIEFzc3VtZXNcbiAgKiAgICAgc2hvd05hdmlnYXRpb25Db250cm9sIGFuZCBhdXRvSGlkZUNvbnRyb2xzIGFyZSBib3RoIHRydWUuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2NvbnRyb2xzRmFkZUxlbmd0aD0xNTAwXVxuICAqICAgICBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBhbmltYXRlIHRoZSBjb250cm9scyBmYWRpbmcgb3V0LlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFttYXhJbWFnZUNhY2hlQ291bnQ9MjAwXVxuICAqICAgICBUaGUgbWF4IG51bWJlciBvZiBpbWFnZXMgd2Ugc2hvdWxkIGtlZXAgaW4gbWVtb3J5IChwZXIgZHJhd2VyKS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdGltZW91dD0zMDAwMF1cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3VzZUNhbnZhcz10cnVlXVxuICAqICAgICBTZXQgdG8gZmFsc2UgdG8gbm90IHVzZSBhbiBIVE1MIGNhbnZhcyBlbGVtZW50IGZvciBpbWFnZSByZW5kZXJpbmcgZXZlbiBpZiBjYW52YXMgaXMgc3VwcG9ydGVkLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFttaW5QaXhlbFJhdGlvPTAuNV1cbiAgKiAgICAgVGhlIGhpZ2hlciB0aGUgbWluUGl4ZWxSYXRpbywgdGhlIGxvd2VyIHRoZSBxdWFsaXR5IG9mIHRoZSBpbWFnZSB0aGF0XG4gICogICAgIGlzIGNvbnNpZGVyZWQgc3VmZmljaWVudCB0byBzdG9wIHJlbmRlcmluZyBhIGdpdmVuIHpvb20gbGV2ZWwuICBGb3JcbiAgKiAgICAgZXhhbXBsZSwgaWYgeW91IGFyZSB0YXJnZXRpbmcgbW9iaWxlIGRldmljZXMgd2l0aCBsZXNzIGJhbmR3aXRoIHlvdSBtYXlcbiAgKiAgICAgdHJ5IHNldHRpbmcgdGhpcyB0byAxLjUgb3IgaGlnaGVyLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbbW91c2VOYXZFbmFibGVkPXRydWVdXG4gICogICAgIElzIHRoZSB1c2VyIGFibGUgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgaW1hZ2UgdmlhIG1vdXNlIG9yIHRvdWNoLiBEZWZhdWx0XG4gICogICAgIGludGVyYWN0aW9ucyBpbmNsdWRlIGRyYWdpbmcgdGhlIGltYWdlIGluIGEgcGxhbmUsIGFuZCB6b29taW5nIGluIHRvd2FyZFxuICAqICAgICBhbmQgYXdheSBmcm9tIHRoZSBpbWFnZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3Nob3dOYXZpZ2F0aW9uQ29udHJvbD10cnVlXVxuICAqICAgICBTZXQgdG8gZmFsc2UgdG8gcHJldmVudCB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIGNvbnRyb2xzLjxicj5cbiAgKiAgICAgTm90ZSB0aGF0IGlmIHNldCB0byBmYWxzZSwgdGhlIGN1c3RvbXMgYnV0dG9ucyBzZXQgYnkgdGhlIG9wdGlvbnNcbiAgKiAgICAgem9vbUluQnV0dG9uLCB6b29tT3V0QnV0dG9uIGV0YywgYXJlIHJlbmRlcmVkIGluYWN0aXZlLlxuICAqXG4gICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLkNvbnRyb2xBbmNob3J9IFtuYXZpZ2F0aW9uQ29udHJvbEFuY2hvcj1UT1BfTEVGVF1cbiAgKiAgICAgUGxhY2VtZW50IG9mIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gY29udHJvbHMuXG4gICogICAgIFRvIHNldCB0aGUgcGxhY2VtZW50IG9mIHRoZSBzZXF1ZW5jZSBjb250cm9scywgc2VlIHRoZVxuICAqICAgICBzZXF1ZW5jZUNvbnRyb2xBbmNob3Igb3B0aW9uLlxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbc2hvd1pvb21Db250cm9sPXRydWVdXG4gICogICAgIElmIHRydWUgdGhlbiArIGFuZCAtIGJ1dHRvbnMgdG8gem9vbSBpbiBhbmQgb3V0IGFyZSBkaXNwbGF5ZWQuPGJyPlxuICAqICAgICBOb3RlOiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zLnNob3dOYXZpZ2F0aW9uQ29udHJvbH0gaXMgb3ZlcnJpZGluZ1xuICAqICAgICB0aGlzIHNldHRpbmcgd2hlbiBzZXQgdG8gZmFsc2UuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtzaG93SG9tZUNvbnRyb2w9dHJ1ZV1cbiAgKiAgICAgSWYgdHJ1ZSB0aGVuIHRoZSAnR28gaG9tZScgYnV0dG9uIGlzIGRpc3BsYXllZCB0byBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbFxuICAqICAgICB6b29tIGFuZCBwYW4uPGJyPlxuICAqICAgICBOb3RlOiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zLnNob3dOYXZpZ2F0aW9uQ29udHJvbH0gaXMgb3ZlcnJpZGluZ1xuICAqICAgICB0aGlzIHNldHRpbmcgd2hlbiBzZXQgdG8gZmFsc2UuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtzaG93RnVsbFBhZ2VDb250cm9sPXRydWVdXG4gICogICAgIElmIHRydWUgdGhlbiB0aGUgJ1RvZ2dsZSBmdWxsIHBhZ2UnIGJ1dHRvbiBpcyBkaXNwbGF5ZWQgdG8gc3dpdGNoXG4gICogICAgIGJldHdlZW4gZnVsbCBwYWdlIGFuZCBub3JtYWwgbW9kZS48YnI+XG4gICogICAgIE5vdGU6IHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMuc2hvd05hdmlnYXRpb25Db250cm9sfSBpcyBvdmVycmlkaW5nXG4gICogICAgIHRoaXMgc2V0dGluZyB3aGVuIHNldCB0byBmYWxzZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3Nob3dSb3RhdGlvbkNvbnRyb2w9ZmFsc2VdXG4gICogICAgIElmIHRydWUgdGhlbiB0aGUgcm90YXRlIGxlZnQvcmlnaHQgY29udHJvbHMgd2lsbCBiZSBkaXNwbGF5ZWQgYXMgcGFydCBvZiB0aGVcbiAgKiAgICAgc3RhbmRhcmQgY29udHJvbHMuIFRoaXMgaXMgYWxzbyBzdWJqZWN0IHRvIHRoZSBicm93c2VyIHN1cHBvcnQgZm9yIHJvdGF0ZVxuICAqICAgICAoZS5nLiB2aWV3ZXIuZHJhd2VyLmNhblJvdGF0ZSgpKS48YnI+XG4gICogICAgIE5vdGU6IHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMuc2hvd05hdmlnYXRpb25Db250cm9sfSBpcyBvdmVycmlkaW5nXG4gICogICAgIHRoaXMgc2V0dGluZyB3aGVuIHNldCB0byBmYWxzZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3Nob3dTZXF1ZW5jZUNvbnRyb2w9dHJ1ZV1cbiAgKiAgICAgSWYgc2VxdWVuY2VNb2RlIGlzIHRydWUsIHRoZW4gcHJvdmlkZSBidXR0b25zIGZvciBuYXZpZ2F0aW5nIGZvcndhcmQgYW5kXG4gICogICAgIGJhY2t3YXJkIHRocm91Z2ggdGhlIGltYWdlcy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Db250cm9sQW5jaG9yfSBbc2VxdWVuY2VDb250cm9sQW5jaG9yPVRPUF9MRUZUXVxuICAqICAgICBQbGFjZW1lbnQgb2YgdGhlIGRlZmF1bHQgc2VxdWVuY2UgY29udHJvbHMuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtuYXZQcmV2TmV4dFdyYXA9ZmFsc2VdXG4gICogICAgIElmIHRydWUgdGhlbiB0aGUgJ3ByZXZpb3VzJyBidXR0b24gd2lsbCB3cmFwIHRvIHRoZSBsYXN0IGltYWdlIHdoZW5cbiAgKiAgICAgdmlld2luZyB0aGUgZmlyc3QgaW1hZ2UgYW5kIHRoZSAnbmV4dCcgYnV0dG9uIHdpbGwgd3JhcCB0byB0aGUgZmlyc3RcbiAgKiAgICAgaW1hZ2Ugd2hlbiB2aWV3aW5nIHRoZSBsYXN0IGltYWdlLlxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHpvb21JbkJ1dHRvblxuICAqICAgICBTZXQgdGhlIGlkIG9mIHRoZSBjdXN0b20gJ1pvb20gaW4nIGJ1dHRvbiB0byB1c2UuXG4gICogICAgIFRoaXMgaXMgdXNlZnVsIHRvIGhhdmUgYSBjdXN0b20gYnV0dG9uIGFueXdoZXJlIGluIHRoZSB3ZWIgcGFnZS48YnI+XG4gICogICAgIFRvIG9ubHkgY2hhbmdlIHRoZSBidXR0b24gaW1hZ2VzLCBjb25zaWRlciB1c2luZ1xuICAqICAgICB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zLm5hdkltYWdlc31cbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB6b29tT3V0QnV0dG9uXG4gICogICAgIFNldCB0aGUgaWQgb2YgdGhlIGN1c3RvbSAnWm9vbSBvdXQnIGJ1dHRvbiB0byB1c2UuXG4gICogICAgIFRoaXMgaXMgdXNlZnVsIHRvIGhhdmUgYSBjdXN0b20gYnV0dG9uIGFueXdoZXJlIGluIHRoZSB3ZWIgcGFnZS48YnI+XG4gICogICAgIFRvIG9ubHkgY2hhbmdlIHRoZSBidXR0b24gaW1hZ2VzLCBjb25zaWRlciB1c2luZ1xuICAqICAgICB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zLm5hdkltYWdlc31cbiAgKlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBob21lQnV0dG9uXG4gICogICAgIFNldCB0aGUgaWQgb2YgdGhlIGN1c3RvbSAnR28gaG9tZScgYnV0dG9uIHRvIHVzZS5cbiAgKiAgICAgVGhpcyBpcyB1c2VmdWwgdG8gaGF2ZSBhIGN1c3RvbSBidXR0b24gYW55d2hlcmUgaW4gdGhlIHdlYiBwYWdlLjxicj5cbiAgKiAgICAgVG8gb25seSBjaGFuZ2UgdGhlIGJ1dHRvbiBpbWFnZXMsIGNvbnNpZGVyIHVzaW5nXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMubmF2SW1hZ2VzfVxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IGZ1bGxQYWdlQnV0dG9uXG4gICogICAgIFNldCB0aGUgaWQgb2YgdGhlIGN1c3RvbSAnVG9nZ2xlIGZ1bGwgcGFnZScgYnV0dG9uIHRvIHVzZS5cbiAgKiAgICAgVGhpcyBpcyB1c2VmdWwgdG8gaGF2ZSBhIGN1c3RvbSBidXR0b24gYW55d2hlcmUgaW4gdGhlIHdlYiBwYWdlLjxicj5cbiAgKiAgICAgVG8gb25seSBjaGFuZ2UgdGhlIGJ1dHRvbiBpbWFnZXMsIGNvbnNpZGVyIHVzaW5nXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMubmF2SW1hZ2VzfVxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZUxlZnRCdXR0b25cbiAgKiAgICAgU2V0IHRoZSBpZCBvZiB0aGUgY3VzdG9tICdSb3RhdGUgbGVmdCcgYnV0dG9uIHRvIHVzZS5cbiAgKiAgICAgVGhpcyBpcyB1c2VmdWwgdG8gaGF2ZSBhIGN1c3RvbSBidXR0b24gYW55d2hlcmUgaW4gdGhlIHdlYiBwYWdlLjxicj5cbiAgKiAgICAgVG8gb25seSBjaGFuZ2UgdGhlIGJ1dHRvbiBpbWFnZXMsIGNvbnNpZGVyIHVzaW5nXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMubmF2SW1hZ2VzfVxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZVJpZ2h0QnV0dG9uXG4gICogICAgIFNldCB0aGUgaWQgb2YgdGhlIGN1c3RvbSAnUm90YXRlIHJpZ2h0JyBidXR0b24gdG8gdXNlLlxuICAqICAgICBUaGlzIGlzIHVzZWZ1bCB0byBoYXZlIGEgY3VzdG9tIGJ1dHRvbiBhbnl3aGVyZSBpbiB0aGUgd2ViIHBhZ2UuPGJyPlxuICAqICAgICBUbyBvbmx5IGNoYW5nZSB0aGUgYnV0dG9uIGltYWdlcywgY29uc2lkZXIgdXNpbmdcbiAgKiAgICAge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9ucy5uYXZJbWFnZXN9XG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gcHJldmlvdXNCdXR0b25cbiAgKiAgICAgU2V0IHRoZSBpZCBvZiB0aGUgY3VzdG9tICdQcmV2aW91cyBwYWdlJyBidXR0b24gdG8gdXNlLlxuICAqICAgICBUaGlzIGlzIHVzZWZ1bCB0byBoYXZlIGEgY3VzdG9tIGJ1dHRvbiBhbnl3aGVyZSBpbiB0aGUgd2ViIHBhZ2UuPGJyPlxuICAqICAgICBUbyBvbmx5IGNoYW5nZSB0aGUgYnV0dG9uIGltYWdlcywgY29uc2lkZXIgdXNpbmdcbiAgKiAgICAge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9ucy5uYXZJbWFnZXN9XG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gbmV4dEJ1dHRvblxuICAqICAgICBTZXQgdGhlIGlkIG9mIHRoZSBjdXN0b20gJ05leHQgcGFnZScgYnV0dG9uIHRvIHVzZS5cbiAgKiAgICAgVGhpcyBpcyB1c2VmdWwgdG8gaGF2ZSBhIGN1c3RvbSBidXR0b24gYW55d2hlcmUgaW4gdGhlIHdlYiBwYWdlLjxicj5cbiAgKiAgICAgVG8gb25seSBjaGFuZ2UgdGhlIGJ1dHRvbiBpbWFnZXMsIGNvbnNpZGVyIHVzaW5nXG4gICogICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnMubmF2SW1hZ2VzfVxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbc2VxdWVuY2VNb2RlPWZhbHNlXVxuICAqICAgICBTZXQgdG8gdHJ1ZSB0byBoYXZlIHRoZSB2aWV3ZXIgdHJlYXQgeW91ciB0aWxlc291cmNlcyBhcyBhIHNlcXVlbmNlIG9mIGltYWdlcyB0b1xuICAqICAgICBiZSBvcGVuZWQgb25lIGF0IGEgdGltZSByYXRoZXIgdGhhbiBhbGwgYXQgb25jZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbaW5pdGlhbFBhZ2U9MF1cbiAgKiAgICAgSWYgc2VxdWVuY2VNb2RlIGlzIHRydWUsIGRpc3BsYXkgdGhpcyBwYWdlIGluaXRpYWxseS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3ByZXNlcnZlVmlld3BvcnQ9ZmFsc2VdXG4gICogICAgIElmIHNlcXVlbmNlTW9kZSBpcyB0cnVlLCB0aGVuIG5vcm1hbGx5IG5hdmlnYXRpbmcgdGhyb3VnaCBlYWNoIGltYWdlIHJlc2V0cyB0aGVcbiAgKiAgICAgdmlld3BvcnQgdG8gJ2hvbWUnIHBvc2l0aW9uLiAgSWYgcHJlc2VydmVWaWV3cG9ydCBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgdmlld3BvcnRcbiAgKiAgICAgcG9zaXRpb24gaXMgcHJlc2VydmVkIHdoZW4gbmF2aWdhdGluZyBiZXR3ZWVuIGltYWdlcyBpbiB0aGUgc2VxdWVuY2UuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtwcmVzZXJ2ZU92ZXJsYXlzPWZhbHNlXVxuICAqICAgICBJZiBzZXF1ZW5jZU1vZGUgaXMgdHJ1ZSwgdGhlbiBub3JtYWxseSBuYXZpZ2F0aW5nIHRocm91Z2ggZWFjaCBpbWFnZVxuICAqICAgICByZXNldHMgdGhlIG92ZXJsYXlzLlxuICAqICAgICBJZiBwcmVzZXJ2ZU92ZXJsYXlzIGlzIHNldCB0byB0cnVlLCB0aGVuIHRoZSBvdmVybGF5cyBhZGRlZCB3aXRoIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNhZGRPdmVybGF5fVxuICAqICAgICBhcmUgcHJlc2VydmVkIHdoZW4gbmF2aWdhdGluZyBiZXR3ZWVuIGltYWdlcyBpbiB0aGUgc2VxdWVuY2UuXG4gICogICAgIE5vdGU6IHNldHRpbmcgcHJlc2VydmVPdmVybGF5cyBvdmVycmlkZXMgYW55IG92ZXJsYXlzIHNwZWNpZmllZCBpbiB0aGUgZ2xvYmFsXG4gICogICAgIFwib3ZlcmxheXNcIiBvcHRpb24gZm9yIHRoZSBWaWV3ZXIuIEl0J3MgYWxzbyBub3QgY29tcGF0aWJsZSB3aXRoIHNwZWNpZnlpbmdcbiAgKiAgICAgcGVyLXRpbGVTb3VyY2Ugb3ZlcmxheXMgdmlhIHRoZSBvcHRpb25zLCBhcyB0aG9zZSBvdmVybGF5cyB3aWxsIHBlcnNpc3RcbiAgKiAgICAgZXZlbiBhZnRlciB0aGUgdGlsZVNvdXJjZSBpcyBjbG9zZWQuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtzaG93UmVmZXJlbmNlU3RyaXA9ZmFsc2VdXG4gICogICAgIElmIHNlcXVlbmNlTW9kZSBpcyB0cnVlLCB0aGVuIGRpc3BsYXkgYSBzY3JvbGxpbmcgc3RyaXAgb2YgaW1hZ2UgdGh1bWJuYWlscyBmb3JcbiAgKiAgICAgbmF2aWdhdGluZyB0aHJvdWdoIHRoZSBpbWFnZXMuXG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gW3JlZmVyZW5jZVN0cmlwU2Nyb2xsPSdob3Jpem9udGFsJ11cbiAgKlxuICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gW3JlZmVyZW5jZVN0cmlwRWxlbWVudD1udWxsXVxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyZWZlcmVuY2VTdHJpcEhlaWdodD1udWxsXVxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyZWZlcmVuY2VTdHJpcFdpZHRoPW51bGxdXG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gW3JlZmVyZW5jZVN0cmlwUG9zaXRpb249J0JPVFRPTV9MRUZUJ11cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcmVmZXJlbmNlU3RyaXBTaXplUmF0aW89MC4yXVxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBbY29sbGVjdGlvbk1vZGU9ZmFsc2VdXG4gICogICAgIFNldCB0byB0cnVlIHRvIGhhdmUgdGhlIHZpZXdlciBhcnJhbmdlIHlvdXIgVGlsZWRJbWFnZXMgaW4gYSBncmlkIG9yIGxpbmUuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2NvbGxlY3Rpb25Sb3dzPTNdXG4gICogICAgIElmIGNvbGxlY3Rpb25Nb2RlIGlzIHRydWUsIHNwZWNpZmllcyBob3cgbWFueSByb3dzIHRoZSBncmlkIHNob3VsZCBoYXZlLiBVc2UgMSB0byBtYWtlIGEgbGluZS5cbiAgKiAgICAgSWYgY29sbGVjdGlvbkxheW91dCBpcyAndmVydGljYWwnLCBzcGVjaWZpZXMgaG93IG1hbnkgY29sdW1ucyBpbnN0ZWFkLlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjb2xsZWN0aW9uQ29sdW1ucz0wXVxuICAqICAgICBJZiBjb2xsZWN0aW9uTW9kZSBpcyB0cnVlLCBzcGVjaWZpZXMgaG93IG1hbnkgY29sdW1ucyB0aGUgZ3JpZCBzaG91bGQgaGF2ZS4gVXNlIDEgdG8gbWFrZSBhIGxpbmUuXG4gICogICAgIElmIGNvbGxlY3Rpb25MYXlvdXQgaXMgJ3ZlcnRpY2FsJywgc3BlY2lmaWVzIGhvdyBtYW55IHJvd3MgaW5zdGVhZC4gSWdub3JlZCBpZiBjb2xsZWN0aW9uUm93cyBpcyBub3Qgc2V0IHRvIGEgZmFsc3kgdmFsdWUuXG4gICpcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gW2NvbGxlY3Rpb25MYXlvdXQ9J2hvcml6b250YWwnXVxuICAqICAgICBJZiBjb2xsZWN0aW9uTW9kZSBpcyB0cnVlLCBzcGVjaWZpZXMgd2hldGhlciB0byBhcnJhbmdlIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5LlxuICAqXG4gICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjb2xsZWN0aW9uVGlsZVNpemU9ODAwXVxuICAqICAgICBJZiBjb2xsZWN0aW9uTW9kZSBpcyB0cnVlLCBzcGVjaWZpZXMgdGhlIHNpemUsIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLCBmb3IgZWFjaCBUaWxlZEltYWdlIHRvIGZpdCBpbnRvLlxuICAqICAgICBUaGUgVGlsZWRJbWFnZSB3aWxsIGJlIGNlbnRlcmVkIHdpdGhpbiBhIHNxdWFyZSBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gICpcbiAgKiBAcHJvcGVydHkge051bWJlcn0gW2NvbGxlY3Rpb25UaWxlTWFyZ2luPTgwXVxuICAqICAgICBJZiBjb2xsZWN0aW9uTW9kZSBpcyB0cnVlLCBzcGVjaWZpZXMgdGhlIG1hcmdpbiwgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMsIGJldHdlZW4gZWFjaCBUaWxlZEltYWdlLlxuICAqXG4gICogQHByb3BlcnR5IHtTdHJpbmd8Qm9vbGVhbn0gW2Nyb3NzT3JpZ2luUG9saWN5PWZhbHNlXVxuICAqICAgICBWYWxpZCB2YWx1ZXMgYXJlICdBbm9ueW1vdXMnLCAndXNlLWNyZWRlbnRpYWxzJywgYW5kIGZhbHNlLiBJZiBmYWxzZSwgY2FudmFzIHJlcXVlc3RzIHdpbGxcbiAgKiAgICAgbm90IHVzZSBDT1JTLCBhbmQgdGhlIGNhbnZhcyB3aWxsIGJlIHRhaW50ZWQuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFthamF4V2l0aENyZWRlbnRpYWxzPWZhbHNlXVxuICAqICAgICBXaGV0aGVyIHRvIHNldCB0aGUgd2l0aENyZWRlbnRpYWxzIFhIUiBmbGFnIGZvciBBSkFYIHJlcXVlc3RzICh3aGVuIGxvYWRpbmcgdGlsZSBzb3VyY2VzKS5cbiAgKiAgICAgTm90ZSB0aGF0IHRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYXQgdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2V9IGxldmVsLlxuICAqXG4gICovXG5cbiAvKipcbiAgKiBTZXR0aW5ncyBmb3IgZ2VzdHVyZXMgZ2VuZXJhdGVkIGJ5IGEgcG9pbnRlciBkZXZpY2UuXG4gICpcbiAgKiBAdHlwZWRlZiB7T2JqZWN0fSBHZXN0dXJlU2V0dGluZ3NcbiAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAqXG4gICogQHByb3BlcnR5IHtCb29sZWFufSBzY3JvbGxUb1pvb21cbiAgKiAgICAgU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZyBvbiBzY3JvbGwgZ2VzdHVyZXMuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGNsaWNrVG9ab29tXG4gICogICAgIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmcgb24gY2xpY2sgZ2VzdHVyZXMuXG4gICpcbiAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRibENsaWNrVG9ab29tXG4gICogICAgIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmcgb24gZG91YmxlLWNsaWNrIGdlc3R1cmVzLiBOb3RlOiBJZiBzZXQgdG8gdHJ1ZVxuICAqICAgICB0aGVuIGNsaWNrVG9ab29tIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgdG8gcHJldmVudCBtdWx0aXBsZSB6b29tcy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcGluY2hUb1pvb21cbiAgKiAgICAgU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZyBvbiBwaW5jaCBnZXN0dXJlcy5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZmxpY2tFbmFibGVkXG4gICogICAgIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoZSBraW5ldGljIHBhbm5pbmcgZWZmZWN0IChmbGljaykgYXQgdGhlIGVuZCBvZiBhIGRyYWcgZ2VzdHVyZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBmbGlja01pblNwZWVkXG4gICogICAgIElmIGZsaWNrRW5hYmxlZCBpcyB0cnVlLCB0aGUgbWluaW11bSBzcGVlZCAoaW4gcGl4ZWxzLXBlci1zZWNvbmQpIHJlcXVpcmVkIHRvIGNhdXNlIHRoZSBraW5ldGljIHBhbm5pbmcgZWZmZWN0IChmbGljaykgYXQgdGhlIGVuZCBvZiBhIGRyYWcgZ2VzdHVyZS5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBmbGlja01vbWVudHVtXG4gICogICAgIElmIGZsaWNrRW5hYmxlZCBpcyB0cnVlLCBhIGNvbnN0YW50IG11bHRpcGxpZWQgYnkgdGhlIHZlbG9jaXR5IHRvIGRldGVybWluZSB0aGUgZGlzdGFuY2Ugb2YgdGhlIGtpbmV0aWMgcGFubmluZyBlZmZlY3QgKGZsaWNrKSBhdCB0aGUgZW5kIG9mIGEgZHJhZyBnZXN0dXJlLlxuICAqICAgICBBIGxhcmdlciB2YWx1ZSB3aWxsIG1ha2UgdGhlIGZsaWNrIGZlZWwgXCJsaWdodGVyXCIsIHdoaWxlIGEgc21hbGxlciB2YWx1ZSB3aWxsIG1ha2UgdGhlIGZsaWNrIGZlZWwgXCJoZWF2aWVyXCIuXG4gICogICAgIE5vdGU6IHNwcmluZ1N0aWZmbmVzcyBhbmQgYW5pbWF0aW9uVGltZSBhbHNvIGFmZmVjdCB0aGUgXCJzcHJpbmdcIiB1c2VkIHRvIHN0b3AgdGhlIGZsaWNrIGFuaW1hdGlvbi5cbiAgKlxuICAqL1xuXG4vKipcbiAgKiBUaGUgbmFtZXMgZm9yIHRoZSBpbWFnZSByZXNvdXJjZXMgdXNlZCBmb3IgdGhlIGltYWdlIG5hdmlnYXRpb24gYnV0dG9ucy5cbiAgKlxuICAqIEB0eXBlZGVmIHtPYmplY3R9IE5hdkltYWdlc1xuICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gICpcbiAgKiBAcHJvcGVydHkge09iamVjdH0gem9vbUluIC0gSW1hZ2VzIGZvciB0aGUgem9vbS1pbiBidXR0b24uXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHpvb21Jbi5SRVNUXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHpvb21Jbi5HUk9VUFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB6b29tSW4uSE9WRVJcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gem9vbUluLkRPV05cbiAgKlxuICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB6b29tT3V0IC0gSW1hZ2VzIGZvciB0aGUgem9vbS1vdXQgYnV0dG9uLlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB6b29tT3V0LlJFU1RcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gem9vbU91dC5HUk9VUFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB6b29tT3V0LkhPVkVSXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHpvb21PdXQuRE9XTlxuICAqXG4gICogQHByb3BlcnR5IHtPYmplY3R9IGhvbWUgLSBJbWFnZXMgZm9yIHRoZSBob21lIGJ1dHRvbi5cbiAgKiBAcHJvcGVydHkge1N0cmluZ30gaG9tZS5SRVNUXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IGhvbWUuR1JPVVBcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gaG9tZS5IT1ZFUlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBob21lLkRPV05cbiAgKlxuICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBmdWxscGFnZSAtIEltYWdlcyBmb3IgdGhlIGZ1bGwtcGFnZSBidXR0b24uXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IGZ1bGxwYWdlLlJFU1RcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gZnVsbHBhZ2UuR1JPVVBcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gZnVsbHBhZ2UuSE9WRVJcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gZnVsbHBhZ2UuRE9XTlxuICAqXG4gICogQHByb3BlcnR5IHtPYmplY3R9IHJvdGF0ZWxlZnQgLSBJbWFnZXMgZm9yIHRoZSByb3RhdGUgbGVmdCBidXR0b24uXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZWxlZnQuUkVTVFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByb3RhdGVsZWZ0LkdST1VQXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZWxlZnQuSE9WRVJcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gcm90YXRlbGVmdC5ET1dOXG4gICpcbiAgKiBAcHJvcGVydHkge09iamVjdH0gcm90YXRlcmlnaHQgLSBJbWFnZXMgZm9yIHRoZSByb3RhdGUgcmlnaHQgYnV0dG9uLlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByb3RhdGVyaWdodC5SRVNUXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZXJpZ2h0LkdST1VQXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZXJpZ2h0LkhPVkVSXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IHJvdGF0ZXJpZ2h0LkRPV05cbiAgKlxuICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBwcmV2aW91cyAtIEltYWdlcyBmb3IgdGhlIHByZXZpb3VzIGJ1dHRvbi5cbiAgKiBAcHJvcGVydHkge1N0cmluZ30gcHJldmlvdXMuUkVTVFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcmV2aW91cy5HUk9VUFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcmV2aW91cy5IT1ZFUlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcmV2aW91cy5ET1dOXG4gICpcbiAgKiBAcHJvcGVydHkge09iamVjdH0gbmV4dCAtIEltYWdlcyBmb3IgdGhlIG5leHQgYnV0dG9uLlxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuZXh0LlJFU1RcbiAgKiBAcHJvcGVydHkge1N0cmluZ30gbmV4dC5HUk9VUFxuICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuZXh0LkhPVkVSXG4gICogQHByb3BlcnR5IHtTdHJpbmd9IG5leHQuRE9XTlxuICAqXG4gICovXG5cblxuIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gc2VydmVzIGFzIGEgc2luZ2xlIHBvaW50IG9mIGluc3RhbnRpYXRpb24gZm9yIGFuIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlcn0sIGluY2x1ZGluZyBhbGxcbiAgKiBjb21iaW5hdGlvbnMgb2Ygb3V0LW9mLXRoZS1ib3ggY29uZmlndXJhYmxlIGZlYXR1cmVzLlxuICAqXG4gICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk9wdGlvbnN9IG9wdGlvbnMgLSBWaWV3ZXIgb3B0aW9ucy5cbiAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9XG4gICovXG53aW5kb3cuT3BlblNlYWRyYWdvbiA9IHdpbmRvdy5PcGVuU2VhZHJhZ29uIHx8IGZ1bmN0aW9uKCBvcHRpb25zICl7XG5cbiAgICByZXR1cm4gbmV3IE9wZW5TZWFkcmFnb24uVmlld2VyKCBvcHRpb25zICk7XG5cbn07XG5cbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgcmV0dXJuICh3aW5kb3cuT3BlblNlYWRyYWdvbik7XG4gICB9KTtcbn1cblxuXG4oZnVuY3Rpb24oICQgKXtcblxuXG4gICAgLyoqXG4gICAgICogVGhlIE9wZW5TZWFkcmFnb24gdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gT3BlblNlYWRyYWdvbi52ZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHZlcnNpb25TdHIgLSBUaGUgdmVyc2lvbiBudW1iZXIgYXMgYSBzdHJpbmcgKCdtYWpvci5taW5vci5yZXZpc2lvbicpLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtYWpvciAtIFRoZSBtYWpvciB2ZXJzaW9uIG51bWJlci5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbWlub3IgLSBUaGUgbWlub3IgdmVyc2lvbiBudW1iZXIuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJldmlzaW9uIC0gVGhlIHJldmlzaW9uIG51bWJlci5cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICAkLnZlcnNpb24gPSB7XG4gICAgICAgIHZlcnNpb25TdHI6ICcyLjIuMScsXG4gICAgICAgIG1ham9yOiBwYXJzZUludCgnMicsIDEwKSxcbiAgICAgICAgbWlub3I6IHBhcnNlSW50KCcyJywgMTApLFxuICAgICAgICByZXZpc2lvbjogcGFyc2VJbnQoJzEnLCAxMClcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBUYWtlbiBmcm9tIGpxdWVyeSAxLjYuMVxuICAgICAqIFtbQ2xhc3NdXSAtPiB0eXBlIHBhaXJzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgY2xhc3MydHlwZSA9IHtcbiAgICAgICAgICAgICdbb2JqZWN0IEJvb2xlYW5dJzogICAgICdib29sZWFuJyxcbiAgICAgICAgICAgICdbb2JqZWN0IE51bWJlcl0nOiAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgJ1tvYmplY3QgU3RyaW5nXSc6ICAgICAgJ3N0cmluZycsXG4gICAgICAgICAgICAnW29iamVjdCBGdW5jdGlvbl0nOiAgICAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgJ1tvYmplY3QgQXJyYXldJzogICAgICAgJ2FycmF5JyxcbiAgICAgICAgICAgICdbb2JqZWN0IERhdGVdJzogICAgICAgICdkYXRlJyxcbiAgICAgICAgICAgICdbb2JqZWN0IFJlZ0V4cF0nOiAgICAgICdyZWdleHAnLFxuICAgICAgICAgICAgJ1tvYmplY3QgT2JqZWN0XSc6ICAgICAgJ29iamVjdCdcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byBzb21lIGNvcmUgbWV0aG9kc1xuICAgICAgICB0b1N0cmluZyAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG4gICAgICAgIGhhc093biAgICAgID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKlxuICAgICAqIFRha2VuIGZyb20galF1ZXJ5IDEuNi4xXG4gICAgICogQGZ1bmN0aW9uIGlzRnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly93d3cuanF1ZXJ5LmNvbS8galF1ZXJ5fVxuICAgICAqL1xuICAgICQuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgICAgIHJldHVybiAkLnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIFRha2VuIGZyb20galF1ZXJ5IDEuNi4xXG4gICAgICogQGZ1bmN0aW9uIGlzQXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly93d3cuanF1ZXJ5LmNvbS8galF1ZXJ5fVxuICAgICAqL1xuICAgICQuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oIG9iaiApIHtcbiAgICAgICAgcmV0dXJuICQudHlwZShvYmopID09PSBcImFycmF5XCI7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQSBjcnVkZSB3YXkgb2YgZGV0ZXJtaW5pbmcgaWYgYW4gb2JqZWN0IGlzIGEgd2luZG93LlxuICAgICAqIFRha2VuIGZyb20galF1ZXJ5IDEuNi4xXG4gICAgICogQGZ1bmN0aW9uIGlzV2luZG93XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LmpxdWVyeS5jb20vIGpRdWVyeX1cbiAgICAgKi9cbiAgICAkLmlzV2luZG93ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIFwic2V0SW50ZXJ2YWxcIiBpbiBvYmo7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogVGFrZW4gZnJvbSBqUXVlcnkgMS42LjFcbiAgICAgKiBAZnVuY3Rpb24gdHlwZVxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cDovL3d3dy5qcXVlcnkuY29tLyBqUXVlcnl9XG4gICAgICovXG4gICAgJC50eXBlID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgICAgICAgcmV0dXJuICggb2JqID09PSBudWxsICkgfHwgKCBvYmogPT09IHVuZGVmaW5lZCApID9cbiAgICAgICAgICAgIFN0cmluZyggb2JqICkgOlxuICAgICAgICAgICAgY2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIjtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBUYWtlbiBmcm9tIGpRdWVyeSAxLjYuMVxuICAgICAqIEBmdW5jdGlvbiBpc1BsYWluT2JqZWN0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LmpxdWVyeS5jb20vIGpRdWVyeX1cbiAgICAgKi9cbiAgICAkLmlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiggb2JqICkge1xuICAgICAgICAvLyBNdXN0IGJlIGFuIE9iamVjdC5cbiAgICAgICAgLy8gQmVjYXVzZSBvZiBJRSwgd2UgYWxzbyBoYXZlIHRvIGNoZWNrIHRoZSBwcmVzZW5jZSBvZiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IERPTSBub2RlcyBhbmQgd2luZG93IG9iamVjdHMgZG9uJ3QgcGFzcyB0aHJvdWdoLCBhcyB3ZWxsXG4gICAgICAgIGlmICggIW9iaiB8fCBPcGVuU2VhZHJhZ29uLnR5cGUob2JqKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgJC5pc1dpbmRvdyggb2JqICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG4gICAgICAgIGlmICggb2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAhaGFzT3duLmNhbGwob2JqLCBcImNvbnN0cnVjdG9yXCIpICYmXG4gICAgICAgICAgICAhaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIpICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG4gICAgICAgIC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXG4gICAgICAgIHZhciBsYXN0S2V5O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqICkge1xuICAgICAgICAgICAgbGFzdEtleSA9IGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0S2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwgbGFzdEtleSApO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIFRha2VuIGZyb20galF1ZXJ5IDEuNi4xXG4gICAgICogQGZ1bmN0aW9uIGlzRW1wdHlPYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly93d3cuanF1ZXJ5LmNvbS8galF1ZXJ5fVxuICAgICAqL1xuICAgICQuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgICAgIGZvciAoIHZhciBuYW1lIGluIG9iaiApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hpbSBhcm91bmQgT2JqZWN0LmZyZWV6ZS4gRG9lcyBub3RoaW5nIGlmIE9iamVjdC5mcmVlemUgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZnJlZXplLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqIFRoZSBmcm96ZW4gb2JqZWN0LlxuICAgICAqL1xuICAgICQuZnJlZXplT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgICAgICAkLmZyZWV6ZU9iamVjdCA9IE9iamVjdC5mcmVlemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLmZyZWV6ZU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkLmZyZWV6ZU9iamVjdChvYmopO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBjYW52YXMgZWxlbWVudFxuICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHN1cHBvcnRzQ2FudmFzXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKi9cbiAgICAkLnN1cHBvcnRzQ2FudmFzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xuICAgICAgICByZXR1cm4gISEoICQuaXNGdW5jdGlvbiggY2FudmFzRWxlbWVudC5nZXRDb250ZXh0ICkgJiZcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KCAnMmQnICkgKTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGVzdCB3aGV0aGVyIHRoZSBzdWJtaXR0ZWQgY2FudmFzIGlzIHRhaW50ZWQgb3Igbm90LlxuICAgICAqIEBhcmd1bWVudCB7Q2FudmFzfSBjYW52YXMgVGhlIGNhbnZhcyB0byB0ZXN0LlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBjYW52YXMgaXMgdGFpbnRlZC5cbiAgICAgKi9cbiAgICAkLmlzQ2FudmFzVGFpbnRlZCA9IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICB2YXIgaXNUYWludGVkID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXZSB0ZXN0IGlmIHRoZSBjYW52YXMgaXMgdGFpbnRlZCBieSByZXRyaWV2aW5nIGRhdGEgZnJvbSBpdC5cbiAgICAgICAgICAgIC8vIEFuIGV4Y2VwdGlvbiB3aWxsIGJlIHJhaXNlZCBpZiB0aGUgY2FudmFzIGlzIHRhaW50ZWQuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaXNUYWludGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNUYWludGVkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIHJhdGlvIGNvbXBhcmluZyB0aGUgZGV2aWNlIHNjcmVlbidzIHBpeGVsIGRlbnNpdHkgdG8gdGhlIGNhbnZhcydzIGJhY2tpbmcgc3RvcmUgcGl4ZWwgZGVuc2l0eS4gRGVmYXVsdHMgdG8gMSBpZiBjYW52YXMgaXNuJ3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgICAqIEBtZW1iZXIge051bWJlcn0gcGl4ZWxEZW5zaXR5UmF0aW9cbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqL1xuICAgICQucGl4ZWxEZW5zaXR5UmF0aW8gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoICQuc3VwcG9ydHNDYW52YXMgKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICB2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgICAgICAgICB2YXIgYmFja2luZ1N0b3JlUmF0aW8gPSBjb250ZXh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCAxO1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZVBpeGVsUmF0aW8gLyBiYWNraW5nU3RvcmVSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfSgpKTtcblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLyoqXG4gKiAgVGhpcyBjbG9zdXJlIGRlZmluZXMgYWxsIHN0YXRpYyBtZXRob2RzIGF2YWlsYWJsZSB0byB0aGUgT3BlblNlYWRyYWdvblxuICogIG5hbWVzcGFjZS4gIE1hbnksIGlmIG5vdCBtb3N0LCBhcmUgdGFrZWQgZGlyZWN0bHkgZnJvbSBqUXVlcnkgZm9yIHVzZVxuICogIHRvIHNpbXBsaWZ5IGFuZCByZWR1Y2UgY29tbW9uIHByb2dyYW1taW5nIHBhdHRlcm5zLiAgTW9yZSBzdGF0aWMgbWV0aG9kc1xuICogIGZyb20galF1ZXJ5IG1heSBldmVudHVhbGx5IG1ha2UgdGhlaXIgd2F5IGludG8gdGhpcyB0aG91Z2ggd2UgYXJlXG4gKiAgYXR0ZW1wdGluZyB0byBhdm9pZCBhbiBleHBsaWNpdCBkZXBlbmRlbmN5IG9uIGpRdWVyeSBvbmx5IGJlY2F1c2VcbiAqICBPcGVuU2VhZHJhZ29uIGlzIGEgYnJvYWRseSB1c2VmdWwgY29kZSBiYXNlIGFuZCB3b3VsZCBiZSBtYWRlIGxlc3MgYnJvYWRcbiAqICBieSByZXF1aXJpbmcgalF1ZXJ5IGZ1bGx5LlxuICpcbiAqICBTb21lIHN0YXRpYyBtZXRob2RzIGhhdmUgYWxzbyBiZWVuIHJlZmFjdG9yZWQgZnJvbSB0aGUgb3JpZ2luYWwgT3BlblNlYWRyYWdvblxuICogIHByb2plY3QuXG4gKi9cbihmdW5jdGlvbiggJCApe1xuXG4gICAgLyoqXG4gICAgICogVGFrZW4gZnJvbSBqUXVlcnkgMS42LjFcbiAgICAgKiBAZnVuY3Rpb24gZXh0ZW5kXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LmpxdWVyeS5jb20vIGpRdWVyeX1cbiAgICAgKi9cbiAgICAkLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBzcmMsXG4gICAgICAgICAgICBjb3B5LFxuICAgICAgICAgICAgY29weUlzQXJyYXksXG4gICAgICAgICAgICBjbG9uZSxcbiAgICAgICAgICAgIHRhcmdldCAgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcbiAgICAgICAgICAgIGxlbmd0aCAgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgZGVlcCAgICA9IGZhbHNlLFxuICAgICAgICAgICAgaSAgICAgICA9IDE7XG5cbiAgICAgICAgLy8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuICAgICAgICBpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuICAgICAgICAgICAgZGVlcCAgICA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCAgPSBhcmd1bWVudHNbIDEgXSB8fCB7fTtcbiAgICAgICAgICAgIC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcbiAgICAgICAgICAgIGkgPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG4gICAgICAgIGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhT3BlblNlYWRyYWdvbi5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG4gICAgICAgIGlmICggbGVuZ3RoID09PSBpICkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIC0taTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdO1xuICAgICAgICAgICAgaWYgKCBvcHRpb25zICE9PSBudWxsIHx8IG9wdGlvbnMgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG4gICAgICAgICAgICAgICAgZm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTtcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWVwICYmIGNvcHkgJiYgKCBPcGVuU2VhZHJhZ29uLmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fCAoIGNvcHlJc0FycmF5ID0gT3BlblNlYWRyYWdvbi5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjb3B5SXNBcnJheSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIE9wZW5TZWFkcmFnb24uaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBPcGVuU2VhZHJhZ29uLmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBPcGVuU2VhZHJhZ29uLmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFsgbmFtZSBdID0gY29weTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIHZhciBpc0lPU0RldmljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlckFnZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2VyQWdlbnQuaW5kZXhPZignaVBob25lJykgIT09IC0xIHx8XG4gICAgICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZignaVBhZCcpICE9PSAtMSB8fFxuICAgICAgICAgICAgICAgdXNlckFnZW50LmluZGV4T2YoJ2lQb2QnKSAhPT0gLTE7XG4gICAgfTtcblxuICAgICQuZXh0ZW5kKCAkLCAvKiogQGxlbmRzIE9wZW5TZWFkcmFnb24gKi97XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZXMgZm9yIHRoZSBvcHRpb25hbCBzZXR0aW5ncyBkb2N1bWVudGVkIGF0IHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBERUZBVUxUX1NFVFRJTkdTOiB7XG4gICAgICAgICAgICAvL0RBVEEgU09VUkNFIERFVEFJTFNcbiAgICAgICAgICAgIHhtbFBhdGg6ICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0aWxlU291cmNlczogICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGlsZUhvc3Q6ICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGluaXRpYWxQYWdlOiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBjcm9zc09yaWdpblBvbGljeTogICAgICBmYWxzZSxcbiAgICAgICAgICAgIGFqYXhXaXRoQ3JlZGVudGlhbHM6ICAgIGZhbHNlLFxuXG4gICAgICAgICAgICAvL1BBTiBBTkQgWk9PTSBTRVRUSU5HUyBBTkQgQ09OU1RSQUlOVFNcbiAgICAgICAgICAgIHBhbkhvcml6b250YWw6ICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBwYW5WZXJ0aWNhbDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgY29uc3RyYWluRHVyaW5nUGFuOiAgICAgZmFsc2UsXG4gICAgICAgICAgICB3cmFwSG9yaXpvbnRhbDogICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHdyYXBWZXJ0aWNhbDogICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdmlzaWJpbGl0eVJhdGlvOiAgICAgICAgMC41LCAvLy0+IGhvdyBtdWNoIG9mIHRoZSB2aWV3ZXIgY2FuIGJlIG5lZ2F0aXZlIHNwYWNlXG4gICAgICAgICAgICBtaW5QaXhlbFJhdGlvOiAgICAgICAgICAwLjUsIC8vLT5jbG9zZXIgdG8gMCBkcmF3cyB0aWxlcyBtZWFudCBmb3IgYSBoaWdoZXIgem9vbSBhdCB0aGlzIHpvb21cbiAgICAgICAgICAgIGRlZmF1bHRab29tTGV2ZWw6ICAgICAgIDAsXG4gICAgICAgICAgICBtaW5ab29tTGV2ZWw6ICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbWF4Wm9vbUxldmVsOiAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGhvbWVGaWxsc1ZpZXdlcjogICAgICAgIGZhbHNlLFxuXG4gICAgICAgICAgICAvL1VJIFJFU1BPTlNJVkVORVNTIEFORCBGRUVMXG4gICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6ICAgICAzMDAsXG4gICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6ICAgICA1LFxuICAgICAgICAgICAgZGJsQ2xpY2tUaW1lVGhyZXNob2xkOiAgMzAwLFxuICAgICAgICAgICAgZGJsQ2xpY2tEaXN0VGhyZXNob2xkOiAgMjAsXG4gICAgICAgICAgICBzcHJpbmdTdGlmZm5lc3M6ICAgICAgICA2LjUsXG4gICAgICAgICAgICBhbmltYXRpb25UaW1lOiAgICAgICAgICAxLjIsXG4gICAgICAgICAgICBnZXN0dXJlU2V0dGluZ3NNb3VzZTogICB7IHNjcm9sbFRvWm9vbTogdHJ1ZSwgIGNsaWNrVG9ab29tOiB0cnVlLCAgZGJsQ2xpY2tUb1pvb206IGZhbHNlLCBwaW5jaFRvWm9vbTogZmFsc2UsIGZsaWNrRW5hYmxlZDogZmFsc2UsIGZsaWNrTWluU3BlZWQ6IDEyMCwgZmxpY2tNb21lbnR1bTogMC4yNSwgcGluY2hSb3RhdGU6IGZhbHNlIH0sXG4gICAgICAgICAgICBnZXN0dXJlU2V0dGluZ3NUb3VjaDogICB7IHNjcm9sbFRvWm9vbTogZmFsc2UsIGNsaWNrVG9ab29tOiBmYWxzZSwgZGJsQ2xpY2tUb1pvb206IHRydWUsICBwaW5jaFRvWm9vbTogdHJ1ZSwgIGZsaWNrRW5hYmxlZDogdHJ1ZSwgIGZsaWNrTWluU3BlZWQ6IDEyMCwgZmxpY2tNb21lbnR1bTogMC4yNSwgcGluY2hSb3RhdGU6IGZhbHNlIH0sXG4gICAgICAgICAgICBnZXN0dXJlU2V0dGluZ3NQZW46ICAgICB7IHNjcm9sbFRvWm9vbTogZmFsc2UsIGNsaWNrVG9ab29tOiB0cnVlLCAgZGJsQ2xpY2tUb1pvb206IGZhbHNlLCBwaW5jaFRvWm9vbTogZmFsc2UsIGZsaWNrRW5hYmxlZDogZmFsc2UsIGZsaWNrTWluU3BlZWQ6IDEyMCwgZmxpY2tNb21lbnR1bTogMC4yNSwgcGluY2hSb3RhdGU6IGZhbHNlIH0sXG4gICAgICAgICAgICBnZXN0dXJlU2V0dGluZ3NVbmtub3duOiB7IHNjcm9sbFRvWm9vbTogZmFsc2UsIGNsaWNrVG9ab29tOiBmYWxzZSwgZGJsQ2xpY2tUb1pvb206IHRydWUsICBwaW5jaFRvWm9vbTogdHJ1ZSwgIGZsaWNrRW5hYmxlZDogdHJ1ZSwgIGZsaWNrTWluU3BlZWQ6IDEyMCwgZmxpY2tNb21lbnR1bTogMC4yNSwgcGluY2hSb3RhdGU6IGZhbHNlIH0sXG4gICAgICAgICAgICB6b29tUGVyQ2xpY2s6ICAgICAgICAgICAyLFxuICAgICAgICAgICAgem9vbVBlclNjcm9sbDogICAgICAgICAgMS4yLFxuICAgICAgICAgICAgem9vbVBlclNlY29uZDogICAgICAgICAgMS4wLFxuICAgICAgICAgICAgYmxlbmRUaW1lOiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGFsd2F5c0JsZW5kOiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgYXV0b0hpZGVDb250cm9sczogICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgbWluWm9vbUltYWdlUmF0aW86ICAgICAgMC45LCAvLy0+IGNsb3NlciB0byAwIGFsbG93cyB6b29tIG91dCB0byBpbmZpbml0eVxuICAgICAgICAgICAgbWF4Wm9vbVBpeGVsUmF0aW86ICAgICAgMS4xLCAvLy0+IGhpZ2hlciBhbGxvd3MgJ292ZXIgem9vbScgaW50byBwaXhlbHNcbiAgICAgICAgICAgIHNtb290aFRpbGVFZGdlc01pblpvb206IDEuMSwgLy8tPiBoaWdoZXIgdGhhbiBtYXhab29tUGl4ZWxSYXRpbyBkaXNhYmxlcyBpdFxuICAgICAgICAgICAgaU9TRGV2aWNlOiAgICAgICAgICAgICAgaXNJT1NEZXZpY2UoKSxcbiAgICAgICAgICAgIHBpeGVsc1BlcldoZWVsTGluZTogICAgIDQwLFxuICAgICAgICAgICAgYXV0b1Jlc2l6ZTogICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHByZXNlcnZlSW1hZ2VTaXplT25SZXNpemU6IGZhbHNlLCAvLyByZXF1aXJlcyBhdXRvUmVzaXplPXRydWVcbiAgICAgICAgICAgIG1pblNjcm9sbERlbHRhVGltZTogICAgIDUwLFxuXG4gICAgICAgICAgICAvL0RFRkFVTFQgQ09OVFJPTCBTRVRUSU5HU1xuICAgICAgICAgICAgc2hvd1NlcXVlbmNlQ29udHJvbDogICAgIHRydWUsICAvL1NFUVVFTkNFXG4gICAgICAgICAgICBzZXF1ZW5jZUNvbnRyb2xBbmNob3I6ICAgbnVsbCwgIC8vU0VRVUVOQ0VcbiAgICAgICAgICAgIHByZXNlcnZlVmlld3BvcnQ6ICAgICAgICBmYWxzZSwgLy9TRVFVRU5DRVxuICAgICAgICAgICAgcHJlc2VydmVPdmVybGF5czogICAgICAgIGZhbHNlLCAvL1NFUVVFTkNFXG4gICAgICAgICAgICBuYXZQcmV2TmV4dFdyYXA6ICAgICAgICAgZmFsc2UsIC8vU0VRVUVOQ0VcbiAgICAgICAgICAgIHNob3dOYXZpZ2F0aW9uQ29udHJvbDogICB0cnVlLCAgLy9aT09NL0hPTUUvRlVMTC9ST1RBVElPTlxuICAgICAgICAgICAgbmF2aWdhdGlvbkNvbnRyb2xBbmNob3I6IG51bGwsICAvL1pPT00vSE9NRS9GVUxML1JPVEFUSU9OXG4gICAgICAgICAgICBzaG93Wm9vbUNvbnRyb2w6ICAgICAgICAgdHJ1ZSwgIC8vWk9PTVxuICAgICAgICAgICAgc2hvd0hvbWVDb250cm9sOiAgICAgICAgIHRydWUsICAvL0hPTUVcbiAgICAgICAgICAgIHNob3dGdWxsUGFnZUNvbnRyb2w6ICAgICB0cnVlLCAgLy9GVUxMXG4gICAgICAgICAgICBzaG93Um90YXRpb25Db250cm9sOiAgICAgZmFsc2UsIC8vUk9UQVRJT05cbiAgICAgICAgICAgIGNvbnRyb2xzRmFkZURlbGF5OiAgICAgICAyMDAwLCAgLy9aT09NL0hPTUUvRlVMTC9TRVFVRU5DRVxuICAgICAgICAgICAgY29udHJvbHNGYWRlTGVuZ3RoOiAgICAgIDE1MDAsICAvL1pPT00vSE9NRS9GVUxML1NFUVVFTkNFXG4gICAgICAgICAgICBtb3VzZU5hdkVuYWJsZWQ6ICAgICAgICAgdHJ1ZSwgIC8vR0VORVJBTCBNT1VTRSBJTlRFUkFDVElWSVRZXG5cbiAgICAgICAgICAgIC8vVklFV1BPUlQgTkFWSUdBVE9SIFNFVFRJTkdTXG4gICAgICAgICAgICBzaG93TmF2aWdhdG9yOiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBuYXZpZ2F0b3JJZDogICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdmlnYXRvclBvc2l0aW9uOiAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF2aWdhdG9yU2l6ZVJhdGlvOiAgICAgICAgIDAuMixcbiAgICAgICAgICAgIG5hdmlnYXRvck1haW50YWluU2l6ZVJhdGlvOiBmYWxzZSxcbiAgICAgICAgICAgIG5hdmlnYXRvclRvcDogICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF2aWdhdG9yTGVmdDogICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuYXZpZ2F0b3JIZWlnaHQ6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdmlnYXRvcldpZHRoOiAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF2aWdhdG9yQXV0b1Jlc2l6ZTogICAgICAgIHRydWUsXG4gICAgICAgICAgICBuYXZpZ2F0b3JBdXRvRmFkZTogICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIG5hdmlnYXRvclJvdGF0ZTogICAgICAgICAgICB0cnVlLFxuXG4gICAgICAgICAgICAvLyBJTklUSUFMIFJPVEFUSU9OXG4gICAgICAgICAgICBkZWdyZWVzOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgICAgICAgICAgLy8gQVBQRUFSQU5DRVxuICAgICAgICAgICAgb3BhY2l0eTogICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICBjb21wb3NpdGVPcGVyYXRpb246ICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyRmlsbFN0eWxlOiAgICAgICBudWxsLFxuXG4gICAgICAgICAgICAvL1JFRkVSRU5DRSBTVFJJUCBTRVRUSU5HU1xuICAgICAgICAgICAgc2hvd1JlZmVyZW5jZVN0cmlwOiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZmVyZW5jZVN0cmlwU2Nyb2xsOiAgICAgICAnaG9yaXpvbnRhbCcsXG4gICAgICAgICAgICByZWZlcmVuY2VTdHJpcEVsZW1lbnQ6ICAgICAgIG51bGwsXG4gICAgICAgICAgICByZWZlcmVuY2VTdHJpcEhlaWdodDogICAgICAgIG51bGwsXG4gICAgICAgICAgICByZWZlcmVuY2VTdHJpcFdpZHRoOiAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZWZlcmVuY2VTdHJpcFBvc2l0aW9uOiAgICAgICdCT1RUT01fTEVGVCcsXG4gICAgICAgICAgICByZWZlcmVuY2VTdHJpcFNpemVSYXRpbzogICAgIDAuMixcblxuICAgICAgICAgICAgLy9DT0xMRUNUSU9OIFZJU1VBTElaQVRJT04gU0VUVElOR1NcbiAgICAgICAgICAgIGNvbGxlY3Rpb25Sb3dzOiAgICAgICAgIDMsIC8vb3IgY29sdW1ucyBkZXBlbmRpbmcgb24gbGF5b3V0XG4gICAgICAgICAgICBjb2xsZWN0aW9uQ29sdW1uczogICAgICAwLCAvL2NvbHVtbnMgaW4gaG9yaXpvbnRhbCBsYXlvdXQsIHJvd3MgaW4gdmVydGljYWwgbGF5b3V0XG4gICAgICAgICAgICBjb2xsZWN0aW9uTGF5b3V0OiAgICAgICAnaG9yaXpvbnRhbCcsIC8vdmVydGljYWxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25Nb2RlOiAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgY29sbGVjdGlvblRpbGVTaXplOiAgICAgODAwLFxuICAgICAgICAgICAgY29sbGVjdGlvblRpbGVNYXJnaW46ICAgODAsXG5cbiAgICAgICAgICAgIC8vUEVSRk9STUFOQ0UgU0VUVElOR1NcbiAgICAgICAgICAgIGltYWdlTG9hZGVyTGltaXQ6ICAgICAgIDAsXG4gICAgICAgICAgICBtYXhJbWFnZUNhY2hlQ291bnQ6ICAgICAyMDAsXG4gICAgICAgICAgICB0aW1lb3V0OiAgICAgICAgICAgICAgICAzMDAwMCxcbiAgICAgICAgICAgIHVzZUNhbnZhczogICAgICAgICAgICAgIHRydWUsICAvLyBVc2UgY2FudmFzIGVsZW1lbnQgZm9yIGRyYXdpbmcgaWYgYXZhaWxhYmxlXG5cbiAgICAgICAgICAgIC8vSU5URVJGQUNFIFJFU09VUkNFIFNFVFRJTkdTXG4gICAgICAgICAgICBwcmVmaXhVcmw6ICAgICAgICAgICAgICBcIi9pbWFnZXMvXCIsXG4gICAgICAgICAgICBuYXZJbWFnZXM6IHtcbiAgICAgICAgICAgICAgICB6b29tSW46IHtcbiAgICAgICAgICAgICAgICAgICAgUkVTVDogICAnem9vbWluX3Jlc3QucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgR1JPVVA6ICAnem9vbWluX2dyb3VwaG92ZXIucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgSE9WRVI6ICAnem9vbWluX2hvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIERPV046ICAgJ3pvb21pbl9wcmVzc2VkLnBuZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvb21PdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgUkVTVDogICAnem9vbW91dF9yZXN0LnBuZycsXG4gICAgICAgICAgICAgICAgICAgIEdST1VQOiAgJ3pvb21vdXRfZ3JvdXBob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBIT1ZFUjogICd6b29tb3V0X2hvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIERPV046ICAgJ3pvb21vdXRfcHJlc3NlZC5wbmcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob21lOiB7XG4gICAgICAgICAgICAgICAgICAgIFJFU1Q6ICAgJ2hvbWVfcmVzdC5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBHUk9VUDogICdob21lX2dyb3VwaG92ZXIucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgSE9WRVI6ICAnaG9tZV9ob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBET1dOOiAgICdob21lX3ByZXNzZWQucG5nJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVsbHBhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgUkVTVDogICAnZnVsbHBhZ2VfcmVzdC5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBHUk9VUDogICdmdWxscGFnZV9ncm91cGhvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIEhPVkVSOiAgJ2Z1bGxwYWdlX2hvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIERPV046ICAgJ2Z1bGxwYWdlX3ByZXNzZWQucG5nJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcm90YXRlbGVmdDoge1xuICAgICAgICAgICAgICAgICAgICBSRVNUOiAgICdyb3RhdGVsZWZ0X3Jlc3QucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgR1JPVVA6ICAncm90YXRlbGVmdF9ncm91cGhvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIEhPVkVSOiAgJ3JvdGF0ZWxlZnRfaG92ZXIucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgRE9XTjogICAncm90YXRlbGVmdF9wcmVzc2VkLnBuZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJvdGF0ZXJpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgIFJFU1Q6ICAgJ3JvdGF0ZXJpZ2h0X3Jlc3QucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgR1JPVVA6ICAncm90YXRlcmlnaHRfZ3JvdXBob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBIT1ZFUjogICdyb3RhdGVyaWdodF9ob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBET1dOOiAgICdyb3RhdGVyaWdodF9wcmVzc2VkLnBuZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZXZpb3VzOiB7XG4gICAgICAgICAgICAgICAgICAgIFJFU1Q6ICAgJ3ByZXZpb3VzX3Jlc3QucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgR1JPVVA6ICAncHJldmlvdXNfZ3JvdXBob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBIT1ZFUjogICdwcmV2aW91c19ob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBET1dOOiAgICdwcmV2aW91c19wcmVzc2VkLnBuZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5leHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgUkVTVDogICAnbmV4dF9yZXN0LnBuZycsXG4gICAgICAgICAgICAgICAgICAgIEdST1VQOiAgJ25leHRfZ3JvdXBob3Zlci5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBIT1ZFUjogICduZXh0X2hvdmVyLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIERPV046ICAgJ25leHRfcHJlc3NlZC5wbmcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9ERVZFTE9QRVIgU0VUVElOR1NcbiAgICAgICAgICAgIGRlYnVnTW9kZTogICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZGVidWdHcmlkQ29sb3I6ICAgICAgICAgJyM0MzdBQjInXG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogVE9ETzogZ2V0IHJpZCBvZiB0aGlzLiAgSSBjYW4ndCBzZWUgaG93IGl0J3MgcmVxdWlyZWQgYXQgYWxsLiAgTG9va3NcbiAgICAgICAgICogICAgICAgbGlrZSBhbiBlYXJseSBsZWdhY3kgY29kZSBhcnRpZmFjdC5cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAaWdub3JlXG4gICAgICAgICAqL1xuICAgICAgICBTSUdOQUw6IFwiLS0tLXNlYWRyYWdvbi0tLS1cIixcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggaW52b2tlcyB0aGUgbWV0aG9kIGFzIGlmIGl0IHdlcmUgYSBtZXRob2QgYmVsb25naW5nIHRvIHRoZSBvYmplY3QuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oIG9iamVjdCwgbWV0aG9kICkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KCBvYmplY3QsIGFyZ3MgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZW51bWVyYXRpb24gb2YgQnJvd3NlciB2ZW5kb3JzLlxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBVTktOT1dOXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBJRVxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gRklSRUZPWFxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gU0FGQVJJXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBDSFJPTUVcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE9QRVJBXG4gICAgICAgICAqL1xuICAgICAgICBCUk9XU0VSUzoge1xuICAgICAgICAgICAgVU5LTk9XTjogICAgMCxcbiAgICAgICAgICAgIElFOiAgICAgICAgIDEsXG4gICAgICAgICAgICBGSVJFRk9YOiAgICAyLFxuICAgICAgICAgICAgU0FGQVJJOiAgICAgMyxcbiAgICAgICAgICAgIENIUk9NRTogICAgIDQsXG4gICAgICAgICAgICBPUEVSQTogICAgICA1XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIERPTSBFbGVtZW50IGZvciB0aGUgZ2l2ZW4gaWQgb3IgZWxlbWVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR9IGVsZW1lbnQgQWNjZXB0cyBhbiBpZCBvciBlbGVtZW50LlxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gaWQsIG51bGwsIG9yIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgICAgICovXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgKCBlbGVtZW50ICkgPT0gXCJzdHJpbmdcIiApIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGVsZW1lbnQgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgZWxlbWVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnQgLSB0aGUgZWxlbWVuZXQgd2Ugd2FudCB0aGUgcG9zaXRpb24gZm9yLlxuICAgICAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gLSB0aGUgcG9zaXRpb24gb2YgdGhlIHVwcGVyIGxlZnQgY29ybmVyIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RWxlbWVudFBvc2l0aW9uOiBmdW5jdGlvbiggZWxlbWVudCApIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgJC5Qb2ludCgpLFxuICAgICAgICAgICAgICAgIGlzRml4ZWQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50O1xuXG4gICAgICAgICAgICBlbGVtZW50ICAgICAgPSAkLmdldEVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgICAgICAgICAgIGlzRml4ZWQgICAgICA9ICQuZ2V0RWxlbWVudFN0eWxlKCBlbGVtZW50ICkucG9zaXRpb24gPT0gXCJmaXhlZFwiO1xuICAgICAgICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KCBlbGVtZW50LCBpc0ZpeGVkICk7XG5cbiAgICAgICAgICAgIHdoaWxlICggb2Zmc2V0UGFyZW50ICkge1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0LnggKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIHJlc3VsdC55ICs9IGVsZW1lbnQub2Zmc2V0VG9wO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBpc0ZpeGVkICkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucGx1cyggJC5nZXRQYWdlU2Nyb2xsKCkgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gb2Zmc2V0UGFyZW50O1xuICAgICAgICAgICAgICAgIGlzRml4ZWQgPSAkLmdldEVsZW1lbnRTdHlsZSggZWxlbWVudCApLnBvc2l0aW9uID09IFwiZml4ZWRcIjtcbiAgICAgICAgICAgICAgICBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoIGVsZW1lbnQsIGlzRml4ZWQgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGVsZW1lbnQgYWRqdXN0ZWQgZm9yIGN1cnJlbnQgcGFnZSBhbmQvb3IgZWxlbWVudCBzY3JvbGwuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBlbGVtZW50IC0gdGhlIGVsZW1lbnQgd2Ugd2FudCB0aGUgcG9zaXRpb24gZm9yLlxuICAgICAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gLSB0aGUgcG9zaXRpb24gb2YgdGhlIHVwcGVyIGxlZnQgY29ybmVyIG9mIHRoZSBlbGVtZW50IGFkanVzdGVkIGZvciBjdXJyZW50IHBhZ2UgYW5kL29yIGVsZW1lbnQgc2Nyb2xsLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RWxlbWVudE9mZnNldDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG5cbiAgICAgICAgICAgIHZhciBkb2MgPSBlbGVtZW50ICYmIGVsZW1lbnQub3duZXJEb2N1bWVudCxcbiAgICAgICAgICAgICAgICBkb2NFbGVtZW50LFxuICAgICAgICAgICAgICAgIHdpbixcbiAgICAgICAgICAgICAgICBib3VuZGluZ1JlY3QgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG4gICAgICAgICAgICBpZiAoICFkb2MgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY0VsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gdHlwZW9mIHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICBib3VuZGluZ1JlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW4gPSAoIGRvYyA9PSBkb2Mud2luZG93ICkgP1xuICAgICAgICAgICAgICAgIGRvYyA6XG4gICAgICAgICAgICAgICAgKCBkb2Mubm9kZVR5cGUgPT09IDkgKSA/XG4gICAgICAgICAgICAgICAgICAgIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93IDpcbiAgICAgICAgICAgICAgICAgICAgZmFsc2U7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgICAgICBib3VuZGluZ1JlY3QubGVmdCArICggd2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW1lbnQuc2Nyb2xsTGVmdCApIC0gKCBkb2NFbGVtZW50LmNsaWVudExlZnQgfHwgMCApLFxuICAgICAgICAgICAgICAgIGJvdW5kaW5nUmVjdC50b3AgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtZW50LnNjcm9sbFRvcCApIC0gKCBkb2NFbGVtZW50LmNsaWVudFRvcCB8fCAwIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lcyB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnRcbiAgICAgICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRFbGVtZW50U2l6ZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIENTU1N0eWxlIG9iamVjdCBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBlbGVtZW50XG4gICAgICAgICAqIEByZXR1cm5zIHtDU1NTdHlsZX1cbiAgICAgICAgICovXG4gICAgICAgIGdldEVsZW1lbnRTdHlsZTpcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgP1xuICAgICAgICAgICAgZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmN1cnJlbnRTdHlsZTtcbiAgICAgICAgICAgIH0gOlxuICAgICAgICAgICAgZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbWVudCwgXCJcIiApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgcHJvcGVydHkgd2l0aCB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4IGFwcGVuZGVkLlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgdGhlIHByb3BlcnR5IG5hbWVcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIHByb3BlcnR5IHdpdGggdGhlIGNvcnJlY3QgcHJlZml4IG9yIG51bGwgaWYgbm90XG4gICAgICAgICAqIHN1cHBvcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldENzc1Byb3BlcnR5V2l0aFZlbmRvclByZWZpeDogZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICAgIHZhciBtZW1vID0ge307XG5cbiAgICAgICAgICAgICQuZ2V0Q3NzUHJvcGVydHlXaXRoVmVuZG9yUHJlZml4ID0gZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVtb1twcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtb1twcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnTVMnLCAnTycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2Via2l0JywgJ21veicsICdtcycsICdvJ107XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSAkLmNhcGl0YWxpemVGaXJzdExldHRlcihwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gcHJlZml4ZXNbaV0gKyBzdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVtb1twcm9wZXJ0eV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gJC5nZXRDc3NQcm9wZXJ0eVdpdGhWZW5kb3JQcmVmaXgocHJvcGVydHkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYXBpdGFsaXplcyB0aGUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyB3aXRoIHRoZSBmaXJzdCBsZXR0ZXIgY2FwaXRhbGl6ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNhcGl0YWxpemVGaXJzdExldHRlcjogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIGEgcG9pbnQgaXMgd2l0aGluIHRoZSBib3VuZGluZyByZWN0YW5nbGUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKGhpdC10ZXN0KS5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb2ludFxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHBvaW50SW5FbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCwgcG9pbnQgKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJC5nZXRFbGVtZW50T2Zmc2V0KCBlbGVtZW50ICksXG4gICAgICAgICAgICAgICAgc2l6ZSA9ICQuZ2V0RWxlbWVudFNpemUoIGVsZW1lbnQgKTtcbiAgICAgICAgICAgIHJldHVybiBwb2ludC54ID49IG9mZnNldC54ICYmIHBvaW50LnggPCBvZmZzZXQueCArIHNpemUueCAmJiBwb2ludC55IDwgb2Zmc2V0LnkgKyBzaXplLnkgJiYgcG9pbnQueSA+PSBvZmZzZXQueTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBsYXRlc3QgZXZlbnQsIHJlYWxseSBvbmx5IHVzZWZ1bCBpbnRlcm5hbGx5IHNpbmNlIGl0c1xuICAgICAgICAgKiBzcGVjaWZpYyB0byBJRSBiZWhhdmlvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICAgICAgICogQHJldHVybnMge0V2ZW50fVxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBGb3IgaW50ZXJuYWwgdXNlIG9ubHlcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGdldEV2ZW50OiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgICAgICBpZiggZXZlbnQgKXtcbiAgICAgICAgICAgICAgICAkLmdldEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJC5nZXRFdmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJC5nZXRFdmVudCggZXZlbnQgKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbW91c2Ugb24gdGhlIHNjcmVlbiBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICAgICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRNb3VzZVBvc2l0aW9uOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cbiAgICAgICAgICAgIGlmICggdHlwZW9mKCBldmVudC5wYWdlWCApID09IFwibnVtYmVyXCIgKSB7XG4gICAgICAgICAgICAgICAgJC5nZXRNb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24oIGV2ZW50ICl7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgJC5Qb2ludCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gJC5nZXRFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnggPSBldmVudC5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnkgPSBldmVudC5wYWdlWTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YoIGV2ZW50LmNsaWVudFggKSA9PSBcIm51bWJlclwiICkge1xuICAgICAgICAgICAgICAgICQuZ2V0TW91c2VQb3NpdGlvbiA9IGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3ICQuUG9pbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC54ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFggK1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQueSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jbGllbnRZICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwiVW5rbm93biBldmVudCBtb3VzZSBwb3NpdGlvbiwgbm8ga25vd24gdGVjaG5pcXVlLlwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICQuZ2V0TW91c2VQb3NpdGlvbiggZXZlbnQgKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIHRoZSBwYWdlJ3MgY3VycmVudCBzY3JvbGwgcG9zaXRpb24uXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgICAgICovXG4gICAgICAgIGdldFBhZ2VTY3JvbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRvY0VsZW1lbnQgID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IHt9LFxuICAgICAgICAgICAgICAgIGJvZHkgICAgICAgID0gZG9jdW1lbnQuYm9keSB8fCB7fTtcblxuICAgICAgICAgICAgaWYgKCB0eXBlb2YoIHdpbmRvdy5wYWdlWE9mZnNldCApID09IFwibnVtYmVyXCIgKSB7XG4gICAgICAgICAgICAgICAgJC5nZXRQYWdlU2Nyb2xsID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJvZHkuc2Nyb2xsTGVmdCB8fCBib2R5LnNjcm9sbFRvcCApIHtcbiAgICAgICAgICAgICAgICAkLmdldFBhZ2VTY3JvbGwgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBkb2NFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jRWxlbWVudC5zY3JvbGxUb3AgKSB7XG4gICAgICAgICAgICAgICAgJC5nZXRQYWdlU2Nyb2xsID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgcmVhc3NpZ24gdGhlIGZ1bmN0aW9uIHlldCwgYXMgdGhlcmUgd2FzIG5vIHNjcm9sbC5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoMCwwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICQuZ2V0UGFnZVNjcm9sbCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHBhZ2Ugc2Nyb2xsIHBvc2l0aW9uLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICAgICAqL1xuICAgICAgICBzZXRQYWdlU2Nyb2xsOiBmdW5jdGlvbiggc2Nyb2xsICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgKCB3aW5kb3cuc2Nyb2xsVG8gKSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcbiAgICAgICAgICAgICAgICAkLnNldFBhZ2VTY3JvbGwgPSBmdW5jdGlvbiggc2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oIHNjcm9sbC54LCBzY3JvbGwueSApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNjcm9sbCA9ICQuZ2V0UGFnZVNjcm9sbCgpO1xuICAgICAgICAgICAgICAgIGlmICggb3JpZ2luYWxTY3JvbGwueCA9PT0gc2Nyb2xsLnggJiZcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTY3JvbGwueSA9PT0gc2Nyb2xsLnkgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBhbHJlYWR5IGNvcnJlY3RseSBwb3NpdGlvbmVkIGFuZCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyB3YXkgdG8gZGV0ZWN0IHRoZSBjb3JyZWN0IG1ldGhvZC5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IHNjcm9sbC54O1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gc2Nyb2xsLnk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGwgPSAkLmdldFBhZ2VTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRTY3JvbGwueCAhPT0gb3JpZ2luYWxTY3JvbGwueCAmJlxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2Nyb2xsLnkgIT09IG9yaWdpbmFsU2Nyb2xsLnkgKSB7XG4gICAgICAgICAgICAgICAgICAgICQuc2V0UGFnZVNjcm9sbCA9IGZ1bmN0aW9uKCBzY3JvbGwgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSBzY3JvbGwueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gc2Nyb2xsLnk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbC54O1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGwueTtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2Nyb2xsID0gJC5nZXRQYWdlU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50U2Nyb2xsLnggIT09IG9yaWdpbmFsU2Nyb2xsLnggJiZcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjcm9sbC55ICE9PSBvcmlnaW5hbFNjcm9sbC55ICkge1xuICAgICAgICAgICAgICAgICAgICAkLnNldFBhZ2VTY3JvbGwgPSBmdW5jdGlvbiggc2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgPSBzY3JvbGwueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGwueTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGZpbmQgYW55dGhpbmcgd29ya2luZywgc28gd2UgZG8gbm90aGluZy5cbiAgICAgICAgICAgICAgICAkLnNldFBhZ2VTY3JvbGwgPSBmdW5jdGlvbiggc2Nyb2xsICkge1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAkLnNldFBhZ2VTY3JvbGwoIHNjcm9sbCApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIHRoZSBzaXplIG9mIHRoZSBicm93c2VycyB3aW5kb3cuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgICAgICovXG4gICAgICAgIGdldFdpbmRvd1NpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRvY0VsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwge30sXG4gICAgICAgICAgICAgICAgYm9keSAgICA9IGRvY3VtZW50LmJvZHkgfHwge307XG5cbiAgICAgICAgICAgIGlmICggdHlwZW9mKCB3aW5kb3cuaW5uZXJXaWR0aCApID09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgICQuZ2V0V2luZG93U2l6ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGRvY0VsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jRWxlbWVudC5jbGllbnRIZWlnaHQgKSB7XG4gICAgICAgICAgICAgICAgJC5nZXRXaW5kb3dTaXplID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBib2R5LmNsaWVudFdpZHRoIHx8IGJvZHkuY2xpZW50SGVpZ2h0ICkge1xuICAgICAgICAgICAgICAgICQuZ2V0V2luZG93U2l6ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gd2luZG93IHNpemUsIG5vIGtub3duIHRlY2huaXF1ZS5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAkLmdldFdpbmRvd1NpemUoKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyB0aGUgZ2l2ZW4gZWxlbWVudCBpbiBhIG5lc3Qgb2YgZGl2cyBzbyB0aGF0IHRoZSBlbGVtZW50IGNhblxuICAgICAgICAgKiBiZSBlYXNpbHkgY2VudGVyZWQgdXNpbmcgQ1NTIHRhYmxlc1xuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gZWxlbWVudFxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH0gb3V0ZXJtb3N0IHdyYXBwZXIgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgbWFrZUNlbnRlcmVkTm9kZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGEgcG9zc2libGUgSUQgdG8gYW4gYWN0dWFsIEhUTUxFbGVtZW50XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgQ1NTIHRhYmxlcyByZXF1aXJlIHlvdSB0byBoYXZlIGEgZGlzcGxheTp0YWJsZS9yb3cvY2VsbCBoaWVyYXJjaHkgc28gd2UgbmVlZCB0byBjcmVhdGVcbiAgICAgICAgICAgICAgICB0aHJlZSBuZXN0ZWQgd3JhcHBlciBkaXZzOlxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIHZhciB3cmFwcGVycyA9IFtcbiAgICAgICAgICAgICAgICAkLm1ha2VOZXV0cmFsRWxlbWVudCggJ2RpdicgKSxcbiAgICAgICAgICAgICAgICAkLm1ha2VOZXV0cmFsRWxlbWVudCggJ2RpdicgKSxcbiAgICAgICAgICAgICAgICAkLm1ha2VOZXV0cmFsRWxlbWVudCggJ2RpdicgKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gSXQgZmVlbHMgbGlrZSB3ZSBzaG91bGQgYmUgYWJsZSB0byBwYXNzIHN0eWxlIGRpY3RzIHRvIG1ha2VOZXV0cmFsRWxlbWVudDpcbiAgICAgICAgICAgICQuZXh0ZW5kKHdyYXBwZXJzWzBdLnN0eWxlLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJ0YWJsZVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJC5leHRlbmQod3JhcHBlcnNbMV0uc3R5bGUsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcInRhYmxlLXJvd1wiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJC5leHRlbmQod3JhcHBlcnNbMl0uc3R5bGUsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcInRhYmxlLWNlbGxcIixcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcIm1pZGRsZVwiLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdyYXBwZXJzWzBdLmFwcGVuZENoaWxkKHdyYXBwZXJzWzFdKTtcbiAgICAgICAgICAgIHdyYXBwZXJzWzFdLmFwcGVuZENoaWxkKHdyYXBwZXJzWzJdKTtcbiAgICAgICAgICAgIHdyYXBwZXJzWzJdLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlcnNbMF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhbiBlYXNpbHkgcG9zaXRpb25hYmxlIGVsZW1lbnQgb2YgdGhlIGdpdmVuIHR5cGUgdGhhdCB0aGVyZWZvclxuICAgICAgICAgKiBzZXJ2ZXMgYXMgYW4gZXhjZWxsZW50IGNvbnRhaW5lciBlbGVtZW50LlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHRhZ05hbWVcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICBtYWtlTmV1dHJhbEVsZW1lbnQ6IGZ1bmN0aW9uKCB0YWdOYW1lICkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCB0YWdOYW1lICksXG4gICAgICAgICAgICAgICAgc3R5bGUgICA9IGVsZW1lbnQuc3R5bGU7XG5cbiAgICAgICAgICAgIHN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50IG5vbmVcIjtcbiAgICAgICAgICAgIHN0eWxlLmJvcmRlciAgICAgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHN0eWxlLm1hcmdpbiAgICAgPSBcIjBweFwiO1xuICAgICAgICAgICAgc3R5bGUucGFkZGluZyAgICA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzdHlsZS5wb3NpdGlvbiAgID0gXCJzdGF0aWNcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBtaWxsaXNlY29uZHMsIHVzaW5nIERhdGUubm93KCkgaWYgYXZhaWxhYmxlXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgbm93OiBmdW5jdGlvbiggKSB7XG4gICAgICAgICAgaWYgKERhdGUubm93KSB7XG4gICAgICAgICAgICAkLm5vdyA9IERhdGUubm93O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLm5vdyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuICQubm93KCk7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5zdXJlcyBhbiBpbWFnZSBpcyBsb2FkZWQgY29ycmVjdGx5IHRvIHN1cHBvcnQgYWxwaGEgdHJhbnNwYXJlbmN5LlxuICAgICAgICAgKiBHZW5lcmFsbHkgb25seSBJRSBoYXMgaXNzdWVzIGRvaW5nIHRoaXMgY29ycmVjdGx5IGZvciBmb3JtYXRzIGxpa2VcbiAgICAgICAgICogcG5nLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHNyY1xuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICAgICAgICovXG4gICAgICAgIG1ha2VUcmFuc3BhcmVudEltYWdlOiBmdW5jdGlvbiggc3JjICkge1xuXG4gICAgICAgICAgICAkLm1ha2VUcmFuc3BhcmVudEltYWdlID0gZnVuY3Rpb24oIHNyYyApe1xuICAgICAgICAgICAgICAgIHZhciBpbWcgPSAkLm1ha2VOZXV0cmFsRWxlbWVudCggXCJpbWdcIiApO1xuXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IHNyYztcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbWc7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoICQuQnJvd3Nlci52ZW5kb3IgPT0gJC5CUk9XU0VSUy5JRSAmJiAkLkJyb3dzZXIudmVyc2lvbiA8IDcgKSB7XG5cbiAgICAgICAgICAgICAgICAkLm1ha2VUcmFuc3BhcmVudEltYWdlID0gZnVuY3Rpb24oIHNyYyApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW1nICAgICA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCBcImltZ1wiICksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggID0gZWxlbWVudC5zdHlsZS53aWR0aCB8fCBpbWcud2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGVsZW1lbnQuc3R5bGUuaGVpZ2h0IHx8IGltZy5oZWlnaHQgKyBcInB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nID0gbnVsbDsgICAgIC8vIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzIGluIElFXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IHNyYztcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5maWx0ZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihzcmM9J1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIicsIHNpemluZ01ldGhvZD0nc2NhbGUnKVwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICQubWFrZVRyYW5zcGFyZW50SW1hZ2UoIHNyYyApO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIG9wYWNpdHkgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50LlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gZWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb3BhY2l0eVxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt1c2VzQWxwaGFdXG4gICAgICAgICAqL1xuICAgICAgICBzZXRFbGVtZW50T3BhY2l0eTogZnVuY3Rpb24oIGVsZW1lbnQsIG9wYWNpdHksIHVzZXNBbHBoYSApIHtcblxuICAgICAgICAgICAgdmFyIGllT3BhY2l0eSxcbiAgICAgICAgICAgICAgICBpZUZpbHRlcjtcblxuICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuXG4gICAgICAgICAgICBpZiAoIHVzZXNBbHBoYSAmJiAhJC5Ccm93c2VyLmFscGhhICkge1xuICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBNYXRoLnJvdW5kKCBvcGFjaXR5ICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggJC5Ccm93c2VyLm9wYWNpdHkgKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eSA8IDEgPyBvcGFjaXR5IDogXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5IDwgMSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWVPcGFjaXR5ID0gTWF0aC5yb3VuZCggMTAwICogb3BhY2l0eSApO1xuICAgICAgICAgICAgICAgICAgICBpZUZpbHRlciAgPSBcImFscGhhKG9wYWNpdHk9XCIgKyBpZU9wYWNpdHkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5maWx0ZXIgPSBpZUZpbHRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmZpbHRlciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHNwZWNpZmllZCBlbGVtZW50J3MgdG91Y2gtYWN0aW9uIHN0eWxlIGF0dHJpYnV0ZSB0byAnbm9uZScuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBzZXRFbGVtZW50VG91Y2hBY3Rpb25Ob25lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAkLmdldEVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIGVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gIT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgZWxlbWVudC5zdHlsZS5tc1RvdWNoQWN0aW9uICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1zVG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIHRoZSBzcGVjaWZpZWQgQ1NTIGNsYXNzIHRvIHRoZSBlbGVtZW50IGlmIG5vdCBwcmVzZW50LlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gZWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lXG4gICAgICAgICAqL1xuICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGNsYXNzTmFtZSApIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAkLmdldEVsZW1lbnQoIGVsZW1lbnQgKTtcblxuICAgICAgICAgICAgaWYgKCAhIGVsZW1lbnQuY2xhc3NOYW1lICkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggKCAnICcgKyBlbGVtZW50LmNsYXNzTmFtZSArICcgJyApLlxuICAgICAgICAgICAgICAgIGluZGV4T2YoICcgJyArIGNsYXNzTmFtZSArICcgJyApID09PSAtMSApIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGFuIGVsZW1lbnQgaXMgZm91bmQgaW4gYW4gYXJyYXkgb3IgLTFcbiAgICAgICAgICogaWYgbm90IHByZXNlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIENvZGUgdGFrZW4gYW5kIGFkYXB0ZWQgZnJvbVxuICAgICAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mI0NvbXBhdGliaWxpdHlcbiAgICAgICAgICpcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBmcm9tIHdoaWNoIHRvIGZpbmQgdGhlIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHNlYXJjaEVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZmluZFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Zyb21JbmRleD0wXSBJbmRleCB0byBzdGFydCByZXNlYXJjaC5cbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBhcnJheS5cbiAgICAgICAgICovXG4gICAgICAgIGluZGV4T2Y6IGZ1bmN0aW9uKCBhcnJheSwgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4ICkge1xuICAgICAgICAgICAgaWYgKCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4T2YgPSBmdW5jdGlvbiggYXJyYXksIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YoIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhPZiA9IGZ1bmN0aW9uKCBhcnJheSwgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4ICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpdm90ID0gKCBmcm9tSW5kZXggKSA/IGZyb21JbmRleCA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmICggIWFycmF5ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciggKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsZW5ndGggPT09IDAgfHwgcGl2b3QgPj0gbGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwaXZvdCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXZvdCA9IGxlbmd0aCAtIE1hdGguYWJzKCBwaXZvdCApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IHBpdm90OyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGFycmF5W2ldID09PSBzZWFyY2hFbGVtZW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZiggYXJyYXksIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIHNwZWNpZmllZCBDU1MgY2xhc3MgZnJvbSB0aGUgZWxlbWVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBjbGFzc05hbWUgKSB7XG4gICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICBuZXdDbGFzc2VzID0gW10sXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICAgICAgb2xkQ2xhc3NlcyA9IGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCAvXFxzKy8gKTtcbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgb2xkQ2xhc3Nlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIG9sZENsYXNzZXNbIGkgXSAmJiBvbGRDbGFzc2VzWyBpIF0gIT09IGNsYXNzTmFtZSApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2xhc3Nlcy5wdXNoKCBvbGRDbGFzc2VzWyBpIF0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG5ld0NsYXNzZXMuam9pbignICcpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBlbGVtZW50LCBldmVudE5hbWUgYW5kIGhhbmRsZXIuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt1c2VDYXB0dXJlXVxuICAgICAgICAgKi9cbiAgICAgICAgYWRkRXZlbnQ6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICggZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyLCB1c2VDYXB0dXJlICkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoICdvbicgKyBldmVudE5hbWUsIGhhbmRsZXIgKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiTm8ga25vd24gZXZlbnQgbW9kZWwuXCIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSgpKSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgYSBnaXZlbiBldmVudCBsaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGVsZW1lbnQsIGV2ZW50IHR5cGUgYW5kXG4gICAgICAgICAqIGhhbmRsZXIuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt1c2VDYXB0dXJlXVxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlRXZlbnQ6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB3aW5kb3cuZGV0YWNoRXZlbnQgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUgKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSAkLmdldEVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudCggJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlciApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggXCJObyBrbm93biBldmVudCBtb2RlbC5cIiApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KCkpLFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbmNlbHMgdGhlIGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvciBoYWQgdGhlIGV2ZW50IHByb3BhZ2F0ZWQgYWxsXG4gICAgICAgICAqIHRoZSB3YXkgdXAgdGhlIERPTSB0byB0aGUgd2luZG93IG9iamVjdC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICAgICAgICovXG4gICAgICAgIGNhbmNlbEV2ZW50OiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG5cbiAgICAgICAgICAgIGlmICggZXZlbnQucHJldmVudERlZmF1bHQgKSB7XG4gICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICAvLyBXM0MgZm9yIHByZXZlbnRpbmcgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKXtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgICAgICAvLyBsZWdhY3kgZm9yIHByZXZlbnRpbmcgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBJRSBmb3IgcHJldmVudGluZyBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcHMgdGhlIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudCB1cCB0aGUgRE9NLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtFdmVudH0gW2V2ZW50XVxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcEV2ZW50OiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG5cbiAgICAgICAgICAgIGlmICggZXZlbnQuc3RvcFByb3BhZ2F0aW9uICkge1xuICAgICAgICAgICAgICAgIC8vIFczQyBmb3Igc3RvcHBpbmcgcHJvcGFnYXRpb25cbiAgICAgICAgICAgICAgICAkLnN0b3BFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJRSBmb3Igc3RvcHBpbmcgcHJvcGFnYXRpb25cbiAgICAgICAgICAgICAgICAkLnN0b3BFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkLnN0b3BFdmVudCggZXZlbnQgKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW1pbGFyIHRvIE9wZW5TZWFkcmFnb24uZGVsZWdhdGUsIGJ1dCBpdCBkb2VzIG5vdCBpbW1lZGlhdGVseSBjYWxsXG4gICAgICAgICAqIHRoZSBtZXRob2Qgb24gdGhlIG9iamVjdCwgcmV0dXJuaW5nIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIGNhbGxlZFxuICAgICAgICAgKiByZXBlYXRlZGx5IHRvIGRlbGVnYXRlIHRoZSBtZXRob2QuIEl0IGFsc28gYWxsb3dzIGFkZGl0b25hbCBhcmd1bWVudHNcbiAgICAgICAgICogdG8gYmUgcGFzc2VkIGR1cmluZyBjb25zdHJ1Y3Rpb24gd2hpY2ggd2lsbCBiZSBhZGRlZCBkdXJpbmcgZWFjaFxuICAgICAgICAgKiBpbnZvY2F0aW9uLCBhbmQgZWFjaCBpbnZvY2F0aW9uIGNhbiBhZGQgYWRkaXRpb25hbCBhcmd1bWVudHMgYXMgd2VsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSBbYXJnc10gYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwYXNzZWQgYXMgYXJndW1lbnRzIHRvIHRoZVxuICAgICAgICAgKiAgY3JlYXRlZCBjYWxsYmFja1xuICAgICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDYWxsYmFjazogZnVuY3Rpb24oIG9iamVjdCwgbWV0aG9kICkge1xuICAgICAgICAgICAgLy9UT0RPOiBUaGlzIHBhdHRlcm4gaXMgcGFpbmZ1bCB0byB1c2UgYW5kIGRlYnVnLiAgSXQncyBtdWNoIGNsZWFuZXJcbiAgICAgICAgICAgIC8vICAgICAgdG8gdXNlIHBpbm5pbmcgcGx1cyBhbm9ueW1vdXMgZnVuY3Rpb25zLiAgR2V0IHJpZCBvZiB0aGlzXG4gICAgICAgICAgICAvLyAgICAgIHBhdHRlcm4hXG4gICAgICAgICAgICB2YXIgaW5pdGlhbEFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgZm9yICggaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbEFyZ3MucHVzaCggYXJndW1lbnRzWyBpIF0gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gaW5pdGlhbEFyZ3MuY29uY2F0KCBbXSApLFxuICAgICAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goIGFyZ3VtZW50c1sgaSBdICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSggb2JqZWN0LCBhcmdzICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHJlaXZlcyB0aGUgdmFsdWUgb2YgYSB1cmwgcGFyYW1ldGVyIGZyb20gdGhlIHdpbmRvdy5sb2NhdGlvbiBzdHJpbmcuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSB2YWx1ZSBvZiB0aGUgdXJsIHBhcmFtZXRlciBvciBudWxsIGlmIG5vIHBhcmFtIG1hdGNoZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRVcmxQYXJhbWV0ZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBVUkxQQVJBTVNbIGtleSBdO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRyaWV2ZXMgdGhlIHByb3RvY29sIHVzZWQgYnkgdGhlIHVybC4gVGhlIHVybCBjYW4gZWl0aGVyIGJlIGFic29sdXRlXG4gICAgICAgICAqIG9yIHJlbGF0aXZlLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgdXJsIHRvIHJldHJpZXZlIHRoZSBwcm90b2NvbCBmcm9tLlxuICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBwcm90b2NvbCAoaHR0cDosIGh0dHBzOiwgZmlsZTosIGZ0cDogLi4uKVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VXJsUHJvdG9jb2w6IGZ1bmN0aW9uKCB1cmwgKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2goL14oW2Etel0rOilcXC9cXC8vaSk7XG4gICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkge1xuICAgICAgICAgICAgICAgIC8vIFJlbGF0aXZlIFVSTCwgcmV0cml2ZSB0aGUgcHJvdG9jb2wgZnJvbSB3aW5kb3cubG9jYXRpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhbiBYSFIgb2JqZWN0XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBwYXJhbSB7dHlwZX0gW2xvY2FsXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIFhIUiB3aWxsIGJlIGZpbGU6IHByb3RvY29sXG4gICAgICAgICAqIGNvbXBhdGlibGUgaWYgcG9zc2libGUgKGJ1dCBtYXkgcmFpc2UgYSB3YXJuaW5nIGluIHRoZSBicm93c2VyKS5cbiAgICAgICAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQWpheFJlcXVlc3Q6IGZ1bmN0aW9uKCBsb2NhbCApIHtcbiAgICAgICAgICAgIC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCB3aW5kb3cuQWN0aXZlWE9iamVjdCBzbyB3ZSBqdXN0IHRyeSB0b1xuICAgICAgICAgICAgLy8gY3JlYXRlIG9uZSB0byBzZWUgaWYgaXQgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgICAgLy8gU2VlOiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZG40MjM5NDglMjh2PXZzLjg1JTI5LmFzcHhcbiAgICAgICAgICAgIHZhciBzdXBwb3J0QWN0aXZlWDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3Q6dHJ1ZSAqL1xuICAgICAgICAgICAgICAgIHN1cHBvcnRBY3RpdmVYID0gISFuZXcgQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XG4gICAgICAgICAgICB9IGNhdGNoKCBlICkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRBY3RpdmVYID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggc3VwcG9ydEFjdGl2ZVggKSB7XG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgKSB7XG4gICAgICAgICAgICAgICAgICAgICQuY3JlYXRlQWpheFJlcXVlc3QgPSBmdW5jdGlvbiggbG9jYWwgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxvY2FsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jcmVhdGVBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCBcIk1pY3Jvc29mdC5YTUxIVFRQXCIgKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgKSB7XG4gICAgICAgICAgICAgICAgJC5jcmVhdGVBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LlwiICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJC5jcmVhdGVBamF4UmVxdWVzdCggbG9jYWwgKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZXMgYW4gQUpBWCByZXF1ZXN0LlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy51cmwgLSB0aGUgdXJsIHRvIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5zdWNjZXNzIC0gYSBmdW5jdGlvbiB0byBjYWxsIG9uIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmVycm9yIC0gYSBmdW5jdGlvbiB0byBjYWxsIG9uIHdoZW4gYW4gZXJyb3Igb2NjdXJzXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2l0aENyZWRlbnRpYWxzPWZhbHNlXSAtIHdoZXRoZXIgdG8gc2V0IHRoZSBYSFIncyB3aXRoQ3JlZGVudGlhbHNcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBtYWtlQWpheFJlcXVlc3Q6IGZ1bmN0aW9uKCB1cmwsIG9uU3VjY2Vzcywgb25FcnJvciApIHtcbiAgICAgICAgICAgIHZhciB3aXRoQ3JlZGVudGlhbHM7XG5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBvdXIgcHJlZmVycmVkIEFQSSBpcyB0aGF0IHlvdSBwYXNzIGluIGEgc2luZ2xlIG9iamVjdDsgdGhlIG5hbWVkXG4gICAgICAgICAgICAvLyBhcmd1bWVudHMgYXJlIGZvciBsZWdhY3kgc3VwcG9ydC5cbiAgICAgICAgICAgIGlmKCAkLmlzUGxhaW5PYmplY3QoIHVybCApICl7XG4gICAgICAgICAgICAgICAgb25TdWNjZXNzID0gdXJsLnN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgb25FcnJvciA9IHVybC5lcnJvcjtcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHMgPSB1cmwud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIHVybCA9IHVybC51cmw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcm90b2NvbCA9ICQuZ2V0VXJsUHJvdG9jb2woIHVybCApO1xuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSAkLmNyZWF0ZUFqYXhSZXF1ZXN0KCBwcm90b2NvbCA9PT0gXCJmaWxlOlwiICk7XG5cbiAgICAgICAgICAgIGlmICggISQuaXNGdW5jdGlvbiggb25TdWNjZXNzICkgKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIm1ha2VBamF4UmVxdWVzdCByZXF1aXJlcyBhIHN1Y2Nlc3MgY2FsbGJhY2tcIiApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIDQgPSBET05FIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3QjUHJvcGVydGllcylcbiAgICAgICAgICAgICAgICBpZiAoIHJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0ICkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7fTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaXRoIHByb3RvY29scyBvdGhlciB0aGFuIGh0dHAvaHR0cHMsIHRoZSBzdGF0dXMgaXMgMjAwXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIEZpcmVmb3ggYW5kIDAgb24gb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXF1ZXN0LnN0YXR1cyA9PT0gMjAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoIHJlcXVlc3Quc3RhdHVzID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sICE9PSBcImh0dHA6XCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2wgIT09IFwiaHR0cHM6XCIgKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKCByZXF1ZXN0ICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmNvbnNvbGUubG9nKCBcIkFKQVggcmVxdWVzdCByZXR1cm5lZCAlZDogJXNcIiwgcmVxdWVzdC5zdGF0dXMsIHVybCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggb25FcnJvciApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoIHJlcXVlc3QgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCBcIkdFVFwiLCB1cmwsIHRydWUgKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNlbmQoIG51bGwgKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gZS5tZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgSUUgPCAxMCBkb2VzIG5vdCBzdXBwb3J0IENPUlMgYW5kIGFuIFhIUiByZXF1ZXN0IHRvIGEgZGlmZmVyZW50IG9yaWdpbiB3aWxsIGZhaWwgYXMgc29vblxuICAgICAgICAgICAgICAgICAgICBhcyBzZW5kKCkgaXMgY2FsbGVkLiBUaGlzIGlzIHBhcnRpY3VsYXJseSBlYXN5IHRvIG1pc3MgZHVyaW5nIGRldmVsb3BtZW50IGFuZCBhcHBlYXIgaW5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdGlvbiBpZiB5b3UgdXNlIGEgQ0ROIG9yIGRvbWFpbiBzaGFyZGluZyBhbmQgdGhlIHNlY3VyaXR5IHBvbGljeSBpcyBsaWtlbHkgdG8gYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uIGhhbmRsZXJzIHNpbmNlIGFueSBhdHRlbXB0IHRvIGFjY2VzcyBhIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IG9iamVjdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgIHJhaXNlIGFuIGFjY2VzcyBkZW5pZWQgVHlwZUVycm9yIGluc2lkZSB0aGUgY2F0Y2ggYmxvY2suXG5cbiAgICAgICAgICAgICAgICAgICAgVG8gYmUgZnJpZW5kbGllciwgd2UnbGwgY2hlY2sgZm9yIHRoaXMgc3BlY2lmaWMgZXJyb3IgYW5kIGFkZCBhIGRvY3VtZW50YXRpb24gcG9pbnRlclxuICAgICAgICAgICAgICAgICAgICB0byBwb2ludCBkZXZlbG9wZXJzIGluIHRoZSByaWdodCBkaXJlY3Rpb24uIFdlIHRlc3QgdGhlIGV4Y2VwdGlvbiBudW1iZXIgYmVjYXVzZSBJRSdzXG4gICAgICAgICAgICAgICAgICAgIGVycm9yIG1lc3NhZ2VzIGFyZSBsb2NhbGl6ZWQuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgb2xkSUUgPSAkLkJyb3dzZXIudmVuZG9yID09ICQuQlJPV1NFUlMuSUUgJiYgJC5Ccm93c2VyLnZlcnNpb24gPCAxMDtcbiAgICAgICAgICAgICAgICBpZiAoIG9sZElFICYmIHR5cGVvZiggZS5udW1iZXIgKSAhPSBcInVuZGVmaW5lZFwiICYmIGUubnVtYmVyID09IC0yMTQ3MDI0ODkxICkge1xuICAgICAgICAgICAgICAgICAgICBtc2cgKz0gXCJcXG5TZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM3NTA1KHY9dnMuODUpLmFzcHgjeGRvbWFpblwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQuY29uc29sZS5sb2coIFwiJXMgd2hpbGUgbWFraW5nIEFKQVggcmVxdWVzdDogJXNcIiwgZS5uYW1lLCBtc2cgKTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5YRG9tYWluUmVxdWVzdCkgeyAvLyBJRTkgb3IgSUU4IG1pZ2h0IGFzIHdlbGwgdHJ5IHRvIHVzZSBYRG9tYWluUmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICB2YXIgeGRyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4ZHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhkci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBvblN1Y2Nlc3MgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHsgLy8gRmFraW5nIGFuIHhociBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dDogeGRyLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLCAvLyBYRG9tYWluUmVxdWVzdCBkb2Vzbid0IHN1cHBvcnQgc3RhdHVzIGNvZGVzLCBzbyB3ZSBqdXN0IGZha2Ugb25lISA6L1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogJ09LJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgeGRyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uICggb25FcnJvciApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHsgLy8gRmFraW5nIGFuIHhociBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dDogeGRyLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDQ0LCAvLyA0NDQgTm8gUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6ICdBbiBlcnJvciBoYXBwZW5lZC4gRHVlIHRvIGFuIFhEb21haW5SZXF1ZXN0IGRlZmljaWVuY3kgd2UgY2FuIG5vdCBleHRyYWN0IGFueSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIGVycm9yLiBVcGdyYWRlIHlvdXIgYnJvd3Nlci4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhkci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhkci5zZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBvbkVycm9yICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoIHJlcXVlc3QsIGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggb25FcnJvciApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvciggcmVxdWVzdCwgZSApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUYWtlbiBmcm9tIGpRdWVyeSAxLjYuMVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMudXJsXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuY2FsbGJhY2tcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnBhcmFtPSdjYWxsYmFjayddIFRoZSBuYW1lIG9mIHRoZSB1cmwgcGFyYW1ldGVyXG4gICAgICAgICAqICAgICAgdG8gcmVxdWVzdCB0aGUganNvbnAgcHJvdmlkZXIgd2l0aC5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNhbGxiYWNrTmFtZT1dIFRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayB0b1xuICAgICAgICAgKiAgICAgIHJlcXVlc3QgdGhlIGpzb25wIHByb3ZpZGVyIHdpdGguXG4gICAgICAgICAqL1xuICAgICAgICBqc29ucDogZnVuY3Rpb24oIG9wdGlvbnMgKXtcbiAgICAgICAgICAgIHZhciBzY3JpcHQsXG4gICAgICAgICAgICAgICAgdXJsICAgICA9IG9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgIGhlYWQgICAgPSBkb2N1bWVudC5oZWFkIHx8XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImhlYWRcIiApWyAwIF0gfHxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgIGpzb25wQ2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrTmFtZSB8fCAnb3BlbnNlYWRyYWdvbicgKyAkLm5vdygpLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzICAgICAgPSB3aW5kb3dbIGpzb25wQ2FsbGJhY2sgXSxcbiAgICAgICAgICAgICAgICByZXBsYWNlICAgICAgID0gXCIkMVwiICsganNvbnBDYWxsYmFjayArIFwiJDJcIixcbiAgICAgICAgICAgICAgICBjYWxsYmFja1BhcmFtID0gb3B0aW9ucy5wYXJhbSB8fCAnY2FsbGJhY2snLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICAgICAgPSBvcHRpb25zLmNhbGxiYWNrO1xuXG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSggLyhcXD0pXFw/KCZ8JCl8XFw/XFw/L2ksIHJlcGxhY2UgKTtcbiAgICAgICAgICAgIC8vIEFkZCBjYWxsYmFjayBtYW51YWxseVxuICAgICAgICAgICAgdXJsICs9ICgvXFw/Ly50ZXN0KCB1cmwgKSA/IFwiJlwiIDogXCI/XCIpICsgY2FsbGJhY2tQYXJhbSArIFwiPVwiICsganNvbnBDYWxsYmFjaztcblxuICAgICAgICAgICAgLy8gSW5zdGFsbCBjYWxsYmFja1xuICAgICAgICAgICAgd2luZG93WyBqc29ucENhbGxiYWNrIF0gPSBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhcHJldmlvdXMgKXtcbiAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvd1sganNvbnBDYWxsYmFjayBdO1xuICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N3YWxsb3dcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd1sganNvbnBDYWxsYmFjayBdID0gcHJldmlvdXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBjYWxsYmFjayAmJiAkLmlzRnVuY3Rpb24oIGNhbGxiYWNrICkgKXtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soIHJlc3BvbnNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG4gICAgICAgICAgICAvL1RPRE86IGhhdmluZyBhbiBpc3N1ZSB3aXRoIGFzeW5jIGluZm8gcmVxdWVzdHNcbiAgICAgICAgICAgIGlmKCB1bmRlZmluZWQgIT09IG9wdGlvbnMuYXN5bmMgfHwgZmFsc2UgIT09IG9wdGlvbnMuYXN5bmMgKXtcbiAgICAgICAgICAgICAgICBzY3JpcHQuYXN5bmMgPSBcImFzeW5jXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggb3B0aW9ucy5zY3JpcHRDaGFyc2V0ICkge1xuICAgICAgICAgICAgICAgIHNjcmlwdC5jaGFyc2V0ID0gb3B0aW9ucy5zY3JpcHRDaGFyc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gdXJsO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggaGFuZGxlcnMgZm9yIGFsbCBicm93c2Vyc1xuICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHtcblxuICAgICAgICAgICAgICAgIGlmICggaXNBYm9ydCB8fCAhc2NyaXB0LnJlYWR5U3RhdGUgfHwgL2xvYWRlZHxjb21wbGV0ZS8udGVzdCggc2NyaXB0LnJlYWR5U3RhdGUgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgbWVtb3J5IGxlYWsgaW4gSUVcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc2NyaXB0XG4gICAgICAgICAgICAgICAgICAgIGlmICggaGVhZCAmJiBzY3JpcHQucGFyZW50Tm9kZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVyZWZlcmVuY2UgdGhlIHNjcmlwdFxuICAgICAgICAgICAgICAgICAgICBzY3JpcHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiBhcHBlbmRDaGlsZCAgdG8gY2lyY3VtdmVudCBhbiBJRTYgYnVnLlxuICAgICAgICAgICAgLy8gVGhpcyBhcmlzZXMgd2hlbiBhIGJhc2Ugbm9kZSBpcyB1c2VkICgjMjcwOSBhbmQgIzQzNzgpLlxuICAgICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoIHNjcmlwdCwgaGVhZC5maXJzdENoaWxkICk7XG5cbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdWxseSBkZXByZWNhdGVkLiBXaWxsIHRocm93IGFuIGVycm9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNvcGVufVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRnJvbURaSTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBcIk9wZW5TZWFkcmFnb24uY3JlYXRlRnJvbURaSSBpcyBkZXByZWNhdGVkLCB1c2UgVmlld2VyLm9wZW4uXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhcnNlcyBhbiBYTUwgc3RyaW5nIGludG8gYSBET00gRG9jdW1lbnQuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gICAgICAgICAqIEByZXR1cm5zIHtEb2N1bWVudH1cbiAgICAgICAgICovXG4gICAgICAgIHBhcnNlWG1sOiBmdW5jdGlvbiggc3RyaW5nICkge1xuICAgICAgICAgICAgaWYgKCB3aW5kb3cuRE9NUGFyc2VyICkge1xuXG4gICAgICAgICAgICAgICAgJC5wYXJzZVhtbCA9IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4bWxEb2MgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VyO1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyggc3RyaW5nLCBcInRleHQveG1sXCIgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB3aW5kb3cuQWN0aXZlWE9iamVjdCApIHtcblxuICAgICAgICAgICAgICAgICQucGFyc2VYbWwgPSBmdW5jdGlvbiggc3RyaW5nICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeG1sRG9jID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MRE9NXCIgKTtcbiAgICAgICAgICAgICAgICAgICAgeG1sRG9jLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHhtbERvYy5sb2FkWE1MKCBzdHJpbmcgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBYTUwgRE9NLlwiICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAkLnBhcnNlWG1sKCBzdHJpbmcgKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUGFyc2VzIGEgSlNPTiBzdHJpbmcgaW50byBhIEphdmFzY3JpcHQgb2JqZWN0LlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgcGFyc2VKU09OOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSkge1xuICAgICAgICAgICAgICAgICQucGFyc2VKU09OID0gd2luZG93LkpTT04ucGFyc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNob3VsZCBvbmx5IGJlIHVzZWQgYnkgSUU4IGluIG5vbiBzdGFuZGFyZHMgbW9kZVxuICAgICAgICAgICAgICAgICQucGFyc2VKU09OID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qanNoaW50IGV2aWw6dHJ1ZSovXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmFsKCcoJyArIHN0cmluZyArICcpJyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkLnBhcnNlSlNPTihzdHJpbmcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBvcnRzIHdoZXRoZXIgdGhlIGltYWdlIGZvcm1hdCBpcyBzdXBwb3J0ZWQgZm9yIHRpbGluZyBpbiB0aGlzXG4gICAgICAgICAqIHZlcnNpb24uXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2V4dGVuc2lvbl1cbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpbWFnZUZvcm1hdFN1cHBvcnRlZDogZnVuY3Rpb24oIGV4dGVuc2lvbiApIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbiA9IGV4dGVuc2lvbiA/IGV4dGVuc2lvbiA6IFwiXCI7XG4gICAgICAgICAgICByZXR1cm4gISFGSUxFRk9STUFUU1sgZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkgXTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGJyb3dzZXIgdmVuZG9yLCB2ZXJzaW9uLCBhbmQgcmVsYXRlZCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgZGV0ZWN0ZWQgZmVhdHVyZXMuXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBCcm93c2VyXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQlJPV1NFUlN9IHZlbmRvciAtIE9uZSBvZiB0aGUge0BsaW5rIE9wZW5TZWFkcmFnb24uQlJPV1NFUlN9IGVudW1lcmF0aW9uIHZhbHVlcy5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gdmVyc2lvblxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gYWxwaGEgLSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaW1hZ2UgYWxwaGEgdHJhbnNwYXJlbmN5LlxuICAgICAqL1xuICAgICQuQnJvd3NlciA9IHtcbiAgICAgICAgdmVuZG9yOiAgICAgJC5CUk9XU0VSUy5VTktOT1dOLFxuICAgICAgICB2ZXJzaW9uOiAgICAwLFxuICAgICAgICBhbHBoYTogICAgICB0cnVlXG4gICAgfTtcblxuXG4gICAgdmFyIEZJTEVGT1JNQVRTID0ge1xuICAgICAgICAgICAgXCJibXBcIjogIGZhbHNlLFxuICAgICAgICAgICAgXCJqcGVnXCI6IHRydWUsXG4gICAgICAgICAgICBcImpwZ1wiOiAgdHJ1ZSxcbiAgICAgICAgICAgIFwicG5nXCI6ICB0cnVlLFxuICAgICAgICAgICAgXCJ0aWZcIjogIGZhbHNlLFxuICAgICAgICAgICAgXCJ3ZHBcIjogIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFVSTFBBUkFNUyA9IHt9O1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAvL0Egc21hbGwgYXV0by1leGVjdXRpbmcgcm91dGluZSB0byBkZXRlcm1pbmUgdGhlIGJyb3dzZXIgdmVuZG9yLFxuICAgICAgICAvL3ZlcnNpb24gYW5kIHN1cHBvcnRpbmcgZmVhdHVyZSBzZXRzLlxuICAgICAgICB2YXIgYXBwID0gbmF2aWdhdG9yLmFwcE5hbWUsXG4gICAgICAgICAgICB2ZXIgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbixcbiAgICAgICAgICAgIHVhICA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICByZWdleDtcblxuICAgICAgICAvL2NvbnNvbGUuZXJyb3IoICdhcHBOYW1lOiAnICsgbmF2aWdhdG9yLmFwcE5hbWUgKTtcbiAgICAgICAgLy9jb25zb2xlLmVycm9yKCAnYXBwVmVyc2lvbjogJyArIG5hdmlnYXRvci5hcHBWZXJzaW9uICk7XG4gICAgICAgIC8vY29uc29sZS5lcnJvciggJ3VzZXJBZ2VudDogJyArIG5hdmlnYXRvci51c2VyQWdlbnQgKTtcblxuICAgICAgICBzd2l0Y2goIG5hdmlnYXRvci5hcHBOYW1lICl7XG4gICAgICAgICAgICBjYXNlIFwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCI6XG4gICAgICAgICAgICAgICAgaWYoICEhd2luZG93LmF0dGFjaEV2ZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICEhd2luZG93LkFjdGl2ZVhPYmplY3QgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlbmRvciA9ICQuQlJPV1NFUlMuSUU7XG4gICAgICAgICAgICAgICAgICAgICQuQnJvd3Nlci52ZXJzaW9uID0gcGFyc2VGbG9hdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YS5pbmRleE9mKCBcIk1TSUVcIiApICsgNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YS5pbmRleE9mKCBcIjtcIiwgdWEuaW5kZXhPZiggXCJNU0lFXCIgKSApIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIk5ldHNjYXBlXCI6XG4gICAgICAgICAgICAgICAgaWYoICEhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1YS5pbmRleE9mKCBcIkZpcmVmb3hcIiApID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLkJyb3dzZXIudmVuZG9yID0gJC5CUk9XU0VSUy5GSVJFRk9YO1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlcnNpb24gPSBwYXJzZUZsb2F0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhLnN1YnN0cmluZyggdWEuaW5kZXhPZiggXCJGaXJlZm94XCIgKSArIDggKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdWEuaW5kZXhPZiggXCJTYWZhcmlcIiApID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLkJyb3dzZXIudmVuZG9yID0gdWEuaW5kZXhPZiggXCJDaHJvbWVcIiApID49IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuQlJPV1NFUlMuQ0hST01FIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLkJST1dTRVJTLlNBRkFSSTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuQnJvd3Nlci52ZXJzaW9uID0gcGFyc2VGbG9hdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YS5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhLnN1YnN0cmluZyggMCwgdWEuaW5kZXhPZiggXCJTYWZhcmlcIiApICkubGFzdEluZGV4T2YoIFwiL1wiICkgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YS5pbmRleE9mKCBcIlNhZmFyaVwiIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKCBcIlRyaWRlbnQvLipydjooWzAtOV17MSx9Wy4wLTldezAsfSlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlZ2V4LmV4ZWMoIHVhICkgIT09IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlbmRvciA9ICQuQlJPV1NFUlMuSUU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlcnNpb24gPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJPcGVyYVwiOlxuICAgICAgICAgICAgICAgICQuQnJvd3Nlci52ZW5kb3IgPSAkLkJST1dTRVJTLk9QRVJBO1xuICAgICAgICAgICAgICAgICQuQnJvd3Nlci52ZXJzaW9uID0gcGFyc2VGbG9hdCggdmVyICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWdub3JlICc/JyBwb3J0aW9uIG9mIHF1ZXJ5IHN0cmluZ1xuICAgICAgICB2YXIgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZyggMSApLFxuICAgICAgICAgICAgcGFydHMgPSBxdWVyeS5zcGxpdCgnJicpLFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIHNlcCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1sgaSBdO1xuICAgICAgICAgICAgc2VwICA9IHBhcnQuaW5kZXhPZiggJz0nICk7XG5cbiAgICAgICAgICAgIGlmICggc2VwID4gMCApIHtcbiAgICAgICAgICAgICAgICBVUkxQQVJBTVNbIHBhcnQuc3Vic3RyaW5nKCAwLCBzZXAgKSBdID1cbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlVVJJQ29tcG9uZW50KCBwYXJ0LnN1YnN0cmluZyggc2VwICsgMSApICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2RldGVybWluZSBpZiB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgaW1hZ2UgYWxwaGEgdHJhbnNwYXJlbmN5XG4gICAgICAgICQuQnJvd3Nlci5hbHBoYSA9ICEoXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlbmRvciA9PSAkLkJST1dTRVJTLklFICYmXG4gICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlcnNpb24gPCA5XG4gICAgICAgICAgICApIHx8IChcbiAgICAgICAgICAgICAgICAkLkJyb3dzZXIudmVuZG9yID09ICQuQlJPV1NFUlMuQ0hST01FICYmXG4gICAgICAgICAgICAgICAgJC5Ccm93c2VyLnZlcnNpb24gPCAyXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgLy9kZXRlcm1pbmUgaWYgdGhpcyBicm93c2VyIHN1cHBvcnRzIGVsZW1lbnQuc3R5bGUub3BhY2l0eVxuICAgICAgICAkLkJyb3dzZXIub3BhY2l0eSA9ICEoXG4gICAgICAgICAgICAkLkJyb3dzZXIudmVuZG9yID09ICQuQlJPV1NFUlMuSUUgJiZcbiAgICAgICAgICAgICQuQnJvd3Nlci52ZXJzaW9uIDwgOVxuICAgICAgICApO1xuXG4gICAgfSkoKTtcblxuXG4gICAgLy9UT0RPOiAkLmNvbnNvbGUgaXMgb2Z0ZW4gdXNlZCBpbnNpZGUgYSB0cnkvY2F0Y2ggYmxvY2sgd2hpY2ggZ2VuZXJhbGx5XG4gICAgLy8gICAgICBwcmV2ZW50cyBhbGxvd2luZ3MgZXJyb3JzIHRvIG9jY3VyIHdpdGggZGV0ZWN0aW9uIHVudGlsIGEgZGVidWdnZXJcbiAgICAvLyAgICAgIGlzIGF0dGFjaGVkLiAgQWx0aG91Z2ggSSd2ZSBiZWVuIGd1aWx0eSBvZiB0aGUgc2FtZSBhbnRpLXBhdHRlcm5cbiAgICAvLyAgICAgIEkgZXZlbnR1YWxseSB3YXMgY29udmluY2VkIHRoYXQgZXJyb3JzIHNob3VsZCBuYXR1cmFsbHkgcHJvcG9nYXRlIGluXG4gICAgLy8gICAgICBhbGwgYnV0IHRoZSBtb3N0IHNwZWNpYWwgY2FzZXMuXG4gICAgLyoqXG4gICAgICogQSBjb252ZW5pZW50IGFsaWFzIGZvciBjb25zb2xlIHdoZW4gYXZhaWxhYmxlLCBhbmQgYSBzaW1wbGUgbnVsbFxuICAgICAqIGZ1bmN0aW9uIHdoZW4gY29uc29sZSBpcyB1bmF2YWlsYWJsZS5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgbnVsbGZ1bmN0aW9uID0gZnVuY3Rpb24oIG1zZyApe1xuICAgICAgICAgICAgLy9kb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gbXNnO1xuICAgICAgICB9O1xuXG4gICAgJC5jb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge1xuICAgICAgICBsb2c6ICAgIG51bGxmdW5jdGlvbixcbiAgICAgICAgZGVidWc6ICBudWxsZnVuY3Rpb24sXG4gICAgICAgIGluZm86ICAgbnVsbGZ1bmN0aW9uLFxuICAgICAgICB3YXJuOiAgIG51bGxmdW5jdGlvbixcbiAgICAgICAgZXJyb3I6ICBudWxsZnVuY3Rpb24sXG4gICAgICAgIGFzc2VydDogbnVsbGZ1bmN0aW9uXG4gICAgfTtcblxuXG4gICAgLy8gQWRkaW5nIHN1cHBvcnQgZm9yIEhUTUw1J3MgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFzIHN1Z2dlc3RlZCBieSBhY2RoYS5cbiAgICAvLyBJbXBsZW1lbnRhdGlvbiB0YWtlbiBmcm9tIG1hdHQgc3luZGVyJ3MgcG9zdCBoZXJlOlxuICAgIC8vIGh0dHA6Ly9tYXR0c25pZGVyLmNvbS9jcm9zcy1icm93c2VyLWFuZC1sZWdhY3ktc3VwcG9ydGVkLXJlcXVlc3RmcmFtZWFuaW1hdGlvbi9cbiAgICAoZnVuY3Rpb24oIHcgKSB7XG5cbiAgICAgICAgLy8gbW9zdCBicm93c2VycyBoYXZlIGFuIGltcGxlbWVudGF0aW9uXG4gICAgICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHcud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgICAgIHZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9IHcuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHcubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHcud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHcubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgICAgICAvLyBwb2x5ZmlsbCwgd2hlbiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSB7XG4gICAgICAgICAgICAvLyBXZSBjYW4ndCBhc3NpZ24gdGhlc2Ugd2luZG93IG1ldGhvZHMgZGlyZWN0bHkgdG8gJCBiZWNhdXNlIHRoZXlcbiAgICAgICAgICAgIC8vIGV4cGVjdCB0aGVpciBcInRoaXNcIiB0byBiZSBcIndpbmRvd1wiLCBzbyB3ZSBjYWxsIHRoZW0gaW4gd3JhcHBlcnMuXG4gICAgICAgICAgICAkLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZS5hcHBseSggdywgYXJndW1lbnRzICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbmNlbEFuaW1hdGlvbkZyYW1lLmFwcGx5KCB3LCBhcmd1bWVudHMgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYUFuaW1RdWV1ZSA9IFtdLFxuICAgICAgICAgICAgICAgIHByb2Nlc3NpbmcgPSBbXSxcbiAgICAgICAgICAgICAgICBpUmVxdWVzdElkID0gMCxcbiAgICAgICAgICAgICAgICBpSW50ZXJ2YWxJZDtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbW9jayByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnVuY3Rpb25cbiAgICAgICAgICAgICQucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuICAgICAgICAgICAgICAgIGFBbmltUXVldWUucHVzaCggWyArK2lSZXF1ZXN0SWQsIGNhbGxiYWNrIF0gKTtcblxuICAgICAgICAgICAgICAgIGlmICggIWlJbnRlcnZhbElkICkge1xuICAgICAgICAgICAgICAgICAgICBpSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYUFuaW1RdWV1ZS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSAkLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgYWxsIG9mIHRoZSBjdXJyZW50bHkgb3V0c3RhbmRpbmcgZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXF1ZXN0cywgYnV0IG5vbmUgdGhhdCBnZXQgYWRkZWQgZHVyaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2Nlc3NpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dhcCB0aGUgYXJyYXlzIHNvIHdlIGRvbid0IGhhdmUgdG8gY3JlYXRlIGEgbmV3XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXkgZXZlcnkgZnJhbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBwcm9jZXNzaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NpbmcgPSBhQW5pbVF1ZXVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFBbmltUXVldWUgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggcHJvY2Vzc2luZy5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npbmcuc2hpZnQoKVsgMSBdKCB0aW1lICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBjb250aW51ZSB0aGUgaW50ZXJ2YWwsIGlmIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCggaUludGVydmFsSWQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpSW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCAvIDUwKTsgIC8vIGVzdGltYXRpbmcgc3VwcG9ydCBmb3IgNTAgZnJhbWVzIHBlciBzZWNvbmRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaVJlcXVlc3RJZDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG1vY2sgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb25cbiAgICAgICAgICAgICQuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiggcmVxdWVzdElkICkge1xuICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhlIHJlcXVlc3QgSUQgYW5kIHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgIHZhciBpLCBqO1xuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBqID0gYUFuaW1RdWV1ZS5sZW5ndGg7IGkgPCBqOyBpICs9IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggYUFuaW1RdWV1ZVsgaSBdWyAwIF0gPT09IHJlcXVlc3RJZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFBbmltUXVldWUuc3BsaWNlKCBpLCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIG5vdCBpbiB0aGUgcXVldWUsIGl0IG1heSBiZSBpbiB0aGUgc2V0IHdlJ3JlIGN1cnJlbnRseVxuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3NpbmcgKGlmIGNhbmNlbEFuaW1hdGlvbkZyYW1lIGlzIGNhbGxlZCBmcm9tIHdpdGhpbiBhXG4gICAgICAgICAgICAgICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGNhbGxiYWNrKS5cbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgaiA9IHByb2Nlc3NpbmcubGVuZ3RoOyBpIDwgajsgaSArPSAxICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHByb2Nlc3NpbmdbIGkgXVsgMCBdID09PSByZXF1ZXN0SWQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nLnNwbGljZSggaSwgMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pKCB3aW5kb3cgKTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaXNGaXhlZF1cbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoIGVsZW1lbnQsIGlzRml4ZWQgKSB7XG4gICAgICAgIGlmICggaXNGaXhlZCAmJiBlbGVtZW50ICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cblxufShPcGVuU2VhZHJhZ29uKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gZnVsbC1zY3JlZW4gc3VwcG9ydCBmdW5jdGlvbnNcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICkge1xuICAgIC8qKlxuICAgICAqIERldGVybWluZSBuYXRpdmUgZnVsbCBzY3JlZW4gc3VwcG9ydCB3ZSBjYW4gZ2V0IGZyb20gdGhlIGJyb3dzZXIuXG4gICAgICogQG1lbWJlciBmdWxsU2NyZWVuQXBpXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc3VwcG9ydHNGdWxsU2NyZWVuIFJldHVybiB0cnVlIGlmIGZ1bGwgc2NyZWVuIEFQSSBpcyBzdXBwb3J0ZWQuXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gaXNGdWxsU2NyZWVuIFJldHVybiB0cnVlIGlmIGN1cnJlbnRseSBpbiBmdWxsIHNjcmVlbiBtb2RlLlxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldEZ1bGxTY3JlZW5FbGVtZW50IFJldHVybiB0aGUgZWxlbWVudCBjdXJyZW50bHkgaW4gZnVsbCBzY3JlZW4gbW9kZS5cbiAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSByZXF1ZXN0RnVsbFNjcmVlbiBNYWtlIGEgcmVxdWVzdCB0byBnbyBpbiBmdWxsIHNjcmVlbiBtb2RlLlxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGV4aXRGdWxsU2NyZWVuIE1ha2UgYSByZXF1ZXN0IHRvIGV4aXQgZnVsbCBzY3JlZW4gbW9kZS5cbiAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjYW5jZWxGdWxsU2NyZWVuIERlcHJlY2F0ZWQsIHVzZSBleGl0RnVsbFNjcmVlbiBpbnN0ZWFkLlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBmdWxsU2NyZWVuRXZlbnROYW1lIEV2ZW50IGZpcmVkIHdoZW4gdGhlIGZ1bGwgc2NyZWVuIG1vZGUgY2hhbmdlLlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBmdWxsU2NyZWVuRXJyb3JFdmVudE5hbWUgRXZlbnQgZmlyZWQgd2hlbiBhIHJlcXVlc3QgdG8gZ29cbiAgICAgKiBpbiBmdWxsIHNjcmVlbiBtb2RlIGZhaWxlZC5cbiAgICAgKi9cbiAgICB2YXIgZnVsbFNjcmVlbkFwaSA9IHtcbiAgICAgICAgc3VwcG9ydHNGdWxsU2NyZWVuOiBmYWxzZSxcbiAgICAgICAgaXNGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICBnZXRGdWxsU2NyZWVuRWxlbWVudDogZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZXF1ZXN0RnVsbFNjcmVlbjogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgZXhpdEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGNhbmNlbEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGZ1bGxTY3JlZW5FdmVudE5hbWU6ICcnLFxuICAgICAgICBmdWxsU2NyZWVuRXJyb3JFdmVudE5hbWU6ICcnXG4gICAgfTtcblxuICAgIC8vIGNoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgIGlmICggZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4gKSB7XG4gICAgICAgIC8vIFczQyBzdGFuZGFyZFxuICAgICAgICBmdWxsU2NyZWVuQXBpLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZ2V0RnVsbFNjcmVlbkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5yZXF1ZXN0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5leGl0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5mdWxsU2NyZWVuRXZlbnROYW1lID0gXCJmdWxsc2NyZWVuY2hhbmdlXCI7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZnVsbFNjcmVlbkVycm9yRXZlbnROYW1lID0gXCJmdWxsc2NyZWVuZXJyb3JcIjtcbiAgICB9IGVsc2UgaWYgKCBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuICkge1xuICAgICAgICAvLyBJRSAxMVxuICAgICAgICBmdWxsU2NyZWVuQXBpLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZ2V0RnVsbFNjcmVlbkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICBmdWxsU2NyZWVuQXBpLnJlcXVlc3RGdWxsU2NyZWVuID0gZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZXhpdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5mdWxsU2NyZWVuRXZlbnROYW1lID0gXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIjtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5mdWxsU2NyZWVuRXJyb3JFdmVudE5hbWUgPSBcIk1TRnVsbHNjcmVlbkVycm9yXCI7XG4gICAgfSBlbHNlIGlmICggZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4gKSB7XG4gICAgICAgIC8vIFJlY2VudCB3ZWJraXRcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICBmdWxsU2NyZWVuQXBpLmdldEZ1bGxTY3JlZW5FbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkucmVxdWVzdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbiggZWxlbWVudCApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZXhpdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZnVsbFNjcmVlbkV2ZW50TmFtZSA9IFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiO1xuICAgICAgICBmdWxsU2NyZWVuQXBpLmZ1bGxTY3JlZW5FcnJvckV2ZW50TmFtZSA9IFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCI7XG4gICAgfSBlbHNlIGlmICggZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbiApIHtcbiAgICAgICAgLy8gT2xkIHdlYmtpdFxuICAgICAgICBmdWxsU2NyZWVuQXBpLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZ2V0RnVsbFNjcmVlbkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC53ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkucmVxdWVzdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbiggZWxlbWVudCApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZXhpdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LndlYmtpdENhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5mdWxsU2NyZWVuRXZlbnROYW1lID0gXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCI7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZnVsbFNjcmVlbkVycm9yRXZlbnROYW1lID0gXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIjtcbiAgICB9IGVsc2UgaWYgKCBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuICkge1xuICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuc3VwcG9ydHNGdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgZnVsbFNjcmVlbkFwaS5nZXRGdWxsU2NyZWVuRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICBmdWxsU2NyZWVuQXBpLnJlcXVlc3RGdWxsU2NyZWVuID0gZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICB9O1xuICAgICAgICBmdWxsU2NyZWVuQXBpLmV4aXRGdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZnVsbFNjcmVlbkV2ZW50TmFtZSA9IFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiO1xuICAgICAgICBmdWxsU2NyZWVuQXBpLmZ1bGxTY3JlZW5FcnJvckV2ZW50TmFtZSA9IFwibW96ZnVsbHNjcmVlbmVycm9yXCI7XG4gICAgfVxuICAgIGZ1bGxTY3JlZW5BcGkuaXNGdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmdWxsU2NyZWVuQXBpLmdldEZ1bGxTY3JlZW5FbGVtZW50KCkgIT09IG51bGw7XG4gICAgfTtcbiAgICBmdWxsU2NyZWVuQXBpLmNhbmNlbEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiY2FuY2VsRnVsbFNjcmVlbiBpcyBkZXByZWNhdGVkLiBVc2UgZXhpdEZ1bGxTY3JlZW4gaW5zdGVhZC5cIik7XG4gICAgICAgIGZ1bGxTY3JlZW5BcGkuZXhpdEZ1bGxTY3JlZW4oKTtcbiAgICB9O1xuXG4gICAgLy8gZXhwb3J0IGFwaVxuICAgICQuZXh0ZW5kKCAkLCBmdWxsU2NyZWVuQXBpICk7XG5cbn0pKCBPcGVuU2VhZHJhZ29uICk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gRXZlbnRTb3VyY2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCQpe1xuXG4vKipcbiAqIEV2ZW50IGhhbmRsZXIgbWV0aG9kIHNpZ25hdHVyZSB1c2VkIGJ5IGFsbCBPcGVuU2VhZHJhZ29uIGV2ZW50cy5cbiAqXG4gKiBAY2FsbGJhY2sgRXZlbnRIYW5kbGVyXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gU2VlIGluZGl2aWR1YWwgZXZlbnRzIGZvciBldmVudC1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICovXG5cblxuLyoqXG4gKiBAY2xhc3MgRXZlbnRTb3VyY2VcbiAqIEBjbGFzc2Rlc2MgRm9yIHVzZSBieSBjbGFzc2VzIHdoaWNoIHdhbnQgdG8gc3VwcG9ydCBjdXN0b20sIG5vbi1icm93c2VyIGV2ZW50cy5cbiAqXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICovXG4kLkV2ZW50U291cmNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ldmVudHMgPSB7fTtcbn07XG5cbi8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5FdmVudFNvdXJjZS5wcm90b3R5cGUgKi9cbiQuRXZlbnRTb3VyY2UucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYmUgdHJpZ2dlcmVkIG9ubHkgb25jZSAob3IgYSBnaXZlbiBudW1iZXIgb2YgdGltZXMpXG4gICAgICogZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgZXZlbnQgdG8gcmVnaXN0ZXIuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gaGFuZGxlciAtIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBldmVudFxuICAgICAqIGlzIHRyaWdnZXJlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3VzZXJEYXRhPW51bGxdIC0gQXJiaXRyYXJ5IG9iamVjdCB0byBiZSBwYXNzZWQgdW5jaGFuZ2VkXG4gICAgICogdG8gdGhlIGhhbmRsZXIuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lcz0xXSAtIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaGFuZGxlIHRoZSBldmVudFxuICAgICAqIGJlZm9yZSByZW1vdmluZyBpdC5cbiAgICAgKi9cbiAgICBhZGRPbmNlSGFuZGxlcjogZnVuY3Rpb24oZXZlbnROYW1lLCBoYW5kbGVyLCB1c2VyRGF0YSwgdGltZXMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aW1lcyA9IHRpbWVzIHx8IDE7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIHZhciBvbmNlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSB0aW1lcykge1xuICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlSGFuZGxlcihldmVudE5hbWUsIG9uY2VIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoZXZlbnROYW1lLCBvbmNlSGFuZGxlciwgdXNlckRhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZXZlbnQgaGFuZGxlciBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiBldmVudCB0byByZWdpc3Rlci5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBoYW5kbGVyIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3VzZXJEYXRhPW51bGxdIC0gQXJiaXRyYXJ5IG9iamVjdCB0byBiZSBwYXNzZWQgdW5jaGFuZ2VkIHRvIHRoZSBoYW5kbGVyLlxuICAgICAqL1xuICAgIGFkZEhhbmRsZXI6IGZ1bmN0aW9uICggZXZlbnROYW1lLCBoYW5kbGVyLCB1c2VyRGF0YSApIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgICAgICAgaWYgKCAhZXZlbnRzICkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBoYW5kbGVyICYmICQuaXNGdW5jdGlvbiggaGFuZGxlciApICkge1xuICAgICAgICAgICAgZXZlbnRzWyBldmVudHMubGVuZ3RoIF0gPSB7IGhhbmRsZXI6IGhhbmRsZXIsIHVzZXJEYXRhOiB1c2VyRGF0YSB8fCBudWxsIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgc3BlY2lmaWMgZXZlbnQgaGFuZGxlciBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiBldmVudCBmb3Igd2hpY2ggdGhlIGhhbmRsZXIgaXMgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBoYW5kbGVyIC0gRnVuY3Rpb24gdG8gYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICByZW1vdmVIYW5kbGVyOiBmdW5jdGlvbiAoIGV2ZW50TmFtZSwgaGFuZGxlciApIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzWyBldmVudE5hbWUgXSxcbiAgICAgICAgICAgIGhhbmRsZXJzID0gW10sXG4gICAgICAgICAgICBpO1xuICAgICAgICBpZiAoICFldmVudHMgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAkLmlzQXJyYXkoIGV2ZW50cyApICkge1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBldmVudHNbaV0uaGFuZGxlciAhPT0gaGFuZGxlciApIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCggZXZlbnRzWyBpIF0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1sgZXZlbnROYW1lIF0gPSBoYW5kbGVycztcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgZXZlbnQgaGFuZGxlcnMgZm9yIGEgZ2l2ZW4gZXZlbnQgdHlwZS4gSWYgbm8gdHlwZSBpcyBnaXZlbiBhbGxcbiAgICAgKiBldmVudCBoYW5kbGVycyBmb3IgZXZlcnkgZXZlbnQgdHlwZSBhcmUgcmVtb3ZlZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiBldmVudCBmb3Igd2hpY2ggYWxsIGhhbmRsZXJzIGFyZSB0byBiZSByZW1vdmVkLlxuICAgICAqL1xuICAgIHJlbW92ZUFsbEhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnROYW1lICkge1xuICAgICAgICBpZiAoIGV2ZW50TmFtZSApe1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbIGV2ZW50TmFtZSBdID0gW107XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIGZvciAoIHZhciBldmVudFR5cGUgaW4gdGhpcy5ldmVudHMgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHNbIGV2ZW50VHlwZSBdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgZnVuY3Rpb24gd2hpY2ggaXRlcmF0ZXMgdGhlIGxpc3Qgb2YgYWxsIGhhbmRsZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQsIGNhbGxpbmcgdGhlIGhhbmRsZXIgZm9yIGVhY2guXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgZXZlbnQgdG8gZ2V0IGhhbmRsZXJzIGZvci5cbiAgICAgKi9cbiAgICBnZXRIYW5kbGVyOiBmdW5jdGlvbiAoIGV2ZW50TmFtZSApIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgICAgICAgaWYgKCAhZXZlbnRzIHx8ICFldmVudHMubGVuZ3RoICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRzID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/XG4gICAgICAgICAgICBbIGV2ZW50c1sgMCBdIF0gOlxuICAgICAgICAgICAgQXJyYXkuYXBwbHkoIG51bGwsIGV2ZW50cyApO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCBzb3VyY2UsIGFyZ3MgKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBldmVudHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIGV2ZW50c1sgaSBdICkge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLmV2ZW50U291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnVzZXJEYXRhID0gZXZlbnRzWyBpIF0udXNlckRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c1sgaSBdLmhhbmRsZXIoIGFyZ3MgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYW4gZXZlbnQsIG9wdGlvbmFsbHkgcGFzc2luZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIGV2ZW50IHRvIHJlZ2lzdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudEFyZ3MgLSBFdmVudC1zcGVjaWZpYyBkYXRhLlxuICAgICAqL1xuICAgIHJhaXNlRXZlbnQ6IGZ1bmN0aW9uKCBldmVudE5hbWUsIGV2ZW50QXJncyApIHtcbiAgICAgICAgLy91bmNvbW1lbnQgaWYgeW91IHdhbnQgdG8gZ2V0IGEgbG9nIG9mIGFsbCBldmVudHNcbiAgICAgICAgLy8kLmNvbnNvbGUubG9nKCBldmVudE5hbWUgKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLmdldEhhbmRsZXIoIGV2ZW50TmFtZSApO1xuXG4gICAgICAgIGlmICggaGFuZGxlciApIHtcbiAgICAgICAgICAgIGlmICggIWV2ZW50QXJncyApIHtcbiAgICAgICAgICAgICAgICBldmVudEFyZ3MgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlciggdGhpcywgZXZlbnRBcmdzICk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIE1vdXNlVHJhY2tlclxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4oZnVuY3Rpb24gKCAkICkge1xuXG4gICAgLy8gQWxsIE1vdXNlVHJhY2tlciBpbnN0YW5jZXNcbiAgICB2YXIgTU9VU0VUUkFDS0VSUyAgPSBbXTtcblxuICAgIC8vIGRpY3Rpb25hcnkgZnJvbSBoYXNoIHRvIHByaXZhdGUgcHJvcGVydGllc1xuICAgIHZhciBUSElTICAgICAgICAgICA9IHt9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgTW91c2VUcmFja2VyXG4gICAgICogQGNsYXNzZGVzYyBQcm92aWRlcyBzaW1wbGlmaWVkIGhhbmRsaW5nIG9mIGNvbW1vbiBwb2ludGVyIGRldmljZSAobW91c2UsIHRvdWNoLCBwZW4sIGV0Yy4pIGdlc3R1cmVzXG4gICAgICogICAgICAgICAgICBhbmQga2V5Ym9hcmQgZXZlbnRzIG9uIGEgc3BlY2lmaWVkIGVsZW1lbnQuXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqICAgICAgQWxsb3dzIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0aWVzIHRvIGJlIGVudGlyZWx5IHNwZWNpZmllZCBieSBwYXNzaW5nXG4gICAgICogICAgICBhbiBvcHRpb25zIG9iamVjdCB0byB0aGUgY29uc3RydWN0b3IuICBUaGUgY29uc3RydWN0b3IgYWxzbyBzdXBwb3J0c1xuICAgICAqICAgICAgdGhlIG9yaWdpbmFsIHBvc2l0aW9uYWwgYXJndW1lbnRzICdlbGVtZW50JywgJ2NsaWNrVGltZVRocmVzaG9sZCcsXG4gICAgICogICAgICBhbmQgJ2NsaWNrRGlzdFRocmVzaG9sZCcgaW4gdGhhdCBvcmRlci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBvcHRpb25zLmVsZW1lbnRcbiAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIGFuIGVsZW1lbnQgb3IgYW4gZWxlbWVudCBpZCBmb3Igd2hpY2ggdGhlIHBvaW50ZXIva2V5XG4gICAgICogICAgICBldmVudHMgd2lsbCBiZSBtb25pdG9yZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zdGFydERpc2FibGVkPWZhbHNlXVxuICAgICAqICAgICAgSWYgdHJ1ZSwgZXZlbnQgdHJhY2tpbmcgb24gdGhlIGVsZW1lbnQgd2lsbCBub3Qgc3RhcnQgdW50aWxcbiAgICAgKiAgICAgIHtAbGluayBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5zZXRUcmFja2luZ3xzZXRUcmFja2luZ30gaXMgY2FsbGVkLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmNsaWNrVGltZVRocmVzaG9sZFxuICAgICAqICAgICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgd2l0aGluIHdoaWNoIGEgcG9pbnRlciBkb3duLXVwIGV2ZW50IGNvbWJpbmF0aW9uXG4gICAgICogICAgICB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBjbGljayBnZXN0dXJlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmNsaWNrRGlzdFRocmVzaG9sZFxuICAgICAqICAgICAgVGhlIG1heGltdW0gZGlzdGFuY2UgYWxsb3dlZCBiZXR3ZWVuIGEgcG9pbnRlciBkb3duIGV2ZW50IGFuZCBhIHBvaW50ZXIgdXAgZXZlbnRcbiAgICAgKiAgICAgIHRvIGJlIHRyZWF0ZWQgYXMgYSBjbGljayBnZXN0dXJlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmRibENsaWNrVGltZVRocmVzaG9sZFxuICAgICAqICAgICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgd2l0aGluIHdoaWNoIHR3byBwb2ludGVyIGRvd24tdXAgZXZlbnQgY29tYmluYXRpb25zXG4gICAgICogICAgICB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBkb3VibGUtY2xpY2sgZ2VzdHVyZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5kYmxDbGlja0Rpc3RUaHJlc2hvbGRcbiAgICAgKiAgICAgIFRoZSBtYXhpbXVtIGRpc3RhbmNlIGFsbG93ZWQgYmV0d2VlbiB0d28gcG9pbnRlciBjbGljayBldmVudHNcbiAgICAgKiAgICAgIHRvIGJlIHRyZWF0ZWQgYXMgYSBjbGljayBnZXN0dXJlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5zdG9wRGVsYXk9NTBdXG4gICAgICogICAgICBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB3aXRob3V0IHBvaW50ZXIgbW92ZSBiZWZvcmUgdGhlIHN0b3BcbiAgICAgKiAgICAgIGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLmVudGVySGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciBlbnRlci5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5leGl0SGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciBleGl0LlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLnByZXNzSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciBwcmVzcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5ub25QcmltYXJ5UHJlc3NIYW5kbGVyPW51bGxdXG4gICAgICogICAgICBBbiBvcHRpb25hbCBoYW5kbGVyIGZvciBwb2ludGVyIG5vbi1wcmltYXJ5IGJ1dHRvbiBwcmVzcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5yZWxlYXNlSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciByZWxlYXNlLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLm5vblByaW1hcnlSZWxlYXNlSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciBub24tcHJpbWFyeSBidXR0b24gcmVsZWFzZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5tb3ZlSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgcG9pbnRlciBtb3ZlLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLnNjcm9sbEhhbmRsZXI9bnVsbF1cbiAgICAgKiAgICAgIEFuIG9wdGlvbmFsIGhhbmRsZXIgZm9yIG1vdXNlIHdoZWVsIHNjcm9sbC5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5jbGlja0hhbmRsZXI9bnVsbF1cbiAgICAgKiAgICAgIEFuIG9wdGlvbmFsIGhhbmRsZXIgZm9yIHBvaW50ZXIgY2xpY2suXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gW29wdGlvbnMuZGJsQ2xpY2tIYW5kbGVyPW51bGxdXG4gICAgICogICAgICBBbiBvcHRpb25hbCBoYW5kbGVyIGZvciBwb2ludGVyIGRvdWJsZS1jbGljay5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5kcmFnSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgdGhlIGRyYWcgZ2VzdHVyZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5kcmFnRW5kSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgYWZ0ZXIgYSBkcmFnIGdlc3R1cmUuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gW29wdGlvbnMucGluY2hIYW5kbGVyPW51bGxdXG4gICAgICogICAgICBBbiBvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgcGluY2ggZ2VzdHVyZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5rZXlEb3duSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3Iga2V5ZG93bi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5rZXlVcEhhbmRsZXI9bnVsbF1cbiAgICAgKiAgICAgIEFuIG9wdGlvbmFsIGhhbmRsZXIgZm9yIGtleXVwLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLmtleUhhbmRsZXI9bnVsbF1cbiAgICAgKiAgICAgIEFuIG9wdGlvbmFsIGhhbmRsZXIgZm9yIGtleXByZXNzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLmZvY3VzSGFuZGxlcj1udWxsXVxuICAgICAqICAgICAgQW4gb3B0aW9uYWwgaGFuZGxlciBmb3IgZm9jdXMuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gW29wdGlvbnMuYmx1ckhhbmRsZXI9bnVsbF1cbiAgICAgKiAgICAgIEFuIG9wdGlvbmFsIGhhbmRsZXIgZm9yIGJsdXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnVzZXJEYXRhPW51bGxdXG4gICAgICogICAgICBBcmJpdHJhcnkgb2JqZWN0IHRvIGJlIHBhc3NlZCB1bmNoYW5nZWQgdG8gYW55IGF0dGFjaGVkIGhhbmRsZXIgbWV0aG9kcy5cbiAgICAgKi9cbiAgICAkLk1vdXNlVHJhY2tlciA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuICAgICAgICBNT1VTRVRSQUNLRVJTLnB1c2goIHRoaXMgKTtcblxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICBpZiAoICEkLmlzUGxhaW5PYmplY3QoIG9wdGlvbnMgKSApIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogICAgICAgICAgICBhcmdzWyAwIF0sXG4gICAgICAgICAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiBhcmdzWyAxIF0sXG4gICAgICAgICAgICAgICAgY2xpY2tEaXN0VGhyZXNob2xkOiBhcmdzWyAyIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhhc2ggICAgICAgICAgICAgICA9IE1hdGgucmFuZG9tKCk7IC8vIEFuIHVuaXF1ZSBoYXNoIGZvciB0aGlzIHRyYWNrZXIuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZWxlbWVudCBmb3Igd2hpY2ggcG9pbnRlciBldmVudHMgYXJlIGJlaW5nIG1vbml0b3JlZC5cbiAgICAgICAgICogQG1lbWJlciB7RWxlbWVudH0gZWxlbWVudFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIjXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVsZW1lbnQgICAgICAgICAgICA9ICQuZ2V0RWxlbWVudCggb3B0aW9ucy5lbGVtZW50ICk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB3aXRoaW4gd2hpY2ggYSBwb2ludGVyIGRvd24tdXAgZXZlbnQgY29tYmluYXRpb25cbiAgICAgICAgICogd2lsbCBiZSB0cmVhdGVkIGFzIGEgY2xpY2sgZ2VzdHVyZS5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBjbGlja1RpbWVUaHJlc2hvbGRcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGlja1RpbWVUaHJlc2hvbGQgPSBvcHRpb25zLmNsaWNrVGltZVRocmVzaG9sZCB8fCAkLkRFRkFVTFRfU0VUVElOR1MuY2xpY2tUaW1lVGhyZXNob2xkO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gZGlzdGFuY2UgYWxsb3dlZCBiZXR3ZWVuIGEgcG9pbnRlciBkb3duIGV2ZW50IGFuZCBhIHBvaW50ZXIgdXAgZXZlbnRcbiAgICAgICAgICogdG8gYmUgdHJlYXRlZCBhcyBhIGNsaWNrIGdlc3R1cmUuXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY2xpY2tEaXN0VGhyZXNob2xkXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlciNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkID0gb3B0aW9ucy5jbGlja0Rpc3RUaHJlc2hvbGQgfHwgJC5ERUZBVUxUX1NFVFRJTkdTLmNsaWNrRGlzdFRocmVzaG9sZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHdpdGhpbiB3aGljaCB0d28gcG9pbnRlciBkb3duLXVwIGV2ZW50IGNvbWJpbmF0aW9uc1xuICAgICAgICAgKiB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBkb3VibGUtY2xpY2sgZ2VzdHVyZS5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBkYmxDbGlja1RpbWVUaHJlc2hvbGRcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYmxDbGlja1RpbWVUaHJlc2hvbGQgPSBvcHRpb25zLmRibENsaWNrVGltZVRocmVzaG9sZCB8fCAkLkRFRkFVTFRfU0VUVElOR1MuZGJsQ2xpY2tUaW1lVGhyZXNob2xkO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gZGlzdGFuY2UgYWxsb3dlZCBiZXR3ZWVuIHR3byBwb2ludGVyIGNsaWNrIGV2ZW50c1xuICAgICAgICAgKiB0byBiZSB0cmVhdGVkIGFzIGEgY2xpY2sgZ2VzdHVyZS5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBjbGlja0Rpc3RUaHJlc2hvbGRcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYmxDbGlja0Rpc3RUaHJlc2hvbGQgPSBvcHRpb25zLmRibENsaWNrRGlzdFRocmVzaG9sZCB8fCAkLkRFRkFVTFRfU0VUVElOR1MuZGJsQ2xpY2tEaXN0VGhyZXNob2xkO1xuICAgICAgICB0aGlzLnVzZXJEYXRhICAgICAgICAgICAgICA9IG9wdGlvbnMudXNlckRhdGEgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdG9wRGVsYXkgICAgICAgICAgICAgPSBvcHRpb25zLnN0b3BEZWxheSAgICAgICAgIHx8IDUwO1xuXG4gICAgICAgIHRoaXMuZW50ZXJIYW5kbGVyICAgICAgICAgICAgID0gb3B0aW9ucy5lbnRlckhhbmRsZXIgICAgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5leGl0SGFuZGxlciAgICAgICAgICAgICAgPSBvcHRpb25zLmV4aXRIYW5kbGVyICAgICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLnByZXNzSGFuZGxlciAgICAgICAgICAgICA9IG9wdGlvbnMucHJlc3NIYW5kbGVyICAgICAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHRoaXMubm9uUHJpbWFyeVByZXNzSGFuZGxlciAgID0gb3B0aW9ucy5ub25QcmltYXJ5UHJlc3NIYW5kbGVyICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5yZWxlYXNlSGFuZGxlciAgICAgICAgICAgPSBvcHRpb25zLnJlbGVhc2VIYW5kbGVyICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLm5vblByaW1hcnlSZWxlYXNlSGFuZGxlciA9IG9wdGlvbnMubm9uUHJpbWFyeVJlbGVhc2VIYW5kbGVyIHx8IG51bGw7XG4gICAgICAgIHRoaXMubW92ZUhhbmRsZXIgICAgICAgICAgICAgID0gb3B0aW9ucy5tb3ZlSGFuZGxlciAgICAgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyICAgICAgICAgICAgPSBvcHRpb25zLnNjcm9sbEhhbmRsZXIgICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLmNsaWNrSGFuZGxlciAgICAgICAgICAgICA9IG9wdGlvbnMuY2xpY2tIYW5kbGVyICAgICAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHRoaXMuZGJsQ2xpY2tIYW5kbGVyICAgICAgICAgID0gb3B0aW9ucy5kYmxDbGlja0hhbmRsZXIgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlciAgICAgICAgICAgICAgPSBvcHRpb25zLmRyYWdIYW5kbGVyICAgICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLmRyYWdFbmRIYW5kbGVyICAgICAgICAgICA9IG9wdGlvbnMuZHJhZ0VuZEhhbmRsZXIgICAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHRoaXMucGluY2hIYW5kbGVyICAgICAgICAgICAgID0gb3B0aW9ucy5waW5jaEhhbmRsZXIgICAgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdG9wSGFuZGxlciAgICAgICAgICAgICAgPSBvcHRpb25zLnN0b3BIYW5kbGVyICAgICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLmtleURvd25IYW5kbGVyICAgICAgICAgICA9IG9wdGlvbnMua2V5RG93bkhhbmRsZXIgICAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHRoaXMua2V5VXBIYW5kbGVyICAgICAgICAgICAgID0gb3B0aW9ucy5rZXlVcEhhbmRsZXIgICAgICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5rZXlIYW5kbGVyICAgICAgICAgICAgICAgPSBvcHRpb25zLmtleUhhbmRsZXIgICAgICAgICAgICAgICB8fCBudWxsO1xuICAgICAgICB0aGlzLmZvY3VzSGFuZGxlciAgICAgICAgICAgICA9IG9wdGlvbnMuZm9jdXNIYW5kbGVyICAgICAgICAgICAgIHx8IG51bGw7XG4gICAgICAgIHRoaXMuYmx1ckhhbmRsZXIgICAgICAgICAgICAgID0gb3B0aW9ucy5ibHVySGFuZGxlciAgICAgICAgICAgICAgfHwgbnVsbDtcblxuICAgICAgICAvL1N0b3JlIHByaXZhdGUgcHJvcGVydGllcyBpbiBhIHNjb3BlIHNlYWxlZCBoYXNoIG1hcFxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHRyYWNraW5nXG4gICAgICAgICAqICAgICAgQXJlIHdlIGN1cnJlbnRseSB0cmFja2luZyBwb2ludGVyIGV2ZW50cyBmb3IgdGhpcyBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0gPSB7XG4gICAgICAgICAgICBjbGljazogICAgICAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uQ2xpY2soIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgZGJsY2xpY2s6ICAgICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbkRibENsaWNrKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIGtleWRvd246ICAgICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25LZXlEb3duKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIGtleXVwOiAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25LZXlVcCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBrZXlwcmVzczogICAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uS2V5UHJlc3MoIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgZm9jdXM6ICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbkZvY3VzKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIGJsdXI6ICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25CbHVyKCBfdGhpcywgZXZlbnQgKTsgfSxcblxuICAgICAgICAgICAgd2hlZWw6ICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbldoZWVsKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIG1vdXNld2hlZWw6ICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZVdoZWVsKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIERPTU1vdXNlU2Nyb2xsOiAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZVdoZWVsKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIE1vek1vdXNlUGl4ZWxTY3JvbGw6ICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZVdoZWVsKCBfdGhpcywgZXZlbnQgKTsgfSxcblxuICAgICAgICAgICAgbW91c2VlbnRlcjogICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbk1vdXNlRW50ZXIoIF90aGlzLCBldmVudCApOyB9LCAvLyBVc2VkIG9uIElFOCBvbmx5XG4gICAgICAgICAgICBtb3VzZWxlYXZlOiAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uTW91c2VMZWF2ZSggX3RoaXMsIGV2ZW50ICk7IH0sIC8vIFVzZWQgb24gSUU4IG9ubHlcbiAgICAgICAgICAgIG1vdXNlb3ZlcjogICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZU92ZXIoIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgbW91c2VvdXQ6ICAgICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbk1vdXNlT3V0KCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIG1vdXNlZG93bjogICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZURvd24oIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgbW91c2V1cDogICAgICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbk1vdXNlVXAoIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgbW91c2V1cGNhcHR1cmVkOiAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvbk1vdXNlVXBDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBtb3VzZW1vdmU6ICAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uTW91c2VNb3ZlKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIG1vdXNlbW92ZWNhcHR1cmVkOiAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Nb3VzZU1vdmVDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG5cbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6ICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Ub3VjaFN0YXJ0KCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIHRvdWNoZW5kOiAgICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Ub3VjaEVuZCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICB0b3VjaGVuZGNhcHR1cmVkOiAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uVG91Y2hFbmRDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uVG91Y2hNb3ZlKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIHRvdWNobW92ZWNhcHR1cmVkOiAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Ub3VjaE1vdmVDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICB0b3VjaGNhbmNlbDogICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uVG91Y2hDYW5jZWwoIF90aGlzLCBldmVudCApOyB9LFxuXG4gICAgICAgICAgICBnZXN0dXJlc3RhcnQ6ICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uR2VzdHVyZVN0YXJ0KCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIGdlc3R1cmVjaGFuZ2U6ICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25HZXN0dXJlQ2hhbmdlKCBfdGhpcywgZXZlbnQgKTsgfSxcblxuICAgICAgICAgICAgcG9pbnRlcm92ZXI6ICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvblBvaW50ZXJPdmVyKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIE1TUG9pbnRlck92ZXI6ICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Qb2ludGVyT3ZlciggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBwb2ludGVyb3V0OiAgICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uUG9pbnRlck91dCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBNU1BvaW50ZXJPdXQ6ICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uUG9pbnRlck91dCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBwb2ludGVyZG93bjogICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uUG9pbnRlckRvd24oIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgTVNQb2ludGVyRG93bjogICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvblBvaW50ZXJEb3duKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIHBvaW50ZXJ1cDogICAgICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Qb2ludGVyVXAoIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgTVNQb2ludGVyVXA6ICAgICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvblBvaW50ZXJVcCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBwb2ludGVybW92ZTogICAgICAgICAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uUG9pbnRlck1vdmUoIF90aGlzLCBldmVudCApOyB9LFxuICAgICAgICAgICAgTVNQb2ludGVyTW92ZTogICAgICAgICBmdW5jdGlvbiAoIGV2ZW50ICkgeyBvblBvaW50ZXJNb3ZlKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIHBvaW50ZXJjYW5jZWw6ICAgICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Qb2ludGVyQ2FuY2VsKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIE1TUG9pbnRlckNhbmNlbDogICAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Qb2ludGVyQ2FuY2VsKCBfdGhpcywgZXZlbnQgKTsgfSxcbiAgICAgICAgICAgIHBvaW50ZXJ1cGNhcHR1cmVkOiAgICAgZnVuY3Rpb24gKCBldmVudCApIHsgb25Qb2ludGVyVXBDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG4gICAgICAgICAgICBwb2ludGVybW92ZWNhcHR1cmVkOiAgIGZ1bmN0aW9uICggZXZlbnQgKSB7IG9uUG9pbnRlck1vdmVDYXB0dXJlZCggX3RoaXMsIGV2ZW50ICk7IH0sXG5cbiAgICAgICAgICAgIHRyYWNraW5nOiAgICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAgICAgICAgIC8vIEFjdGl2ZSBwb2ludGVycyBsaXN0cy4gQXJyYXkgb2YgR2VzdHVyZVBvaW50TGlzdCBvYmplY3RzLCBvbmUgZm9yIGVhY2ggcG9pbnRlciBkZXZpY2UgdHlwZS5cbiAgICAgICAgICAgIC8vIEdlc3R1cmVQb2ludExpc3Qgb2JqZWN0cyBhcmUgYWRkZWQgZWFjaCB0aW1lIGEgcG9pbnRlciBpcyB0cmFja2VkIGJ5IGEgbmV3IHBvaW50ZXIgZGV2aWNlIHR5cGUgKHNlZSBnZXRBY3RpdmVQb2ludGVyc0xpc3RCeVR5cGUoKSkuXG4gICAgICAgICAgICAvLyBBY3RpdmUgcG9pbnRlcnMgYXJlIGFueSBwb2ludGVyIGJlaW5nIHRyYWNrZWQgZm9yIHRoaXMgZWxlbWVudCB3aGljaCBhcmUgaW4gdGhlIGhpdC10ZXN0IGFyZWFcbiAgICAgICAgICAgIC8vICAgICBvZiB0aGUgZWxlbWVudCAoZm9yIGhvdmVyLWNhcGFibGUgZGV2aWNlcykgYW5kL29yIGhhdmUgY29udGFjdCBvciBhIGJ1dHRvbiBwcmVzcyBpbml0aWF0ZWQgaW4gdGhlIGVsZW1lbnQuXG4gICAgICAgICAgICBhY3RpdmVQb2ludGVyc0xpc3RzOiAgIFtdLFxuXG4gICAgICAgICAgICAvLyBUcmFja2luZyBmb3IgZG91YmxlLWNsaWNrIGdlc3R1cmVcbiAgICAgICAgICAgIGxhc3RDbGlja1BvczogICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGRibENsaWNrVGltZU91dDogICAgICAgbnVsbCxcblxuICAgICAgICAgICAgLy8gVHJhY2tpbmcgZm9yIHBpbmNoIGdlc3R1cmVcbiAgICAgICAgICAgIHBpbmNoR1BvaW50czogICAgICAgICAgW10sXG4gICAgICAgICAgICBsYXN0UGluY2hEaXN0OiAgICAgICAgIDAsXG4gICAgICAgICAgICBjdXJyZW50UGluY2hEaXN0OiAgICAgIDAsXG4gICAgICAgICAgICBsYXN0UGluY2hDZW50ZXI6ICAgICAgIG51bGwsXG4gICAgICAgICAgICBjdXJyZW50UGluY2hDZW50ZXI6ICAgIG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoICFvcHRpb25zLnN0YXJ0RGlzYWJsZWQgKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRyYWNraW5nKCB0cnVlICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5wcm90b3R5cGUgKi9cbiAgICAkLk1vdXNlVHJhY2tlci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsZWFuIHVwIGFueSBldmVudHMgb3Igb2JqZWN0cyBjcmVhdGVkIGJ5IHRoZSB0cmFja2VyLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpO1xuXG4gICAgICAgICAgICBzdG9wVHJhY2tpbmcoIHRoaXMgKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgTU9VU0VUUkFDS0VSUy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIE1PVVNFVFJBQ0tFUlNbIGkgXSA9PT0gdGhpcyApIHtcbiAgICAgICAgICAgICAgICAgICAgTU9VU0VUUkFDS0VSUy5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBUSElTWyB0aGlzLmhhc2ggXSA9IG51bGw7XG4gICAgICAgICAgICBkZWxldGUgVEhJU1sgdGhpcy5oYXNoIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyZSB3ZSBjdXJyZW50bHkgdHJhY2tpbmcgZXZlbnRzIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgICAgICogQGRlcHJlY2F0ZWQgSnVzdCB1c2UgdGhpcy50cmFja2luZ1xuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59IEFyZSB3ZSBjdXJyZW50bHkgdHJhY2tpbmcgZXZlbnRzIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIGlzVHJhY2tpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBUSElTWyB0aGlzLmhhc2ggXS50cmFja2luZztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIG9yIGRpc2FibGUgd2hldGhlciBvciBub3Qgd2UgYXJlIHRyYWNraW5nIGV2ZW50cyBvbiB0aGlzIGVsZW1lbnQuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHRyYWNrIFRydWUgdG8gc3RhcnQgdHJhY2tpbmcsIGZhbHNlIHRvIHN0b3AgdHJhY2tpbmcuXG4gICAgICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gQ2hhaW5hYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VHJhY2tpbmc6IGZ1bmN0aW9uICggdHJhY2sgKSB7XG4gICAgICAgICAgICBpZiAoIHRyYWNrICkge1xuICAgICAgICAgICAgICAgIHN0YXJ0VHJhY2tpbmcoIHRoaXMgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcFRyYWNraW5nKCB0aGlzICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NoYWluXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUge0BsaW5rIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludExpc3R8R2VzdHVyZVBvaW50TGlzdH0gZm9yIHRoZSBnaXZlbiBwb2ludGVyIGRldmljZSB0eXBlLFxuICAgICAgICAgKiBjcmVhdGluZyBhbmQgY2FjaGluZyBhIG5ldyB7QGxpbmsgT3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdHxHZXN0dXJlUG9pbnRMaXN0fSBpZiBvbmUgZG9lc24ndCBhbHJlYWR5IGV4aXN0IGZvciB0aGUgdHlwZS5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gVGhlIHBvaW50ZXIgZGV2aWNlIHR5cGU6IFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnRMaXN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QWN0aXZlUG9pbnRlcnNMaXN0QnlUeXBlOiBmdW5jdGlvbiAoIHR5cGUgKSB7XG4gICAgICAgICAgICB2YXIgZGVsZWdhdGUgPSBUSElTWyB0aGlzLmhhc2ggXSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IGRlbGVnYXRlLmFjdGl2ZVBvaW50ZXJzTGlzdHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGxpc3Q7XG5cbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBkZWxlZ2F0ZS5hY3RpdmVQb2ludGVyc0xpc3RzWyBpIF0udHlwZSA9PT0gdHlwZSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmFjdGl2ZVBvaW50ZXJzTGlzdHNbIGkgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpc3QgPSBuZXcgJC5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdCggdHlwZSApO1xuICAgICAgICAgICAgZGVsZWdhdGUuYWN0aXZlUG9pbnRlcnNMaXN0cy5wdXNoKCBsaXN0ICk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIHBvaW50ZXJzIGN1cnJlbnRseSBhY3RpdmUgb24gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBY3RpdmVQb2ludGVyQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRoaXMuaGFzaCBdLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgbGVuID0gZGVsZWdhdGUuYWN0aXZlUG9pbnRlcnNMaXN0cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICAgICAgICAgIGNvdW50ICs9IGRlbGVnYXRlLmFjdGl2ZVBvaW50ZXJzTGlzdHNbIGkgXS5nZXRMZW5ndGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnQgb3IgYXNzaWduIGltcGxlbWVudGF0aW9uIHRvIHRoZXNlIGhhbmRsZXJzIGR1cmluZyBvciBhZnRlclxuICAgICAgICAgKiBjYWxsaW5nIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSBldmVudC5ldmVudFNvdXJjZVxuICAgICAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0cmFja2VyIGluc3RhbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQucG9pbnRlclR5cGVcbiAgICAgICAgICogICAgIFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZXZlbnQucG9zaXRpb25cbiAgICAgICAgICogICAgICBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5idXR0b25zXG4gICAgICAgICAqICAgICAgQ3VycmVudCBidXR0b25zIHByZXNzZWQuXG4gICAgICAgICAqICAgICAgQ29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LnBvaW50ZXJzXG4gICAgICAgICAqICAgICAgTnVtYmVyIG9mIHBvaW50ZXJzIChhbGwgdHlwZXMpIGFjdGl2ZSBpbiB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkXG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgbGVmdCBtb3VzZSBidXR0b24gaXMgY3VycmVudGx5IGJlaW5nIHByZXNzZWQgYW5kIHdhc1xuICAgICAgICAgKiAgICAgIGluaXRpYXRlZCBpbnNpZGUgdGhlIHRyYWNrZWQgZWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmJ1dHRvbkRvd25BbnlcbiAgICAgICAgICogICAgICBXYXMgdGhlIGJ1dHRvbiBkb3duIGFueXdoZXJlIGluIHRoZSBzY3JlZW4gZHVyaW5nIHRoZSBldmVudC4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIGJ1dHRvbnMgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGVudGVySGFuZGxlcjogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnQgb3IgYXNzaWduIGltcGxlbWVudGF0aW9uIHRvIHRoZXNlIGhhbmRsZXJzIGR1cmluZyBvciBhZnRlclxuICAgICAgICAgKiBjYWxsaW5nIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSBldmVudC5ldmVudFNvdXJjZVxuICAgICAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0cmFja2VyIGluc3RhbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQucG9pbnRlclR5cGVcbiAgICAgICAgICogICAgIFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZXZlbnQucG9zaXRpb25cbiAgICAgICAgICogICAgICBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5idXR0b25zXG4gICAgICAgICAqICAgICAgQ3VycmVudCBidXR0b25zIHByZXNzZWQuXG4gICAgICAgICAqICAgICAgQ29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LnBvaW50ZXJzXG4gICAgICAgICAqICAgICAgTnVtYmVyIG9mIHBvaW50ZXJzIChhbGwgdHlwZXMpIGFjdGl2ZSBpbiB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkXG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgbGVmdCBtb3VzZSBidXR0b24gaXMgY3VycmVudGx5IGJlaW5nIHByZXNzZWQgYW5kIHdhc1xuICAgICAgICAgKiAgICAgIGluaXRpYXRlZCBpbnNpZGUgdGhlIHRyYWNrZWQgZWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmJ1dHRvbkRvd25BbnlcbiAgICAgICAgICogICAgICBXYXMgdGhlIGJ1dHRvbiBkb3duIGFueXdoZXJlIGluIHRoZSBzY3JlZW4gZHVyaW5nIHRoZSBldmVudC4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIGJ1dHRvbnMgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGV4aXRIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5wb3NpdGlvblxuICAgICAgICAgKiAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LmJ1dHRvbnNcbiAgICAgICAgICogICAgICBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZC5cbiAgICAgICAgICogICAgICBDb21iaW5hdGlvbiBvZiBiaXQgZmxhZ3MgMDogbm9uZSwgMTogcHJpbWFyeSAob3IgdG91Y2ggY29udGFjdCksIDI6IHNlY29uZGFyeSwgNDogYXV4IChvZnRlbiBtaWRkbGUpLCA4OiBYMSAob2Z0ZW4gYmFjayksIDE2OiBYMiAob2Z0ZW4gZm9yd2FyZCksIDMyOiBwZW4gZXJhc2VyLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmlzVG91Y2hFdmVudFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIGEgdG91Y2ggZXZlbnQsIG90aGVyd2lzZSBmYWxzZS4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIHBvaW50ZXJUeXBlIGFuZC9vciBvcmlnaW5hbEV2ZW50IGluc3RlYWQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBwcmVzc0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuYnV0dG9uXG4gICAgICAgICAqICAgICAgQnV0dG9uIHdoaWNoIGNhdXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqICAgICAgLTE6IG5vbmUsIDA6IHByaW1hcnkvbGVmdCwgMTogYXV4L21pZGRsZSwgMjogc2Vjb25kYXJ5L3JpZ2h0LCAzOiBYMS9iYWNrLCA0OiBYMi9mb3J3YXJkLCA1OiBwZW4gZXJhc2VyLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuYnV0dG9uc1xuICAgICAgICAgKiAgICAgIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLlxuICAgICAgICAgKiAgICAgIENvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIG5vblByaW1hcnlQcmVzc0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuYnV0dG9uc1xuICAgICAgICAgKiAgICAgIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLlxuICAgICAgICAgKiAgICAgIENvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaW5zaWRlRWxlbWVudFByZXNzZWRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBpcyBjdXJyZW50bHkgYmVpbmcgcHJlc3NlZCBhbmQgd2FzXG4gICAgICAgICAqICAgICAgaW5pdGlhdGVkIGluc2lkZSB0aGUgdHJhY2tlZCBlbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaW5zaWRlRWxlbWVudFJlbGVhc2VkXG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgY3Vyc29yIGluc2lkZSB0aGUgdHJhY2tlZCBlbGVtZW50IHdoZW4gdGhlIGJ1dHRvbiB3YXMgcmVsZWFzZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHJlbGVhc2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5wb3NpdGlvblxuICAgICAgICAgKiAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LmJ1dHRvblxuICAgICAgICAgKiAgICAgIEJ1dHRvbiB3aGljaCBjYXVzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgKiAgICAgIC0xOiBub25lLCAwOiBwcmltYXJ5L2xlZnQsIDE6IGF1eC9taWRkbGUsIDI6IHNlY29uZGFyeS9yaWdodCwgMzogWDEvYmFjaywgNDogWDIvZm9yd2FyZCwgNTogcGVuIGVyYXNlci5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LmJ1dHRvbnNcbiAgICAgICAgICogICAgICBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZC5cbiAgICAgICAgICogICAgICBDb21iaW5hdGlvbiBvZiBiaXQgZmxhZ3MgMDogbm9uZSwgMTogcHJpbWFyeSAob3IgdG91Y2ggY29udGFjdCksIDI6IHNlY29uZGFyeSwgNDogYXV4IChvZnRlbiBtaWRkbGUpLCA4OiBYMSAob2Z0ZW4gYmFjayksIDE2OiBYMiAob2Z0ZW4gZm9yd2FyZCksIDMyOiBwZW4gZXJhc2VyLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmlzVG91Y2hFdmVudFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIGEgdG91Y2ggZXZlbnQsIG90aGVyd2lzZSBmYWxzZS4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIHBvaW50ZXJUeXBlIGFuZC9vciBvcmlnaW5hbEV2ZW50IGluc3RlYWQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBub25QcmltYXJ5UmVsZWFzZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuYnV0dG9uc1xuICAgICAgICAgKiAgICAgIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLlxuICAgICAgICAgKiAgICAgIENvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIG1vdmVIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5wb3NpdGlvblxuICAgICAgICAgKiAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LnNjcm9sbFxuICAgICAgICAgKiAgICAgIFRoZSBzY3JvbGwgZGVsdGEgZm9yIHRoZSBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5zaGlmdFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5pc1RvdWNoRXZlbnRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBvcmlnaW5hbCBldmVudCBpcyBhIHRvdWNoIGV2ZW50LCBvdGhlcndpc2UgZmFsc2UuIDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkO1wiPkRlcHJlY2F0ZWQuIFVzZSBwb2ludGVyVHlwZSBhbmQvb3Igb3JpZ2luYWxFdmVudCBpbnN0ZWFkLiBUb3VjaCBkZXZpY2VzIG5vIGxvbmdlciBnZW5lcmF0ZSBzY3JvbGwgZXZlbnQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5wb3NpdGlvblxuICAgICAgICAgKiAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5xdWlja1xuICAgICAgICAgKiAgICAgIFRydWUgb25seSBpZiB0aGUgY2xpY2tEaXN0VGhyZXNob2xkIGFuZCBjbGlja1RpbWVUaHJlc2hvbGQgYXJlIGJvdGggcGFzc2VkLiBVc2VmdWwgZm9yIGlnbm9yaW5nIGRyYWcgZXZlbnRzLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnNoaWZ0XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmlzVG91Y2hFdmVudFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIGEgdG91Y2ggZXZlbnQsIG90aGVyd2lzZSBmYWxzZS4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIHBvaW50ZXJUeXBlIGFuZC9vciBvcmlnaW5hbEV2ZW50IGluc3RlYWQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnNoaWZ0XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmlzVG91Y2hFdmVudFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIGEgdG91Y2ggZXZlbnQsIG90aGVyd2lzZSBmYWxzZS4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIHBvaW50ZXJUeXBlIGFuZC9vciBvcmlnaW5hbEV2ZW50IGluc3RlYWQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBkYmxDbGlja0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuYnV0dG9uc1xuICAgICAgICAgKiAgICAgIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLlxuICAgICAgICAgKiAgICAgIENvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZXZlbnQuZGVsdGFcbiAgICAgICAgICogICAgICBUaGUgeCx5IGNvbXBvbmVudHMgb2YgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgdGhlIGxhc3QgZHJhZyBldmVudCBwb3NpdGlvbi4gIFVzZWZ1bCBmb3IgaWdub3Jpbmcgb3Igd2VpZ2h0aW5nIHRoZSBldmVudHMuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5zcGVlZFxuICAgICAgICAgKiAgICAgQ3VycmVudCBjb21wdXRlZCBzcGVlZCwgaW4gcGl4ZWxzIHBlciBzZWNvbmQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5kaXJlY3Rpb25cbiAgICAgICAgICogICAgIEN1cnJlbnQgY29tcHV0ZWQgZGlyZWN0aW9uLCBleHByZXNzZWQgYXMgYW4gYW5nbGUgY291bnRlcmNsb2Nrd2lzZSByZWxhdGl2ZSB0byB0aGUgcG9zaXRpdmUgWCBheGlzICgtcGkgdG8gcGksIGluIHJhZGlhbnMpLiBPbmx5IHZhbGlkIGlmIHNwZWVkID4gMC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5zaGlmdFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5pc1RvdWNoRXZlbnRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBvcmlnaW5hbCBldmVudCBpcyBhIHRvdWNoIGV2ZW50LCBvdGhlcndpc2UgZmFsc2UuIDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkO1wiPkRlcHJlY2F0ZWQuIFVzZSBwb2ludGVyVHlwZSBhbmQvb3Igb3JpZ2luYWxFdmVudCBpbnN0ZWFkLjwvc3Bhbj5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICAgICAgICogICAgICBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uXG4gICAgICAgICAqICAgICAgU2V0IHRvIHRydWUgdG8gcHJldmVudCB0aGUgdHJhY2tlciBzdWJzY3JpYmVyIGZyb20gcGVyZm9ybWluZyBpdHMgZGVmYXVsdCBhY3Rpb24gKHN1YnNjcmliZXIgaW1wbGVtZW50YXRpb24gZGVwZW5kZW50KS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC51c2VyRGF0YVxuICAgICAgICAgKiAgICAgIEFyYml0cmFyeSB1c2VyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50LnBvaW50ZXJUeXBlXG4gICAgICAgICAqICAgICBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGV2ZW50LnBvc2l0aW9uXG4gICAgICAgICAqICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuc3BlZWRcbiAgICAgICAgICogICAgIFNwZWVkIGF0IHRoZSBlbmQgb2YgYSBkcmFnIGdlc3R1cmUsIGluIHBpeGVscyBwZXIgc2Vjb25kLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQuZGlyZWN0aW9uXG4gICAgICAgICAqICAgICBEaXJlY3Rpb24gYXQgdGhlIGVuZCBvZiBhIGRyYWcgZ2VzdHVyZSwgZXhwcmVzc2VkIGFzIGFuIGFuZ2xlIGNvdW50ZXJjbG9ja3dpc2UgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aXZlIFggYXhpcyAoLXBpIHRvIHBpLCBpbiByYWRpYW5zKS4gT25seSB2YWxpZCBpZiBzcGVlZCA+IDAuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuc2hpZnRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBzaGlmdCBrZXkgd2FzIHByZXNzZWQgZHVyaW5nIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuaXNUb3VjaEV2ZW50XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgZXZlbnQgaXMgYSB0b3VjaCBldmVudCwgb3RoZXJ3aXNlIGZhbHNlLiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgcG9pbnRlclR5cGUgYW5kL29yIG9yaWdpbmFsRXZlbnQgaW5zdGVhZC48L3NwYW4+XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGRyYWdFbmRIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtBcnJheS48T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50Pn0gZXZlbnQuZ2VzdHVyZVBvaW50c1xuICAgICAgICAgKiAgICAgIEdlc3R1cmUgcG9pbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2VzdHVyZS4gVmVsb2NpdHkgZGF0YSBjYW4gYmUgZm91bmQgaGVyZS5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5sYXN0Q2VudGVyXG4gICAgICAgICAqICAgICAgVGhlIHByZXZpb3VzIGNlbnRlciBwb2ludCBvZiB0aGUgdHdvIHBpbmNoIGNvbnRhY3QgcG9pbnRzIHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZXZlbnQuY2VudGVyXG4gICAgICAgICAqICAgICAgVGhlIGNlbnRlciBwb2ludCBvZiB0aGUgdHdvIHBpbmNoIGNvbnRhY3QgcG9pbnRzIHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5sYXN0RGlzdGFuY2VcbiAgICAgICAgICogICAgICBUaGUgcHJldmlvdXMgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHBpbmNoIGNvbnRhY3QgcG9pbnRzIGluIENTUyBwaXhlbHMuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBldmVudC5kaXN0YW5jZVxuICAgICAgICAgKiAgICAgIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcGluY2ggY29udGFjdCBwb2ludHMgaW4gQ1NTIHBpeGVscy5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5zaGlmdFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICAgICAgICogICAgICBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uXG4gICAgICAgICAqICAgICAgU2V0IHRvIHRydWUgdG8gcHJldmVudCB0aGUgdHJhY2tlciBzdWJzY3JpYmVyIGZyb20gcGVyZm9ybWluZyBpdHMgZGVmYXVsdCBhY3Rpb24gKHN1YnNjcmliZXIgaW1wbGVtZW50YXRpb24gZGVwZW5kZW50KS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC51c2VyRGF0YVxuICAgICAgICAgKiAgICAgIEFyYml0cmFyeSB1c2VyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgcGluY2hIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudCBvciBhc3NpZ24gaW1wbGVtZW50YXRpb24gdG8gdGhlc2UgaGFuZGxlcnMgZHVyaW5nIG9yIGFmdGVyXG4gICAgICAgICAqIGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IGV2ZW50LmV2ZW50U291cmNlXG4gICAgICAgICAqICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudC5wb2ludGVyVHlwZVxuICAgICAgICAgKiAgICAgXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBldmVudC5wb3NpdGlvblxuICAgICAgICAgKiAgICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LmJ1dHRvbnNcbiAgICAgICAgICogICAgICBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZC5cbiAgICAgICAgICogICAgICBDb21iaW5hdGlvbiBvZiBiaXQgZmxhZ3MgMDogbm9uZSwgMTogcHJpbWFyeSAob3IgdG91Y2ggY29udGFjdCksIDI6IHNlY29uZGFyeSwgNDogYXV4IChvZnRlbiBtaWRkbGUpLCA4OiBYMSAob2Z0ZW4gYmFjayksIDE2OiBYMiAob2Z0ZW4gZm9yd2FyZCksIDMyOiBwZW4gZXJhc2VyLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmlzVG91Y2hFdmVudFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIGEgdG91Y2ggZXZlbnQsIG90aGVyd2lzZSBmYWxzZS4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIHBvaW50ZXJUeXBlIGFuZC9vciBvcmlnaW5hbEV2ZW50IGluc3RlYWQuPC9zcGFuPlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBzdG9wSGFuZGxlcjogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnQgb3IgYXNzaWduIGltcGxlbWVudGF0aW9uIHRvIHRoZXNlIGhhbmRsZXJzIGR1cmluZyBvciBhZnRlclxuICAgICAgICAgKiBjYWxsaW5nIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSBldmVudC5ldmVudFNvdXJjZVxuICAgICAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0cmFja2VyIGluc3RhbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQua2V5Q29kZVxuICAgICAgICAgKiAgICAgIFRoZSBrZXkgY29kZSB0aGF0IHdhcyBwcmVzc2VkLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmN0cmxcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBjdHJsIGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5zaGlmdFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5hbHRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBhbHQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50Lm1ldGFcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBtZXRhIGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICAgICAgICogICAgICBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uXG4gICAgICAgICAqICAgICAgU2V0IHRvIHRydWUgdG8gcHJldmVudCB0aGUgdHJhY2tlciBzdWJzY3JpYmVyIGZyb20gcGVyZm9ybWluZyBpdHMgZGVmYXVsdCBhY3Rpb24gKHN1YnNjcmliZXIgaW1wbGVtZW50YXRpb24gZGVwZW5kZW50KS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC51c2VyRGF0YVxuICAgICAgICAgKiAgICAgIEFyYml0cmFyeSB1c2VyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAga2V5RG93bkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50LmtleUNvZGVcbiAgICAgICAgICogICAgICBUaGUga2V5IGNvZGUgdGhhdCB3YXMgcHJlc3NlZC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5jdHJsXG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgY3RybCBrZXkgd2FzIHByZXNzZWQgZHVyaW5nIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuc2hpZnRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBzaGlmdCBrZXkgd2FzIHByZXNzZWQgZHVyaW5nIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQuYWx0XG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgYWx0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5tZXRhXG4gICAgICAgICAqICAgICAgVHJ1ZSBpZiB0aGUgbWV0YSBrZXkgd2FzIHByZXNzZWQgZHVyaW5nIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgICAgICAqICAgICAgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvblxuICAgICAgICAgKiAgICAgIFNldCB0byB0cnVlIHRvIHByZXZlbnQgdGhlIHRyYWNrZXIgc3Vic2NyaWJlciBmcm9tIHBlcmZvcm1pbmcgaXRzIGRlZmF1bHQgYWN0aW9uIChzdWJzY3JpYmVyIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCkuIERlZmF1bHQ6IGZhbHNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQudXNlckRhdGFcbiAgICAgICAgICogICAgICBBcmJpdHJhcnkgdXNlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGtleVVwSGFuZGxlcjogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnQgb3IgYXNzaWduIGltcGxlbWVudGF0aW9uIHRvIHRoZXNlIGhhbmRsZXJzIGR1cmluZyBvciBhZnRlclxuICAgICAgICAgKiBjYWxsaW5nIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSBldmVudC5ldmVudFNvdXJjZVxuICAgICAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0cmFja2VyIGluc3RhbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXZlbnQua2V5Q29kZVxuICAgICAgICAgKiAgICAgIFRoZSBrZXkgY29kZSB0aGF0IHdhcyBwcmVzc2VkLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LmN0cmxcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBjdHJsIGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5zaGlmdFxuICAgICAgICAgKiAgICAgIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBldmVudC5hbHRcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBhbHQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50Lm1ldGFcbiAgICAgICAgICogICAgICBUcnVlIGlmIHRoZSBtZXRhIGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICAgICAgICogICAgICBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uXG4gICAgICAgICAqICAgICAgU2V0IHRvIHRydWUgdG8gcHJldmVudCB0aGUgdHJhY2tlciBzdWJzY3JpYmVyIGZyb20gcGVyZm9ybWluZyBpdHMgZGVmYXVsdCBhY3Rpb24gKHN1YnNjcmliZXIgaW1wbGVtZW50YXRpb24gZGVwZW5kZW50KS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC51c2VyRGF0YVxuICAgICAgICAgKiAgICAgIEFyYml0cmFyeSB1c2VyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAga2V5SGFuZGxlcjogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnQgb3IgYXNzaWduIGltcGxlbWVudGF0aW9uIHRvIHRoZXNlIGhhbmRsZXJzIGR1cmluZyBvciBhZnRlclxuICAgICAgICAgKiBjYWxsaW5nIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSBldmVudC5ldmVudFNvdXJjZVxuICAgICAgICAgKiAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0cmFja2VyIGluc3RhbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICAgKiAgICAgIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb25cbiAgICAgICAgICogICAgICBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IHRoZSB0cmFja2VyIHN1YnNjcmliZXIgZnJvbSBwZXJmb3JtaW5nIGl0cyBkZWZhdWx0IGFjdGlvbiAoc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQpLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LnVzZXJEYXRhXG4gICAgICAgICAqICAgICAgQXJiaXRyYXJ5IHVzZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBmb2N1c0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50IG9yIGFzc2lnbiBpbXBsZW1lbnRhdGlvbiB0byB0aGVzZSBoYW5kbGVycyBkdXJpbmcgb3IgYWZ0ZXJcbiAgICAgICAgICogY2FsbGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gZXZlbnQuZXZlbnRTb3VyY2VcbiAgICAgICAgICogICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICAgICAgICogICAgICBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uXG4gICAgICAgICAqICAgICAgU2V0IHRvIHRydWUgdG8gcHJldmVudCB0aGUgdHJhY2tlciBzdWJzY3JpYmVyIGZyb20gcGVyZm9ybWluZyBpdHMgZGVmYXVsdCBhY3Rpb24gKHN1YnNjcmliZXIgaW1wbGVtZW50YXRpb24gZGVwZW5kZW50KS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC51c2VyRGF0YVxuICAgICAgICAgKiAgICAgIEFyYml0cmFyeSB1c2VyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgYmx1ckhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgfVxuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGNvbnRpbnVvdXMgY29tcHV0YXRpb24gb2YgdmVsb2NpdHkgKHNwZWVkIGFuZCBkaXJlY3Rpb24pIG9mIGFjdGl2ZSBwb2ludGVycy5cbiAgICAgKiBUaGlzIGlzIGEgc2luZ2xldG9uLCB1c2VkIGJ5IGFsbCBNb3VzZVRyYWNrZXIgaW5zdGFuY2VzLCBhcyBpdCBpcyB1bmxpa2VseSB0aGVyZSB3aWxsIGV2ZXIgYmUgbW9yZSB0aGFuXG4gICAgICogdHdvIGFjdGl2ZSBnZXN0dXJlIHBvaW50ZXJzIGF0IGEgdGltZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1lbWJlciBnZXN0dXJlUG9pbnRWZWxvY2l0eVRyYWNrZXJcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJcbiAgICAgKi9cbiAgICAkLk1vdXNlVHJhY2tlci5nZXN0dXJlUG9pbnRWZWxvY2l0eVRyYWNrZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJhY2tlclBvaW50cyA9IFtdLFxuICAgICAgICAgICAgaW50ZXJ2YWxJZCA9IDAsXG4gICAgICAgICAgICBsYXN0VGltZSA9IDA7XG5cbiAgICAgICAgLy8gR2VuZXJhdGVzIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIGEgdHJhY2tlZCBnZXN0dXJlIHBvaW50XG4gICAgICAgIHZhciBfZ2VuZXJhdGVHdWlkID0gZnVuY3Rpb24gKCB0cmFja2VyLCBnUG9pbnQgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tlci5oYXNoLnRvU3RyaW5nKCkgKyBnUG9pbnQudHlwZSArIGdQb2ludC5pZC50b1N0cmluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVydmFsIHRpbWVyIGNhbGxiYWNrLiBDb21wdXRlcyB2ZWxvY2l0eSBmb3IgYWxsIHRyYWNrZWQgZ2VzdHVyZSBwb2ludHMuXG4gICAgICAgIHZhciBfZG9UcmFja2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHRyYWNrZXJQb2ludHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRyYWNrUG9pbnQsXG4gICAgICAgICAgICAgICAgZ1BvaW50LFxuICAgICAgICAgICAgICAgIG5vdyA9ICQubm93KCksXG4gICAgICAgICAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgc3BlZWQ7XG5cbiAgICAgICAgICAgIGVsYXBzZWRUaW1lID0gbm93IC0gbGFzdFRpbWU7XG4gICAgICAgICAgICBsYXN0VGltZSA9IG5vdztcblxuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICAgICAgICB0cmFja1BvaW50ID0gdHJhY2tlclBvaW50c1sgaSBdO1xuICAgICAgICAgICAgICAgIGdQb2ludCA9IHRyYWNrUG9pbnQuZ1BvaW50O1xuICAgICAgICAgICAgICAgIC8vIE1hdGguYXRhbjIgZ2l2ZXMgdXMganVzdCB3aGF0IHdlIG5lZWQgZm9yIGEgdmVsb2NpdHkgdmVjdG9yLCBhcyB3ZSBjYW4gc2ltcGx5XG4gICAgICAgICAgICAgICAgLy8gICB1c2UgY29zKCkvc2luKCkgdG8gZXh0cmFjdCB0aGUgeC95IHZlbG9jaXR5IGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgZ1BvaW50LmRpcmVjdGlvbiA9IE1hdGguYXRhbjIoIGdQb2ludC5jdXJyZW50UG9zLnkgLSB0cmFja1BvaW50Lmxhc3RQb3MueSwgZ1BvaW50LmN1cnJlbnRQb3MueCAtIHRyYWNrUG9pbnQubGFzdFBvcy54ICk7XG4gICAgICAgICAgICAgICAgLy8gc3BlZWQgPSBkaXN0YW5jZSAvIGVsYXBzZWQgdGltZVxuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gdHJhY2tQb2ludC5sYXN0UG9zLmRpc3RhbmNlVG8oIGdQb2ludC5jdXJyZW50UG9zICk7XG4gICAgICAgICAgICAgICAgdHJhY2tQb2ludC5sYXN0UG9zID0gZ1BvaW50LmN1cnJlbnRQb3M7XG4gICAgICAgICAgICAgICAgc3BlZWQgPSAxMDAwICogZGlzdGFuY2UgLyAoIGVsYXBzZWRUaW1lICsgMSApO1xuICAgICAgICAgICAgICAgIC8vIFNpbXBsZSBiaWFzZWQgYXZlcmFnZSwgZmF2b3JzIHRoZSBtb3N0IHJlY2VudCBzcGVlZCBjb21wdXRhdGlvbi4gU21vb3RocyBvdXQgZXJyYXRpYyBnZXN0dXJlcyBhIGJpdC5cbiAgICAgICAgICAgICAgICBnUG9pbnQuc3BlZWQgPSAwLjc1ICogc3BlZWQgKyAwLjI1ICogZ1BvaW50LnNwZWVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFB1YmxpYy4gQWRkIGEgZ2VzdHVyZSBwb2ludCB0byBiZSB0cmFja2VkXG4gICAgICAgIHZhciBhZGRQb2ludCA9IGZ1bmN0aW9uICggdHJhY2tlciwgZ1BvaW50ICkge1xuICAgICAgICAgICAgdmFyIGd1aWQgPSBfZ2VuZXJhdGVHdWlkKCB0cmFja2VyLCBnUG9pbnQgKTtcblxuICAgICAgICAgICAgdHJhY2tlclBvaW50cy5wdXNoKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ3VpZDogZ3VpZCxcbiAgICAgICAgICAgICAgICAgICAgZ1BvaW50OiBnUG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb3M6IGdQb2ludC5jdXJyZW50UG9zXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAvLyBPbmx5IGZpcmUgdXAgdGhlIGludGVydmFsIHRpbWVyIHdoZW4gdGhlcmUncyBnZXN0dXJlIHBvaW50ZXJzIHRvIHRyYWNrXG4gICAgICAgICAgICBpZiAoIHRyYWNrZXJQb2ludHMubGVuZ3RoID09PSAxICkge1xuICAgICAgICAgICAgICAgIGxhc3RUaW1lID0gJC5ub3coKTtcbiAgICAgICAgICAgICAgICBpbnRlcnZhbElkID0gd2luZG93LnNldEludGVydmFsKCBfZG9UcmFja2luZywgNTAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQdWJsaWMuIFN0b3AgdHJhY2tpbmcgYSBnZXN0dXJlIHBvaW50XG4gICAgICAgIHZhciByZW1vdmVQb2ludCA9IGZ1bmN0aW9uICggdHJhY2tlciwgZ1BvaW50ICkge1xuICAgICAgICAgICAgdmFyIGd1aWQgPSBfZ2VuZXJhdGVHdWlkKCB0cmFja2VyLCBnUG9pbnQgKSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHRyYWNrZXJQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRyYWNrZXJQb2ludHNbIGkgXS5ndWlkID09PSBndWlkICkge1xuICAgICAgICAgICAgICAgICAgICB0cmFja2VyUG9pbnRzLnNwbGljZSggaSwgMSApO1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHJ1biB0aGUgaW50ZXJ2YWwgdGltZXIgaWYgdGhlcmVzIGdlc3R1cmUgcG9pbnRlcnMgdG8gdHJhY2tcbiAgICAgICAgICAgICAgICAgICAgbGVuLS07XG4gICAgICAgICAgICAgICAgICAgIGlmICggbGVuID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoIGludGVydmFsSWQgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZFBvaW50OiAgICBhZGRQb2ludCxcbiAgICAgICAgICAgIHJlbW92ZVBvaW50OiByZW1vdmVQb2ludFxuICAgICAgICB9O1xuICAgIH0gKSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBvaW50ZXIgZXZlbnQgbW9kZWwgYW5kIGZlYXR1cmUgZGV0ZWN0aW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAkLk1vdXNlVHJhY2tlci5jYXB0dXJlRWxlbWVudCA9IGRvY3VtZW50O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGF2YWlsYWJsZSBtb3VzZSB3aGVlbCBldmVudCBuYW1lLlxuICAgICAqL1xuICAgICQuTW91c2VUcmFja2VyLndoZWVsRXZlbnROYW1lID0gKCAkLkJyb3dzZXIudmVuZG9yID09ICQuQlJPV1NFUlMuSUUgJiYgJC5Ccm93c2VyLnZlcnNpb24gPiA4ICkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggJ29ud2hlZWwnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICkgKSA/ICd3aGVlbCcgOiAvLyBNb2Rlcm4gYnJvd3NlcnMgc3VwcG9ydCAnd2hlZWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5vbm1vdXNld2hlZWwgIT09IHVuZGVmaW5lZCA/ICdtb3VzZXdoZWVsJyA6ICAgICAgICAgICAgICAgICAgICAgLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0ICdtb3VzZXdoZWVsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSBvbGQgRmlyZWZveFxuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGxlZ2FjeSBtb3VzZSBjYXB0dXJlIHN1cHBvcnQuXG4gICAgICovXG4gICAgJC5Nb3VzZVRyYWNrZXIuc3VwcG9ydHNNb3VzZUNhcHR1cmUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG4gICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24oIGRpdkVsZW1lbnQuc2V0Q2FwdHVyZSApICYmICQuaXNGdW5jdGlvbiggZGl2RWxlbWVudC5yZWxlYXNlQ2FwdHVyZSApO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgYnJvd3NlciBwb2ludGVyIGRldmljZSBldmVudCBtb2RlbChzKSBhbmQgYnVpbGQgYXBwcm9wcmlhdGUgbGlzdCBvZiBldmVudHMgdG8gc3Vic2NyaWJlIHRvLlxuICAgICAqL1xuICAgICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cyA9IFsgXCJjbGlja1wiLCBcImRibGNsaWNrXCIsIFwia2V5ZG93blwiLCBcImtleXVwXCIsIFwia2V5cHJlc3NcIiwgXCJmb2N1c1wiLCBcImJsdXJcIiwgJC5Nb3VzZVRyYWNrZXIud2hlZWxFdmVudE5hbWUgXTtcblxuICAgIGlmKCAkLk1vdXNlVHJhY2tlci53aGVlbEV2ZW50TmFtZSA9PSBcIkRPTU1vdXNlU2Nyb2xsXCIgKSB7XG4gICAgICAgIC8vIE9sZGVyIEZpcmVmb3hcbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIuc3Vic2NyaWJlRXZlbnRzLnB1c2goIFwiTW96TW91c2VQaXhlbFNjcm9sbFwiICk7XG4gICAgfVxuXG4gICAgLy8gTm90ZTogd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlIGlzIGRlcHJlY2F0ZWQgb24gSUUgMTEgYW5kIG5vdCBwYXJ0IG9mIFczQyBzcGVjLlxuICAgIGlmICggd2luZG93LlBvaW50ZXJFdmVudCAmJiAoIHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgJC5Ccm93c2VyLnZlbmRvciAhPT0gJC5CUk9XU0VSUy5JRSApICkge1xuICAgICAgICAvLyBJRTExIGFuZCBvdGhlciBXM0MgUG9pbnRlciBFdmVudCBpbXBsZW1lbnRhdGlvbnMgKHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzKVxuICAgICAgICAkLk1vdXNlVHJhY2tlci5oYXZlUG9pbnRlckV2ZW50cyA9IHRydWU7XG4gICAgICAgICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5wdXNoKCBcInBvaW50ZXJvdmVyXCIsIFwicG9pbnRlcm91dFwiLCBcInBvaW50ZXJkb3duXCIsIFwicG9pbnRlcnVwXCIsIFwicG9pbnRlcm1vdmVcIiwgXCJwb2ludGVyY2FuY2VsXCIgKTtcbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIudW5wcmVmaXhlZFBvaW50ZXJFdmVudHMgPSB0cnVlO1xuICAgICAgICBpZiggbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzICkge1xuICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIubWF4VG91Y2hQb2ludHMgPSBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5tYXhUb3VjaFBvaW50cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIuaGF2ZU1vdXNlRW50ZXIgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCB3aW5kb3cuTVNQb2ludGVyRXZlbnQgJiYgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkICkge1xuICAgICAgICAvLyBJRTEwXG4gICAgICAgICQuTW91c2VUcmFja2VyLmhhdmVQb2ludGVyRXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIuc3Vic2NyaWJlRXZlbnRzLnB1c2goIFwiTVNQb2ludGVyT3ZlclwiLCBcIk1TUG9pbnRlck91dFwiLCBcIk1TUG9pbnRlckRvd25cIiwgXCJNU1BvaW50ZXJVcFwiLCBcIk1TUG9pbnRlck1vdmVcIiwgXCJNU1BvaW50ZXJDYW5jZWxcIiApO1xuICAgICAgICAkLk1vdXNlVHJhY2tlci51bnByZWZpeGVkUG9pbnRlckV2ZW50cyA9IGZhbHNlO1xuICAgICAgICBpZiggbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgKSB7XG4gICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5tYXhUb3VjaFBvaW50cyA9IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIubWF4VG91Y2hQb2ludHMgPSAwO1xuICAgICAgICB9XG4gICAgICAgICQuTW91c2VUcmFja2VyLmhhdmVNb3VzZUVudGVyID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTGVnYWN5IFczQyBtb3VzZSBldmVudHNcbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIuaGF2ZVBvaW50ZXJFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKCAkLkJyb3dzZXIudmVuZG9yID09PSAkLkJST1dTRVJTLklFICYmICQuQnJvd3Nlci52ZXJzaW9uIDwgOSApIHtcbiAgICAgICAgICAgICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5wdXNoKCBcIm1vdXNlZW50ZXJcIiwgXCJtb3VzZWxlYXZlXCIgKTtcbiAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmhhdmVNb3VzZUVudGVyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5wdXNoKCBcIm1vdXNlb3ZlclwiLCBcIm1vdXNlb3V0XCIgKTtcbiAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmhhdmVNb3VzZUVudGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIuc3Vic2NyaWJlRXZlbnRzLnB1c2goIFwibW91c2Vkb3duXCIsIFwibW91c2V1cFwiLCBcIm1vdXNlbW92ZVwiICk7XG4gICAgICAgIGlmICggJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICkge1xuICAgICAgICAgICAgLy8gaU9TLCBBbmRyb2lkLCBhbmQgb3RoZXIgVzNjIFRvdWNoIEV2ZW50IGltcGxlbWVudGF0aW9uc1xuICAgICAgICAgICAgLy8gICAgKHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi90b3VjaC1ldmVudHMvKVxuICAgICAgICAgICAgLy8gICAgKHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9pb3MvZG9jdW1lbnRhdGlvbi9BcHBsZUFwcGxpY2F0aW9ucy9SZWZlcmVuY2UvU2FmYXJpV2ViQ29udGVudC9IYW5kbGluZ0V2ZW50cy9IYW5kbGluZ0V2ZW50cy5odG1sKVxuICAgICAgICAgICAgLy8gICAgKHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9zYWZhcmkvZG9jdW1lbnRhdGlvbi9BcHBsZUFwcGxpY2F0aW9ucy9SZWZlcmVuY2UvU2FmYXJpV2ViQ29udGVudC9IYW5kbGluZ0V2ZW50cy9IYW5kbGluZ0V2ZW50cy5odG1sKVxuICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIuc3Vic2NyaWJlRXZlbnRzLnB1c2goIFwidG91Y2hzdGFydFwiLCBcInRvdWNoZW5kXCIsIFwidG91Y2htb3ZlXCIsIFwidG91Y2hjYW5jZWxcIiApO1xuICAgICAgICB9XG4gICAgICAgIGlmICggJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3cgKSB7XG4gICAgICAgICAgICAvLyBpT1MgKHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9pb3MvZG9jdW1lbnRhdGlvbi9BcHBsZUFwcGxpY2F0aW9ucy9SZWZlcmVuY2UvU2FmYXJpV2ViQ29udGVudC9IYW5kbGluZ0V2ZW50cy9IYW5kbGluZ0V2ZW50cy5odG1sKVxuICAgICAgICAgICAgLy8gICBTdWJzY3JpYmUgdG8gdGhlc2UgdG8gcHJldmVudCBkZWZhdWx0IGdlc3R1cmUgaGFuZGxpbmdcbiAgICAgICAgICAgICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5wdXNoKCBcImdlc3R1cmVzdGFydFwiLCBcImdlc3R1cmVjaGFuZ2VcIiApO1xuICAgICAgICB9XG4gICAgICAgICQuTW91c2VUcmFja2VyLm1vdXNlUG9pbnRlcklkID0gXCJsZWdhY3ktbW91c2VcIjtcbiAgICAgICAgJC5Nb3VzZVRyYWNrZXIubWF4VG91Y2hQb2ludHMgPSAxMDtcbiAgICB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ2xhc3NlcyBhbmQgdHlwZWRlZnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBwb2ludCBvZiBjb250YWN0IG9uIHRoZSBzY3JlZW4gbWFkZSBieSBhIG1vdXNlIGN1cnNvciwgcGVuLCB0b3VjaCwgb3Igb3RoZXIgcG9pbnRlciBkZXZpY2UuXG4gICAgICpcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBHZXN0dXJlUG9pbnRcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBpZFxuICAgICAqICAgICBJZGVudGlmaWVyIHVuaXF1ZSBmcm9tIGFsbCBvdGhlciBhY3RpdmUgR2VzdHVyZVBvaW50cyBmb3IgYSBnaXZlbiBwb2ludGVyIGRldmljZS5cbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gdHlwZVxuICAgICAqICAgICBUaGUgcG9pbnRlciBkZXZpY2UgdHlwZTogXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGNhcHR1cmVkXG4gICAgICogICAgIFRydWUgaWYgZXZlbnRzIGZvciB0aGUgZ2VzdHVyZSBwb2ludCBhcmUgY2FwdHVyZWQgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzUHJpbWFyeVxuICAgICAqICAgICBUcnVlIGlmIHRoZSBnZXN0dXJlIHBvaW50IGlzIGEgbWFzdGVyIHBvaW50ZXIgYW1vbmdzdCB0aGUgc2V0IG9mIGFjdGl2ZSBwb2ludGVycyBmb3IgZWFjaCBwb2ludGVyIHR5cGUuIFRydWUgZm9yIG1vdXNlIGFuZCBwcmltYXJ5IChmaXJzdCkgdG91Y2gvcGVuIHBvaW50ZXJzLlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW5zaWRlRWxlbWVudFByZXNzZWRcbiAgICAgKiAgICAgVHJ1ZSBpZiBidXR0b24gcHJlc3NlZCBvciBjb250YWN0IHBvaW50IGluaXRpYXRlZCBpbnNpZGUgdGhlIHNjcmVlbiBhcmVhIG9mIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpbnNpZGVFbGVtZW50XG4gICAgICogICAgIFRydWUgaWYgcG9pbnRlciBvciBjb250YWN0IHBvaW50IGlzIGN1cnJlbnRseSBpbnNpZGUgdGhlIGJvdW5kcyBvZiB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzcGVlZFxuICAgICAqICAgICBDdXJyZW50IGNvbXB1dGVkIHNwZWVkLCBpbiBwaXhlbHMgcGVyIHNlY29uZC5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZGlyZWN0aW9uXG4gICAgICogICAgIEN1cnJlbnQgY29tcHV0ZWQgZGlyZWN0aW9uLCBleHByZXNzZWQgYXMgYW4gYW5nbGUgY291bnRlcmNsb2Nrd2lzZSByZWxhdGl2ZSB0byB0aGUgcG9zaXRpdmUgWCBheGlzICgtcGkgdG8gcGksIGluIHJhZGlhbnMpLiBPbmx5IHZhbGlkIGlmIHNwZWVkID4gMC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IGNvbnRhY3RQb3NcbiAgICAgKiAgICAgVGhlIGluaXRpYWwgcG9pbnRlciBjb250YWN0IHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFnZSBpbmNsdWRpbmcgYW55IHNjcm9sbGluZy4gT25seSB2YWxpZCBpZiB0aGUgcG9pbnRlciBoYXMgY29udGFjdCAocHJlc3NlZCwgdG91Y2ggY29udGFjdCwgcGVuIGNvbnRhY3QpLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjb250YWN0VGltZVxuICAgICAqICAgICBUaGUgaW5pdGlhbCBwb2ludGVyIGNvbnRhY3QgdGltZSwgaW4gbWlsbGlzZWNvbmRzLiBPbmx5IHZhbGlkIGlmIHRoZSBwb2ludGVyIGhhcyBjb250YWN0IChwcmVzc2VkLCB0b3VjaCBjb250YWN0LCBwZW4gY29udGFjdCkuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBsYXN0UG9zXG4gICAgICogICAgIFRoZSBsYXN0IHBvaW50ZXIgcG9zaXRpb24sIHJlbGF0aXZlIHRvIHRoZSBwYWdlIGluY2x1ZGluZyBhbnkgc2Nyb2xsaW5nLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsYXN0VGltZVxuICAgICAqICAgICBUaGUgbGFzdCBwb2ludGVyIGNvbnRhY3QgdGltZSwgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gY3VycmVudFBvc1xuICAgICAqICAgICBUaGUgY3VycmVudCBwb2ludGVyIHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFnZSBpbmNsdWRpbmcgYW55IHNjcm9sbGluZy5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY3VycmVudFRpbWVcbiAgICAgKiAgICAgVGhlIGN1cnJlbnQgcG9pbnRlciBjb250YWN0IHRpbWUsIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIEdlc3R1cmVQb2ludExpc3RcbiAgICAgKiBAY2xhc3NkZXNjIFByb3ZpZGVzIGFuIGFic3RyYWN0aW9uIGZvciBhIHNldCBvZiBhY3RpdmUge0BsaW5rIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludHxHZXN0dXJlUG9pbnR9IG9iamVjdHMgZm9yIGEgZ2l2ZW4gcG9pbnRlciBkZXZpY2UgdHlwZS5cbiAgICAgKiAgICAgICAgICAgIEFjdGl2ZSBwb2ludGVycyBhcmUgYW55IHBvaW50ZXIgYmVpbmcgdHJhY2tlZCBmb3IgdGhpcyBlbGVtZW50IHdoaWNoIGFyZSBpbiB0aGUgaGl0LXRlc3QgYXJlYVxuICAgICAqICAgICAgICAgICAgb2YgdGhlIGVsZW1lbnQgKGZvciBob3Zlci1jYXBhYmxlIGRldmljZXMpIGFuZC9vciBoYXZlIGNvbnRhY3Qgb3IgYSBidXR0b24gcHJlc3MgaW5pdGlhdGVkIGluIHRoZSBlbGVtZW50LlxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gVGhlIHBvaW50ZXIgZGV2aWNlIHR5cGU6IFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICovXG4gICAgJC5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdCA9IGZ1bmN0aW9uICggdHlwZSApIHtcbiAgICAgICAgdGhpcy5fZ1BvaW50cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBvaW50ZXIgZGV2aWNlIHR5cGU6IFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdCNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZCBmb3IgdGhlIGRldmljZS5cbiAgICAgICAgICogQ29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBidXR0b25zXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnRMaXN0I1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idXR0b25zID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgbnVtYmVyIG9mIGNvbnRhY3QgcG9pbnRzICh0b3VjaCBwb2ludHMsIG1vdXNlIGRvd24sIGV0Yy4pIGZvciB0aGUgZGV2aWNlLlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGNvbnRhY3RzXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnRMaXN0I1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb250YWN0cyA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IG51bWJlciBvZiBjbGlja3MgZm9yIHRoZSBkZXZpY2UuIFVzZWQgZm9yIG11bHRpcGxlIGNsaWNrIGdlc3R1cmUgdHJhY2tpbmcuXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY2xpY2tzXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnRMaXN0I1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGlja3MgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBudW1iZXIgb2YgY2FwdHVyZWQgcG9pbnRlcnMgZm9yIHRoZSBkZXZpY2UuXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY2FwdHVyZUNvdW50XG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnRMaXN0I1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYXB0dXJlQ291bnQgPSAwO1xuICAgIH07XG5cbiAgICAvKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludExpc3QucHJvdG90eXBlICovXG4gICAgJC5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdC5wcm90b3R5cGUgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gTnVtYmVyIG9mIGdlc3R1cmUgcG9pbnRzIGluIHRoZSBsaXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ1BvaW50cy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybnMge0FycmF5LjxPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnQ+fSBUaGUgbGlzdCBvZiBnZXN0dXJlIHBvaW50cyBpbiB0aGUgbGlzdCBhcyBhbiBhcnJheSAocmVhZC1vbmx5KS5cbiAgICAgICAgICovXG4gICAgICAgIGFzQXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nUG9pbnRzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50fSBnZXN0dXJlUG9pbnQgLSBBIGdlc3R1cmUgcG9pbnQgdG8gYWRkIHRvIHRoZSBsaXN0LlxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBOdW1iZXIgb2YgZ2VzdHVyZSBwb2ludHMgaW4gdGhlIGxpc3QuXG4gICAgICAgICAqL1xuICAgICAgICBhZGQ6IGZ1bmN0aW9uICggZ3AgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ1BvaW50cy5wdXNoKCBncCApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIFRoZSBpZCBvZiB0aGUgZ2VzdHVyZSBwb2ludCB0byByZW1vdmUgZnJvbSB0aGUgbGlzdC5cbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gTnVtYmVyIG9mIGdlc3R1cmUgcG9pbnRzIGluIHRoZSBsaXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQnlJZDogZnVuY3Rpb24gKCBpZCApIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMuX2dQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuX2dQb2ludHNbIGkgXS5pZCA9PT0gaWQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dQb2ludHMuc3BsaWNlKCBpLCAxICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGdlc3R1cmUgcG9pbnQgdG8gcmV0cmlldmUgZnJvbSB0aGUgbGlzdC5cbiAgICAgICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludHxudWxsfSBUaGUgZ2VzdHVyZSBwb2ludCBhdCB0aGUgZ2l2ZW4gaW5kZXgsIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QnlJbmRleDogZnVuY3Rpb24gKCBpbmRleCApIHtcbiAgICAgICAgICAgIGlmICggaW5kZXggPCB0aGlzLl9nUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nUG9pbnRzWyBpbmRleCBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgaWQgb2YgdGhlIGdlc3R1cmUgcG9pbnQgdG8gcmV0cmlldmUgZnJvbSB0aGUgbGlzdC5cbiAgICAgICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludHxudWxsfSBUaGUgZ2VzdHVyZSBwb2ludCB3aXRoIHRoZSBnaXZlbiBpZCwgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRCeUlkOiBmdW5jdGlvbiAoIGlkICkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgbGVuID0gdGhpcy5fZ1BvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5fZ1BvaW50c1sgaSBdLmlkID09PSBpZCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dQb2ludHNbIGkgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50fG51bGx9IFRoZSBwcmltYXJ5IGdlc3R1cmUgcG9pbnQgaW4gdGhlIGxpc3QsIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UHJpbWFyeTogZnVuY3Rpb24gKCBpZCApIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMuX2dQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuX2dQb2ludHNbIGkgXS5pc1ByaW1hcnkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nUG9pbnRzWyBpIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFV0aWxpdHkgZnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCB0cmFja2VkIHBvaW50ZXJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJUcmFja2VkUG9pbnRlcnMoIHRyYWNrZXIgKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRyYWNrZXIuaGFzaCBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHBvaW50ZXJMaXN0Q291bnQgPSBkZWxlZ2F0ZS5hY3RpdmVQb2ludGVyc0xpc3RzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IHBvaW50ZXJMaXN0Q291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggZGVsZWdhdGUuYWN0aXZlUG9pbnRlcnNMaXN0c1sgaSBdLmNhcHR1cmVDb3VudCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgJC5yZW1vdmVFdmVudChcbiAgICAgICAgICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIuY2FwdHVyZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5tb3VzZW1vdmVjYXB0dXJlZCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJC5yZW1vdmVFdmVudChcbiAgICAgICAgICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIuY2FwdHVyZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZXVwJyxcbiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUubW91c2V1cGNhcHR1cmVkLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkLnJlbW92ZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5jYXB0dXJlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIudW5wcmVmaXhlZFBvaW50ZXJFdmVudHMgPyAncG9pbnRlcm1vdmUnIDogJ01TUG9pbnRlck1vdmUnLFxuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5wb2ludGVybW92ZWNhcHR1cmVkLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkLnJlbW92ZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5jYXB0dXJlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIudW5wcmVmaXhlZFBvaW50ZXJFdmVudHMgPyAncG9pbnRlcnVwJyA6ICdNU1BvaW50ZXJVcCcsXG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLnBvaW50ZXJ1cGNhcHR1cmVkLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkLnJlbW92ZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5jYXB0dXJlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdWNobW92ZScsXG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLnRvdWNobW92ZWNhcHR1cmVkLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkLnJlbW92ZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5jYXB0dXJlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdWNoZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUudG91Y2hlbmRjYXB0dXJlZCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5hY3RpdmVQb2ludGVyc0xpc3RzWyBpIF0uY2FwdHVyZUNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgcG9pbnRlckxpc3RDb3VudDsgaSsrICkge1xuICAgICAgICAgICAgZGVsZWdhdGUuYWN0aXZlUG9pbnRlcnNMaXN0cy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0cmFja2luZyBwb2ludGVyIGV2ZW50cyBvbiB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRUcmFja2luZyggdHJhY2tlciApIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gVEhJU1sgdHJhY2tlci5oYXNoIF0sXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgaWYgKCAhZGVsZWdhdGUudHJhY2tpbmcgKSB7XG4gICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8ICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBldmVudCA9ICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50c1sgaSBdO1xuICAgICAgICAgICAgICAgICQuYWRkRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlWyBldmVudCBdLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVHJhY2tlZFBvaW50ZXJzKCB0cmFja2VyICk7XG5cbiAgICAgICAgICAgIGRlbGVnYXRlLnRyYWNraW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRyYWNraW5nIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdG9wVHJhY2tpbmcoIHRyYWNrZXIgKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRyYWNrZXIuaGFzaCBdLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGlmICggZGVsZWdhdGUudHJhY2tpbmcgKSB7XG4gICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8ICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBldmVudCA9ICQuTW91c2VUcmFja2VyLnN1YnNjcmliZUV2ZW50c1sgaSBdO1xuICAgICAgICAgICAgICAgICQucmVtb3ZlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlWyBldmVudCBdLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVHJhY2tlZFBvaW50ZXJzKCB0cmFja2VyICk7XG5cbiAgICAgICAgICAgIGRlbGVnYXRlLnRyYWNraW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENhcHR1cmVFdmVudFBhcmFtcyggdHJhY2tlciwgcG9pbnRlclR5cGUgKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRyYWNrZXIuaGFzaCBdO1xuXG4gICAgICAgIGlmICggcG9pbnRlclR5cGUgPT09ICdwb2ludGVyZXZlbnQnICkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cE5hbWU6ICQuTW91c2VUcmFja2VyLnVucHJlZml4ZWRQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJ1cCcgOiAnTVNQb2ludGVyVXAnLFxuICAgICAgICAgICAgICAgIHVwSGFuZGxlcjogZGVsZWdhdGUucG9pbnRlcnVwY2FwdHVyZWQsXG4gICAgICAgICAgICAgICAgbW92ZU5hbWU6ICQuTW91c2VUcmFja2VyLnVucHJlZml4ZWRQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJtb3ZlJyA6ICdNU1BvaW50ZXJNb3ZlJyxcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcjogZGVsZWdhdGUucG9pbnRlcm1vdmVjYXB0dXJlZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICggcG9pbnRlclR5cGUgPT09ICdtb3VzZScgKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVwTmFtZTogJ21vdXNldXAnLFxuICAgICAgICAgICAgICAgIHVwSGFuZGxlcjogZGVsZWdhdGUubW91c2V1cGNhcHR1cmVkLFxuICAgICAgICAgICAgICAgIG1vdmVOYW1lOiAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcjogZGVsZWdhdGUubW91c2Vtb3ZlY2FwdHVyZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoIHBvaW50ZXJUeXBlID09PSAndG91Y2gnICkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cE5hbWU6ICd0b3VjaGVuZCcsXG4gICAgICAgICAgICAgICAgdXBIYW5kbGVyOiBkZWxlZ2F0ZS50b3VjaGVuZGNhcHR1cmVkLFxuICAgICAgICAgICAgICAgIG1vdmVOYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcjogZGVsZWdhdGUudG91Y2htb3ZlY2FwdHVyZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiTW91c2VUcmFja2VyLmdldENhcHR1cmVFdmVudFBhcmFtczogVW5rbm93biBwb2ludGVyIHR5cGUuXCIgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJlZ2luIGNhcHR1cmluZyBwb2ludGVyIGV2ZW50cyB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwdHVyZVBvaW50ZXIoIHRyYWNrZXIsIHBvaW50ZXJUeXBlLCBwb2ludGVyQ291bnQgKSB7XG4gICAgICAgIHZhciBwb2ludHNMaXN0ID0gdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyc0xpc3RCeVR5cGUoIHBvaW50ZXJUeXBlICksXG4gICAgICAgICAgICBldmVudFBhcmFtcztcblxuICAgICAgICBwb2ludHNMaXN0LmNhcHR1cmVDb3VudCArPSAocG9pbnRlckNvdW50IHx8IDEpO1xuXG4gICAgICAgIGlmICggcG9pbnRzTGlzdC5jYXB0dXJlQ291bnQgPT09IDEgKSB7XG4gICAgICAgICAgICBpZiAoICQuQnJvd3Nlci52ZW5kb3IgPT09ICQuQlJPV1NFUlMuSUUgJiYgJC5Ccm93c2VyLnZlcnNpb24gPCA5ICkge1xuICAgICAgICAgICAgICAgIHRyYWNrZXIuZWxlbWVudC5zZXRDYXB0dXJlKCB0cnVlICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50UGFyYW1zID0gZ2V0Q2FwdHVyZUV2ZW50UGFyYW1zKCB0cmFja2VyLCAkLk1vdXNlVHJhY2tlci5oYXZlUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyZXZlbnQnIDogcG9pbnRlclR5cGUgKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBlbXVsYXRlIG1vdXNlIGNhcHR1cmUgYnkgaGFuZ2luZyBsaXN0ZW5lcnMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICAgICAgICAgICAgICAvLyAgICAoTm90ZSB3ZSBsaXN0ZW4gb24gdGhlIGNhcHR1cmUgcGhhc2Ugc28gdGhlIGNhcHR1cmVkIGhhbmRsZXJzIHdpbGwgZ2V0IGNhbGxlZCBmaXJzdClcbiAgICAgICAgICAgICAgICBpZiAoaXNJbklmcmFtZSAmJiBjYW5BY2Nlc3NFdmVudHMod2luZG93LnRvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5hZGRFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQuYWRkRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmNhcHR1cmVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGFyYW1zLnVwSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJC5hZGRFdmVudChcbiAgICAgICAgICAgICAgICAgICAgJC5Nb3VzZVRyYWNrZXIuY2FwdHVyZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGFyYW1zLm1vdmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy5tb3ZlSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFN0b3AgY2FwdHVyaW5nIHBvaW50ZXIgZXZlbnRzIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWxlYXNlUG9pbnRlciggdHJhY2tlciwgcG9pbnRlclR5cGUsIHBvaW50ZXJDb3VudCApIHtcbiAgICAgICAgdmFyIHBvaW50c0xpc3QgPSB0cmFja2VyLmdldEFjdGl2ZVBvaW50ZXJzTGlzdEJ5VHlwZSggcG9pbnRlclR5cGUgKSxcbiAgICAgICAgICAgIGV2ZW50UGFyYW1zO1xuXG4gICAgICAgIHBvaW50c0xpc3QuY2FwdHVyZUNvdW50IC09IChwb2ludGVyQ291bnQgfHwgMSk7XG5cbiAgICAgICAgaWYgKCBwb2ludHNMaXN0LmNhcHR1cmVDb3VudCA9PT0gMCApIHtcbiAgICAgICAgICAgIGlmICggJC5Ccm93c2VyLnZlbmRvciA9PT0gJC5CUk9XU0VSUy5JRSAmJiAkLkJyb3dzZXIudmVyc2lvbiA8IDkgKSB7XG4gICAgICAgICAgICAgICAgdHJhY2tlci5lbGVtZW50LnJlbGVhc2VDYXB0dXJlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50UGFyYW1zID0gZ2V0Q2FwdHVyZUV2ZW50UGFyYW1zKCB0cmFja2VyLCAkLk1vdXNlVHJhY2tlci5oYXZlUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyZXZlbnQnIDogcG9pbnRlclR5cGUgKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBlbXVsYXRlIG1vdXNlIGNhcHR1cmUgYnkgaGFuZ2luZyBsaXN0ZW5lcnMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICAgICAgICAgICAgICAvLyAgICAoTm90ZSB3ZSBsaXN0ZW4gb24gdGhlIGNhcHR1cmUgcGhhc2Ugc28gdGhlIGNhcHR1cmVkIGhhbmRsZXJzIHdpbGwgZ2V0IGNhbGxlZCBmaXJzdClcbiAgICAgICAgICAgICAgICBpZiAoaXNJbklmcmFtZSAmJiBjYW5BY2Nlc3NFdmVudHMod2luZG93LnRvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5yZW1vdmVFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQucmVtb3ZlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmNhcHR1cmVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy5tb3ZlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRQYXJhbXMubW92ZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICQucmVtb3ZlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmNhcHR1cmVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBldmVudFBhcmFtcy51cE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGFyYW1zLnVwSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBXM0MgUG9pbnRlciBFdmVudHMgbW9kZWwgY29tcGF0aWJsZSBwb2ludGVyIHR5cGUgc3RyaW5nIGZyb20gYSBET00gcG9pbnRlciBldmVudC5cbiAgICAgKiBJRTEwIHVzZWQgYSBsb25nIGludGVnZXIgdmFsdWUsIGJ1dCB0aGUgVzNDIHNwZWNpZmljYXRpb24gKGFuZCBJRTExKykgdXNlIGEgc3RyaW5nIFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKSB7XG4gICAgICAgIHZhciBwb2ludGVyVHlwZVN0cjtcbiAgICAgICAgaWYgKCAkLk1vdXNlVHJhY2tlci51bnByZWZpeGVkUG9pbnRlckV2ZW50cyApIHtcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlU3RyID0gZXZlbnQucG9pbnRlclR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJRTEwXG4gICAgICAgICAgICAvLyAgTVNQT0lOVEVSX1RZUEVfVE9VQ0g6IDB4MDAwMDAwMDJcbiAgICAgICAgICAgIC8vICBNU1BPSU5URVJfVFlQRV9QRU46ICAgMHgwMDAwMDAwM1xuICAgICAgICAgICAgLy8gIE1TUE9JTlRFUl9UWVBFX01PVVNFOiAweDAwMDAwMDA0XG4gICAgICAgICAgICBzd2l0Y2goIGV2ZW50LnBvaW50ZXJUeXBlIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwMDAwMDI6XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlU3RyID0gJ3RvdWNoJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMDAwMDAzOlxuICAgICAgICAgICAgICAgICAgICBwb2ludGVyVHlwZVN0ciA9ICdwZW4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwMDAwMDQ6XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlU3RyID0gJ21vdXNlJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGVTdHIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9pbnRlclR5cGVTdHI7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1vdXNlQWJzb2x1dGUoIGV2ZW50ICkge1xuICAgICAgICByZXR1cm4gJC5nZXRNb3VzZVBvc2l0aW9uKCBldmVudCApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TW91c2VSZWxhdGl2ZSggZXZlbnQsIGVsZW1lbnQgKSB7XG4gICAgICAgIHJldHVybiBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSwgZWxlbWVudCApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UG9pbnRSZWxhdGl2ZVRvQWJzb2x1dGUoIHBvaW50LCBlbGVtZW50ICkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gJC5nZXRFbGVtZW50T2Zmc2V0KCBlbGVtZW50ICk7XG4gICAgICAgIHJldHVybiBwb2ludC5taW51cyggb2Zmc2V0ICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDZW50ZXJQb2ludCggcG9pbnQxLCBwb2ludDIgKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCggKCBwb2ludDEueCArIHBvaW50Mi54ICkgLyAyLCAoIHBvaW50MS55ICsgcG9pbnQyLnkgKSAvIDIgKTtcbiAgICB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRGV2aWNlLXNwZWNpZmljIERPTSBldmVudCBoYW5kbGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkNsaWNrKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgaWYgKCB0cmFja2VyLmNsaWNrSGFuZGxlciApIHtcbiAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25EYmxDbGljayggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIGlmICggdHJhY2tlci5kYmxDbGlja0hhbmRsZXIgKSB7XG4gICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uS2V5RG93biggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIC8vJC5jb25zb2xlLmxvZyggXCJrZXlkb3duICVzICVzICVzICVzICVzXCIsIGV2ZW50LmtleUNvZGUsIGV2ZW50LmNoYXJDb2RlLCBldmVudC5jdHJsS2V5LCBldmVudC5zaGlmdEtleSwgZXZlbnQuYWx0S2V5ICk7XG4gICAgICAgIHZhciBwcm9wYWdhdGU7XG4gICAgICAgIGlmICggdHJhY2tlci5rZXlEb3duSGFuZGxlciApIHtcbiAgICAgICAgICAgIGV2ZW50ID0gJC5nZXRFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIua2V5RG93bkhhbmRsZXIoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogICAgICAgICAgICAgIGV2ZW50LmtleUNvZGUgPyBldmVudC5rZXlDb2RlIDogZXZlbnQuY2hhckNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGN0cmw6ICAgICAgICAgICAgICAgICBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgICAgICAgICBzaGlmdDogICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgIGFsdDogICAgICAgICAgICAgICAgICBldmVudC5hbHRLZXksXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6ICAgICAgICAgICAgICAgICBldmVudC5tZXRhS2V5LFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCAhcHJvcGFnYXRlICkge1xuICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlVcCggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIC8vJC5jb25zb2xlLmxvZyggXCJrZXl1cCAlcyAlcyAlcyAlcyAlc1wiLCBldmVudC5rZXlDb2RlLCBldmVudC5jaGFyQ29kZSwgZXZlbnQuY3RybEtleSwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmFsdEtleSApO1xuICAgICAgICB2YXIgcHJvcGFnYXRlO1xuICAgICAgICBpZiAoIHRyYWNrZXIua2V5VXBIYW5kbGVyICkge1xuICAgICAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5rZXlVcEhhbmRsZXIoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogICAgICAgICAgICAgIGV2ZW50LmtleUNvZGUgPyBldmVudC5rZXlDb2RlIDogZXZlbnQuY2hhckNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGN0cmw6ICAgICAgICAgICAgICAgICBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgICAgICAgICBzaGlmdDogICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgIGFsdDogICAgICAgICAgICAgICAgICBldmVudC5hbHRLZXksXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6ICAgICAgICAgICAgICAgICBldmVudC5tZXRhS2V5LFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCAhcHJvcGFnYXRlICkge1xuICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlQcmVzcyggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIC8vJC5jb25zb2xlLmxvZyggXCJrZXlwcmVzcyAlcyAlcyAlcyAlcyAlc1wiLCBldmVudC5rZXlDb2RlLCBldmVudC5jaGFyQ29kZSwgZXZlbnQuY3RybEtleSwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmFsdEtleSApO1xuICAgICAgICB2YXIgcHJvcGFnYXRlO1xuICAgICAgICBpZiAoIHRyYWNrZXIua2V5SGFuZGxlciApIHtcbiAgICAgICAgICAgIGV2ZW50ID0gJC5nZXRFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIua2V5SGFuZGxlcihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAgICAgICAgICAgICAgZXZlbnQua2V5Q29kZSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC5jaGFyQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgY3RybDogICAgICAgICAgICAgICAgIGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0OiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSxcbiAgICAgICAgICAgICAgICAgICAgYWx0OiAgICAgICAgICAgICAgICAgIGV2ZW50LmFsdEtleSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogICAgICAgICAgICAgICAgIGV2ZW50Lm1ldGFLZXksXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoICFwcm9wYWdhdGUgKSB7XG4gICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkZvY3VzKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyggXCJmb2N1cyAlc1wiLCBldmVudCApO1xuICAgICAgICB2YXIgcHJvcGFnYXRlO1xuICAgICAgICBpZiAoIHRyYWNrZXIuZm9jdXNIYW5kbGVyICkge1xuICAgICAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5mb2N1c0hhbmRsZXIoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhOiAgICAgICAgICAgICB0cmFja2VyLnVzZXJEYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uQmx1ciggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coIFwiYmx1ciAlc1wiLCBldmVudCApO1xuICAgICAgICB2YXIgcHJvcGFnYXRlO1xuICAgICAgICBpZiAoIHRyYWNrZXIuYmx1ckhhbmRsZXIgKSB7XG4gICAgICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICBwcm9wYWdhdGUgPSB0cmFja2VyLmJsdXJIYW5kbGVyKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIHByb3BhZ2F0ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgJ3doZWVsJyBldmVudHNcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25XaGVlbCggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIGhhbmRsZVdoZWVsRXZlbnQoIHRyYWNrZXIsIGV2ZW50LCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgJ21vdXNld2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCBhbmQgJ01vek1vdXNlUGl4ZWxTY3JvbGwnIGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbk1vdXNlV2hlZWwoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG5cbiAgICAgICAgLy8gU2ltdWxhdGUgYSAnd2hlZWwnIGV2ZW50XG4gICAgICAgIHZhciBzaW11bGF0ZWRFdmVudCA9IHtcbiAgICAgICAgICAgIHRhcmdldDogICAgIGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50LFxuICAgICAgICAgICAgdHlwZTogICAgICAgXCJ3aGVlbFwiLFxuICAgICAgICAgICAgc2hpZnRLZXk6ICAgZXZlbnQuc2hpZnRLZXkgfHwgZmFsc2UsXG4gICAgICAgICAgICBjbGllbnRYOiAgICBldmVudC5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogICAgZXZlbnQuY2xpZW50WSxcbiAgICAgICAgICAgIHBhZ2VYOiAgICAgIGV2ZW50LnBhZ2VYID8gZXZlbnQucGFnZVggOiBldmVudC5jbGllbnRYLFxuICAgICAgICAgICAgcGFnZVk6ICAgICAgZXZlbnQucGFnZVkgPyBldmVudC5wYWdlWSA6IGV2ZW50LmNsaWVudFksXG4gICAgICAgICAgICBkZWx0YU1vZGU6ICBldmVudC50eXBlID09IFwiTW96TW91c2VQaXhlbFNjcm9sbFwiID8gMCA6IDEsIC8vIDA9cGl4ZWwsIDE9bGluZSwgMj1wYWdlXG4gICAgICAgICAgICBkZWx0YVg6ICAgICAwLFxuICAgICAgICAgICAgZGVsdGFaOiAgICAgMFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBkZWx0YVlcbiAgICAgICAgaWYgKCAkLk1vdXNlVHJhY2tlci53aGVlbEV2ZW50TmFtZSA9PSBcIm1vdXNld2hlZWxcIiApIHtcbiAgICAgICAgICAgIHNpbXVsYXRlZEV2ZW50LmRlbHRhWSA9IC0gMSAvICQuREVGQVVMVF9TRVRUSU5HUy5waXhlbHNQZXJXaGVlbExpbmUgKiBldmVudC53aGVlbERlbHRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2ltdWxhdGVkRXZlbnQuZGVsdGFZID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFuZGxlV2hlZWxFdmVudCggdHJhY2tlciwgc2ltdWxhdGVkRXZlbnQsIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzICd3aGVlbCcgZXZlbnRzLlxuICAgICAqIFRoZSBldmVudCBtYXkgYmUgc2ltdWxhdGVkIGJ5IHRoZSBsZWdhY3kgbW91c2Ugd2hlZWwgZXZlbnQgaGFuZGxlciAob25Nb3VzZVdoZWVsKCkpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVXaGVlbEV2ZW50KCB0cmFja2VyLCBldmVudCwgb3JpZ2luYWxFdmVudCApIHtcbiAgICAgICAgdmFyIG5EZWx0YSA9IDAsXG4gICAgICAgICAgICBwcm9wYWdhdGU7XG5cbiAgICAgICAgLy8gVGhlIG5EZWx0YSB2YXJpYWJsZSBpcyBnYXRlZCB0byBwcm92aWRlIHNtb290aCB6LWluZGV4IHNjcm9sbGluZ1xuICAgICAgICAvLyAgIHNpbmNlIHRoZSBtb3VzZSB3aGVlbCBhbGxvd3MgZm9yIHN1YnN0YW50aWFsIGRlbHRhcyBtZWFudCBmb3IgcmFwaWRcbiAgICAgICAgLy8gICB5LWluZGV4IHNjcm9sbGluZy5cbiAgICAgICAgLy8gZXZlbnQuZGVsdGFNb2RlOiAwPXBpeGVsLCAxPWxpbmUsIDI9cGFnZVxuICAgICAgICAvLyBUT0RPOiBEZWx0YXMgaW4gcGl4ZWwgbW9kZSBzaG91bGQgYmUgYWNjdW11bGF0ZWQgdGhlbiBhIHNjcm9sbCB2YWx1ZSBjb21wdXRlZCBhZnRlciAkLkRFRkFVTFRfU0VUVElOR1MucGl4ZWxzUGVyV2hlZWxMaW5lIHRocmVzaG9sZCByZWFjaGVkXG4gICAgICAgIG5EZWx0YSA9IGV2ZW50LmRlbHRhWSA8IDAgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKCB0cmFja2VyLnNjcm9sbEhhbmRsZXIgKSB7XG4gICAgICAgICAgICBwcm9wYWdhdGUgPSB0cmFja2VyLnNjcm9sbEhhbmRsZXIoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgICdtb3VzZScsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRNb3VzZVJlbGF0aXZlKCBldmVudCwgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogICAgICAgICAgICAgICBuRGVsdGEsXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0OiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSxcbiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgb3JpZ2luYWxFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIHByb3BhZ2F0ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggb3JpZ2luYWxFdmVudCApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGFyZW50Q2hpbGQoIHBhcmVudCwgY2hpbGQgKVxuICAgIHtcbiAgICAgICBpZiAoIHBhcmVudCA9PT0gY2hpbGQgKSB7XG4gICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICB9XG4gICAgICAgd2hpbGUgKCBjaGlsZCAmJiBjaGlsZCAhPT0gcGFyZW50ICkge1xuICAgICAgICAgICBjaGlsZCA9IGNoaWxkLnBhcmVudE5vZGU7XG4gICAgICAgfVxuICAgICAgIHJldHVybiBjaGlsZCA9PT0gcGFyZW50O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogT25seSB1c2VkIG9uIElFIDhcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZUVudGVyKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuXG4gICAgICAgIGhhbmRsZU1vdXNlRW50ZXIoIHRyYWNrZXIsIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uTW91c2VPdmVyKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuXG4gICAgICAgIGlmICggZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQucmVsYXRlZFRhcmdldCB8fCBpc1BhcmVudENoaWxkKCBldmVudC5jdXJyZW50VGFyZ2V0LCBldmVudC5yZWxhdGVkVGFyZ2V0ICkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVNb3VzZUVudGVyKCB0cmFja2VyLCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiAkLk1vdXNlVHJhY2tlci5tb3VzZVBvaW50ZXJJZCxcbiAgICAgICAgICAgIHR5cGU6ICdtb3VzZScsXG4gICAgICAgICAgICBpc1ByaW1hcnk6IHRydWUsXG4gICAgICAgICAgICBjdXJyZW50UG9zOiBnZXRNb3VzZUFic29sdXRlKCBldmVudCApLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICQubm93KClcbiAgICAgICAgfTtcblxuICAgICAgICB1cGRhdGVQb2ludGVyc0VudGVyKCB0cmFja2VyLCBldmVudCwgWyBnUG9pbnQgXSApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogT25seSB1c2VkIG9uIElFIDhcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuXG4gICAgICAgIGhhbmRsZU1vdXNlRXhpdCggdHJhY2tlciwgZXZlbnQgKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZU91dCggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIGV2ZW50ID0gJC5nZXRFdmVudCggZXZlbnQgKTtcblxuICAgICAgICBpZiAoIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgaXNQYXJlbnRDaGlsZCggZXZlbnQuY3VycmVudFRhcmdldCwgZXZlbnQucmVsYXRlZFRhcmdldCApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFuZGxlTW91c2VFeGl0KCB0cmFja2VyLCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZUV4aXQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgZ1BvaW50ID0ge1xuICAgICAgICAgICAgaWQ6ICQuTW91c2VUcmFja2VyLm1vdXNlUG9pbnRlcklkLFxuICAgICAgICAgICAgdHlwZTogJ21vdXNlJyxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogdHJ1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRQb3M6IGdldE1vdXNlQWJzb2x1dGUoIGV2ZW50ICksXG4gICAgICAgICAgICBjdXJyZW50VGltZTogJC5ub3coKVxuICAgICAgICB9O1xuXG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzRXhpdCggdHJhY2tlciwgZXZlbnQsIFsgZ1BvaW50IF0gKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBXM0MgRE9NIGxldmVsIDMgc3RhbmRhcmQgYnV0dG9uIHZhbHVlIGdpdmVuIGFuIGV2ZW50LmJ1dHRvbiBwcm9wZXJ0eTpcbiAgICAgKiAgIC0xID09IG5vbmUsIDAgPT0gcHJpbWFyeS9sZWZ0LCAxID09IG1pZGRsZSwgMiA9PSBzZWNvbmRhcnkvcmlnaHQsIDMgPT0gWDEvYmFjaywgNCA9PSBYMi9mb3J3YXJkLCA1ID09IGVyYXNlciAocGVuKVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U3RhbmRhcmRpemVkQnV0dG9uKCBidXR0b24gKSB7XG4gICAgICAgIGlmICggJC5Ccm93c2VyLnZlbmRvciA9PT0gJC5CUk9XU0VSUy5JRSAmJiAkLkJyb3dzZXIudmVyc2lvbiA8IDkgKSB7XG4gICAgICAgICAgICAvLyBPbiBJRSA4LCAwID09IG5vbmUsIDEgPT0gbGVmdCwgMiA9PSByaWdodCwgMyA9PSBsZWZ0IGFuZCByaWdodCwgNCA9PSBtaWRkbGUsIDUgPT0gbGVmdCBhbmQgbWlkZGxlLCA2ID09IHJpZ2h0IGFuZCBtaWRkbGUsIDcgPT0gYWxsIHRocmVlXG4gICAgICAgICAgICAvLyBUT0RPOiBTdXBwb3J0IGNob3JkZWQgKG11bHRpcGxlKSBidXR0b24gcHJlc3NlcyBvbiBJRSA4P1xuICAgICAgICAgICAgaWYgKCBidXR0b24gPT09IDEgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b24gPT09IDIgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b24gPT09IDQgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZURvd24oIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgZ1BvaW50O1xuXG4gICAgICAgIGV2ZW50ID0gJC5nZXRFdmVudCggZXZlbnQgKTtcblxuICAgICAgICBnUG9pbnQgPSB7XG4gICAgICAgICAgICBpZDogJC5Nb3VzZVRyYWNrZXIubW91c2VQb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiAnbW91c2UnLFxuICAgICAgICAgICAgaXNQcmltYXJ5OiB0cnVlLFxuICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAkLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCB1cGRhdGVQb2ludGVyc0Rvd24oIHRyYWNrZXIsIGV2ZW50LCBbIGdQb2ludCBdLCBnZXRTdGFuZGFyZGl6ZWRCdXR0b24oIGV2ZW50LmJ1dHRvbiApICkgKSB7XG4gICAgICAgICAgICAkLnN0b3BFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIGNhcHR1cmVQb2ludGVyKCB0cmFja2VyLCAnbW91c2UnICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRyYWNrZXIuY2xpY2tIYW5kbGVyIHx8IHRyYWNrZXIuZGJsQ2xpY2tIYW5kbGVyIHx8IHRyYWNrZXIucHJlc3NIYW5kbGVyIHx8IHRyYWNrZXIuZHJhZ0hhbmRsZXIgfHwgdHJhY2tlci5kcmFnRW5kSGFuZGxlciApIHtcbiAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZVVwKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgaGFuZGxlTW91c2VVcCggdHJhY2tlciwgZXZlbnQgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QgKG9uIHRoZSBjYXB0dXJlIHBoYXNlKSB0byBlbXVsYXRlIG1vdXNlIGNhcHR1cmUuXG4gICAgICogb25Nb3VzZVVwIGlzIHN0aWxsIGF0dGFjaGVkIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQsIHNvIHN0b3AgcHJvcGFnYXRpb24gdG8gYXZvaWQgcHJvY2Vzc2luZyB0d2ljZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Nb3VzZVVwQ2FwdHVyZWQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVNb3VzZVVwKCB0cmFja2VyLCBldmVudCApO1xuICAgICAgICAkLnN0b3BFdmVudCggZXZlbnQgKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VVcCggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIHZhciBnUG9pbnQ7XG5cbiAgICAgICAgZXZlbnQgPSAkLmdldEV2ZW50KCBldmVudCApO1xuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiAkLk1vdXNlVHJhY2tlci5tb3VzZVBvaW50ZXJJZCxcbiAgICAgICAgICAgIHR5cGU6ICdtb3VzZScsXG4gICAgICAgICAgICBpc1ByaW1hcnk6IHRydWUsXG4gICAgICAgICAgICBjdXJyZW50UG9zOiBnZXRNb3VzZUFic29sdXRlKCBldmVudCApLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICQubm93KClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIHVwZGF0ZVBvaW50ZXJzVXAoIHRyYWNrZXIsIGV2ZW50LCBbIGdQb2ludCBdLCBnZXRTdGFuZGFyZGl6ZWRCdXR0b24oIGV2ZW50LmJ1dHRvbiApICkgKSB7XG4gICAgICAgICAgICByZWxlYXNlUG9pbnRlciggdHJhY2tlciwgJ21vdXNlJyApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgaGFuZGxlTW91c2VNb3ZlKCB0cmFja2VyLCBldmVudCApO1xuICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QgKG9uIHRoZSBjYXB0dXJlIHBoYXNlKSB0byBlbXVsYXRlIG1vdXNlIGNhcHR1cmUuXG4gICAgICogb25Nb3VzZU1vdmUgaXMgc3RpbGwgYXR0YWNoZWQgdG8gdGhlIHRyYWNrZWQgZWxlbWVudCwgc28gc3RvcCBwcm9wYWdhdGlvbiB0byBhdm9pZCBwcm9jZXNzaW5nIHR3aWNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZUNhcHR1cmVkKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgaGFuZGxlTW91c2VNb3ZlKCB0cmFja2VyLCBldmVudCApO1xuICAgICAgICAkLnN0b3BFdmVudCggZXZlbnQgKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIGdQb2ludDtcblxuICAgICAgICBldmVudCA9ICQuZ2V0RXZlbnQoIGV2ZW50ICk7XG5cbiAgICAgICAgZ1BvaW50ID0ge1xuICAgICAgICAgICAgaWQ6ICQuTW91c2VUcmFja2VyLm1vdXNlUG9pbnRlcklkLFxuICAgICAgICAgICAgdHlwZTogJ21vdXNlJyxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogdHJ1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRQb3M6IGdldE1vdXNlQWJzb2x1dGUoIGV2ZW50ICksXG4gICAgICAgICAgICBjdXJyZW50VGltZTogJC5ub3coKVxuICAgICAgICB9O1xuXG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzTW92ZSggdHJhY2tlciwgZXZlbnQsIFsgZ1BvaW50IF0gKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWJvcnRUb3VjaENvbnRhY3RzKCB0cmFja2VyLCBldmVudCwgcG9pbnRzTGlzdCApIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBnUG9pbnRDb3VudCA9IHBvaW50c0xpc3QuZ2V0TGVuZ3RoKCksXG4gICAgICAgICAgICBhYm9ydEdQb2ludHMgPSBbXTtcblxuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGdQb2ludENvdW50OyBpKysgKSB7XG4gICAgICAgICAgICBhYm9ydEdQb2ludHMucHVzaCggcG9pbnRzTGlzdC5nZXRCeUluZGV4KCBpICkgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggYWJvcnRHUG9pbnRzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAvLyBzaW11bGF0ZSB0b3VjaGVuZFxuICAgICAgICAgICAgdXBkYXRlUG9pbnRlcnNVcCggdHJhY2tlciwgZXZlbnQsIGFib3J0R1BvaW50cywgMCApOyAvLyAwIG1lYW5zIHByaW1hcnkgYnV0dG9uIHByZXNzL3JlbGVhc2Ugb3IgdG91Y2ggY29udGFjdFxuICAgICAgICAgICAgLy8gcmVsZWFzZSBwb2ludGVyIGNhcHR1cmVcbiAgICAgICAgICAgIHBvaW50c0xpc3QuY2FwdHVyZUNvdW50ID0gMTtcbiAgICAgICAgICAgIHJlbGVhc2VQb2ludGVyKCB0cmFja2VyLCAndG91Y2gnICk7XG4gICAgICAgICAgICAvLyBzaW11bGF0ZSB0b3VjaGxlYXZlXG4gICAgICAgICAgICB1cGRhdGVQb2ludGVyc0V4aXQoIHRyYWNrZXIsIGV2ZW50LCBhYm9ydEdQb2ludHMgKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgdGltZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgdG91Y2hDb3VudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGdQb2ludHMgPSBbXSxcbiAgICAgICAgICAgIHBhcmVudEdQb2ludHMsXG4gICAgICAgICAgICBwb2ludHNMaXN0ID0gdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyc0xpc3RCeVR5cGUoICd0b3VjaCcgKTtcblxuICAgICAgICB0aW1lID0gJC5ub3coKTtcblxuICAgICAgICBpZiAoIHBvaW50c0xpc3QuZ2V0TGVuZ3RoKCkgPiBldmVudC50b3VjaGVzLmxlbmd0aCAtIHRvdWNoQ291bnQgKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUud2FybignVHJhY2tlZCB0b3VjaCBjb250YWN0IGNvdW50IGRvZXNuXFwndCBtYXRjaCBldmVudC50b3VjaGVzLmxlbmd0aC4gUmVtb3ZpbmcgYWxsIHRyYWNrZWQgdG91Y2ggcG9pbnRlcnMuJyk7XG4gICAgICAgICAgICBhYm9ydFRvdWNoQ29udGFjdHMoIHRyYWNrZXIsIGV2ZW50LCBwb2ludHNMaXN0ICk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IHRvdWNoQ291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGdQb2ludHMucHVzaCgge1xuICAgICAgICAgICAgICAgIGlkOiBldmVudC5jaGFuZ2VkVG91Y2hlc1sgaSBdLmlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAvLyBpc1ByaW1hcnkgbm90IHNldCAtIGxldCB0aGUgdXBkYXRlUG9pbnRlcnMgZnVuY3Rpb25zIGRldGVybWluZSBpdFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQb3M6IGdldE1vdXNlQWJzb2x1dGUoIGV2ZW50LmNoYW5nZWRUb3VjaGVzWyBpIF0gKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZTogdGltZVxuICAgICAgICAgICAgfSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2ltdWxhdGUgdG91Y2hlbnRlciBvbiBvdXIgdHJhY2tlZCBlbGVtZW50XG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzRW50ZXIoIHRyYWNrZXIsIGV2ZW50LCBnUG9pbnRzICk7XG5cbiAgICAgICAgLy8gc2ltdWxhdGUgdG91Y2hlbnRlciBvbiBvdXIgdHJhY2tlZCBlbGVtZW50J3MgdHJhY2tlZCBhbmNlc3RvciBlbGVtZW50c1xuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IE1PVVNFVFJBQ0tFUlMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBpZiAoIE1PVVNFVFJBQ0tFUlNbIGkgXSAhPT0gdHJhY2tlciAmJiBNT1VTRVRSQUNLRVJTWyBpIF0uaXNUcmFja2luZygpICYmIGlzUGFyZW50Q2hpbGQoIE1PVVNFVFJBQ0tFUlNbIGkgXS5lbGVtZW50LCB0cmFja2VyLmVsZW1lbnQgKSApIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRHUG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICggaiA9IDA7IGogPCB0b3VjaENvdW50OyBqKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEdQb2ludHMucHVzaCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWyBqIF0uaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0b3VjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpc1ByaW1hcnkgbm90IHNldCAtIGxldCB0aGUgdXBkYXRlUG9pbnRlcnMgZnVuY3Rpb25zIGRldGVybWluZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQuY2hhbmdlZFRvdWNoZXNbIGogXSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRpbWU6IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVQb2ludGVyc0VudGVyKCBNT1VTRVRSQUNLRVJTWyBpIF0sIGV2ZW50LCBwYXJlbnRHUG9pbnRzICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHVwZGF0ZVBvaW50ZXJzRG93biggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMsIDAgKSApIHsgLy8gMCBtZWFucyBwcmltYXJ5IGJ1dHRvbiBwcmVzcy9yZWxlYXNlIG9yIHRvdWNoIGNvbnRhY3RcbiAgICAgICAgICAgICQuc3RvcEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgY2FwdHVyZVBvaW50ZXIoIHRyYWNrZXIsICd0b3VjaCcsIHRvdWNoQ291bnQgKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVUb3VjaEVuZCggdHJhY2tlciwgZXZlbnQgKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaGFuZGxlciBpcyBhdHRhY2hlZCB0byB0aGUgd2luZG93IG9iamVjdCAob24gdGhlIGNhcHR1cmUgcGhhc2UpIHRvIGVtdWxhdGUgcG9pbnRlciBjYXB0dXJlLlxuICAgICAqIG9uVG91Y2hFbmQgaXMgc3RpbGwgYXR0YWNoZWQgdG8gdGhlIHRyYWNrZWQgZWxlbWVudCwgc28gc3RvcCBwcm9wYWdhdGlvbiB0byBhdm9pZCBwcm9jZXNzaW5nIHR3aWNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblRvdWNoRW5kQ2FwdHVyZWQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVUb3VjaEVuZCggdHJhY2tlciwgZXZlbnQgKTtcbiAgICAgICAgJC5zdG9wRXZlbnQoIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIHRpbWUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIHRvdWNoQ291bnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGgsXG4gICAgICAgICAgICBnUG9pbnRzID0gW10sXG4gICAgICAgICAgICBwYXJlbnRHUG9pbnRzO1xuXG4gICAgICAgIHRpbWUgPSAkLm5vdygpO1xuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgdG91Y2hDb3VudDsgaSsrICkge1xuICAgICAgICAgICAgZ1BvaW50cy5wdXNoKCB7XG4gICAgICAgICAgICAgICAgaWQ6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWyBpIF0uaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICB0eXBlOiAndG91Y2gnLFxuICAgICAgICAgICAgICAgIC8vIGlzUHJpbWFyeSBub3Qgc2V0IC0gbGV0IHRoZSB1cGRhdGVQb2ludGVycyBmdW5jdGlvbnMgZGV0ZXJtaW5lIGl0XG4gICAgICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQuY2hhbmdlZFRvdWNoZXNbIGkgXSApLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lOiB0aW1lXG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHVwZGF0ZVBvaW50ZXJzVXAoIHRyYWNrZXIsIGV2ZW50LCBnUG9pbnRzLCAwICkgKSB7XG4gICAgICAgICAgICByZWxlYXNlUG9pbnRlciggdHJhY2tlciwgJ3RvdWNoJywgdG91Y2hDb3VudCApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2ltdWxhdGUgdG91Y2hsZWF2ZSBvbiBvdXIgdHJhY2tlZCBlbGVtZW50XG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzRXhpdCggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMgKTtcblxuICAgICAgICAvLyBzaW11bGF0ZSB0b3VjaGxlYXZlIG9uIG91ciB0cmFja2VkIGVsZW1lbnQncyB0cmFja2VkIGFuY2VzdG9yIGVsZW1lbnRzXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgTU9VU0VUUkFDS0VSUy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggTU9VU0VUUkFDS0VSU1sgaSBdICE9PSB0cmFja2VyICYmIE1PVVNFVFJBQ0tFUlNbIGkgXS5pc1RyYWNraW5nKCkgJiYgaXNQYXJlbnRDaGlsZCggTU9VU0VUUkFDS0VSU1sgaSBdLmVsZW1lbnQsIHRyYWNrZXIuZWxlbWVudCApICkge1xuICAgICAgICAgICAgICAgIHBhcmVudEdQb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKCBqID0gMDsgaiA8IHRvdWNoQ291bnQ7IGorKyApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50R1BvaW50cy5wdXNoKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbIGogXS5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzUHJpbWFyeSBub3Qgc2V0IC0gbGV0IHRoZSB1cGRhdGVQb2ludGVycyBmdW5jdGlvbnMgZGV0ZXJtaW5lIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9zOiBnZXRNb3VzZUFic29sdXRlKCBldmVudC5jaGFuZ2VkVG91Y2hlc1sgaiBdICksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGltZTogdGltZVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVBvaW50ZXJzRXhpdCggTU9VU0VUUkFDS0VSU1sgaSBdLCBldmVudCwgcGFyZW50R1BvaW50cyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVUb3VjaE1vdmUoIHRyYWNrZXIsIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QgKG9uIHRoZSBjYXB0dXJlIHBoYXNlKSB0byBlbXVsYXRlIHBvaW50ZXIgY2FwdHVyZS5cbiAgICAgKiBvblRvdWNoTW92ZSBpcyBzdGlsbCBhdHRhY2hlZCB0byB0aGUgdHJhY2tlZCBlbGVtZW50LCBzbyBzdG9wIHByb3BhZ2F0aW9uIHRvIGF2b2lkIHByb2Nlc3NpbmcgdHdpY2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlQ2FwdHVyZWQoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVUb3VjaE1vdmUoIHRyYWNrZXIsIGV2ZW50ICk7XG4gICAgICAgICQuc3RvcEV2ZW50KCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHRvdWNoQ291bnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGgsXG4gICAgICAgICAgICBnUG9pbnRzID0gW107XG5cbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCB0b3VjaENvdW50OyBpKysgKSB7XG4gICAgICAgICAgICBnUG9pbnRzLnB1c2goIHtcbiAgICAgICAgICAgICAgICBpZDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbIGkgXS5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0b3VjaCcsXG4gICAgICAgICAgICAgICAgLy8gaXNQcmltYXJ5IG5vdCBzZXQgLSBsZXQgdGhlIHVwZGF0ZVBvaW50ZXJzIGZ1bmN0aW9ucyBkZXRlcm1pbmUgaXRcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9zOiBnZXRNb3VzZUFic29sdXRlKCBldmVudC5jaGFuZ2VkVG91Y2hlc1sgaSBdICksXG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWU6ICQubm93KClcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzTW92ZSggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMgKTtcblxuICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblRvdWNoQ2FuY2VsKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICB0b3VjaENvdW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoLFxuICAgICAgICAgICAgZ1BvaW50cyA9IFtdLFxuICAgICAgICAgICAgcG9pbnRzTGlzdCA9IHRyYWNrZXIuZ2V0QWN0aXZlUG9pbnRlcnNMaXN0QnlUeXBlKCAndG91Y2gnICk7XG4gICAgICAgIFxuICAgICAgICBhYm9ydFRvdWNoQ29udGFjdHMoIHRyYWNrZXIsIGV2ZW50LCBwb2ludHNMaXN0ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uR2VzdHVyZVN0YXJ0KCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyT3ZlciggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIHZhciBnUG9pbnQ7XG5cbiAgICAgICAgaWYgKCBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGlzUGFyZW50Q2hpbGQoIGV2ZW50LmN1cnJlbnRUYXJnZXQsIGV2ZW50LnJlbGF0ZWRUYXJnZXQgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiBldmVudC5wb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogZXZlbnQuaXNQcmltYXJ5LFxuICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAkLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgdXBkYXRlUG9pbnRlcnNFbnRlciggdHJhY2tlciwgZXZlbnQsIFsgZ1BvaW50IF0gKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyT3V0KCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIGdQb2ludDtcblxuICAgICAgICBpZiAoIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgaXNQYXJlbnRDaGlsZCggZXZlbnQuY3VycmVudFRhcmdldCwgZXZlbnQucmVsYXRlZFRhcmdldCApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZ1BvaW50ID0ge1xuICAgICAgICAgICAgaWQ6IGV2ZW50LnBvaW50ZXJJZCxcbiAgICAgICAgICAgIHR5cGU6IGdldFBvaW50ZXJUeXBlKCBldmVudCApLFxuICAgICAgICAgICAgaXNQcmltYXJ5OiBldmVudC5pc1ByaW1hcnksXG4gICAgICAgICAgICBjdXJyZW50UG9zOiBnZXRNb3VzZUFic29sdXRlKCBldmVudCApLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICQubm93KClcbiAgICAgICAgfTtcblxuICAgICAgICB1cGRhdGVQb2ludGVyc0V4aXQoIHRyYWNrZXIsIGV2ZW50LCBbIGdQb2ludCBdICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgZ1BvaW50O1xuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiBldmVudC5wb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogZXZlbnQuaXNQcmltYXJ5LFxuICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAkLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCB1cGRhdGVQb2ludGVyc0Rvd24oIHRyYWNrZXIsIGV2ZW50LCBbIGdQb2ludCBdLCBldmVudC5idXR0b24gKSApIHtcbiAgICAgICAgICAgICQuc3RvcEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgY2FwdHVyZVBvaW50ZXIoIHRyYWNrZXIsIGdQb2ludC50eXBlICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRyYWNrZXIuY2xpY2tIYW5kbGVyIHx8IHRyYWNrZXIuZGJsQ2xpY2tIYW5kbGVyIHx8IHRyYWNrZXIucHJlc3NIYW5kbGVyIHx8IHRyYWNrZXIuZHJhZ0hhbmRsZXIgfHwgdHJhY2tlci5kcmFnRW5kSGFuZGxlciB8fCB0cmFja2VyLnBpbmNoSGFuZGxlciApIHtcbiAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyVXAoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICBoYW5kbGVQb2ludGVyVXAoIHRyYWNrZXIsIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QgKG9uIHRoZSBjYXB0dXJlIHBoYXNlKSB0byBlbXVsYXRlIG1vdXNlIGNhcHR1cmUuXG4gICAgICogb25Qb2ludGVyVXAgaXMgc3RpbGwgYXR0YWNoZWQgdG8gdGhlIHRyYWNrZWQgZWxlbWVudCwgc28gc3RvcCBwcm9wYWdhdGlvbiB0byBhdm9pZCBwcm9jZXNzaW5nIHR3aWNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJVcENhcHR1cmVkKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgdmFyIHBvaW50c0xpc3QgPSB0cmFja2VyLmdldEFjdGl2ZVBvaW50ZXJzTGlzdEJ5VHlwZSggZ2V0UG9pbnRlclR5cGUoIGV2ZW50ICkgKTtcbiAgICAgICAgaWYgKCBwb2ludHNMaXN0LmdldEJ5SWQoIGV2ZW50LnBvaW50ZXJJZCApICkge1xuICAgICAgICAgICAgaGFuZGxlUG9pbnRlclVwKCB0cmFja2VyLCBldmVudCApO1xuICAgICAgICB9XG4gICAgICAgICQuc3RvcEV2ZW50KCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVQb2ludGVyVXAoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgZ1BvaW50O1xuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiBldmVudC5wb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogZXZlbnQuaXNQcmltYXJ5LFxuICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAkLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCB1cGRhdGVQb2ludGVyc1VwKCB0cmFja2VyLCBldmVudCwgWyBnUG9pbnQgXSwgZXZlbnQuYnV0dG9uICkgKSB7XG4gICAgICAgICAgICByZWxlYXNlUG9pbnRlciggdHJhY2tlciwgZ1BvaW50LnR5cGUgKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJNb3ZlKCB0cmFja2VyLCBldmVudCApIHtcbiAgICAgICAgaGFuZGxlUG9pbnRlck1vdmUoIHRyYWNrZXIsIGV2ZW50ICk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QgKG9uIHRoZSBjYXB0dXJlIHBoYXNlKSB0byBlbXVsYXRlIG1vdXNlIGNhcHR1cmUuXG4gICAgICogb25Qb2ludGVyTW92ZSBpcyBzdGlsbCBhdHRhY2hlZCB0byB0aGUgdHJhY2tlZCBlbGVtZW50LCBzbyBzdG9wIHByb3BhZ2F0aW9uIHRvIGF2b2lkIHByb2Nlc3NpbmcgdHdpY2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlck1vdmVDYXB0dXJlZCggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIHZhciBwb2ludHNMaXN0ID0gdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyc0xpc3RCeVR5cGUoIGdldFBvaW50ZXJUeXBlKCBldmVudCApICk7XG4gICAgICAgIGlmICggcG9pbnRzTGlzdC5nZXRCeUlkKCBldmVudC5wb2ludGVySWQgKSApIHtcbiAgICAgICAgICAgIGhhbmRsZVBvaW50ZXJNb3ZlKCB0cmFja2VyLCBldmVudCApO1xuICAgICAgICB9XG4gICAgICAgICQuc3RvcEV2ZW50KCBldmVudCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVQb2ludGVyTW92ZSggdHJhY2tlciwgZXZlbnQgKSB7XG4gICAgICAgIC8vIFBvaW50ZXIgY2hhbmdlZCBjb29yZGluYXRlcywgYnV0dG9uIHN0YXRlLCBwcmVzc3VyZSwgdGlsdCwgb3IgY29udGFjdCBnZW9tZXRyeSAoZS5nLiB3aWR0aCBhbmQgaGVpZ2h0KVxuICAgICAgICB2YXIgZ1BvaW50O1xuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiBldmVudC5wb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogZXZlbnQuaXNQcmltYXJ5LFxuICAgICAgICAgICAgY3VycmVudFBvczogZ2V0TW91c2VBYnNvbHV0ZSggZXZlbnQgKSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAkLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgdXBkYXRlUG9pbnRlcnNNb3ZlKCB0cmFja2VyLCBldmVudCwgWyBnUG9pbnQgXSApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJDYW5jZWwoIHRyYWNrZXIsIGV2ZW50ICkge1xuICAgICAgICB2YXIgZ1BvaW50O1xuXG4gICAgICAgIGdQb2ludCA9IHtcbiAgICAgICAgICAgIGlkOiBldmVudC5wb2ludGVySWQsXG4gICAgICAgICAgICB0eXBlOiBnZXRQb2ludGVyVHlwZSggZXZlbnQgKVxuICAgICAgICB9O1xuXG4gICAgICAgIHVwZGF0ZVBvaW50ZXJzQ2FuY2VsKCB0cmFja2VyLCBldmVudCwgWyBnUG9pbnQgXSApO1xuICAgIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEZXZpY2UtYWdub3N0aWMgRE9NIGV2ZW50IGhhbmRsZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50TGlzdH0gcG9pbnRzTGlzdFxuICAgICAqICAgICBUaGUgR2VzdHVyZVBvaW50TGlzdCB0byB0cmFjayB0aGUgcG9pbnRlciBpbi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludH0gZ1BvaW50XG4gICAgICogICAgICBHZXN0dXJlIHBvaW50IHRvIHRyYWNrLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IE51bWJlciBvZiBnZXN0dXJlIHBvaW50cyBpbiBwb2ludHNMaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0VHJhY2tpbmdQb2ludGVyKCBwb2ludHNMaXN0LCBnUG9pbnQgKSB7XG5cbiAgICAgICAgLy8gSWYgaXNQcmltYXJ5IGlzIG5vdCBrbm93biBmb3IgdGhlIHBvaW50ZXIgdGhlbiBzZXQgaXQgYWNjb3JkaW5nIHRvIG91ciBydWxlczpcbiAgICAgICAgLy8gICAgdHJ1ZSBpZiB0aGUgZmlyc3QgcG9pbnRlciBpbiB0aGUgZ2VzdHVyZSwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICAgIGlmICggIWdQb2ludC5oYXNPd25Qcm9wZXJ0eSggJ2lzUHJpbWFyeScgKSApIHtcbiAgICAgICAgICAgIGlmICggcG9pbnRzTGlzdC5nZXRMZW5ndGgoKSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICBnUG9pbnQuaXNQcmltYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ1BvaW50LmlzUHJpbWFyeSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdQb2ludC5zcGVlZCA9IDA7XG4gICAgICAgIGdQb2ludC5kaXJlY3Rpb24gPSAwO1xuICAgICAgICBnUG9pbnQuY29udGFjdFBvcyA9IGdQb2ludC5jdXJyZW50UG9zO1xuICAgICAgICBnUG9pbnQuY29udGFjdFRpbWUgPSBnUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgIGdQb2ludC5sYXN0UG9zID0gZ1BvaW50LmN1cnJlbnRQb3M7XG4gICAgICAgIGdQb2ludC5sYXN0VGltZSA9IGdQb2ludC5jdXJyZW50VGltZTtcblxuICAgICAgICByZXR1cm4gcG9pbnRzTGlzdC5hZGQoIGdQb2ludCApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludExpc3R9IHBvaW50c0xpc3RcbiAgICAgKiAgICAgVGhlIEdlc3R1cmVQb2ludExpc3QgdG8gc3RvcCB0cmFja2luZyB0aGUgcG9pbnRlciBvbi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludH0gZ1BvaW50XG4gICAgICogICAgICBHZXN0dXJlIHBvaW50IHRvIHN0b3AgdHJhY2tpbmcuXG4gICAgICogQHJldHVybnMge051bWJlcn0gTnVtYmVyIG9mIGdlc3R1cmUgcG9pbnRzIGluIHBvaW50c0xpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RvcFRyYWNraW5nUG9pbnRlciggcG9pbnRzTGlzdCwgZ1BvaW50ICkge1xuICAgICAgICB2YXIgbGlzdExlbmd0aCxcbiAgICAgICAgICAgIHByaW1hcnlQb2ludDtcblxuICAgICAgICBpZiAoIHBvaW50c0xpc3QuZ2V0QnlJZCggZ1BvaW50LmlkICkgKSB7XG4gICAgICAgICAgICBsaXN0TGVuZ3RoID0gcG9pbnRzTGlzdC5yZW1vdmVCeUlkKCBnUG9pbnQuaWQgKTtcblxuICAgICAgICAgICAgLy8gSWYgaXNQcmltYXJ5IGlzIG5vdCBrbm93biBmb3IgdGhlIHBvaW50ZXIgYW5kIHdlIGp1c3QgcmVtb3ZlZCB0aGUgcHJpbWFyeSBwb2ludGVyIGZyb20gdGhlIGxpc3QgdGhlbiB3ZSBuZWVkIHRvIHNldCBhbm90aGVyIHBvaW50ZXIgYXMgcHJpbWFyeVxuICAgICAgICAgICAgaWYgKCAhZ1BvaW50Lmhhc093blByb3BlcnR5KCAnaXNQcmltYXJ5JyApICkge1xuICAgICAgICAgICAgICAgIHByaW1hcnlQb2ludCA9IHBvaW50c0xpc3QuZ2V0UHJpbWFyeSgpO1xuICAgICAgICAgICAgICAgIGlmICggIXByaW1hcnlQb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVBvaW50ID0gcG9pbnRzTGlzdC5nZXRCeUluZGV4KCAwICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWFyeVBvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVBvaW50LmlzUHJpbWFyeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0TGVuZ3RoID0gcG9pbnRzTGlzdC5nZXRMZW5ndGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0TGVuZ3RoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyXG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hdGluZyBET00gZXZlbnQuXG4gICAgICogQHBhcmFtIHtBcnJheS48T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50Pn0gZ1BvaW50c1xuICAgICAqICAgICAgR2VzdHVyZSBwb2ludHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVQb2ludGVyc0VudGVyKCB0cmFja2VyLCBldmVudCwgZ1BvaW50cyApIHtcbiAgICAgICAgdmFyIHBvaW50c0xpc3QgPSB0cmFja2VyLmdldEFjdGl2ZVBvaW50ZXJzTGlzdEJ5VHlwZSggZ1BvaW50c1sgMCBdLnR5cGUgKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBnUG9pbnRDb3VudCA9IGdQb2ludHMubGVuZ3RoLFxuICAgICAgICAgICAgY3VyR1BvaW50LFxuICAgICAgICAgICAgdXBkYXRlR1BvaW50LFxuICAgICAgICAgICAgcHJvcGFnYXRlO1xuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgZ1BvaW50Q291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGN1ckdQb2ludCA9IGdQb2ludHNbIGkgXTtcbiAgICAgICAgICAgIHVwZGF0ZUdQb2ludCA9IHBvaW50c0xpc3QuZ2V0QnlJZCggY3VyR1BvaW50LmlkICk7XG5cbiAgICAgICAgICAgIGlmICggdXBkYXRlR1BvaW50ICkge1xuICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgdHJhY2tpbmcgdGhlIHBvaW50ZXIuLi51cGRhdGUgaXRcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuaW5zaWRlRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RQb3MgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQubGFzdFRpbWUgPSB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MgPSBjdXJHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQgPSB1cGRhdGVHUG9pbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZm9yIHRyYWNraW5nIGFuZCBhZGQgdG8gdGhlIHRyYWNraW5nIGxpc3RcbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQuY2FwdHVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQuaW5zaWRlRWxlbWVudFByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQuaW5zaWRlRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhcnRUcmFja2luZ1BvaW50ZXIoIHBvaW50c0xpc3QsIGN1ckdQb2ludCApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbnRlclxuICAgICAgICAgICAgaWYgKCB0cmFja2VyLmVudGVySGFuZGxlciApIHtcbiAgICAgICAgICAgICAgICBwcm9wYWdhdGUgPSB0cmFja2VyLmVudGVySGFuZGxlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogICAgICAgICAgY3VyR1BvaW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogICAgICAgICAgICAgZ2V0UG9pbnRSZWxhdGl2ZVRvQWJzb2x1dGUoIGN1ckdQb2ludC5jdXJyZW50UG9zLCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyczogICAgICAgICAgICAgdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyQ291bnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2lkZUVsZW1lbnRQcmVzc2VkOiBjdXJHUG9pbnQuaW5zaWRlRWxlbWVudFByZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Eb3duQW55OiAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zICE9PSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIGN1ckdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyXG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hdGluZyBET00gZXZlbnQuXG4gICAgICogQHBhcmFtIHtBcnJheS48T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50Pn0gZ1BvaW50c1xuICAgICAqICAgICAgR2VzdHVyZSBwb2ludHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVQb2ludGVyc0V4aXQoIHRyYWNrZXIsIGV2ZW50LCBnUG9pbnRzICkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBUSElTWyB0cmFja2VyLmhhc2ggXSxcbiAgICAgICAgICAgIHBvaW50c0xpc3QgPSB0cmFja2VyLmdldEFjdGl2ZVBvaW50ZXJzTGlzdEJ5VHlwZSggZ1BvaW50c1sgMCBdLnR5cGUgKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBnUG9pbnRDb3VudCA9IGdQb2ludHMubGVuZ3RoLFxuICAgICAgICAgICAgY3VyR1BvaW50LFxuICAgICAgICAgICAgdXBkYXRlR1BvaW50LFxuICAgICAgICAgICAgcHJvcGFnYXRlO1xuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgZ1BvaW50Q291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGN1ckdQb2ludCA9IGdQb2ludHNbIGkgXTtcbiAgICAgICAgICAgIHVwZGF0ZUdQb2ludCA9IHBvaW50c0xpc3QuZ2V0QnlJZCggY3VyR1BvaW50LmlkICk7XG5cbiAgICAgICAgICAgIGlmICggdXBkYXRlR1BvaW50ICkge1xuICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgdHJhY2tpbmcgdGhlIHBvaW50ZXIuIElmIGNhcHR1cmVkIHRoZW4gdXBkYXRlIGl0LCBlbHNlIHN0b3AgdHJhY2tpbmcgaXRcbiAgICAgICAgICAgICAgICBpZiAoIHVwZGF0ZUdQb2ludC5jYXB0dXJlZCApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RQb3MgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RUaW1lID0gdXBkYXRlR1BvaW50LmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFBvcyA9IGN1ckdQb2ludC5jdXJyZW50UG9zO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcFRyYWNraW5nUG9pbnRlciggcG9pbnRzTGlzdCwgdXBkYXRlR1BvaW50ICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VyR1BvaW50ID0gdXBkYXRlR1BvaW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeGl0XG4gICAgICAgICAgICBpZiAoIHRyYWNrZXIuZXhpdEhhbmRsZXIgKSB7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5leGl0SGFuZGxlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogICAgICAgICAgY3VyR1BvaW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogICAgICAgICAgICAgZ2V0UG9pbnRSZWxhdGl2ZVRvQWJzb2x1dGUoIGN1ckdQb2ludC5jdXJyZW50UG9zLCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyczogICAgICAgICAgICAgdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyQ291bnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2lkZUVsZW1lbnRQcmVzc2VkOiB1cGRhdGVHUG9pbnQgPyB1cGRhdGVHUG9pbnQuaW5zaWRlRWxlbWVudFByZXNzZWQgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkRvd25Bbnk6ICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgIT09IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoRXZlbnQ6ICAgICAgICAgY3VyR1BvaW50LnR5cGUgPT09ICd0b3VjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlclxuICAgICAqICAgICBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqICAgICBBIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYXRpbmcgRE9NIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludD59IGdQb2ludHNcbiAgICAgKiAgICAgIEdlc3R1cmUgcG9pbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJ1dHRvbkNoYW5nZWRcbiAgICAgKiAgICAgIFRoZSBidXR0b24gaW52b2x2ZWQgaW4gdGhlIGV2ZW50OiAtMTogbm9uZSwgMDogcHJpbWFyeS9sZWZ0LCAxOiBhdXgvbWlkZGxlLCAyOiBzZWNvbmRhcnkvcmlnaHQsIDM6IFgxL2JhY2ssIDQ6IFgyL2ZvcndhcmQsIDU6IHBlbiBlcmFzZXIuXG4gICAgICogICAgICBOb3RlIG9uIGNob3JkZWQgYnV0dG9uIHByZXNzZXMgKGEgYnV0dG9uIHByZXNzZWQgd2hlbiBhbm90aGVyIGJ1dHRvbiBpcyBhbHJlYWR5IHByZXNzZWQpOiBJbiB0aGUgVzNDIFBvaW50ZXIgRXZlbnRzIG1vZGVsLFxuICAgICAqICAgICAgb25seSBvbmUgcG9pbnRlcmRvd24vcG9pbnRlcnVwIGV2ZW50IGNvbWJvIGlzIGZpcmVkLiBDaG9yZGVkIGJ1dHRvbiBzdGF0ZSBjaGFuZ2VzIGluc3RlYWQgZmlyZSBwb2ludGVybW92ZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBwb2ludGVycyBzaG91bGQgYmUgY2FwdHVyZWQgdG8gdGhlIHRyYWNrZWQgZWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvaW50ZXJzRG93biggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMsIGJ1dHRvbkNoYW5nZWQgKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRyYWNrZXIuaGFzaCBdLFxuICAgICAgICAgICAgcHJvcGFnYXRlLFxuICAgICAgICAgICAgcG9pbnRzTGlzdCA9IHRyYWNrZXIuZ2V0QWN0aXZlUG9pbnRlcnNMaXN0QnlUeXBlKCBnUG9pbnRzWyAwIF0udHlwZSApLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGdQb2ludENvdW50ID0gZ1BvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICBjdXJHUG9pbnQsXG4gICAgICAgICAgICB1cGRhdGVHUG9pbnQ7XG5cbiAgICAgICAgaWYgKCB0eXBlb2YgZXZlbnQuYnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgPSBldmVudC5idXR0b25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCAkLkJyb3dzZXIudmVuZG9yID09PSAkLkJST1dTRVJTLklFICYmICQuQnJvd3Nlci52ZXJzaW9uIDwgOSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByaW1hcnlcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zICs9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXV4XG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyArPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlY29uZGFyeVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgKz0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSAzICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBYMSAoQmFjaylcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zICs9IDg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gNCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWDIgKEZvcndhcmQpXG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyArPSAxNjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSA1ICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQZW4gRXJhc2VyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyArPSAzMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWFyeVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgfD0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSAxICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdXhcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIHw9IDQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMiApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2Vjb25kYXJ5XG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyB8PSAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFgxIChCYWNrKVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgfD0gODtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSA0ICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBYMiAoRm9yd2FyZClcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIHw9IDE2O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDUgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBlbiBFcmFzZXJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIHw9IDMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9ubHkgY2FwdHVyZSBhbmQgdHJhY2sgcHJpbWFyeSBidXR0b24sIHBlbiwgYW5kIHRvdWNoIGNvbnRhY3RzXG4gICAgICAgIGlmICggYnV0dG9uQ2hhbmdlZCAhPT0gMCApIHtcbiAgICAgICAgICAgIC8vIEF1eCBQcmVzc1xuICAgICAgICAgICAgaWYgKCB0cmFja2VyLm5vblByaW1hcnlQcmVzc0hhbmRsZXIgKSB7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5ub25QcmltYXJ5UHJlc3NIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICBnUG9pbnRzWyAwIF0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggZ1BvaW50c1sgMCBdLmN1cnJlbnRQb3MsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiAgICAgICAgICAgICAgIGJ1dHRvbkNoYW5nZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIGdQb2ludHNbIDAgXS50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCBnUG9pbnRDb3VudDsgaSsrICkge1xuICAgICAgICAgICAgY3VyR1BvaW50ID0gZ1BvaW50c1sgaSBdO1xuICAgICAgICAgICAgdXBkYXRlR1BvaW50ID0gcG9pbnRzTGlzdC5nZXRCeUlkKCBjdXJHUG9pbnQuaWQgKTtcblxuICAgICAgICAgICAgaWYgKCB1cGRhdGVHUG9pbnQgKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxyZWFkeSB0cmFja2luZyB0aGUgcG9pbnRlci4uLnVwZGF0ZSBpdFxuICAgICAgICAgICAgICAgIHVwZGF0ZUdQb2ludC5jYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuaW5zaWRlRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LmNvbnRhY3RQb3MgPSBjdXJHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY29udGFjdFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RQb3MgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQubGFzdFRpbWUgPSB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MgPSBjdXJHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQgPSB1cGRhdGVHUG9pbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZm9yIHRyYWNraW5nIGFuZCBhZGQgdG8gdGhlIHRyYWNraW5nIGxpc3QgKG5vIHBvaW50ZXJvdmVyIG9yIHBvaW50ZXJtb3ZlIGV2ZW50IG9jY3VycmVkIGJlZm9yZSB0aGlzKVxuICAgICAgICAgICAgICAgIGN1ckdQb2ludC5jYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY3VyR1BvaW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjdXJHUG9pbnQuaW5zaWRlRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhcnRUcmFja2luZ1BvaW50ZXIoIHBvaW50c0xpc3QsIGN1ckdQb2ludCApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb2ludHNMaXN0LmNvbnRhY3RzKys7XG4gICAgICAgICAgICAvLyQuY29uc29sZS5sb2coJ2NvbnRhY3RzKysgJywgcG9pbnRzTGlzdC5jb250YWN0cyk7XG5cbiAgICAgICAgICAgIGlmICggdHJhY2tlci5kcmFnSGFuZGxlciB8fCB0cmFja2VyLmRyYWdFbmRIYW5kbGVyIHx8IHRyYWNrZXIucGluY2hIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgICQuTW91c2VUcmFja2VyLmdlc3R1cmVQb2ludFZlbG9jaXR5VHJhY2tlci5hZGRQb2ludCggdHJhY2tlciwgY3VyR1BvaW50ICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggcG9pbnRzTGlzdC5jb250YWN0cyA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAvLyBQcmVzc1xuICAgICAgICAgICAgICAgIGlmICggdHJhY2tlci5wcmVzc0hhbmRsZXIgKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIucHJlc3NIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICBjdXJHUG9pbnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogICAgICAgICAgICAgZ2V0UG9pbnRSZWxhdGl2ZVRvQWJzb2x1dGUoIGN1ckdQb2ludC5jb250YWN0UG9zLCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG91Y2hFdmVudDogICAgICAgICBjdXJHUG9pbnQudHlwZSA9PT0gJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhOiAgICAgICAgICAgICB0cmFja2VyLnVzZXJEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBwb2ludHNMaXN0LmNvbnRhY3RzID09PSAyICkge1xuICAgICAgICAgICAgICAgIGlmICggdHJhY2tlci5waW5jaEhhbmRsZXIgJiYgY3VyR1BvaW50LnR5cGUgPT09ICd0b3VjaCcgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZm9yIHBpbmNoXG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLnBpbmNoR1BvaW50cyA9IHBvaW50c0xpc3QuYXNBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5sYXN0UGluY2hEaXN0ID0gZGVsZWdhdGUuY3VycmVudFBpbmNoRGlzdCA9IGRlbGVnYXRlLnBpbmNoR1BvaW50c1sgMCBdLmN1cnJlbnRQb3MuZGlzdGFuY2VUbyggZGVsZWdhdGUucGluY2hHUG9pbnRzWyAxIF0uY3VycmVudFBvcyApO1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5sYXN0UGluY2hDZW50ZXIgPSBkZWxlZ2F0ZS5jdXJyZW50UGluY2hDZW50ZXIgPSBnZXRDZW50ZXJQb2ludCggZGVsZWdhdGUucGluY2hHUG9pbnRzWyAwIF0uY3VycmVudFBvcywgZGVsZWdhdGUucGluY2hHUG9pbnRzWyAxIF0uY3VycmVudFBvcyApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyXG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hdGluZyBET00gZXZlbnQuXG4gICAgICogQHBhcmFtIHtBcnJheS48T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXIuR2VzdHVyZVBvaW50Pn0gZ1BvaW50c1xuICAgICAqICAgICAgR2VzdHVyZSBwb2ludHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYnV0dG9uQ2hhbmdlZFxuICAgICAqICAgICAgVGhlIGJ1dHRvbiBpbnZvbHZlZCBpbiB0aGUgZXZlbnQ6IC0xOiBub25lLCAwOiBwcmltYXJ5L2xlZnQsIDE6IGF1eC9taWRkbGUsIDI6IHNlY29uZGFyeS9yaWdodCwgMzogWDEvYmFjaywgNDogWDIvZm9yd2FyZCwgNTogcGVuIGVyYXNlci5cbiAgICAgKiAgICAgIE5vdGUgb24gY2hvcmRlZCBidXR0b24gcHJlc3NlcyAoYSBidXR0b24gcHJlc3NlZCB3aGVuIGFub3RoZXIgYnV0dG9uIGlzIGFscmVhZHkgcHJlc3NlZCk6IEluIHRoZSBXM0MgUG9pbnRlciBFdmVudHMgbW9kZWwsXG4gICAgICogICAgICBvbmx5IG9uZSBwb2ludGVyZG93bi9wb2ludGVydXAgZXZlbnQgY29tYm8gaXMgZmlyZWQuIENob3JkZWQgYnV0dG9uIHN0YXRlIGNoYW5nZXMgaW5zdGVhZCBmaXJlIHBvaW50ZXJtb3ZlIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHBvaW50ZXIgY2FwdHVyZSBzaG91bGQgYmUgcmVsZWFzZWQgZnJvbSB0aGUgdHJhY2tlZCBlbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9pbnRlcnNVcCggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMsIGJ1dHRvbkNoYW5nZWQgKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFRISVNbIHRyYWNrZXIuaGFzaCBdLFxuICAgICAgICAgICAgcG9pbnRzTGlzdCA9IHRyYWNrZXIuZ2V0QWN0aXZlUG9pbnRlcnNMaXN0QnlUeXBlKCBnUG9pbnRzWyAwIF0udHlwZSApLFxuICAgICAgICAgICAgcHJvcGFnYXRlLFxuICAgICAgICAgICAgaW5zaWRlRWxlbWVudFJlbGVhc2VkLFxuICAgICAgICAgICAgcmVsZWFzZVBvaW50LFxuICAgICAgICAgICAgcmVsZWFzZVRpbWUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZ1BvaW50Q291bnQgPSBnUG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1ckdQb2ludCxcbiAgICAgICAgICAgIHVwZGF0ZUdQb2ludCxcbiAgICAgICAgICAgIHJlbGVhc2VDYXB0dXJlID0gZmFsc2UsXG4gICAgICAgICAgICB3YXNDYXB0dXJlZCA9IGZhbHNlLFxuICAgICAgICAgICAgcXVpY2s7XG5cbiAgICAgICAgaWYgKCB0eXBlb2YgZXZlbnQuYnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgPSBldmVudC5idXR0b25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCAkLkJyb3dzZXIudmVuZG9yID09PSAkLkJST1dTRVJTLklFICYmICQuQnJvd3Nlci52ZXJzaW9uIDwgOSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByaW1hcnlcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIC09IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXV4XG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyAtPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlY29uZGFyeVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgLT0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSAzICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBYMSAoQmFjaylcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIC09IDg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gNCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWDIgKEZvcndhcmQpXG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyAtPSAxNjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSA1ICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQZW4gRXJhc2VyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyAtPSAzMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWFyeVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgXj0gfjE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXV4XG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyBePSB+NDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBidXR0b25DaGFuZ2VkID09PSAyICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWNvbmRhcnlcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zIF49IH4yO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGJ1dHRvbkNoYW5nZWQgPT09IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFgxIChCYWNrKVxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgXj0gfjg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gNCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWDIgKEZvcndhcmQpXG4gICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyBePSB+MTY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYnV0dG9uQ2hhbmdlZCA9PT0gNSApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGVuIEVyYXNlclxuICAgICAgICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgXj0gfjMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9ubHkgY2FwdHVyZSBhbmQgdHJhY2sgcHJpbWFyeSBidXR0b24sIHBlbiwgYW5kIHRvdWNoIGNvbnRhY3RzXG4gICAgICAgIGlmICggYnV0dG9uQ2hhbmdlZCAhPT0gMCApIHtcbiAgICAgICAgICAgIC8vIEF1eCBSZWxlYXNlXG4gICAgICAgICAgICBpZiAoIHRyYWNrZXIubm9uUHJpbWFyeVJlbGVhc2VIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIubm9uUHJpbWFyeVJlbGVhc2VIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogICAgICAgICAgIGdQb2ludHNbIDAgXS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggIGdQb2ludHNbIDAgXS5jdXJyZW50UG9zLCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogICAgICAgICAgICAgICAgYnV0dG9uQ2hhbmdlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgICBnUG9pbnRzWyAwIF0udHlwZSA9PT0gJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgICB0cmFja2VyLnVzZXJEYXRhXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgZ1BvaW50Q291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGN1ckdQb2ludCA9IGdQb2ludHNbIGkgXTtcbiAgICAgICAgICAgIHVwZGF0ZUdQb2ludCA9IHBvaW50c0xpc3QuZ2V0QnlJZCggY3VyR1BvaW50LmlkICk7XG5cbiAgICAgICAgICAgIGlmICggdXBkYXRlR1BvaW50ICkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcG9pbnRlciwgc3RvcCB0cmFja2luZyBpdCBpZiBub3Qgc3RpbGwgaW4gdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCB1cGRhdGVHUG9pbnQuY2FwdHVyZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUdQb2ludC5jYXB0dXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZWxlYXNlQ2FwdHVyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHdhc0NhcHR1cmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RQb3MgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQubGFzdFRpbWUgPSB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MgPSBjdXJHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKCAhdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3BUcmFja2luZ1BvaW50ZXIoIHBvaW50c0xpc3QsIHVwZGF0ZUdQb2ludCApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbGVhc2VQb2ludCA9IHVwZGF0ZUdQb2ludC5jdXJyZW50UG9zO1xuICAgICAgICAgICAgICAgIHJlbGVhc2VUaW1lID0gdXBkYXRlR1BvaW50LmN1cnJlbnRUaW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKCB3YXNDYXB0dXJlZCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9pbnRlciB3YXMgYWN0aXZhdGVkIGluIG91ciBlbGVtZW50IGJ1dCBjb3VsZCBoYXZlIGJlZW4gcmVtb3ZlZCBpbiBhbnkgZWxlbWVudCBzaW5jZSBldmVudHMgYXJlIGNhcHR1cmVkIHRvIG91ciBlbGVtZW50XG5cbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzTGlzdC5jb250YWN0cy0tO1xuICAgICAgICAgICAgICAgICAgICAvLyQuY29uc29sZS5sb2coJ2NvbnRhY3RzLS0gJywgcG9pbnRzTGlzdC5jb250YWN0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFja2VyLmRyYWdIYW5kbGVyIHx8IHRyYWNrZXIuZHJhZ0VuZEhhbmRsZXIgfHwgdHJhY2tlci5waW5jaEhhbmRsZXIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLk1vdXNlVHJhY2tlci5nZXN0dXJlUG9pbnRWZWxvY2l0eVRyYWNrZXIucmVtb3ZlUG9pbnQoIHRyYWNrZXIsIHVwZGF0ZUdQb2ludCApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwb2ludHNMaXN0LmNvbnRhY3RzID09PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWxlYXNlIChwcmVzc2VkIGluIG91ciBlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFja2VyLnJlbGVhc2VIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIucmVsZWFzZUhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICAgdXBkYXRlR1BvaW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogICAgICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCByZWxlYXNlUG9pbnQsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNpZGVFbGVtZW50UHJlc3NlZDogIHVwZGF0ZUdQb2ludC5pbnNpZGVFbGVtZW50UHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2lkZUVsZW1lbnRSZWxlYXNlZDogdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoRXZlbnQ6ICAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRHJhZyBFbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdHJhY2tlci5kcmFnRW5kSGFuZGxlciAmJiAhdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MuZXF1YWxzKCB1cGRhdGVHUG9pbnQuY29udGFjdFBvcyApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIuZHJhZ0VuZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCB1cGRhdGVHUG9pbnQuY3VycmVudFBvcywgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAgICAgICAgICAgIHVwZGF0ZUdQb2ludC5kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdDogICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoRXZlbnQ6ICAgICAgICAgdXBkYXRlR1BvaW50LnR5cGUgPT09ICd0b3VjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByb3BhZ2F0ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGljayAvIERvdWJsZS1DbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoIHRyYWNrZXIuY2xpY2tIYW5kbGVyIHx8IHRyYWNrZXIuZGJsQ2xpY2tIYW5kbGVyICkgJiYgdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVpY2sgPSByZWxlYXNlVGltZSAtIHVwZGF0ZUdQb2ludC5jb250YWN0VGltZSA8PSB0cmFja2VyLmNsaWNrVGltZVRocmVzaG9sZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY29udGFjdFBvcy5kaXN0YW5jZVRvKCByZWxlYXNlUG9pbnQgKSA8PSB0cmFja2VyLmNsaWNrRGlzdFRocmVzaG9sZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFja2VyLmNsaWNrSGFuZGxlciApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5jbGlja0hhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrOiAgICAgICAgICAgICAgICBxdWljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdDogICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvdWJsZS1DbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdHJhY2tlci5kYmxDbGlja0hhbmRsZXIgJiYgcXVpY2sgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuY2xpY2tzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcG9pbnRzTGlzdC5jbGlja3MgPT09IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5sYXN0Q2xpY2tQb3MgPSByZWxlYXNlUG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmpzaGludCBsb29wZnVuYzp0cnVlKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLmRibENsaWNrVGltZU91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuY2xpY2tzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRyYWNrZXIuZGJsQ2xpY2tUaW1lVGhyZXNob2xkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmpzaGludCBsb29wZnVuYzpmYWxzZSovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHBvaW50c0xpc3QuY2xpY2tzID09PSAyICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCBkZWxlZ2F0ZS5kYmxDbGlja1RpbWVPdXQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c0xpc3QuY2xpY2tzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGVsZWdhdGUubGFzdENsaWNrUG9zLmRpc3RhbmNlVG8oIHJlbGVhc2VQb2ludCApIDw9IHRyYWNrZXIuZGJsQ2xpY2tEaXN0VGhyZXNob2xkICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIuZGJsQ2xpY2tIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICB1cGRhdGVHUG9pbnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnQ6ICAgICAgICAgICAgICAgIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLmxhc3RDbGlja1BvcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHBvaW50c0xpc3QuY29udGFjdHMgPT09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRyYWNrZXIucGluY2hIYW5kbGVyICYmIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvciBwaW5jaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLnBpbmNoR1BvaW50cyA9IHBvaW50c0xpc3QuYXNBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLmxhc3RQaW5jaERpc3QgPSBkZWxlZ2F0ZS5jdXJyZW50UGluY2hEaXN0ID0gZGVsZWdhdGUucGluY2hHUG9pbnRzWyAwIF0uY3VycmVudFBvcy5kaXN0YW5jZVRvKCBkZWxlZ2F0ZS5waW5jaEdQb2ludHNbIDEgXS5jdXJyZW50UG9zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUubGFzdFBpbmNoQ2VudGVyID0gZGVsZWdhdGUuY3VycmVudFBpbmNoQ2VudGVyID0gZ2V0Q2VudGVyUG9pbnQoIGRlbGVnYXRlLnBpbmNoR1BvaW50c1sgMCBdLmN1cnJlbnRQb3MsIGRlbGVnYXRlLnBpbmNoR1BvaW50c1sgMSBdLmN1cnJlbnRQb3MgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBvaW50ZXIgd2FzIGFjdGl2YXRlZCBpbiBhbm90aGVyIGVsZW1lbnQgYnV0IHJlbW92ZWQgaW4gb3VyIGVsZW1lbnRcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWxlYXNlIChwcmVzc2VkIGluIGFub3RoZXIgZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFja2VyLnJlbGVhc2VIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5yZWxlYXNlSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgICB1cGRhdGVHUG9pbnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggcmVsZWFzZVBvaW50LCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogICAgICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2lkZUVsZW1lbnRQcmVzc2VkOiAgdXBkYXRlR1BvaW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNpZGVFbGVtZW50UmVsZWFzZWQ6IHVwZGF0ZUdQb2ludC5pbnNpZGVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoRXZlbnQ6ICAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuY2FuY2VsRXZlbnQoIGV2ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVsZWFzZUNhcHR1cmU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHdoZW4gcG9pbnRlcihzKSBjaGFuZ2UgY29vcmRpbmF0ZXMsIGJ1dHRvbiBzdGF0ZSwgcHJlc3N1cmUsIHRpbHQsIG9yIGNvbnRhY3QgZ2VvbWV0cnkgKGUuZy4gd2lkdGggYW5kIGhlaWdodClcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlubmVyXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlclxuICAgICAqICAgICBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqICAgICBBIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYXRpbmcgRE9NIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludD59IGdQb2ludHNcbiAgICAgKiAgICAgIEdlc3R1cmUgcG9pbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9pbnRlcnNNb3ZlKCB0cmFja2VyLCBldmVudCwgZ1BvaW50cyApIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gVEhJU1sgdHJhY2tlci5oYXNoIF0sXG4gICAgICAgICAgICBwb2ludHNMaXN0ID0gdHJhY2tlci5nZXRBY3RpdmVQb2ludGVyc0xpc3RCeVR5cGUoIGdQb2ludHNbIDAgXS50eXBlICksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZ1BvaW50Q291bnQgPSBnUG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1ckdQb2ludCxcbiAgICAgICAgICAgIHVwZGF0ZUdQb2ludCxcbiAgICAgICAgICAgIGdQb2ludEFycmF5LFxuICAgICAgICAgICAgZGVsdGEsXG4gICAgICAgICAgICBwcm9wYWdhdGU7XG5cbiAgICAgICAgaWYgKCB0eXBlb2YgZXZlbnQuYnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICBwb2ludHNMaXN0LmJ1dHRvbnMgPSBldmVudC5idXR0b25zO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCBnUG9pbnRDb3VudDsgaSsrICkge1xuICAgICAgICAgICAgY3VyR1BvaW50ID0gZ1BvaW50c1sgaSBdO1xuICAgICAgICAgICAgdXBkYXRlR1BvaW50ID0gcG9pbnRzTGlzdC5nZXRCeUlkKCBjdXJHUG9pbnQuaWQgKTtcblxuICAgICAgICAgICAgaWYgKCB1cGRhdGVHUG9pbnQgKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxyZWFkeSB0cmFja2luZyB0aGUgcG9pbnRlci4uLnVwZGF0ZSBpdFxuICAgICAgICAgICAgICAgIGlmICggY3VyR1BvaW50Lmhhc093blByb3BlcnR5KCAnaXNQcmltYXJ5JyApICkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuaXNQcmltYXJ5ID0gY3VyR1BvaW50LmlzUHJpbWFyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50Lmxhc3RQb3MgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQubGFzdFRpbWUgPSB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MgPSBjdXJHUG9pbnQuY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuY3VycmVudFRpbWUgPSBjdXJHUG9pbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZm9yIHRyYWNraW5nIGFuZCBhZGQgdG8gdGhlIHRyYWNraW5nIGxpc3QgKG5vIHBvaW50ZXJvdmVyIG9yIHBvaW50ZXJkb3duIGV2ZW50IG9jY3VycmVkIGJlZm9yZSB0aGlzKVxuICAgICAgICAgICAgICAgIGN1ckdQb2ludC5jYXB0dXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGN1ckdQb2ludC5pbnNpZGVFbGVtZW50UHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGN1ckdQb2ludC5pbnNpZGVFbGVtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdGFydFRyYWNraW5nUG9pbnRlciggcG9pbnRzTGlzdCwgY3VyR1BvaW50ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9wIChtb3VzZSBvbmx5KVxuICAgICAgICBpZiAoIHRyYWNrZXIuc3RvcEhhbmRsZXIgJiYgZ1BvaW50c1sgMCBdLnR5cGUgPT09ICdtb3VzZScgKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoIHRyYWNrZXIuc3RvcFRpbWVPdXQgKTtcbiAgICAgICAgICAgIHRyYWNrZXIuc3RvcFRpbWVPdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVQb2ludGVyU3RvcCggdHJhY2tlciwgZXZlbnQsIGdQb2ludHNbIDAgXS50eXBlICk7XG4gICAgICAgICAgICB9LCB0cmFja2VyLnN0b3BEZWxheSApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBwb2ludHNMaXN0LmNvbnRhY3RzID09PSAwICkge1xuICAgICAgICAgICAgLy8gTW92ZSAobm8gY29udGFjdHM6IGhvdmVyaW5nIG1vdXNlIG9yIG90aGVyIGhvdmVyLWNhcGFibGUgZGV2aWNlKVxuICAgICAgICAgICAgaWYgKCB0cmFja2VyLm1vdmVIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIubW92ZUhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgIGdQb2ludHNbIDAgXS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCBnUG9pbnRzWyAwIF0uY3VycmVudFBvcywgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIGdQb2ludHNbIDAgXS50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggcG9pbnRzTGlzdC5jb250YWN0cyA9PT0gMSApIHtcbiAgICAgICAgICAgIC8vIE1vdmUgKDEgY29udGFjdClcbiAgICAgICAgICAgIGlmICggdHJhY2tlci5tb3ZlSGFuZGxlciApIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQgPSBwb2ludHNMaXN0LmFzQXJyYXkoKVsgMCBdO1xuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIubW92ZUhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCB1cGRhdGVHUG9pbnQuY3VycmVudFBvcywgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIHVwZGF0ZUdQb2ludC50eXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wYWdhdGUgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRHJhZ1xuICAgICAgICAgICAgaWYgKCB0cmFja2VyLmRyYWdIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUdQb2ludCA9IHBvaW50c0xpc3QuYXNBcnJheSgpWyAwIF07XG4gICAgICAgICAgICAgICAgZGVsdGEgPSB1cGRhdGVHUG9pbnQuY3VycmVudFBvcy5taW51cyggdXBkYXRlR1BvaW50Lmxhc3RQb3MgKTtcbiAgICAgICAgICAgICAgICBwcm9wYWdhdGUgPSB0cmFja2VyLmRyYWdIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZTogICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICB1cGRhdGVHUG9pbnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggdXBkYXRlR1BvaW50LmN1cnJlbnRQb3MsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogICAgICAgICAgICAgIHBvaW50c0xpc3QuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhOiAgICAgICAgICAgICAgICBkZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiAgICAgICAgICAgICAgICB1cGRhdGVHUG9pbnQuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICAgICAgICAgICAgdXBkYXRlR1BvaW50LmRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0OiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVG91Y2hFdmVudDogICAgICAgICB1cGRhdGVHUG9pbnQudHlwZSA9PT0gJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhOiAgICAgICAgICAgICB0cmFja2VyLnVzZXJEYXRhXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIHBvaW50c0xpc3QuY29udGFjdHMgPT09IDIgKSB7XG4gICAgICAgICAgICAvLyBNb3ZlICgyIGNvbnRhY3RzLCB1c2UgY2VudGVyKVxuICAgICAgICAgICAgaWYgKCB0cmFja2VyLm1vdmVIYW5kbGVyICkge1xuICAgICAgICAgICAgICAgIGdQb2ludEFycmF5ID0gcG9pbnRzTGlzdC5hc0FycmF5KCk7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRlID0gdHJhY2tlci5tb3ZlSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogICAgICAgICAgZ1BvaW50QXJyYXlbIDAgXS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCBnZXRDZW50ZXJQb2ludCggZ1BvaW50QXJyYXlbIDAgXS5jdXJyZW50UG9zLCBnUG9pbnRBcnJheVsgMSBdLmN1cnJlbnRQb3MgKSwgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiAgICAgICAgICAgICAgcG9pbnRzTGlzdC5idXR0b25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIGdQb2ludEFycmF5WyAwIF0udHlwZSA9PT0gJ3RvdWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhOiAgICAgICAgICAgICB0cmFja2VyLnVzZXJEYXRhXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICggcHJvcGFnYXRlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jYW5jZWxFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBpbmNoXG4gICAgICAgICAgICBpZiAoIHRyYWNrZXIucGluY2hIYW5kbGVyICYmIGdQb2ludHNbIDAgXS50eXBlID09PSAndG91Y2gnICkge1xuICAgICAgICAgICAgICAgIGRlbHRhID0gZGVsZWdhdGUucGluY2hHUG9pbnRzWyAwIF0uY3VycmVudFBvcy5kaXN0YW5jZVRvKCBkZWxlZ2F0ZS5waW5jaEdQb2ludHNbIDEgXS5jdXJyZW50UG9zICk7XG4gICAgICAgICAgICAgICAgaWYgKCBkZWx0YSAhPSBkZWxlZ2F0ZS5jdXJyZW50UGluY2hEaXN0ICkge1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5sYXN0UGluY2hEaXN0ID0gZGVsZWdhdGUuY3VycmVudFBpbmNoRGlzdDtcbiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUuY3VycmVudFBpbmNoRGlzdCA9IGRlbHRhO1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZS5sYXN0UGluY2hDZW50ZXIgPSBkZWxlZ2F0ZS5jdXJyZW50UGluY2hDZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlLmN1cnJlbnRQaW5jaENlbnRlciA9IGdldENlbnRlclBvaW50KCBkZWxlZ2F0ZS5waW5jaEdQb2ludHNbIDAgXS5jdXJyZW50UG9zLCBkZWxlZ2F0ZS5waW5jaEdQb2ludHNbIDEgXS5jdXJyZW50UG9zICk7XG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IHRyYWNrZXIucGluY2hIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAgICAgICAgICAndG91Y2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlc3R1cmVQb2ludHM6ICAgICAgICBkZWxlZ2F0ZS5waW5jaEdQb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENlbnRlcjogICAgICAgICAgIGdldFBvaW50UmVsYXRpdmVUb0Fic29sdXRlKCBkZWxlZ2F0ZS5sYXN0UGluY2hDZW50ZXIsIHRyYWNrZXIuZWxlbWVudCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogICAgICAgICAgICAgICBnZXRQb2ludFJlbGF0aXZlVG9BYnNvbHV0ZSggZGVsZWdhdGUuY3VycmVudFBpbmNoQ2VudGVyLCB0cmFja2VyLmVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RGlzdGFuY2U6ICAgICAgICAgZGVsZWdhdGUubGFzdFBpbmNoRGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogICAgICAgICAgICAgZGVsZWdhdGUuY3VycmVudFBpbmNoRGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdDogICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YTogICAgICAgICAgICAgdHJhY2tlci51c2VyRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHByb3BhZ2F0ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmNhbmNlbEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IHRyYWNrZXJcbiAgICAgKiAgICAgQSByZWZlcmVuY2UgdG8gdGhlIE1vdXNlVHJhY2tlciBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgKiAgICAgQSByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmF0aW5nIERPTSBldmVudC5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlci5HZXN0dXJlUG9pbnQ+fSBnUG9pbnRzXG4gICAgICogICAgICBHZXN0dXJlIHBvaW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvaW50ZXJzQ2FuY2VsKCB0cmFja2VyLCBldmVudCwgZ1BvaW50cyApIHtcbiAgICAgICAgdXBkYXRlUG9pbnRlcnNVcCggdHJhY2tlciwgZXZlbnQsIGdQb2ludHMsIDAgKTtcbiAgICAgICAgdXBkYXRlUG9pbnRlcnNFeGl0KCB0cmFja2VyLCBldmVudCwgZ1BvaW50cyApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVQb2ludGVyU3RvcCggdHJhY2tlciwgb3JpZ2luYWxNb3ZlRXZlbnQsIHBvaW50ZXJUeXBlICkge1xuICAgICAgICBpZiAoIHRyYWNrZXIuc3RvcEhhbmRsZXIgKSB7XG4gICAgICAgICAgICB0cmFja2VyLnN0b3BIYW5kbGVyKCB7XG4gICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6ICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICAgICAgICAgIHBvaW50ZXJUeXBlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICAgICAgICBnZXRNb3VzZVJlbGF0aXZlKCBvcmlnaW5hbE1vdmVFdmVudCwgdHJhY2tlci5lbGVtZW50ICksXG4gICAgICAgICAgICAgICAgYnV0dG9uczogICAgICAgICAgICAgIHRyYWNrZXIuZ2V0QWN0aXZlUG9pbnRlcnNMaXN0QnlUeXBlKCBwb2ludGVyVHlwZSApLmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiAgICAgICAgIHBvaW50ZXJUeXBlID09PSAndG91Y2gnLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6ICAgICAgICBvcmlnaW5hbE1vdmVFdmVudCxcbiAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlckRhdGE6ICAgICAgICAgICAgIHRyYWNrZXIudXNlckRhdGFcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBUcnVlIGlmIGluc2lkZSBhbiBpZnJhbWUsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAvLyBAbWVtYmVyIHtCb29sZWFufSBpc0luSWZyYW1lXG4gICAgLy8gQHByaXZhdGVcbiAgICAvLyBAaW5uZXJcbiAgICB2YXIgaXNJbklmcmFtZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuc2VsZiAhPT0gd2luZG93LnRvcDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KSgpO1xuIFxuICAgIC8vIEBmdW5jdGlvblxuICAgIC8vIEBwcml2YXRlXG4gICAgLy8gQGlubmVyXG4gICAgLy8gQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHRhcmdldCBoYXMgYWNjZXNzIHJpZ2h0cyB0byBldmVudHMsIG90aGVyd2lzZSBmYWxzZS5cbiAgICBmdW5jdGlvbiBjYW5BY2Nlc3NFdmVudHMgKHRhcmdldCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hZGRFdmVudExpc3RlbmVyICYmIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbn0gKCBPcGVuU2VhZHJhZ29uICkgKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBDb250cm9sXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHN1cHBvcnRlZCBsb2NhdGlvbnMgd2hlcmUgY29udHJvbHMgY2FuIGJlIGFuY2hvcmVkLlxuICogVGhlIGFuY2hvcmluZyBpcyBhbHdheXMgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5lci5cbiAqIEBtZW1iZXIgQ29udHJvbEFuY2hvclxuICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJvcGVydHkge051bWJlcn0gTk9ORVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFRPUF9MRUZUXG4gKiBAcHJvcGVydHkge051bWJlcn0gVE9QX1JJR0hUXG4gKiBAcHJvcGVydHkge051bWJlcn0gQk9UVE9NX0xFRlRcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBCT1RUT01fUklHSFRcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBBQlNPTFVURVxuICovXG4kLkNvbnRyb2xBbmNob3IgPSB7XG4gICAgTk9ORTogMCxcbiAgICBUT1BfTEVGVDogMSxcbiAgICBUT1BfUklHSFQ6IDIsXG4gICAgQk9UVE9NX1JJR0hUOiAzLFxuICAgIEJPVFRPTV9MRUZUOiA0LFxuICAgIEFCU09MVVRFOiA1XG59O1xuXG4vKipcbiAqIEBjbGFzcyBDb250cm9sXG4gKiBAY2xhc3NkZXNjIEEgQ29udHJvbCByZXByZXNlbnRzIGFueSBpbnRlcmZhY2UgZWxlbWVudCB3aGljaCBpcyBtZWFudCB0byBhbGxvdyB0aGUgdXNlclxuICogdG8gaW50ZXJhY3Qgd2l0aCB0aGUgem9vbWFibGUgaW50ZXJmYWNlLiBBbnkgY29udHJvbCBjYW4gYmUgYW5jaG9yZWQgdG8gYW55XG4gKiBlbGVtZW50LlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSB0aGUgY29udHJvbCBlbGVtZW50IHRvIGJlIGFuY2hvcmVkIGluIHRoZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge09iamVjdCB9IG9wdGlvbnMgLSBBbGwgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIHNldHRpbmdzIGZvciBjb25maWd1cmluZyBhIGNvbnRyb2wgZWxlbWVudC5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Db250cm9sQW5jaG9yfSBbb3B0aW9ucy5hbmNob3I9T3BlblNlYWRyYWdvbi5Db250cm9sQW5jaG9yLk5PTkVdIC0gdGhlIHBvc2l0aW9uIG9mIHRoZSBjb250cm9sXG4gKiAgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYXR0YWNoVG9WaWV3ZXI9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBjb250cm9sIHNob3VsZCBiZSBhZGRlZCBkaXJlY3RseSB0byB0aGUgdmlld2VyLCBvclxuICogIGRpcmVjdGx5IHRvIHRoZSBjb250YWluZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYXV0b0ZhZGU9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBjb250cm9sIHNob3VsZCBoYXZlIHRoZSBhdXRvZmFkZSBiZWhhdmlvclxuICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXIgLSB0aGUgZWxlbWVudCB0byBjb250cm9sIHdpbGwgYmUgYW5jaG9yZWQgdG9vLlxuICovXG4kLkNvbnRyb2wgPSBmdW5jdGlvbiAoIGVsZW1lbnQsIG9wdGlvbnMsIGNvbnRhaW5lciApIHtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpXG4gICAge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoXCJQYXNzaW5nIGFuIGFuY2hvciBkaXJlY3RseSBpbnRvIHRoZSBPcGVuU2VhZHJhZ29uLkNvbnRyb2wgY29uc3RydWN0b3IgaXMgZGVwcmVjYXRlZDsgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGVhc2UgdXNlIGFuIG9wdGlvbnMgb2JqZWN0IGluc3RlYWQuICBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN1cHBvcnQgZm9yIHRoaXMgZGVwcmVjYXRlZCB2YXJpYW50IGlzIHNjaGVkdWxlZCBmb3IgcmVtb3ZhbCBpbiBEZWNlbWJlciAyMDEzXCIpO1xuICAgICAgICAgb3B0aW9ucyA9IHthbmNob3I6IG9wdGlvbnN9O1xuICAgIH1cbiAgICBvcHRpb25zLmF0dGFjaFRvVmlld2VyID0gKHR5cGVvZiBvcHRpb25zLmF0dGFjaFRvVmlld2VyID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogb3B0aW9ucy5hdHRhY2hUb1ZpZXdlcjtcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBjb250cm9sIHNob3VsZCBoYXZlIGF1dG9mYWRlIGJlaGF2aW9yLlxuICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGF1dG9GYWRlXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQ29udHJvbCNcbiAgICAgKi9cbiAgICB0aGlzLmF1dG9GYWRlID0gKHR5cGVvZiBvcHRpb25zLmF1dG9GYWRlID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogb3B0aW9ucy5hdXRvRmFkZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCBwcm92aWRpbmcgdGhlIHVzZXIgaW50ZXJmYWNlIHdpdGggc29tZSB0eXBlIG9mIGNvbnRyb2wgKGUuZy4gYSB6b29tLWluIGJ1dHRvbikuXG4gICAgICogQG1lbWJlciB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkNvbnRyb2wjXG4gICAgICovXG4gICAgdGhpcy5lbGVtZW50ICAgID0gZWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIENvbnRyb2wgcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lci5cbiAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLkNvbnRyb2xBbmNob3J9IGFuY2hvclxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkNvbnRyb2wjXG4gICAgICovXG4gICAgdGhpcy5hbmNob3IgICAgID0gb3B0aW9ucy5hbmNob3I7XG4gICAgLyoqXG4gICAgICogVGhlIENvbnRyb2wncyBjb250YWluaW5nIGVsZW1lbnQuXG4gICAgICogQG1lbWJlciB7RWxlbWVudH0gY29udGFpbmVyXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQ29udHJvbCNcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRhaW5lciAgPSBjb250YWluZXI7XG4gICAgLyoqXG4gICAgICogQSBuZXV0cmFsIGVsZW1lbnQgc3Vycm91bmRpbmcgdGhlIGNvbnRyb2wgZWxlbWVudC5cbiAgICAgKiBAbWVtYmVyIHtFbGVtZW50fSB3cmFwcGVyXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQ29udHJvbCNcbiAgICAgKi9cbiAgICBpZiAoIHRoaXMuYW5jaG9yID09ICQuQ29udHJvbEFuY2hvci5BQlNPTFVURSApIHtcbiAgICAgICAgdGhpcy53cmFwcGVyICAgID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcbiAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB0aGlzLndyYXBwZXIuc3R5bGUudG9wID0gdHlwZW9mICggb3B0aW9ucy50b3AgKSAgPT0gXCJudW1iZXJcIiA/ICggb3B0aW9ucy50b3AgKyAncHgnICkgOiBvcHRpb25zLnRvcDtcbiAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLmxlZnQgID0gdHlwZW9mICggb3B0aW9ucy5sZWZ0ICkgID09IFwibnVtYmVyXCIgPyAgKG9wdGlvbnMubGVmdCArICdweCcgKSA6IG9wdGlvbnMubGVmdDtcbiAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLmhlaWdodCA9IHR5cGVvZiAoIG9wdGlvbnMuaGVpZ2h0ICkgID09IFwibnVtYmVyXCIgPyAoIG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JyApIDogb3B0aW9ucy5oZWlnaHQ7XG4gICAgICAgIHRoaXMud3JhcHBlci5zdHlsZS53aWR0aCAgPSB0eXBlb2YgKCBvcHRpb25zLndpZHRoICkgID09IFwibnVtYmVyXCIgPyAoIG9wdGlvbnMud2lkdGggKyAncHgnICkgOiBvcHRpb25zLndpZHRoO1xuICAgICAgICB0aGlzLndyYXBwZXIuc3R5bGUubWFyZ2luID0gXCIwcHhcIjtcbiAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLnBhZGRpbmcgPSBcIjBweFwiO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndyYXBwZXIgICAgPSAkLm1ha2VOZXV0cmFsRWxlbWVudCggXCJkaXZcIiApO1xuICAgICAgICB0aGlzLndyYXBwZXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgICAgIGlmICggdGhpcy5hbmNob3IgPT0gJC5Db250cm9sQW5jaG9yLk5PTkUgKSB7XG4gICAgICAgICAgICAvLyBJRTYgZml4XG4gICAgICAgICAgICB0aGlzLndyYXBwZXIuc3R5bGUud2lkdGggPSB0aGlzLndyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKCB0aGlzLmVsZW1lbnQgKTtcblxuICAgIGlmIChvcHRpb25zLmF0dGFjaFRvVmlld2VyICkge1xuICAgICAgICBpZiAoIHRoaXMuYW5jaG9yID09ICQuQ29udHJvbEFuY2hvci5UT1BfUklHSFQgfHxcbiAgICAgICAgICAgICB0aGlzLmFuY2hvciA9PSAkLkNvbnRyb2xBbmNob3IuQk9UVE9NX1JJR0hUICkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlcixcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maXJzdENoaWxkXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoIHRoaXMud3JhcHBlciApO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKCB0aGlzLndyYXBwZXIgKTtcbiAgICB9XG59O1xuXG4vKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uQ29udHJvbC5wcm90b3R5cGUgKi9cbiQuQ29udHJvbC5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBjb250cm9sIGZyb20gdGhlIGNvbnRhaW5lci5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQoIHRoaXMud3JhcHBlciApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb250cm9sIGlzIGN1cnJlbnRseSB2aXNpYmxlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgY3VycmVubHkgdmlzaWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGlzVmlzaWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuc3R5bGUuZGlzcGxheSAhPSBcIm5vbmVcIjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY29udHJvbC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZpc2libGUgLSB0cnVlIHRvIG1ha2UgdmlzaWJsZSwgZmFsc2UgdG8gaGlkZS5cbiAgICAgKi9cbiAgICBzZXRWaXNpYmxlOiBmdW5jdGlvbiggdmlzaWJsZSApIHtcbiAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID9cbiAgICAgICAgICAgICggdGhpcy5hbmNob3IgPT0gJC5Db250cm9sQW5jaG9yLkFCU09MVVRFID8gJ2Jsb2NrJyA6ICdpbmxpbmUtYmxvY2snICkgOlxuICAgICAgICAgICAgXCJub25lXCI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG9wYWNpdHkgbGV2ZWwgZm9yIHRoZSBjb250cm9sLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcGFjdGl5IC0gYSB2YWx1ZSBiZXR3ZWVuIDEgYW5kIDAgaW5jbHVzaXZlbHkuXG4gICAgICovXG4gICAgc2V0T3BhY2l0eTogZnVuY3Rpb24oIG9wYWNpdHkgKSB7XG4gICAgICAgIGlmICggdGhpcy5lbGVtZW50WyAkLlNJR05BTCBdICYmICQuQnJvd3Nlci52ZW5kb3IgPT0gJC5CUk9XU0VSUy5JRSApIHtcbiAgICAgICAgICAgICQuc2V0RWxlbWVudE9wYWNpdHkoIHRoaXMuZWxlbWVudCwgb3BhY2l0eSwgdHJ1ZSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5zZXRFbGVtZW50T3BhY2l0eSggdGhpcy53cmFwcGVyLCBvcGFjaXR5LCB0cnVlICk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIENvbnRyb2xEb2NrXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuICAgIC8qKlxuICAgICAqIEBjbGFzcyBDb250cm9sRG9ja1xuICAgICAqIEBjbGFzc2Rlc2MgUHJvdmlkZXMgYSBjb250YWluZXIgZWxlbWVudCAoYSAmbHQ7Zm9ybSZndDsgZWxlbWVudCkgd2l0aCBzdXBwb3J0IGZvciB0aGUgbGF5b3V0IG9mIGNvbnRyb2wgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqL1xuICAgICQuQ29udHJvbERvY2sgPSBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgICAgICB2YXIgbGF5b3V0cyA9IFsgJ3RvcGxlZnQnLCAndG9wcmlnaHQnLCAnYm90dG9tcmlnaHQnLCAnYm90dG9tbGVmdCddLFxuICAgICAgICAgICAgbGF5b3V0LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAkLmV4dGVuZCggdHJ1ZSwgdGhpcywge1xuICAgICAgICAgICAgaWQ6ICdjb250cm9sZG9jay0nKyQubm93KCkrJy0nK01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAwMDAwKSxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJC5tYWtlTmV1dHJhbEVsZW1lbnQoICdkaXYnICksXG4gICAgICAgICAgICBjb250cm9sczogW11cbiAgICAgICAgfSwgb3B0aW9ucyApO1xuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGZvcm0ncyBzdWJtaXQ7IG90aGVyd2lzZSBidXR0b24gY2xpY2tzIGFuZCByZXR1cm4ga2V5c1xuICAgICAgICAvLyBjYW4gdHJpZ2dlciBpdC5cbiAgICAgICAgdGhpcy5jb250YWluZXIub25zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggdGhpcy5lbGVtZW50ICl7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSAkLmdldEVsZW1lbnQoIHRoaXMuZWxlbWVudCApO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmNvbnRhaW5lciApO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKCBpID0gMDsgaSA8IGxheW91dHMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIGxheW91dCA9IGxheW91dHNbIGkgXTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHNbIGxheW91dCBdID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHNbIGxheW91dCBdLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGlmICggbGF5b3V0Lm1hdGNoKCAnbGVmdCcgKSApe1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNbIGxheW91dCBdLnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggbGF5b3V0Lm1hdGNoKCAncmlnaHQnICkgKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzWyBsYXlvdXQgXS5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBsYXlvdXQubWF0Y2goICd0b3AnICkgKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzWyBsYXlvdXQgXS5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggbGF5b3V0Lm1hdGNoKCAnYm90dG9tJyApICl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc1sgbGF5b3V0IF0uc3R5bGUuYm90dG9tID0gJzBweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCggdGhpcy5jb250cm9scy50b3BsZWZ0ICk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKCB0aGlzLmNvbnRyb2xzLnRvcHJpZ2h0ICk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKCB0aGlzLmNvbnRyb2xzLmJvdHRvbXJpZ2h0ICk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKCB0aGlzLmNvbnRyb2xzLmJvdHRvbWxlZnQgKTtcbiAgICB9O1xuXG4gICAgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLkNvbnRyb2xEb2NrLnByb3RvdHlwZSAqL1xuICAgICQuQ29udHJvbERvY2sucHJvdG90eXBlID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGFkZENvbnRyb2w6IGZ1bmN0aW9uICggZWxlbWVudCwgY29udHJvbE9wdGlvbnMgKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgICAgICB2YXIgZGl2ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBnZXRDb250cm9sSW5kZXgoIHRoaXMsIGVsZW1lbnQgKSA+PSAwICkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgICAgIC8vIHRoZXkncmUgdHJ5aW5nIHRvIGFkZCBhIGR1cGxpY2F0ZSBjb250cm9sXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGNvbnRyb2xPcHRpb25zLmFuY2hvciApIHtcbiAgICAgICAgICAgICAgICBjYXNlICQuQ29udHJvbEFuY2hvci5UT1BfUklHSFQ6XG4gICAgICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuY29udHJvbHMudG9wcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAkLkNvbnRyb2xBbmNob3IuQk9UVE9NX1JJR0hUOlxuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmNvbnRyb2xzLmJvdHRvbXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJC5Db250cm9sQW5jaG9yLkJPVFRPTV9MRUZUOlxuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmNvbnRyb2xzLmJvdHRvbWxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdCb3R0b20gPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICQuQ29udHJvbEFuY2hvci5UT1BfTEVGVDpcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5jb250cm9scy50b3BsZWZ0O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAkLkNvbnRyb2xBbmNob3IuQUJTT0xVVEU6XG4gICAgICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbiA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZyA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAkLkNvbnRyb2xBbmNob3IuTk9ORTpcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubWFyZ2luID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgJC5Db250cm9sKCBlbGVtZW50LCBjb250cm9sT3B0aW9ucywgZGl2IClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLkNvbnRyb2xEb2NrfSBDaGFpbmFibGUuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDb250cm9sOiBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgICAgICB2YXIgaSA9IGdldENvbnRyb2xJbmRleCggdGhpcywgZWxlbWVudCApO1xuXG4gICAgICAgICAgICBpZiAoIGkgPj0gMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzWyBpIF0uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMuc3BsaWNlKCBpLCAxICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5Db250cm9sRG9ja30gQ2hhaW5hYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJDb250cm9sczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKCB0aGlzLmNvbnRyb2xzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5wb3AoKS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgYXJlQ29udHJvbHNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaTtcblxuICAgICAgICAgICAgZm9yICggaSA9IHRoaXMuY29udHJvbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmNvbnRyb2xzWyBpIF0uaXNWaXNpYmxlKCkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLkNvbnRyb2xEb2NrfSBDaGFpbmFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRDb250cm9sc0VuYWJsZWQ6IGZ1bmN0aW9uKCBlbmFibGVkICkge1xuICAgICAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgICAgIGZvciAoIGkgPSB0aGlzLmNvbnRyb2xzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNbIGkgXS5zZXRWaXNpYmxlKCBlbmFibGVkICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gVXRpbGl0eSBtZXRob2RzXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIGdldENvbnRyb2xJbmRleCggZG9jaywgZWxlbWVudCApIHtcbiAgICAgICAgdmFyIGNvbnRyb2xzID0gZG9jay5jb250cm9scyxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgZm9yICggaSA9IGNvbnRyb2xzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuICAgICAgICAgICAgaWYgKCBjb250cm9sc1sgaSBdLmVsZW1lbnQgPT0gZWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gUGxhY2VtZW50XG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTYgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCQpIHtcblxuICAgIC8qKlxuICAgICAqIEFuIGVudW1lcmF0aW9uIG9mIHBvc2l0aW9ucyB0byBhbmNob3IgYW4gZWxlbWVudC5cbiAgICAgKiBAbWVtYmVyIFBsYWNlbWVudFxuICAgICAqIEBtZW1iZXJPZiBPcGVuU2VhZHJhZ29uXG4gICAgICogQHN0YXRpY1xuICAgICAqIEByZWFkb25seVxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IENFTlRFUlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IFRPUF9MRUZUXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBsYWNlbWVudH0gVE9QXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBsYWNlbWVudH0gVE9QX1JJR0hUXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBsYWNlbWVudH0gUklHSFRcbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBCT1RUT01fUklHSFRcbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBCT1RUT01cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBCT1RUT01fTEVGVFxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IExFRlRcbiAgICAgKi9cbiAgICAkLlBsYWNlbWVudCA9ICQuZnJlZXplT2JqZWN0KHtcbiAgICAgICAgQ0VOVEVSOiAgICAgICAwLFxuICAgICAgICBUT1BfTEVGVDogICAgIDEsXG4gICAgICAgIFRPUDogICAgICAgICAgMixcbiAgICAgICAgVE9QX1JJR0hUOiAgICAzLFxuICAgICAgICBSSUdIVDogICAgICAgIDQsXG4gICAgICAgIEJPVFRPTV9SSUdIVDogNSxcbiAgICAgICAgQk9UVE9NOiAgICAgICA2LFxuICAgICAgICBCT1RUT01fTEVGVDogIDcsXG4gICAgICAgIExFRlQ6ICAgICAgICAgOCxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgMDoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMToge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWxseUNlbnRlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMjoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMzoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgNDoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgNToge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzQm90dG9tOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgNjoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsbHlDZW50ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzQm90dG9tOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgNzoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWxseUNlbnRlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzQm90dG9tOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgODoge1xuICAgICAgICAgICAgICAgIGlzTGVmdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWxseUNlbnRlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1JpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbGx5Q2VudGVyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNCb3R0b206IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxufShPcGVuU2VhZHJhZ29uKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gVmlld2VyXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vLyBkaWN0aW9uYXJ5IGZyb20gaGFzaCB0byBwcml2YXRlIHByb3BlcnRpZXNcbnZhciBUSElTID0ge307XG52YXIgbmV4dEhhc2ggPSAxO1xuXG4vKipcbiAqXG4gKiBUaGUgbWFpbiBwb2ludCBvZiBlbnRyeSBpbnRvIGNyZWF0aW5nIGEgem9vbWFibGUgaW1hZ2Ugb24gdGhlIHBhZ2UuPGJyPlxuICogPGJyPlxuICogV2UgaGF2ZSBwcm92aWRlZCBhbiBpZGlvbWF0aWMgamF2YXNjcmlwdCBjb25zdHJ1Y3RvciB3aGljaCB0YWtlc1xuICogYSBzaW5nbGUgb2JqZWN0LCBidXQgc3RpbGwgc3VwcG9ydCB0aGUgbGVnYWN5IHBvc2l0aW9uYWwgYXJndW1lbnRzLjxicj5cbiAqIDxicj5cbiAqIFRoZSBvcHRpb25zIGJlbG93IGFyZSBnaXZlbiBpbiBvcmRlciB0aGF0IHRoZXkgYXBwZWFyZWQgaW4gdGhlIGNvbnN0cnVjdG9yXG4gKiBhcyBhcmd1bWVudHMgYW5kIHdlIHRyYW5zbGF0ZSBhIHBvc2l0aW9uYWwgY2FsbCBpbnRvIGFuIGlkaW9tYXRpYyBjYWxsLjxicj5cbiAqIDxicj5cbiAqIFRvIGNyZWF0ZSBhIHZpZXdlciwgeW91IGNhbiB1c2UgZWl0aGVyIG9mIHRoaXMgbWV0aG9kczo8YnI+XG4gKiA8dWw+XG4gKiA8bGk+PGNvZGU+dmFyIHZpZXdlciA9IG5ldyBPcGVuU2VhZHJhZ29uLlZpZXdlcihvcHRpb25zKTs8L2NvZGU+PC9saT5cbiAqIDxsaT48Y29kZT52YXIgdmlld2VyID0gT3BlblNlYWRyYWdvbihvcHRpb25zKTs8L2NvZGU+PC9saT5cbiAqIDwvdWw+XG4gKiBAY2xhc3MgVmlld2VyXG4gKiBAY2xhc3NkZXNjIFRoZSBtYWluIE9wZW5TZWFkcmFnb24gdmlld2VyIGNsYXNzLlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLkV2ZW50U291cmNlXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLkNvbnRyb2xEb2NrXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uT3B0aW9uc30gb3B0aW9ucyAtIFZpZXdlciBvcHRpb25zLlxuICpcbiAqKi9cbiQuVmlld2VyID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cbiAgICB2YXIgYXJncyAgPSBhcmd1bWVudHMsXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgaTtcblxuXG4gICAgLy9iYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBwb3NpdGlvbmFsIGFyZ3Mgd2hpbGUgcHJlZmVyaW5nIG1vcmVcbiAgICAvL2lkaW9tYXRpYyBqYXZhc2NyaXB0IG9wdGlvbnMgb2JqZWN0IGFzIHRoZSBvbmx5IGFyZ3VtZW50XG4gICAgaWYoICEkLmlzUGxhaW5PYmplY3QoIG9wdGlvbnMgKSApe1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgaWQ6ICAgICAgICAgICAgICAgICBhcmdzWyAwIF0sXG4gICAgICAgICAgICB4bWxQYXRoOiAgICAgICAgICAgIGFyZ3MubGVuZ3RoID4gMSA/IGFyZ3NbIDEgXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZWZpeFVybDogICAgICAgICAgYXJncy5sZW5ndGggPiAyID8gYXJnc1sgMiBdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29udHJvbHM6ICAgICAgICAgICBhcmdzLmxlbmd0aCA+IDMgPyBhcmdzWyAzIF0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdmVybGF5czogICAgICAgICAgIGFyZ3MubGVuZ3RoID4gNCA/IGFyZ3NbIDQgXSA6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vb3B0aW9ucy5jb25maWcgYW5kIHRoZSBnZW5lcmFsIGNvbmZpZyBhcmd1bWVudCBhcmUgZGVwcmVjYXRlZFxuICAgIC8vaW4gZmF2b3Igb2YgdGhlIG1vcmUgZGlyZWN0IHNwZWNpZmljYXRpb24gb2Ygb3B0aW9uYWwgc2V0dGluZ3NcbiAgICAvL2JlaW5nIHBhc3MgZGlyZWN0bHkgb24gdGhlIG9wdGlvbnMgb2JqZWN0XG4gICAgaWYgKCBvcHRpb25zLmNvbmZpZyApe1xuICAgICAgICAkLmV4dGVuZCggdHJ1ZSwgb3B0aW9ucywgb3B0aW9ucy5jb25maWcgKTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuY29uZmlnO1xuICAgIH1cblxuICAgIC8vUHVibGljIHByb3BlcnRpZXNcbiAgICAvL0FsbG93IHRoZSBvcHRpb25zIG9iamVjdCB0byBvdmVycmlkZSBnbG9iYWwgZGVmYXVsdHNcbiAgICAkLmV4dGVuZCggdHJ1ZSwgdGhpcywge1xuXG4gICAgICAgIC8vaW50ZXJuYWwgc3RhdGUgYW5kIGRvbSBpZGVudGlmaWVyc1xuICAgICAgICBpZDogICAgICAgICAgICAgb3B0aW9ucy5pZCxcbiAgICAgICAgaGFzaDogICAgICAgICAgIG9wdGlvbnMuaGFzaCB8fCBuZXh0SGFzaCsrLFxuXG4gICAgICAgIC8vZG9tIG5vZGVzXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGFyZW50IGVsZW1lbnQgb2YgdGhpcyBWaWV3ZXIgaW5zdGFuY2UsIHBhc3NlZCBpbiB3aGVuIHRoZSBWaWV3ZXIgd2FzIGNyZWF0ZWQuXG4gICAgICAgICAqIEBtZW1iZXIge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgZWxlbWVudDogICAgICAgIG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBICZsdDtkaXYmZ3Q7IGVsZW1lbnQgKHByb3ZpZGVkIGJ5IHtAbGluayBPcGVuU2VhZHJhZ29uLkNvbnRyb2xEb2NrfSksIHRoZSBiYXNlIGVsZW1lbnQgb2YgdGhpcyBWaWV3ZXIgaW5zdGFuY2UuPGJyPjxicj5cbiAgICAgICAgICogQ2hpbGQgZWxlbWVudCBvZiB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjZWxlbWVudH0uXG4gICAgICAgICAqIEBtZW1iZXIge0VsZW1lbnR9IGNvbnRhaW5lclxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXIjXG4gICAgICAgICAqL1xuICAgICAgICBjb250YWluZXI6ICAgICAgbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgJmx0O2RpdiZndDsgZWxlbWVudCwgdGhlIGVsZW1lbnQgd2hlcmUgdXNlci1pbnB1dCBldmVudHMgYXJlIGhhbmRsZWQgZm9yIHBhbm5pbmcgYW5kIHpvb21pbmcuPGJyPjxicj5cbiAgICAgICAgICogQ2hpbGQgZWxlbWVudCBvZiB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY29udGFpbmVyfSxcbiAgICAgICAgICogcG9zaXRpb25lZCBvbiB0b3Agb2Yge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI2tleWJvYXJkQ29tbWFuZEFyZWF9Ljxicj48YnI+XG4gICAgICAgICAqIFRoZSBwYXJlbnQgb2Yge0BsaW5rIE9wZW5TZWFkcmFnb24uRHJhd2VyI2NhbnZhc30gaW5zdGFuY2VzLlxuICAgICAgICAgKiBAbWVtYmVyIHtFbGVtZW50fSBjYW52YXNcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgY2FudmFzOiAgICAgICAgIG51bGwsXG5cbiAgICAgICAgLy8gT3ZlcmxheXMgbGlzdC4gQW4gb3ZlcmxheSBhbGxvd3MgdG8gYWRkIGh0bWwgb24gdG9wIG9mIHRoZSB2aWV3ZXIuXG4gICAgICAgIG92ZXJsYXlzOiAgICAgICAgICAgW10sXG4gICAgICAgIC8vIENvbnRhaW5lciBpbnNpZGUgdGhlIGNhbnZhcyB3aGVyZSBvdmVybGF5cyBhcmUgZHJhd24uXG4gICAgICAgIG92ZXJsYXlzQ29udGFpbmVyOiAgbnVsbCxcblxuICAgICAgICAvL3ByaXZhdGUgc3RhdGUgcHJvcGVydGllc1xuICAgICAgICBwcmV2aW91c0JvZHk6ICAgW10sXG5cbiAgICAgICAgLy9UaGlzIHdhcyBvcmlnaW5hbGx5IGluaXRpYWxpemVkIGluIHRoZSBjb25zdHJ1Y3RvciBhbmQgc28gY291bGQgbmV2ZXJcbiAgICAgICAgLy9oYXZlIGFueXRoaW5nIGluIGl0LiAgbm93IGl0IGNhbiBiZWNhdXNlIHdlIGFsbG93IGl0IHRvIGJlIHNwZWNpZmllZFxuICAgICAgICAvL2luIHRoZSBvcHRpb25zIGFuZCBpcyBvbmx5IGVtcHR5IGJ5IGRlZmF1bHQgaWYgbm90IHNwZWNpZmllZC4gQWxzb1xuICAgICAgICAvL3RoaXMgYXJyYXkgd2FzIHJldHVybmVkIGZyb20gZ2V0X2NvbnRyb2xzIHdoaWNoIEkgZmluZCBjb25mdXNpbmdcbiAgICAgICAgLy9zaW5jZSB0aGlzIG9iamVjdCBoYXMgYSBjb250cm9scyBwcm9wZXJ0eSB3aGljaCBpcyB0cmVhdGVkIGluIG90aGVyXG4gICAgICAgIC8vZnVuY3Rpb25zIGxpa2UgY2xlYXJDb250cm9scy4gIEknbSByZW1vdmluZyB0aGUgYWNjZXNzb3JzLlxuICAgICAgICBjdXN0b21Db250cm9sczogW10sXG5cbiAgICAgICAgLy9UaGVzZSBhcmUgb3JpZ2luYWxseSBub3QgcGFydCBvcHRpb25zIGJ1dCBkZWNsYXJlZCBhcyBtZW1iZXJzXG4gICAgICAgIC8vaW4gaW5pdGlhbGl6ZS4gIEl0J3Mgc3RpbGwgY29uc2lkZXJlZCBpZGlvbWF0aWMgdG8gcHV0IHRoZW0gaGVyZVxuICAgICAgICBzb3VyY2U6ICAgICAgICAgbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgcmVuZGVyaW5nIG9mIHRpbGVzIGluIHRoZSB2aWV3ZXIuIENyZWF0ZWQgZm9yIGVhY2ggVGlsZVNvdXJjZSBvcGVuZWQuXG4gICAgICAgICAqIEBtZW1iZXIge09wZW5TZWFkcmFnb24uRHJhd2VyfSBkcmF3ZXJcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgZHJhd2VyOiAgICAgICAgICAgICBudWxsLFxuICAgICAgICB3b3JsZDogICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIGNvb3JkaW5hdGUtcmVsYXRlZCBmdW5jdGlvbmFsaXR5IC0gem9vbSwgcGFuLCByb3RhdGlvbiwgZXRjLiBDcmVhdGVkIGZvciBlYWNoIFRpbGVTb3VyY2Ugb3BlbmVkLlxuICAgICAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLlZpZXdwb3J0fSB2aWV3cG9ydFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXIjXG4gICAgICAgICAqL1xuICAgICAgICB2aWV3cG9ydDogICAgICAgbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09wZW5TZWFkcmFnb24uTmF2aWdhdG9yfSBuYXZpZ2F0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyI1xuICAgICAgICAgKi9cbiAgICAgICAgbmF2aWdhdG9yOiAgICAgIG51bGwsXG5cbiAgICAgICAgLy9BIGNvbGxlY3Rpb24gdmlld3BvcnQgaXMgYSBzZXBhcmF0ZSB2aWV3cG9ydCB1c2VkIHRvIHByb3ZpZGVcbiAgICAgICAgLy9zaW11bHRhbmVvdXMgcmVuZGVyaW5nIG9mIHNldHMgb2YgdGlsZXNcbiAgICAgICAgY29sbGVjdGlvblZpZXdwb3J0OiAgICAgbnVsbCxcbiAgICAgICAgY29sbGVjdGlvbkRyYXdlcjogICAgICAgbnVsbCxcblxuICAgICAgICAvL1VJIGltYWdlIHJlc291cmNlc1xuICAgICAgICAvL1RPRE86IHJlbmFtZSBuYXZJbWFnZXMgdG8gdWlJbWFnZXNcbiAgICAgICAgbmF2SW1hZ2VzOiAgICAgIG51bGwsXG5cbiAgICAgICAgLy9pbnRlcmZhY2UgYnV0dG9uIGNvbnRyb2xzXG4gICAgICAgIGJ1dHRvbnM6ICAgICAgICBudWxsLFxuXG4gICAgICAgIC8vVE9ETzogdGhpcyBpcyBkZWZ1bmN0IHNvIHNhZmVseSByZW1vdmUgaXRcbiAgICAgICAgcHJvZmlsZXI6ICAgICAgIG51bGxcblxuICAgIH0sICQuREVGQVVMVF9TRVRUSU5HUywgb3B0aW9ucyApO1xuXG4gICAgaWYgKCB0eXBlb2YoIHRoaXMuaGFzaCkgPT09IFwidW5kZWZpbmVkXCIgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGFzaCBtdXN0IGJlIGRlZmluZWQsIGVpdGhlciBieSBzcGVjaWZ5aW5nIG9wdGlvbnMuaWQgb3Igb3B0aW9ucy5oYXNoLlwiKTtcbiAgICB9XG4gICAgaWYgKCB0eXBlb2YoIFRISVNbIHRoaXMuaGFzaCBdICkgIT09IFwidW5kZWZpbmVkXCIgKSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gdGhyb3cgYW4gZXJyb3IgaGVyZSwgYXMgdGhlIHVzZXIgbWlnaHQgaGF2ZSBkaXNjYXJkZWRcbiAgICAgICAgLy8gdGhlIHByZXZpb3VzIHZpZXdlciB3aXRoIHRoZSBzYW1lIGhhc2ggYW5kIG5vdyB3YW50IHRvIHJlY3JlYXRlIGl0LlxuICAgICAgICAkLmNvbnNvbGUud2FybihcIkhhc2ggXCIgKyB0aGlzLmhhc2ggKyBcIiBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO1xuICAgIH1cblxuICAgIC8vUHJpdmF0ZSBzdGF0ZSBwcm9wZXJ0aWVzXG4gICAgVEhJU1sgdGhpcy5oYXNoIF0gPSB7XG4gICAgICAgIFwiZnNCb3VuZHNEZWx0YVwiOiAgICAgbmV3ICQuUG9pbnQoIDEsIDEgKSxcbiAgICAgICAgXCJwcmV2Q29udGFpbmVyU2l6ZVwiOiBudWxsLFxuICAgICAgICBcImFuaW1hdGluZ1wiOiAgICAgICAgIGZhbHNlLFxuICAgICAgICBcImZvcmNlUmVkcmF3XCI6ICAgICAgIGZhbHNlLFxuICAgICAgICBcIm1vdXNlSW5zaWRlXCI6ICAgICAgIGZhbHNlLFxuICAgICAgICBcImdyb3VwXCI6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIC8vIHdoZXRoZXIgd2Ugc2hvdWxkIGJlIGNvbnRpbnVvdXNseSB6b29taW5nXG4gICAgICAgIFwiem9vbWluZ1wiOiAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIC8vIGhvdyBtdWNoIHdlIHNob3VsZCBiZSBjb250aW51b3VzbHkgem9vbWluZyBieVxuICAgICAgICBcInpvb21GYWN0b3JcIjogICAgICAgIG51bGwsXG4gICAgICAgIFwibGFzdFpvb21UaW1lXCI6ICAgICAgbnVsbCxcbiAgICAgICAgXCJmdWxsUGFnZVwiOiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgXCJvbmZ1bGxzY3JlZW5jaGFuZ2VcIjogbnVsbFxuICAgIH07XG5cbiAgICB0aGlzLl9zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICB0aGlzLl9maXJzdE9wZW4gPSB0cnVlO1xuICAgIHRoaXMuX3VwZGF0ZVJlcXVlc3RJZCA9IG51bGw7XG4gICAgdGhpcy5fbG9hZFF1ZXVlID0gW107XG4gICAgdGhpcy5jdXJyZW50T3ZlcmxheXMgPSBbXTtcblxuICAgIHRoaXMuX2xhc3RTY3JvbGxUaW1lID0gJC5ub3coKTsgLy8gdmFyaWFibGUgdXNlZCB0byBoZWxwIG5vcm1hbGl6ZSB0aGUgc2Nyb2xsIGV2ZW50IHNwZWVkIG9mIGRpZmZlcmVudCBkZXZpY2VzXG5cbiAgICAvL0luaGVyaXQgc29tZSBiZWhhdmlvcnMgYW5kIHByb3BlcnRpZXNcbiAgICAkLkV2ZW50U291cmNlLmNhbGwoIHRoaXMgKTtcblxuICAgIHRoaXMuYWRkSGFuZGxlciggJ29wZW4tZmFpbGVkJywgZnVuY3Rpb24gKCBldmVudCApIHtcbiAgICAgICAgdmFyIG1zZyA9ICQuZ2V0U3RyaW5nKCBcIkVycm9ycy5PcGVuRmFpbGVkXCIsIGV2ZW50LmV2ZW50U291cmNlLCBldmVudC5tZXNzYWdlKTtcbiAgICAgICAgX3RoaXMuX3Nob3dNZXNzYWdlKCBtc2cgKTtcbiAgICB9KTtcblxuICAgICQuQ29udHJvbERvY2suY2FsbCggdGhpcywgb3B0aW9ucyApO1xuXG4gICAgLy9EZWFsIHdpdGggdGlsZSBzb3VyY2VzXG4gICAgaWYgKCB0aGlzLnhtbFBhdGggICl7XG4gICAgICAgIC8vRGVwcmVjYXRlZCBvcHRpb24uICBOb3cgaXQgaXMgcHJlZmVycmVkIHRvIHVzZSB0aGUgdGlsZVNvdXJjZXMgb3B0aW9uXG4gICAgICAgIHRoaXMudGlsZVNvdXJjZXMgPSBbIHRoaXMueG1sUGF0aCBdO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudCAgICAgICAgICAgICAgPSB0aGlzLmVsZW1lbnQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIHRoaXMuaWQgKTtcbiAgICB0aGlzLmNhbnZhcyAgICAgICAgICAgICAgID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcblxuICAgIHRoaXMuY2FudmFzLmNsYXNzTmFtZSA9IFwib3BlbnNlYWRyYWdvbi1jYW52YXNcIjtcbiAgICAoZnVuY3Rpb24oIHN0eWxlICl7XG4gICAgICAgIHN0eWxlLndpZHRoICAgID0gXCIxMDAlXCI7XG4gICAgICAgIHN0eWxlLmhlaWdodCAgID0gXCIxMDAlXCI7XG4gICAgICAgIHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHN0eWxlLnRvcCAgICAgID0gXCIwcHhcIjtcbiAgICAgICAgc3R5bGUubGVmdCAgICAgPSBcIjBweFwiO1xuICAgIH0odGhpcy5jYW52YXMuc3R5bGUpKTtcbiAgICAkLnNldEVsZW1lbnRUb3VjaEFjdGlvbk5vbmUoIHRoaXMuY2FudmFzICk7XG4gICAgaWYgKG9wdGlvbnMudGFiSW5kZXggIT09IFwiXCIpIHtcbiAgICAgICAgdGhpcy5jYW52YXMudGFiSW5kZXggPSAob3B0aW9ucy50YWJJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IG9wdGlvbnMudGFiSW5kZXgpO1xuICAgIH1cblxuICAgIC8vdGhlIGNvbnRhaW5lciBpcyBjcmVhdGVkIHRocm91Z2ggYXBwbHlpbmcgdGhlIENvbnRyb2xEb2NrIGNvbnN0cnVjdG9yIGFib3ZlXG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJvcGVuc2VhZHJhZ29uLWNvbnRhaW5lclwiO1xuICAgIChmdW5jdGlvbiggc3R5bGUgKXtcbiAgICAgICAgc3R5bGUud2lkdGggICAgID0gXCIxMDAlXCI7XG4gICAgICAgIHN0eWxlLmhlaWdodCAgICA9IFwiMTAwJVwiO1xuICAgICAgICBzdHlsZS5wb3NpdGlvbiAgPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIHN0eWxlLm92ZXJmbG93ICA9IFwiaGlkZGVuXCI7XG4gICAgICAgIHN0eWxlLmxlZnQgICAgICA9IFwiMHB4XCI7XG4gICAgICAgIHN0eWxlLnRvcCAgICAgICA9IFwiMHB4XCI7XG4gICAgICAgIHN0eWxlLnRleHRBbGlnbiA9IFwibGVmdFwiOyAgLy8gbmVlZGVkIHRvIHByb3RlY3QgYWdhaW5zdFxuICAgIH0oIHRoaXMuY29udGFpbmVyLnN0eWxlICkpO1xuXG4gICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKCB0aGlzLmNhbnZhcywgdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCApO1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy5jb250YWluZXIgKTtcblxuICAgIC8vVXNlZCBmb3IgdG9nZ2xpbmcgYmV0d2VlbiBmdWxsc2NyZWVuIGFuZCBkZWZhdWx0IGNvbnRhaW5lciBzaXplXG4gICAgLy9UT0RPOiB0aGVzZSBjYW4gYmUgY2xvc3VyZSBwcml2YXRlIGFuZCBzaGFyZWQgYWNyb3NzIFZpZXdlclxuICAgIC8vICAgICAgaW5zdGFuY2VzLlxuICAgIHRoaXMuYm9keVdpZHRoICAgICAgPSBkb2N1bWVudC5ib2R5LnN0eWxlLndpZHRoO1xuICAgIHRoaXMuYm9keUhlaWdodCAgICAgPSBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodDtcbiAgICB0aGlzLmJvZHlPdmVyZmxvdyAgID0gZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICB0aGlzLmRvY092ZXJmbG93ICAgID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93O1xuXG4gICAgdGhpcy5pbm5lclRyYWNrZXIgPSBuZXcgJC5Nb3VzZVRyYWNrZXIoe1xuICAgICAgICBlbGVtZW50OiAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLFxuICAgICAgICBzdGFydERpc2FibGVkOiAgICAgICAgICAgIHRoaXMubW91c2VOYXZFbmFibGVkID8gZmFsc2UgOiB0cnVlLFxuICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6ICAgICAgIHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6ICAgICAgIHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICBkYmxDbGlja1RpbWVUaHJlc2hvbGQ6ICAgIHRoaXMuZGJsQ2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICBkYmxDbGlja0Rpc3RUaHJlc2hvbGQ6ICAgIHRoaXMuZGJsQ2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICBrZXlEb3duSGFuZGxlcjogICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzS2V5RG93biApLFxuICAgICAgICBrZXlIYW5kbGVyOiAgICAgICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzS2V5UHJlc3MgKSxcbiAgICAgICAgY2xpY2tIYW5kbGVyOiAgICAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNhbnZhc0NsaWNrICksXG4gICAgICAgIGRibENsaWNrSGFuZGxlcjogICAgICAgICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNEYmxDbGljayApLFxuICAgICAgICBkcmFnSGFuZGxlcjogICAgICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzRHJhZyApLFxuICAgICAgICBkcmFnRW5kSGFuZGxlcjogICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzRHJhZ0VuZCApLFxuICAgICAgICBlbnRlckhhbmRsZXI6ICAgICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzRW50ZXIgKSxcbiAgICAgICAgZXhpdEhhbmRsZXI6ICAgICAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNhbnZhc0V4aXQgKSxcbiAgICAgICAgcHJlc3NIYW5kbGVyOiAgICAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNhbnZhc1ByZXNzICksXG4gICAgICAgIHJlbGVhc2VIYW5kbGVyOiAgICAgICAgICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNSZWxlYXNlICksXG4gICAgICAgIG5vblByaW1hcnlQcmVzc0hhbmRsZXI6ICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNOb25QcmltYXJ5UHJlc3MgKSxcbiAgICAgICAgbm9uUHJpbWFyeVJlbGVhc2VIYW5kbGVyOiAkLmRlbGVnYXRlKCB0aGlzLCBvbkNhbnZhc05vblByaW1hcnlSZWxlYXNlICksXG4gICAgICAgIHNjcm9sbEhhbmRsZXI6ICAgICAgICAgICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNTY3JvbGwgKSxcbiAgICAgICAgcGluY2hIYW5kbGVyOiAgICAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNhbnZhc1BpbmNoIClcbiAgICB9KTtcblxuICAgIHRoaXMub3V0ZXJUcmFja2VyID0gbmV3ICQuTW91c2VUcmFja2VyKHtcbiAgICAgICAgZWxlbWVudDogICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgc3RhcnREaXNhYmxlZDogICAgICAgICB0aGlzLm1vdXNlTmF2RW5hYmxlZCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiAgICB0aGlzLmNsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgY2xpY2tEaXN0VGhyZXNob2xkOiAgICB0aGlzLmNsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgZGJsQ2xpY2tUaW1lVGhyZXNob2xkOiB0aGlzLmRibENsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgZGJsQ2xpY2tEaXN0VGhyZXNob2xkOiB0aGlzLmRibENsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgZW50ZXJIYW5kbGVyOiAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNvbnRhaW5lckVudGVyICksXG4gICAgICAgIGV4aXRIYW5kbGVyOiAgICAgICAgICAgJC5kZWxlZ2F0ZSggdGhpcywgb25Db250YWluZXJFeGl0IClcbiAgICB9KTtcblxuICAgIGlmKCB0aGlzLnRvb2xiYXIgKXtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3ICQuQ29udHJvbERvY2soeyBlbGVtZW50OiB0aGlzLnRvb2xiYXIgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kU3RhbmRhcmRDb250cm9scygpO1xuXG4gICAgVEhJU1sgdGhpcy5oYXNoIF0ucHJldkNvbnRhaW5lclNpemUgPSBfZ2V0U2FmZUVsZW1TaXplKCB0aGlzLmNvbnRhaW5lciApO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSB3b3JsZFxuICAgIHRoaXMud29ybGQgPSBuZXcgJC5Xb3JsZCh7XG4gICAgICAgIHZpZXdlcjogdGhpc1xuICAgIH0pO1xuXG4gICAgdGhpcy53b3JsZC5hZGRIYW5kbGVyKCdhZGQtaXRlbScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbWFpbnRhaW4gdGhlIHNvdXJjZSBwcm9wZXJ0eVxuICAgICAgICBfdGhpcy5zb3VyY2UgPSBfdGhpcy53b3JsZC5nZXRJdGVtQXQoMCkuc291cmNlO1xuXG4gICAgICAgIFRISVNbIF90aGlzLmhhc2ggXS5mb3JjZVJlZHJhdyA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5fdXBkYXRlUmVxdWVzdElkKSB7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlUmVxdWVzdElkID0gc2NoZWR1bGVVcGRhdGUoIF90aGlzLCB1cGRhdGVNdWx0aSApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLndvcmxkLmFkZEhhbmRsZXIoJ3JlbW92ZS1pdGVtJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBtYWludGFpbiB0aGUgc291cmNlIHByb3BlcnR5XG4gICAgICAgIGlmIChfdGhpcy53b3JsZC5nZXRJdGVtQ291bnQoKSkge1xuICAgICAgICAgICAgX3RoaXMuc291cmNlID0gX3RoaXMud29ybGQuZ2V0SXRlbUF0KDApLnNvdXJjZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBUSElTWyBfdGhpcy5oYXNoIF0uZm9yY2VSZWRyYXcgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgdGhpcy53b3JsZC5hZGRIYW5kbGVyKCdtZXRyaWNzLWNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpcy52aWV3cG9ydCkge1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQuX3NldENvbnRlbnRCb3VuZHMoX3RoaXMud29ybGQuZ2V0SG9tZUJvdW5kcygpLCBfdGhpcy53b3JsZC5nZXRDb250ZW50RmFjdG9yKCkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLndvcmxkLmFkZEhhbmRsZXIoJ2l0ZW0taW5kZXgtY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBtYWludGFpbiB0aGUgc291cmNlIHByb3BlcnR5XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IF90aGlzLndvcmxkLmdldEl0ZW1BdCgwKS5zb3VyY2U7XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHZpZXdwb3J0XG4gICAgdGhpcy52aWV3cG9ydCA9IG5ldyAkLlZpZXdwb3J0KHtcbiAgICAgICAgY29udGFpbmVyU2l6ZTogICAgICBUSElTWyB0aGlzLmhhc2ggXS5wcmV2Q29udGFpbmVyU2l6ZSxcbiAgICAgICAgc3ByaW5nU3RpZmZuZXNzOiAgICB0aGlzLnNwcmluZ1N0aWZmbmVzcyxcbiAgICAgICAgYW5pbWF0aW9uVGltZTogICAgICB0aGlzLmFuaW1hdGlvblRpbWUsXG4gICAgICAgIG1pblpvb21JbWFnZVJhdGlvOiAgdGhpcy5taW5ab29tSW1hZ2VSYXRpbyxcbiAgICAgICAgbWF4Wm9vbVBpeGVsUmF0aW86ICB0aGlzLm1heFpvb21QaXhlbFJhdGlvLFxuICAgICAgICB2aXNpYmlsaXR5UmF0aW86ICAgIHRoaXMudmlzaWJpbGl0eVJhdGlvLFxuICAgICAgICB3cmFwSG9yaXpvbnRhbDogICAgIHRoaXMud3JhcEhvcml6b250YWwsXG4gICAgICAgIHdyYXBWZXJ0aWNhbDogICAgICAgdGhpcy53cmFwVmVydGljYWwsXG4gICAgICAgIGRlZmF1bHRab29tTGV2ZWw6ICAgdGhpcy5kZWZhdWx0Wm9vbUxldmVsLFxuICAgICAgICBtaW5ab29tTGV2ZWw6ICAgICAgIHRoaXMubWluWm9vbUxldmVsLFxuICAgICAgICBtYXhab29tTGV2ZWw6ICAgICAgIHRoaXMubWF4Wm9vbUxldmVsLFxuICAgICAgICB2aWV3ZXI6ICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgIGRlZ3JlZXM6ICAgICAgICAgICAgdGhpcy5kZWdyZWVzLFxuICAgICAgICBuYXZpZ2F0b3JSb3RhdGU6ICAgIHRoaXMubmF2aWdhdG9yUm90YXRlLFxuICAgICAgICBob21lRmlsbHNWaWV3ZXI6ICAgIHRoaXMuaG9tZUZpbGxzVmlld2VyLFxuICAgICAgICBtYXJnaW5zOiAgICAgICAgICAgIHRoaXMudmlld3BvcnRNYXJnaW5zXG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZXdwb3J0Ll9zZXRDb250ZW50Qm91bmRzKHRoaXMud29ybGQuZ2V0SG9tZUJvdW5kcygpLCB0aGlzLndvcmxkLmdldENvbnRlbnRGYWN0b3IoKSk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIGltYWdlIGxvYWRlclxuICAgIHRoaXMuaW1hZ2VMb2FkZXIgPSBuZXcgJC5JbWFnZUxvYWRlcih7XG4gICAgICAgIGpvYkxpbWl0OiB0aGlzLmltYWdlTG9hZGVyTGltaXRcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSB0aGUgdGlsZSBjYWNoZVxuICAgIHRoaXMudGlsZUNhY2hlID0gbmV3ICQuVGlsZUNhY2hlKHtcbiAgICAgICAgbWF4SW1hZ2VDYWNoZUNvdW50OiB0aGlzLm1heEltYWdlQ2FjaGVDb3VudFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBkcmF3ZXJcbiAgICB0aGlzLmRyYXdlciA9IG5ldyAkLkRyYXdlcih7XG4gICAgICAgIHZpZXdlcjogICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgdmlld3BvcnQ6ICAgICAgICAgICB0aGlzLnZpZXdwb3J0LFxuICAgICAgICBlbGVtZW50OiAgICAgICAgICAgIHRoaXMuY2FudmFzLFxuICAgICAgICBkZWJ1Z0dyaWRDb2xvcjogICAgIHRoaXMuZGVidWdHcmlkQ29sb3JcbiAgICB9KTtcblxuICAgIC8vIE92ZXJsYXkgY29udGFpbmVyXG4gICAgdGhpcy5vdmVybGF5c0NvbnRhaW5lciAgICA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCBcImRpdlwiICk7XG4gICAgdGhpcy5jYW52YXMuYXBwZW5kQ2hpbGQoIHRoaXMub3ZlcmxheXNDb250YWluZXIgKTtcblxuICAgIC8vIE5vdyB0aGF0IHdlIGhhdmUgYSBkcmF3ZXIsIHNlZSBpZiBpdCBzdXBwb3J0cyByb3RhdGUuIElmIG5vdCB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgcm90YXRlIGJ1dHRvbnNcbiAgICBpZiAoIXRoaXMuZHJhd2VyLmNhblJvdGF0ZSgpKSB7XG4gICAgICAgIC8vIERpc2FibGUvcmVtb3ZlIHRoZSByb3RhdGUgbGVmdC9yaWdodCBidXR0b25zIHNpbmNlIHRoZXkgYXJlbid0IHN1cHBvcnRlZFxuICAgICAgICBpZiAodGhpcy5yb3RhdGVMZWZ0KSB7XG4gICAgICAgICAgICBpID0gdGhpcy5idXR0b25zLmJ1dHRvbnMuaW5kZXhPZih0aGlzLnJvdGF0ZUxlZnQpO1xuICAgICAgICAgICAgdGhpcy5idXR0b25zLmJ1dHRvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgdGhpcy5idXR0b25zLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5yb3RhdGVMZWZ0LmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJvdGF0ZVJpZ2h0KSB7XG4gICAgICAgICAgICBpID0gdGhpcy5idXR0b25zLmJ1dHRvbnMuaW5kZXhPZih0aGlzLnJvdGF0ZVJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5idXR0b25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMucm90YXRlUmlnaHQuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL0luc3RhbnRpYXRlIGEgbmF2aWdhdG9yIGlmIGNvbmZpZ3VyZWRcbiAgICBpZiAoIHRoaXMuc2hvd05hdmlnYXRvcil7XG4gICAgICAgIHRoaXMubmF2aWdhdG9yID0gbmV3ICQuTmF2aWdhdG9yKHtcbiAgICAgICAgICAgIGlkOiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvcklkLFxuICAgICAgICAgICAgcG9zaXRpb246ICAgICAgICAgIHRoaXMubmF2aWdhdG9yUG9zaXRpb24sXG4gICAgICAgICAgICBzaXplUmF0aW86ICAgICAgICAgdGhpcy5uYXZpZ2F0b3JTaXplUmF0aW8sXG4gICAgICAgICAgICBtYWludGFpblNpemVSYXRpbzogdGhpcy5uYXZpZ2F0b3JNYWludGFpblNpemVSYXRpbyxcbiAgICAgICAgICAgIHRvcDogICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvclRvcCxcbiAgICAgICAgICAgIGxlZnQ6ICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvckxlZnQsXG4gICAgICAgICAgICB3aWR0aDogICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3JXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogICAgICAgICAgICB0aGlzLm5hdmlnYXRvckhlaWdodCxcbiAgICAgICAgICAgIGF1dG9SZXNpemU6ICAgICAgICB0aGlzLm5hdmlnYXRvckF1dG9SZXNpemUsXG4gICAgICAgICAgICBhdXRvRmFkZTogICAgICAgICAgdGhpcy5uYXZpZ2F0b3JBdXRvRmFkZSxcbiAgICAgICAgICAgIHByZWZpeFVybDogICAgICAgICB0aGlzLnByZWZpeFVybCxcbiAgICAgICAgICAgIHZpZXdlcjogICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmF2aWdhdG9yUm90YXRlOiAgIHRoaXMubmF2aWdhdG9yUm90YXRlLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW5Qb2xpY3k6IHRoaXMuY3Jvc3NPcmlnaW5Qb2xpY3lcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gU2VxdWVuY2UgbW9kZVxuICAgIGlmICh0aGlzLnNlcXVlbmNlTW9kZSkge1xuICAgICAgICB0aGlzLmJpbmRTZXF1ZW5jZUNvbnRyb2xzKCk7XG4gICAgfVxuXG4gICAgLy8gT3BlbiBpbml0aWFsIHRpbGVzb3VyY2VzXG4gICAgaWYgKHRoaXMudGlsZVNvdXJjZXMpIHtcbiAgICAgICAgdGhpcy5vcGVuKCB0aGlzLnRpbGVTb3VyY2VzICk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGN1c3RvbSBjb250cm9sc1xuICAgIGZvciAoIGkgPSAwOyBpIDwgdGhpcy5jdXN0b21Db250cm9scy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdGhpcy5hZGRDb250cm9sKFxuICAgICAgICAgICAgdGhpcy5jdXN0b21Db250cm9sc1sgaSBdLmlkLFxuICAgICAgICAgICAge2FuY2hvcjogdGhpcy5jdXN0b21Db250cm9sc1sgaSBdLmFuY2hvcn1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsIGZhZGUgb3V0XG4gICAgJC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZ1bmN0aW9uKCl7XG4gICAgICAgIGJlZ2luQ29udHJvbHNBdXRvSGlkZSggX3RoaXMgKTtcbiAgICB9ICk7XG59O1xuXG4kLmV4dGVuZCggJC5WaWV3ZXIucHJvdG90eXBlLCAkLkV2ZW50U291cmNlLnByb3RvdHlwZSwgJC5Db250cm9sRG9jay5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5WaWV3ZXIucHJvdG90eXBlICove1xuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzT3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLndvcmxkLmdldEl0ZW1Db3VudCgpO1xuICAgIH0sXG5cbiAgICAvLyBkZXByZWNhdGVkXG4gICAgb3BlbkR6aTogZnVuY3Rpb24gKCBkemkgKSB7XG4gICAgICAgICQuY29uc29sZS5lcnJvciggXCJbVmlld2VyLm9wZW5EemldIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDsgdXNlIFZpZXdlci5vcGVuKCkgaW5zdGVhZC5cIiApO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuKCBkemkgKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIG9wZW5UaWxlU291cmNlOiBmdW5jdGlvbiAoIHRpbGVTb3VyY2UgKSB7XG4gICAgICAgICQuY29uc29sZS5lcnJvciggXCJbVmlld2VyLm9wZW5UaWxlU291cmNlXSB0aGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQ7IHVzZSBWaWV3ZXIub3BlbigpIGluc3RlYWQuXCIgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbiggdGlsZVNvdXJjZSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBPcGVuIHRpbGVkIGltYWdlcyBpbnRvIHRoZSB2aWV3ZXIsIGNsb3NpbmcgYW55IG90aGVycy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xPYmplY3R8RnVuY3Rpb259IHRpbGVTb3VyY2VzIC0gVGhpcyBjYW4gYmUgYSBUaWxlZEltYWdlXG4gICAgICogc3BlY2lmaWVyLCBhIFRpbGVTb3VyY2Ugc3BlY2lmaWVyLCBvciBhbiBhcnJheSBvZiBlaXRoZXIuIEEgVGlsZWRJbWFnZSBzcGVjaWZpZXJcbiAgICAgKiBpcyB0aGUgc2FtZSBhcyB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgZm9yIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNhZGRUaWxlZEltYWdlfSxcbiAgICAgKiBleGNlcHQgZm9yIHRoZSBpbmRleCBwcm9wZXJ0eTsgaW1hZ2VzIGFyZSBhZGRlZCBpbiBzZXF1ZW5jZS5cbiAgICAgKiBBIFRpbGVTb3VyY2Ugc3BlY2lmaWVyIGlzIGFueXRoaW5nIHlvdSBjb3VsZCBwYXNzIGFzIHRoZSB0aWxlU291cmNlIHByb3BlcnR5XG4gICAgICogb2YgdGhlIG9wdGlvbnMgcGFyYW1ldGVyIGZvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjYWRkVGlsZWRJbWFnZX0uXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6b3BlblxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpvcGVuLWZhaWxlZFxuICAgICAqL1xuICAgIG9wZW46IGZ1bmN0aW9uICh0aWxlU291cmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcblxuICAgICAgICBpZiAoIXRpbGVTb3VyY2VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZU1vZGUgJiYgJC5pc0FycmF5KHRpbGVTb3VyY2VzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVmZXJlbmNlU3RyaXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVN0cmlwLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVN0cmlwID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50aWxlU291cmNlcyA9IHRpbGVTb3VyY2VzO1xuICAgICAgICAgICAgdGhpcy5fc2VxdWVuY2VJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMudGlsZVNvdXJjZXMubGVuZ3RoIC0gMSwgdGhpcy5pbml0aWFsUGFnZSkpO1xuICAgICAgICAgICAgaWYgKHRoaXMudGlsZVNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuKHRoaXMudGlsZVNvdXJjZXNbdGhpcy5fc2VxdWVuY2VJbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnNob3dSZWZlcmVuY2VTdHJpcCApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVN0cmlwID0gbmV3ICQuUmVmZXJlbmNlU3RyaXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICAgICAgICAgIHRoaXMucmVmZXJlbmNlU3RyaXBFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICAgIHRoaXMucmVmZXJlbmNlU3RyaXBQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVSYXRpbzogICB0aGlzLnJlZmVyZW5jZVN0cmlwU2l6ZVJhdGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiAgICAgIHRoaXMucmVmZXJlbmNlU3RyaXBTY3JvbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICAgICAgdGhpcy5yZWZlcmVuY2VTdHJpcEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAgICAgICB0aGlzLnJlZmVyZW5jZVN0cmlwV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWxlU291cmNlczogdGhpcy50aWxlU291cmNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeFVybDogICB0aGlzLnByZWZpeFVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdlcjogICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2VxdWVuY2VCdXR0b25zKCB0aGlzLl9zZXF1ZW5jZUluZGV4ICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISQuaXNBcnJheSh0aWxlU291cmNlcykpIHtcbiAgICAgICAgICAgIHRpbGVTb3VyY2VzID0gW3RpbGVTb3VyY2VzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGlsZVNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vcGVuaW5nID0gdHJ1ZTtcblxuICAgICAgICB2YXIgZXhwZWN0ZWQgPSB0aWxlU291cmNlcy5sZW5ndGg7XG4gICAgICAgIHZhciBzdWNjZXNzZXMgPSAwO1xuICAgICAgICB2YXIgZmFpbHVyZXMgPSAwO1xuICAgICAgICB2YXIgZmFpbEV2ZW50O1xuXG4gICAgICAgIHZhciBjaGVja0NvbXBsZXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzdWNjZXNzZXMgKyBmYWlsdXJlcyA9PT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fZmlyc3RPcGVuIHx8ICFfdGhpcy5wcmVzZXJ2ZVZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy52aWV3cG9ydC5nb0hvbWUoIHRydWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdwb3J0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZpcnN0T3BlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aWxlU291cmNlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS50aWxlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2UudGlsZVNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdsb2JhbCBvdmVybGF5c1xuICAgICAgICAgICAgICAgICAgICBpZiggX3RoaXMub3ZlcmxheXMgJiYgIV90aGlzLnByZXNlcnZlT3ZlcmxheXMgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IF90aGlzLm92ZXJsYXlzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPdmVybGF5c1sgaSBdID0gZ2V0T3ZlcmxheU9iamVjdCggX3RoaXMsIF90aGlzLm92ZXJsYXlzWyBpIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcmF3T3ZlcmxheXMoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29wZW5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIHZpZXdlciBoYXMgb3BlbmVkIGFuZCBsb2FkZWQgb25lIG9yIG1vcmUgVGlsZVNvdXJjZXMuXG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBvcGVuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2V9IHNvdXJjZSAtIFRoZSB0aWxlIHNvdXJjZSB0aGF0IHdhcyBvcGVuZWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHdoYXQgaWYgdGhlcmUgYXJlIG11bHRpcGxlIHNvdXJjZXM/XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoICdvcGVuJywgeyBzb3VyY2U6IHNvdXJjZSB9ICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29wZW5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGxvYWRpbmcgYSBUaWxlU291cmNlLlxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgb3Blbi1mYWlsZWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gbWVzc2FnZSAtIEluZm9ybWF0aW9uIGFib3V0IHdoYXQgZmFpbGVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gc291cmNlIC0gVGhlIHRpbGUgc291cmNlIHRoYXQgZmFpbGVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yYWlzZUV2ZW50KCAnb3Blbi1mYWlsZWQnLCBmYWlsRXZlbnQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRvT25lID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCEkLmlzUGxhaW5PYmplY3Qob3B0aW9ucykgfHwgIW9wdGlvbnMudGlsZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGVTb3VyY2U6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgJC5jb25zb2xlLmVycm9yKCdbVmlld2VyLm9wZW5dIHNldHRpbmcgaW5kZXhlcyBoZXJlIGlzIG5vdCBzdXBwb3J0ZWQ7IHVzZSBhZGRUaWxlZEltYWdlIGluc3RlYWQnKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5pbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29sbGVjdGlvbkltbWVkaWF0ZWx5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbGxlY3Rpb25JbW1lZGlhdGVseSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NlcysrO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogbm93IHRoYXQgb3B0aW9ucyBoYXMgb3RoZXIgdGhpbmdzIGJlc2lkZXMgdGlsZVNvdXJjZSwgdGhlIG92ZXJsYXlzXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIHByb2JhYmx5IGJlIGF0IHRoZSBvcHRpb25zIGxldmVsLCBub3QgdGhlIHRpbGVTb3VyY2UgbGV2ZWwuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudGlsZVNvdXJjZS5vdmVybGF5cykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMudGlsZVNvdXJjZS5vdmVybGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkT3ZlcmxheShvcHRpb25zLnRpbGVTb3VyY2Uub3ZlcmxheXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN1Y2Nlc3MoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGlvbigpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsRXJyb3IgPSBvcHRpb25zLmVycm9yO1xuICAgICAgICAgICAgb3B0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZXMrKztcblxuICAgICAgICAgICAgICAgIGlmICghZmFpbEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxFdmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGlvbigpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX3RoaXMuYWRkVGlsZWRJbWFnZShvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUaWxlU291cmNlc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRpbGVTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkb09uZSh0aWxlU291cmNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpjbG9zZVxuICAgICAqL1xuICAgIGNsb3NlOiBmdW5jdGlvbiAoICkge1xuICAgICAgICBpZiAoICFUSElTWyB0aGlzLmhhc2ggXSApIHtcbiAgICAgICAgICAgIC8vdGhpcyB2aWV3ZXIgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWQ6IHJldHVybmluZyBpbW1lZGlhdGVseVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vcGVuaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCB0aGlzLm5hdmlnYXRvciApIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yLmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggISB0aGlzLnByZXNlcnZlT3ZlcmxheXMpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJPdmVybGF5cygpO1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5c0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMud29ybGQucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuaW1hZ2VMb2FkZXIuY2xlYXIoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIHZpZXdlciBpcyBjbG9zZWQgKHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2xvc2V9KS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IGNsb3NlXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAnY2xvc2UnICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gZGVzdHJveSB0aGUgdmlld2VyIGFuZCBjbGVhbiB1cCBldmVyeXRoaW5nIGNyZWF0ZWQgYnkgT3BlblNlYWRyYWdvbi5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogdmFyIHZpZXdlciA9IE9wZW5TZWFkcmFnb24oe1xuICAgICAqICAgWy4uLl1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGUgdmlld2VyOlxuICAgICAqIHZpZXdlci5kZXN0cm95KCk7XG4gICAgICogdmlld2VyID0gbnVsbDsgLy9pbXBvcnRhbnRcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCApIHtcbiAgICAgICAgaWYgKCAhVEhJU1sgdGhpcy5oYXNoIF0gKSB7XG4gICAgICAgICAgICAvL3RoaXMgdmlld2VyIGhhcyBhbHJlYWR5IGJlZW4gZGVzdHJveWVkOiByZXR1cm5pbmcgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcblxuICAgICAgICB0aGlzLmNsZWFyT3ZlcmxheXMoKTtcbiAgICAgICAgdGhpcy5vdmVybGF5c0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgIC8vVE9ETzogaW1wbGVtZW50IHRoaXMuLi5cbiAgICAgICAgLy90aGlzLnVuYmluZFNlcXVlbmNlQ29udHJvbHMoKVxuICAgICAgICAvL3RoaXMudW5iaW5kU3RhbmRhcmRDb250cm9scygpXG5cbiAgICAgICAgaWYgKHRoaXMucmVmZXJlbmNlU3RyaXApIHtcbiAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlU3RyaXAuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VTdHJpcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoaXMuX3VwZGF0ZVJlcXVlc3RJZCAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgICQuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRoaXMuX3VwZGF0ZVJlcXVlc3RJZCApO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmVxdWVzdElkID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdGhpcy5kcmF3ZXIgKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbW92ZUFsbEhhbmRsZXJzKCk7XG5cbiAgICAgICAgLy8gR28gdGhyb3VnaCB0b3AgZWxlbWVudCAocGFzc2VkIHRvIHVzKSBhbmQgcmVtb3ZlIGFsbCBjaGlsZHJlblxuICAgICAgICAvLyBVc2UgcmVtb3ZlQ2hpbGQgdG8gbWFrZSBzdXJlIGl0IGhhbmRsZXMgU1ZHIG9yIGFueSBub24taHRtbFxuICAgICAgICAvLyBhbHNvIGl0IHBlcmZvcm1zIGJldHRlciAtIGh0dHA6Ly9qc3BlcmYuY29tL2lubmVyaHRtbC12cy1yZW1vdmVjaGlsZC8xNVxuICAgICAgICBpZiAodGhpcy5lbGVtZW50KXtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IHRoZSBtb3VzZSB0cmFja2Vyc1xuICAgICAgICBpZiAodGhpcy5pbm5lclRyYWNrZXIpe1xuICAgICAgICAgICAgdGhpcy5pbm5lclRyYWNrZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm91dGVyVHJhY2tlcil7XG4gICAgICAgICAgICB0aGlzLm91dGVyVHJhY2tlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICBUSElTWyB0aGlzLmhhc2ggXSA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBUSElTWyB0aGlzLmhhc2ggXTtcblxuICAgICAgICAvLyBjbGVhciBhbGwgb3VyIHJlZmVyZW5jZXMgdG8gZG9tIG9iamVjdHNcbiAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG5cbiAgICAgICAgLy8gY2xlYXIgb3VyIHJlZmVyZW5jZSB0byB0aGUgbWFpbiBlbGVtZW50IC0gdGhleSB3aWxsIG5lZWQgdG8gcGFzcyBpdCBpbiBhZ2FpbiwgY3JlYXRpbmcgYSBuZXcgdmlld2VyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNNb3VzZU5hdkVuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJUcmFja2VyLmlzVHJhY2tpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkIC0gdHJ1ZSB0byBlbmFibGUsIGZhbHNlIHRvIGRpc2FibGVcbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDptb3VzZS1lbmFibGVkXG4gICAgICovXG4gICAgc2V0TW91c2VOYXZFbmFibGVkOiBmdW5jdGlvbiggZW5hYmxlZCApe1xuICAgICAgICB0aGlzLmlubmVyVHJhY2tlci5zZXRUcmFja2luZyggZW5hYmxlZCApO1xuICAgICAgICB0aGlzLm91dGVyVHJhY2tlci5zZXRUcmFja2luZyggZW5hYmxlZCApO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gbW91c2UvdG91Y2ggbmF2aWdhdGlvbiBpcyBlbmFibGVkIG9yIGRpc2FibGVkIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3NldE1vdXNlTmF2RW5hYmxlZH0pLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgbW91c2UtZW5hYmxlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJhaXNlRXZlbnQoICdtb3VzZS1lbmFibGVkJywgeyBlbmFibGVkOiBlbmFibGVkIH0gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBhcmVDb250cm9sc0VuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuYWJsZWQgPSB0aGlzLmNvbnRyb2xzLmxlbmd0aCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciggaSA9IDA7IGkgPCB0aGlzLmNvbnRyb2xzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICBlbmFibGVkID0gZW5hYmxlZCAmJiB0aGlzLmNvbnRyb2xzWyBpIF0uaXNWaXNpYmlsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmFibGVkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFNob3dzIG9yIGhpZGVzIHRoZSBjb250cm9scyAoZS5nLiB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIGJ1dHRvbnMpLlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB0cnVlIHRvIHNob3csIGZhbHNlIHRvIGhpZGUuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6Y29udHJvbHMtZW5hYmxlZFxuICAgICAqL1xuICAgIHNldENvbnRyb2xzRW5hYmxlZDogZnVuY3Rpb24oIGVuYWJsZWQgKSB7XG4gICAgICAgIGlmKCBlbmFibGVkICl7XG4gICAgICAgICAgICBhYm9ydENvbnRyb2xzQXV0b0hpZGUoIHRoaXMgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJlZ2luQ29udHJvbHNBdXRvSGlkZSggdGhpcyApO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgbmF2aWdhdGlvbiBjb250cm9scyBhcmUgc2hvd24gb3IgaGlkZGVuIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3NldENvbnRyb2xzRW5hYmxlZH0pLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgY29udHJvbHMtZW5hYmxlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJhaXNlRXZlbnQoICdjb250cm9scy1lbmFibGVkJywgeyBlbmFibGVkOiBlbmFibGVkIH0gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNGdWxsUGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gVEhJU1sgdGhpcy5oYXNoIF0uZnVsbFBhZ2U7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGZ1bGwgcGFnZSBtb2RlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnVsbFBhZ2VcbiAgICAgKiAgICAgIElmIHRydWUsIGVudGVyIGZ1bGwgcGFnZSBtb2RlLiAgSWYgZmFsc2UsIGV4aXQgZnVsbCBwYWdlIG1vZGUuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6cHJlLWZ1bGwtcGFnZVxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpmdWxsLXBhZ2VcbiAgICAgKi9cbiAgICBzZXRGdWxsUGFnZTogZnVuY3Rpb24oIGZ1bGxQYWdlICkge1xuXG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGJvZHkuc3R5bGUsXG4gICAgICAgICAgICBkb2NTdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGhhc2gsXG4gICAgICAgICAgICBub2RlcyxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy9kb250IGJvdGhlciBtb2RpZnlpbmcgdGhlIERPTSBpZiB3ZSBhcmUgYWxyZWFkeSBpbiBmdWxsIHBhZ2UgbW9kZS5cbiAgICAgICAgaWYgKCBmdWxsUGFnZSA9PSB0aGlzLmlzRnVsbFBhZ2UoKSApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZ1bGxQYWdlRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgZnVsbFBhZ2U6IGZ1bGxQYWdlLFxuICAgICAgICAgICAgcHJldmVudERlZmF1bHRBY3Rpb246IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgdmlld2VyIGlzIGFib3V0IHRvIGNoYW5nZSB0by9mcm9tIGZ1bGwtcGFnZSBtb2RlIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3NldEZ1bGxQYWdlfSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBwcmUtZnVsbC1wYWdlXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBmdWxsUGFnZSAtIFRydWUgaWYgZW50ZXJpbmcgZnVsbC1wYWdlIG1vZGUsIGZhbHNlIGlmIGV4aXRpbmcgZnVsbC1wYWdlIG1vZGUuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcHJldmVudERlZmF1bHRBY3Rpb24gLSBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IGZ1bGwtcGFnZSBtb2RlIGNoYW5nZS4gRGVmYXVsdDogZmFsc2UuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ3ByZS1mdWxsLXBhZ2UnLCBmdWxsUGFnZUV2ZW50QXJncyApO1xuICAgICAgICBpZiAoIGZ1bGxQYWdlRXZlbnRBcmdzLnByZXZlbnREZWZhdWx0QWN0aW9uICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGZ1bGxQYWdlICkge1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRTaXplID0gJC5nZXRFbGVtZW50U2l6ZSggdGhpcy5lbGVtZW50ICk7XG4gICAgICAgICAgICB0aGlzLnBhZ2VTY3JvbGwgPSAkLmdldFBhZ2VTY3JvbGwoKTtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50TWFyZ2luID0gdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbjtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFBhZGRpbmcgPSB0aGlzLmVsZW1lbnQuc3R5bGUucGFkZGluZztcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gXCIwXCI7XG5cbiAgICAgICAgICAgIHRoaXMuYm9keU1hcmdpbiA9IGJvZHlTdHlsZS5tYXJnaW47XG4gICAgICAgICAgICB0aGlzLmRvY01hcmdpbiA9IGRvY1N0eWxlLm1hcmdpbjtcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgICAgICAgIGRvY1N0eWxlLm1hcmdpbiA9IFwiMFwiO1xuXG4gICAgICAgICAgICB0aGlzLmJvZHlQYWRkaW5nID0gYm9keVN0eWxlLnBhZGRpbmc7XG4gICAgICAgICAgICB0aGlzLmRvY1BhZGRpbmcgPSBkb2NTdHlsZS5wYWRkaW5nO1xuICAgICAgICAgICAgYm9keVN0eWxlLnBhZGRpbmcgPSBcIjBcIjtcbiAgICAgICAgICAgIGRvY1N0eWxlLnBhZGRpbmcgPSBcIjBcIjtcblxuICAgICAgICAgICAgdGhpcy5ib2R5V2lkdGggPSBib2R5U3R5bGUud2lkdGg7XG4gICAgICAgICAgICB0aGlzLmRvY1dpZHRoID0gZG9jU3R5bGUud2lkdGg7XG4gICAgICAgICAgICBib2R5U3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIGRvY1N0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cbiAgICAgICAgICAgIHRoaXMuYm9keUhlaWdodCA9IGJvZHlTdHlsZS5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmRvY0hlaWdodCA9IGRvY1N0eWxlLmhlaWdodDtcbiAgICAgICAgICAgIGJvZHlTdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIGRvY1N0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG4gICAgICAgICAgICAvL3doZW4gZW50ZXJpbmcgZnVsbCBzY3JlZW4gb24gdGhlIGlwYWQgaXQgd2FzbnQgc3VmZmljaWVudCB0byBsZWF2ZVxuICAgICAgICAgICAgLy90aGUgYm9keSBpbnRhY3QgYXMgb25seSBvbmx5IHRoZSB0b3AgaGFsZiBvZiB0aGUgc2NyZWVuIHdvdWxkXG4gICAgICAgICAgICAvL3Jlc3BvbmQgdG8gdG91Y2ggZXZlbnRzIG9uIHRoZSBjYW52YXMsIHdoaWxlIHRoZSBib3R0b20gaGFsZiB0cmVhdGVkXG4gICAgICAgICAgICAvL3RoZW0gYXMgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBib2R5LiAgVGh1cyB3ZSByZW1vdmUgYW5kIHN0b3JlXG4gICAgICAgICAgICAvL3RoZSBib2RpZXMgZWxlbWVudHMgYW5kIHJlcGxhY2UgdGhlbSB3aGVuIHdlIGxlYXZlIGZ1bGwgc2NyZWVuLlxuICAgICAgICAgICAgdGhpcy5wcmV2aW91c0JvZHkgPSBbXTtcbiAgICAgICAgICAgIFRISVNbIHRoaXMuaGFzaCBdLnByZXZFbGVtZW50UGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS5wcmV2TmV4dFNpYmxpbmcgPSB0aGlzLmVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS5wcmV2RWxlbWVudFdpZHRoID0gdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoO1xuICAgICAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0ucHJldkVsZW1lbnRIZWlnaHQgPSB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0O1xuICAgICAgICAgICAgbm9kZXMgPSBib2R5LmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBub2RlczsgaSsrICkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNCb2R5LnB1c2goIGJvZHkuY2hpbGROb2Rlc1sgMCBdICk7XG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZCggYm9keS5jaGlsZE5vZGVzWyAwIF0gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9JZiB3ZSd2ZSBnb3QgYSB0b29sYmFyLCB3ZSBuZWVkIHRvIGVuYWJsZSB0aGUgdXNlciB0byB1c2UgY3NzIHRvXG4gICAgICAgICAgICAvL3ByZXNlcnZlIGl0IGluIGZ1bGxwYWdlIG1vZGVcbiAgICAgICAgICAgIGlmICggdGhpcy50b29sYmFyICYmIHRoaXMudG9vbGJhci5lbGVtZW50ICkge1xuICAgICAgICAgICAgICAgIC8vc2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgcGFyZW50IHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuICAgICAgICAgICAgICAgIC8vaW4gdGhlIGxvbmcgcnVuIHdlIG5lZWQgYSBiZXR0ZXIgc3RyYXRlZ3lcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXIucGFyZW50Tm9kZSA9IHRoaXMudG9vbGJhci5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sYmFyLm5leHRTaWJsaW5nID0gdGhpcy50b29sYmFyLmVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZCggdGhpcy50b29sYmFyLmVsZW1lbnQgKTtcblxuICAgICAgICAgICAgICAgIC8vTWFrZSBzdXJlIHRoZSB1c2VyIGhhcyBzb21lIGFiaWxpdHkgdG8gc3R5bGUgdGhlIHRvb2xiYXIgYmFzZWRcbiAgICAgICAgICAgICAgICAvL29uIHRoZSBtb2RlXG4gICAgICAgICAgICAgICAgJC5hZGRDbGFzcyggdGhpcy50b29sYmFyLmVsZW1lbnQsICdmdWxscGFnZScgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5hZGRDbGFzcyggdGhpcy5lbGVtZW50LCAnZnVsbHBhZ2UnICk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKCB0aGlzLmVsZW1lbnQgKTtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9ICQuZ2V0V2luZG93U2l6ZSgpLnkgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gJC5nZXRXaW5kb3dTaXplKCkueCArICdweCc7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy50b29sYmFyICYmIHRoaXMudG9vbGJhci5lbGVtZW50ICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAoXG4gICAgICAgICAgICAgICAgICAgICQuZ2V0RWxlbWVudFNpemUoIHRoaXMuZWxlbWVudCApLnkgLSAkLmdldEVsZW1lbnRTaXplKCB0aGlzLnRvb2xiYXIuZWxlbWVudCApLnlcbiAgICAgICAgICAgICAgICApICsgJ3B4JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uZnVsbFBhZ2UgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBtb3VzZSB3aWxsIGJlIGluc2lkZSBjb250YWluZXIgbm93XG4gICAgICAgICAgICAkLmRlbGVnYXRlKCB0aGlzLCBvbkNvbnRhaW5lckVudGVyICkoIHt9ICk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbiA9IHRoaXMuZWxlbWVudE1hcmdpbjtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gdGhpcy5lbGVtZW50UGFkZGluZztcblxuICAgICAgICAgICAgYm9keVN0eWxlLm1hcmdpbiA9IHRoaXMuYm9keU1hcmdpbjtcbiAgICAgICAgICAgIGRvY1N0eWxlLm1hcmdpbiA9IHRoaXMuZG9jTWFyZ2luO1xuXG4gICAgICAgICAgICBib2R5U3R5bGUucGFkZGluZyA9IHRoaXMuYm9keVBhZGRpbmc7XG4gICAgICAgICAgICBkb2NTdHlsZS5wYWRkaW5nID0gdGhpcy5kb2NQYWRkaW5nO1xuXG4gICAgICAgICAgICBib2R5U3R5bGUud2lkdGggPSB0aGlzLmJvZHlXaWR0aDtcbiAgICAgICAgICAgIGRvY1N0eWxlLndpZHRoID0gdGhpcy5kb2NXaWR0aDtcblxuICAgICAgICAgICAgYm9keVN0eWxlLmhlaWdodCA9IHRoaXMuYm9keUhlaWdodDtcbiAgICAgICAgICAgIGRvY1N0eWxlLmhlaWdodCA9IHRoaXMuZG9jSGVpZ2h0O1xuXG4gICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgICAgICAgICAgIG5vZGVzID0gdGhpcy5wcmV2aW91c0JvZHkubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBub2RlczsgaSsrICkge1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoIHRoaXMucHJldmlvdXNCb2R5LnNoaWZ0KCkgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5yZW1vdmVDbGFzcyggdGhpcy5lbGVtZW50LCAnZnVsbHBhZ2UnICk7XG4gICAgICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS5wcmV2RWxlbWVudFBhcmVudC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgIFRISVNbIHRoaXMuaGFzaCBdLnByZXZOZXh0U2libGluZ1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy9JZiB3ZSd2ZSBnb3QgYSB0b29sYmFyLCB3ZSBuZWVkIHRvIGVuYWJsZSB0aGUgdXNlciB0byB1c2UgY3NzIHRvXG4gICAgICAgICAgICAvL3Jlc2V0IGl0IHRvIGl0cyBvcmlnaW5hbCBzdGF0ZVxuICAgICAgICAgICAgaWYgKCB0aGlzLnRvb2xiYXIgJiYgdGhpcy50b29sYmFyLmVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZCggdGhpcy50b29sYmFyLmVsZW1lbnQgKTtcblxuICAgICAgICAgICAgICAgIC8vTWFrZSBzdXJlIHRoZSB1c2VyIGhhcyBzb21lIGFiaWxpdHkgdG8gc3R5bGUgdGhlIHRvb2xiYXIgYmFzZWRcbiAgICAgICAgICAgICAgICAvL29uIHRoZSBtb2RlXG4gICAgICAgICAgICAgICAgJC5yZW1vdmVDbGFzcyggdGhpcy50b29sYmFyLmVsZW1lbnQsICdmdWxscGFnZScgKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudG9vbGJhci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sYmFyLmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbGJhci5uZXh0U2libGluZ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudG9vbGJhci5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRvb2xiYXIubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IFRISVNbIHRoaXMuaGFzaCBdLnByZXZFbGVtZW50V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gVEhJU1sgdGhpcy5oYXNoIF0ucHJldkVsZW1lbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIEFmdGVyIGV4aXRpbmcgZnVsbFBhZ2Ugb3IgZnVsbFNjcmVlbiwgaXQgY2FuIHRha2Ugc29tZSB0aW1lXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIGJyb3dzZXIgY2FuIGFjdHVhbGx5IHNldCB0aGUgc2Nyb2xsLlxuICAgICAgICAgICAgdmFyIHJlc3RvcmVTY3JvbGxDb3VudGVyID0gMDtcbiAgICAgICAgICAgIHZhciByZXN0b3JlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJC5zZXRQYWdlU2Nyb2xsKCBfdGhpcy5wYWdlU2Nyb2xsICk7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VTY3JvbGwgPSAkLmdldFBhZ2VTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICByZXN0b3JlU2Nyb2xsQ291bnRlcisrO1xuICAgICAgICAgICAgICAgIGlmICggcmVzdG9yZVNjcm9sbENvdW50ZXIgPCAxMCAmJlxuICAgICAgICAgICAgICAgICAgICBwYWdlU2Nyb2xsLnggIT09IF90aGlzLnBhZ2VTY3JvbGwueCB8fFxuICAgICAgICAgICAgICAgICAgICBwYWdlU2Nyb2xsLnkgIT09IF90aGlzLnBhZ2VTY3JvbGwueSApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJlc3RvcmVTY3JvbGwgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJlc3RvcmVTY3JvbGwgKTtcblxuICAgICAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uZnVsbFBhZ2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gbW91c2Ugd2lsbCBsaWtlbHkgYmUgb3V0c2lkZSBub3dcbiAgICAgICAgICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ29udGFpbmVyRXhpdCApKCB7IH0gKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLm5hdmlnYXRvciAmJiB0aGlzLnZpZXdwb3J0ICkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3IudXBkYXRlKCB0aGlzLnZpZXdwb3J0ICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIHZpZXdlciBoYXMgY2hhbmdlZCB0by9mcm9tIGZ1bGwtcGFnZSBtb2RlIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3NldEZ1bGxQYWdlfSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBmdWxsLXBhZ2VcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGZ1bGxQYWdlIC0gVHJ1ZSBpZiBjaGFuZ2VkIHRvIGZ1bGwtcGFnZSBtb2RlLCBmYWxzZSBpZiBleGl0ZWQgZnVsbC1wYWdlIG1vZGUuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ2Z1bGwtcGFnZScsIHsgZnVsbFBhZ2U6IGZ1bGxQYWdlIH0gKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGZ1bGwgc2NyZWVuIG1vZGUgaWYgc3VwcG9ydGVkLiBUb2dnbGUgZnVsbCBwYWdlIG1vZGUgb3RoZXJ3aXNlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnVsbFNjcmVlblxuICAgICAqICAgICAgSWYgdHJ1ZSwgZW50ZXIgZnVsbCBzY3JlZW4gbW9kZS4gIElmIGZhbHNlLCBleGl0IGZ1bGwgc2NyZWVuIG1vZGUuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6cHJlLWZ1bGwtc2NyZWVuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50OmZ1bGwtc2NyZWVuXG4gICAgICovXG4gICAgc2V0RnVsbFNjcmVlbjogZnVuY3Rpb24oIGZ1bGxTY3JlZW4gKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCAhJC5zdXBwb3J0c0Z1bGxTY3JlZW4gKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRGdWxsUGFnZSggZnVsbFNjcmVlbiApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAkLmlzRnVsbFNjcmVlbigpID09PSBmdWxsU2NyZWVuICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZnVsbFNjcmVlRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgZnVsbFNjcmVlbjogZnVsbFNjcmVlbixcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0QWN0aW9uOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIHZpZXdlciBpcyBhYm91dCB0byBjaGFuZ2UgdG8vZnJvbSBmdWxsLXNjcmVlbiBtb2RlIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3NldEZ1bGxTY3JlZW59KS5cbiAgICAgICAgICogTm90ZTogdGhlIHByZS1mdWxsLXNjcmVlbiBldmVudCBpcyBub3QgcmFpc2VkIHdoZW4gdGhlIHVzZXIgaXMgZXhpdGluZ1xuICAgICAgICAgKiBmdWxsLXNjcmVlbiBtb2RlIGJ5IHByZXNzaW5nIHRoZSBFc2Mga2V5LiBJbiB0aGF0IGNhc2UsIGNvbnNpZGVyIHVzaW5nXG4gICAgICAgICAqIHRoZSBmdWxsLXNjcmVlbiwgcHJlLWZ1bGwtcGFnZSBvciBmdWxsLXBhZ2UgZXZlbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgcHJlLWZ1bGwtc2NyZWVuXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBmdWxsU2NyZWVuIC0gVHJ1ZSBpZiBlbnRlcmluZyBmdWxsLXNjcmVlbiBtb2RlLCBmYWxzZSBpZiBleGl0aW5nIGZ1bGwtc2NyZWVuIG1vZGUuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcHJldmVudERlZmF1bHRBY3Rpb24gLSBTZXQgdG8gdHJ1ZSB0byBwcmV2ZW50IGZ1bGwtc2NyZWVuIG1vZGUgY2hhbmdlLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAncHJlLWZ1bGwtc2NyZWVuJywgZnVsbFNjcmVlRXZlbnRBcmdzICk7XG4gICAgICAgIGlmICggZnVsbFNjcmVlRXZlbnRBcmdzLnByZXZlbnREZWZhdWx0QWN0aW9uICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGZ1bGxTY3JlZW4gKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RnVsbFBhZ2UoIHRydWUgKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBmdWxsIHBhZ2UgbW9kZSBpcyBub3QgYWN0dWFsbHkgZW50ZXJlZCwgd2UgbmVlZCB0byBwcmV2ZW50XG4gICAgICAgICAgICAvLyB0aGUgZnVsbCBzY3JlZW4gbW9kZS5cbiAgICAgICAgICAgIGlmICggIXRoaXMuaXNGdWxsUGFnZSgpICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmZ1bGxQYWdlU3R5bGVXaWR0aCA9IHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuZnVsbFBhZ2VTdHlsZUhlaWdodCA9IHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuXG4gICAgICAgICAgICB2YXIgb25GdWxsU2NyZWVuQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzRnVsbFNjcmVlbiA9ICQuaXNGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgaWYgKCAhaXNGdWxsU2NyZWVuICkge1xuICAgICAgICAgICAgICAgICAgICAkLnJlbW92ZUV2ZW50KCBkb2N1bWVudCwgJC5mdWxsU2NyZWVuRXZlbnROYW1lLCBvbkZ1bGxTY3JlZW5DaGFuZ2UgKTtcbiAgICAgICAgICAgICAgICAgICAgJC5yZW1vdmVFdmVudCggZG9jdW1lbnQsICQuZnVsbFNjcmVlbkVycm9yRXZlbnROYW1lLCBvbkZ1bGxTY3JlZW5DaGFuZ2UgKTtcblxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRGdWxsUGFnZSggZmFsc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfdGhpcy5pc0Z1bGxQYWdlKCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gX3RoaXMuZnVsbFBhZ2VTdHlsZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBfdGhpcy5mdWxsUGFnZVN0eWxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggX3RoaXMubmF2aWdhdG9yICYmIF90aGlzLnZpZXdwb3J0ICkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5uYXZpZ2F0b3IudXBkYXRlKCBfdGhpcy52aWV3cG9ydCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgdmlld2VyIGhhcyBjaGFuZ2VkIHRvL2Zyb20gZnVsbC1zY3JlZW4gbW9kZSAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNzZXRGdWxsU2NyZWVufSkuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAZXZlbnQgZnVsbC1zY3JlZW5cbiAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZnVsbFNjcmVlbiAtIFRydWUgaWYgY2hhbmdlZCB0byBmdWxsLXNjcmVlbiBtb2RlLCBmYWxzZSBpZiBleGl0ZWQgZnVsbC1zY3JlZW4gbW9kZS5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggJ2Z1bGwtc2NyZWVuJywgeyBmdWxsU2NyZWVuOiBpc0Z1bGxTY3JlZW4gfSApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICQuYWRkRXZlbnQoIGRvY3VtZW50LCAkLmZ1bGxTY3JlZW5FdmVudE5hbWUsIG9uRnVsbFNjcmVlbkNoYW5nZSApO1xuICAgICAgICAgICAgJC5hZGRFdmVudCggZG9jdW1lbnQsICQuZnVsbFNjcmVlbkVycm9yRXZlbnROYW1lLCBvbkZ1bGxTY3JlZW5DaGFuZ2UgKTtcblxuICAgICAgICAgICAgJC5yZXF1ZXN0RnVsbFNjcmVlbiggZG9jdW1lbnQuYm9keSApO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLmV4aXRGdWxsU2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNWaXNpYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ICE9IFwiaGlkZGVuXCI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2aXNpYmxlXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6dmlzaWJsZVxuICAgICAqL1xuICAgIHNldFZpc2libGU6IGZ1bmN0aW9uKCB2aXNpYmxlICl7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSB2aXNpYmxlID8gXCJcIiA6IFwiaGlkZGVuXCI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgdmlld2VyIGlzIHNob3duIG9yIGhpZGRlbiAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNzZXRWaXNpYmxlfSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCB2aXNpYmxlXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSB2aXNpYmxlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ3Zpc2libGUnLCB7IHZpc2libGU6IHZpc2libGUgfSApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgdGlsZWQgaW1hZ2UgdG8gdGhlIHZpZXdlci5cbiAgICAgKiBvcHRpb25zLnRpbGVTb3VyY2UgY2FuIGJlIGFueXRoaW5nIHRoYXQge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI29wZW59XG4gICAgICogIHN1cHBvcnRzIGV4Y2VwdCBhcnJheXMgb2YgaW1hZ2VzLlxuICAgICAqIE5vdGUgdGhhdCB5b3UgY2FuIHNwZWNpZnkgb3B0aW9ucy53aWR0aCBvciBvcHRpb25zLmhlaWdodCwgYnV0IG5vdCBib3RoLlxuICAgICAqIFRoZSBvdGhlciBkaW1lbnNpb24gd2lsbCBiZSBjYWxjdWxhdGVkIGFjY29yZGluZyB0byB0aGUgaXRlbSdzIGFzcGVjdCByYXRpby5cbiAgICAgKiBJZiBjb2xsZWN0aW9uTW9kZSBpcyBvbiAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9KSwgdGhlIG5ldyBpbWFnZSBpc1xuICAgICAqIGF1dG9tYXRpY2FsbHkgYXJyYW5nZWQgd2l0aCB0aGUgb3RoZXJzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fEZ1bmN0aW9ufSBvcHRpb25zLnRpbGVTb3VyY2UgLSBUaGUgVGlsZVNvdXJjZSBzcGVjaWZpZXIuXG4gICAgICogQSBTdHJpbmcgaW1wbGllcyBhIHVybCB1c2VkIHRvIGRldGVybWluZSB0aGUgdGlsZVNvdXJjZSBpbXBsZW1lbnRhdGlvblxuICAgICAqICAgICAgYmFzZWQgb24gdGhlIGZpbGUgZXh0ZW5zaW9uIG9mIHVybC4gSlNPTlAgaXMgaW1wbGllZCBieSAqLmpzLFxuICAgICAqICAgICAgb3RoZXJ3aXNlIHRoZSB1cmwgaXMgcmV0cmlldmVkIGFzIHRleHQgYW5kIHRoZSByZXN1bHRpbmcgdGV4dCBpc1xuICAgICAqICAgICAgaW50cm9zcGVjdGVkIHRvIGRldGVybWluZSBpZiBpdHMganNvbiwgeG1sLCBvciB0ZXh0IGFuZCBwYXJzZWQuXG4gICAgICogQW4gT2JqZWN0IGltcGxpZXMgYW4gaW5saW5lIGNvbmZpZ3VyYXRpb24gd2hpY2ggaGFzIGEgc2luZ2xlXG4gICAgICogICAgICBwcm9wZXJ0eSBzdWZmaWNpZW50IGZvciBiZWluZyBhYmxlIHRvIGRldGVybWluZSB0aWxlU291cmNlXG4gICAgICogICAgICBpbXBsZW1lbnRhdGlvbi4gSWYgdGhlIG9iamVjdCBoYXMgYSBwcm9wZXJ0eSB3aGljaCBpcyBhIGZ1bmN0aW9uXG4gICAgICogICAgICBuYW1lZCAnZ2V0VGlsZVVybCcsIGl0IGlzIHRyZWF0ZWQgYXMgYSBjdXN0b20gVGlsZVNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaW5kZXhdIFRoZSBpbmRleCBvZiB0aGUgaXRlbS4gQWRkZWQgb24gdG9wIG9mXG4gICAgICogYWxsIG90aGVyIGl0ZW1zIGlmIG5vdCBzcGVjaWZpZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yZXBsYWNlPWZhbHNlXSBJZiB0cnVlLCB0aGUgaXRlbSBhdCBvcHRpb25zLmluZGV4IHdpbGwgYmVcbiAgICAgKiByZW1vdmVkIGFuZCB0aGUgbmV3IGl0ZW0gaXMgYWRkZWQgaW4gaXRzIHBsYWNlLiBvcHRpb25zLnRpbGVTb3VyY2Ugd2lsbCBiZVxuICAgICAqIGludGVycHJldGVkIGFuZCBmZXRjaGVkIGlmIG5lY2Vzc2FyeSBiZWZvcmUgdGhlIG9sZCBpdGVtIGlzIHJlbW92ZWQgdG8gYXZvaWQgbGVhdmluZ1xuICAgICAqIGEgZ2FwIGluIHRoZSB3b3JsZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMueD0wXSBUaGUgWCBwb3NpdGlvbiBmb3IgdGhlIGltYWdlIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy55PTBdIFRoZSBZIHBvc2l0aW9uIGZvciB0aGUgaW1hZ2UgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndpZHRoPTFdIFRoZSB3aWR0aCBmb3IgdGhlIGltYWdlIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIFRoZSBoZWlnaHQgZm9yIHRoZSBpbWFnZSBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gW29wdGlvbnMuZml0Qm91bmRzXSBUaGUgYm91bmRzIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzXG4gICAgICogdG8gZml0IHRoZSBpbWFnZSBpbnRvLiBJZiBzcGVjaWZpZWQsIHgsIHksIHdpZHRoIGFuZCBoZWlnaHQgZ2V0IGlnbm9yZWQuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBsYWNlbWVudH0gW29wdGlvbnMuZml0Qm91bmRzUGxhY2VtZW50PU9wZW5TZWFkcmFnb24uUGxhY2VtZW50LkNFTlRFUl1cbiAgICAgKiBIb3cgdG8gYW5jaG9yIHRoZSBpbWFnZSBpbiB0aGUgYm91bmRzIGlmIG9wdGlvbnMuZml0Qm91bmRzIGlzIHNldC5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gW29wdGlvbnMuY2xpcF0gLSBBbiBhcmVhLCBpbiBpbWFnZSBwaXhlbHMsIHRvIGNsaXAgdG9cbiAgICAgKiAocG9ydGlvbnMgb2YgdGhlIGltYWdlIG91dHNpZGUgb2YgdGhpcyBhcmVhIHdpbGwgbm90IGJlIHZpc2libGUpLiBPbmx5IHdvcmtzIG9uXG4gICAgICogYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRoZSBIVE1MNSBjYW52YXMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm9wYWNpdHldIE9wYWNpdHkgdGhlIHRpbGVkIGltYWdlIHNob3VsZCBiZSBkcmF3biBhdCBieSBkZWZhdWx0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jb21wb3NpdGVPcGVyYXRpb25dIEhvdyB0aGUgaW1hZ2UgaXMgY29tcG9zaXRlZCBvbnRvIG90aGVyIGltYWdlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5zdWNjZXNzXSBBIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaXNcbiAgICAgKiBzdWNjZXNzZnVsbHkgYWRkZWQuIEl0J3MgcGFzc2VkIHRoZSBldmVudCBvYmplY3Qgd2hpY2ggY29udGFpbnMgYSBzaW5nbGUgcHJvcGVydHk6XG4gICAgICogXCJpdGVtXCIsIHRoZSByZXN1bHRpbmcgVGlsZWRJbWFnZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5lcnJvcl0gQSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGlmIHRoZSBpbWFnZSBpc1xuICAgICAqIHVuYWJsZSB0byBiZSBhZGRlZC4gSXQncyBwYXNzZWQgdGhlIGVycm9yIGV2ZW50IG9iamVjdCwgd2hpY2ggY29udGFpbnMgXCJtZXNzYWdlXCJcbiAgICAgKiBhbmQgXCJzb3VyY2VcIiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuY29sbGVjdGlvbkltbWVkaWF0ZWx5PWZhbHNlXSBJZiBjb2xsZWN0aW9uTW9kZSBpcyBvbixcbiAgICAgKiBzcGVjaWZpZXMgd2hldGhlciB0byBzbmFwIHRvIHRoZSBuZXcgYXJyYW5nZW1lbnQgaW1tZWRpYXRlbHkgb3IgdG8gYW5pbWF0ZSB0byBpdC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xDYW52YXNHcmFkaWVudHxDYW52YXNQYXR0ZXJufEZ1bmN0aW9ufSBbb3B0aW9ucy5wbGFjZWhvbGRlckZpbGxTdHlsZV0gLSBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uV29ybGQuZXZlbnQ6YWRkLWl0ZW1cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6YWRkLWl0ZW0tZmFpbGVkXG4gICAgICovXG4gICAgYWRkVGlsZWRJbWFnZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQob3B0aW9ucywgXCJbVmlld2VyLmFkZFRpbGVkSW1hZ2VdIG9wdGlvbnMgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQob3B0aW9ucy50aWxlU291cmNlLCBcIltWaWV3ZXIuYWRkVGlsZWRJbWFnZV0gb3B0aW9ucy50aWxlU291cmNlIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KCFvcHRpb25zLnJlcGxhY2UgfHwgKG9wdGlvbnMuaW5kZXggPiAtMSAmJiBvcHRpb25zLmluZGV4IDwgdGhpcy53b3JsZC5nZXRJdGVtQ291bnQoKSksXG4gICAgICAgICAgICBcIltWaWV3ZXIuYWRkVGlsZWRJbWFnZV0gaWYgb3B0aW9ucy5yZXBsYWNlIGlzIHVzZWQsIG9wdGlvbnMuaW5kZXggbXVzdCBiZSBhIHZhbGlkIGluZGV4IGluIFZpZXdlci53b3JsZFwiKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwbGFjZUl0ZW0gPSBfdGhpcy53b3JsZC5nZXRJdGVtQXQob3B0aW9ucy5pbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oaWRlTWVzc2FnZSgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyRmlsbFN0eWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGxhY2Vob2xkZXJGaWxsU3R5bGUgPSB0aGlzLnBsYWNlaG9sZGVyRmlsbFN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9wYWNpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNvbXBvc2l0ZU9wZXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNvbXBvc2l0ZU9wZXJhdGlvbiA9IHRoaXMuY29tcG9zaXRlT3BlcmF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG15UXVldWVJdGVtID0ge1xuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJhaXNlQWRkSXRlbUZhaWxlZCggZXZlbnQgKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLl9sb2FkUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRRdWV1ZVtpXSA9PT0gbXlRdWV1ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvYWRRdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVmcmVzaFdvcmxkKG15UXVldWVJdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoaWxlIGFkZGluZyBhIGl0ZW0uXG4gICAgICAgICAgICAgKiBAZXZlbnQgYWRkLWl0ZW0tZmFpbGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyT2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gc291cmNlXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIGFkZFRpbGVkSW1hZ2UgbWV0aG9kLlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdGhpcy5yYWlzZUV2ZW50KCAnYWRkLWl0ZW0tZmFpbGVkJywgZXZlbnQgKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmVycm9yKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hXb3JsZCh0aGVJdGVtKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY29sbGVjdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy53b3JsZC5hcnJhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHk6IHRoZUl0ZW0ub3B0aW9ucy5jb2xsZWN0aW9uSW1tZWRpYXRlbHksXG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IF90aGlzLmNvbGxlY3Rpb25Sb3dzLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBfdGhpcy5jb2xsZWN0aW9uQ29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBfdGhpcy5jb2xsZWN0aW9uTGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICB0aWxlU2l6ZTogX3RoaXMuY29sbGVjdGlvblRpbGVTaXplLFxuICAgICAgICAgICAgICAgICAgICB0aWxlTWFyZ2luOiBfdGhpcy5jb2xsZWN0aW9uVGlsZU1hcmdpblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLndvcmxkLnNldEF1dG9SZWZpZ3VyZVNpemVzKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQuaXNBcnJheShvcHRpb25zLnRpbGVTb3VyY2UpKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJhaXNlQWRkSXRlbUZhaWxlZCh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiW1ZpZXdlci5hZGRUaWxlZEltYWdlXSBTZXF1ZW5jZXMgY2FuIG5vdCBiZSBhZGRlZDsgYWRkIHRoZW0gb25lIGF0IGEgdGltZSBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG9wdGlvbnMudGlsZVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2FkUXVldWUucHVzaChteVF1ZXVlSXRlbSk7XG5cbiAgICAgICAgZ2V0VGlsZVNvdXJjZUltcGxlbWVudGF0aW9uKCB0aGlzLCBvcHRpb25zLnRpbGVTb3VyY2UsIGZ1bmN0aW9uKCB0aWxlU291cmNlICkge1xuXG4gICAgICAgICAgICBteVF1ZXVlSXRlbS50aWxlU291cmNlID0gdGlsZVNvdXJjZTtcblxuICAgICAgICAgICAgLy8gYWRkIGV2ZXJ5Ym9keSBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlIHRoYXQncyByZWFkeSB0byBnb1xuICAgICAgICAgICAgdmFyIHF1ZXVlSXRlbSwgdGlsZWRJbWFnZSwgb3B0aW9uc0Nsb25lO1xuICAgICAgICAgICAgd2hpbGUgKF90aGlzLl9sb2FkUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcXVldWVJdGVtID0gX3RoaXMuX2xvYWRRdWV1ZVswXTtcbiAgICAgICAgICAgICAgICBpZiAoIXF1ZXVlSXRlbS50aWxlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aGlzLl9sb2FkUXVldWUuc3BsaWNlKDAsIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlSXRlbS5vcHRpb25zLnJlcGxhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gX3RoaXMud29ybGQuZ2V0SW5kZXhPZkl0ZW0ocXVldWVJdGVtLm9wdGlvbnMucmVwbGFjZUl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlSXRlbS5vcHRpb25zLmluZGV4ID0gbmV3SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMud29ybGQucmVtb3ZlSXRlbShxdWV1ZUl0ZW0ub3B0aW9ucy5yZXBsYWNlSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGlsZWRJbWFnZSA9IG5ldyAkLlRpbGVkSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICB2aWV3ZXI6IF90aGlzLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHF1ZXVlSXRlbS50aWxlU291cmNlLFxuICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydDogX3RoaXMudmlld3BvcnQsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdlcjogX3RoaXMuZHJhd2VyLFxuICAgICAgICAgICAgICAgICAgICB0aWxlQ2FjaGU6IF90aGlzLnRpbGVDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VMb2FkZXI6IF90aGlzLmltYWdlTG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICB4OiBxdWV1ZUl0ZW0ub3B0aW9ucy54LFxuICAgICAgICAgICAgICAgICAgICB5OiBxdWV1ZUl0ZW0ub3B0aW9ucy55LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogcXVldWVJdGVtLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogcXVldWVJdGVtLm9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBmaXRCb3VuZHM6IHF1ZXVlSXRlbS5vcHRpb25zLmZpdEJvdW5kcyxcbiAgICAgICAgICAgICAgICAgICAgZml0Qm91bmRzUGxhY2VtZW50OiBxdWV1ZUl0ZW0ub3B0aW9ucy5maXRCb3VuZHNQbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGNsaXA6IHF1ZXVlSXRlbS5vcHRpb25zLmNsaXAsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyRmlsbFN0eWxlOiBxdWV1ZUl0ZW0ub3B0aW9ucy5wbGFjZWhvbGRlckZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogcXVldWVJdGVtLm9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlT3BlcmF0aW9uOiBxdWV1ZUl0ZW0ub3B0aW9ucy5jb21wb3NpdGVPcGVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHNwcmluZ1N0aWZmbmVzczogX3RoaXMuc3ByaW5nU3RpZmZuZXNzLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UaW1lOiBfdGhpcy5hbmltYXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICAgICBtaW5ab29tSW1hZ2VSYXRpbzogX3RoaXMubWluWm9vbUltYWdlUmF0aW8sXG4gICAgICAgICAgICAgICAgICAgIHdyYXBIb3Jpem9udGFsOiBfdGhpcy53cmFwSG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICAgICAgd3JhcFZlcnRpY2FsOiBfdGhpcy53cmFwVmVydGljYWwsXG4gICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogX3RoaXMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgICAgICAgICAgICBibGVuZFRpbWU6IF90aGlzLmJsZW5kVGltZSxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzQmxlbmQ6IF90aGlzLmFsd2F5c0JsZW5kLFxuICAgICAgICAgICAgICAgICAgICBtaW5QaXhlbFJhdGlvOiBfdGhpcy5taW5QaXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBzbW9vdGhUaWxlRWRnZXNNaW5ab29tOiBfdGhpcy5zbW9vdGhUaWxlRWRnZXNNaW5ab29tLFxuICAgICAgICAgICAgICAgICAgICBpT1NEZXZpY2U6IF90aGlzLmlPU0RldmljZSxcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW5Qb2xpY3k6IF90aGlzLmNyb3NzT3JpZ2luUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z01vZGU6IF90aGlzLmRlYnVnTW9kZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbGxlY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLndvcmxkLnNldEF1dG9SZWZpZ3VyZVNpemVzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMud29ybGQuYWRkSXRlbSggdGlsZWRJbWFnZSwge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogcXVldWVJdGVtLm9wdGlvbnMuaW5kZXhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgcmVzdG9yZXMgdGhlIGF1dG9SZWZpZ3VyZVNpemVzIGZsYWcgdG8gdHJ1ZS5cbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFdvcmxkKHF1ZXVlSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLndvcmxkLmdldEl0ZW1Db3VudCgpID09PSAxICYmICFfdGhpcy5wcmVzZXJ2ZVZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdwb3J0LmdvSG9tZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMubmF2aWdhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKHt9LCBxdWV1ZUl0ZW0ub3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogZmFsc2UsIC8vIG5hdmlnYXRvciBhbHJlYWR5IHJlbW92ZWQgdGhlIGxheWVyLCBub3RoaW5nIHRvIHJlcGxhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGlsZWRJbWFnZTogdGlsZWRJbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVTb3VyY2U6IHF1ZXVlSXRlbS50aWxlU291cmNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5hdmlnYXRvci5hZGRUaWxlZEltYWdlKG9wdGlvbnNDbG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlSXRlbS5vcHRpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVJdGVtLm9wdGlvbnMuc3VjY2Vzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtOiB0aWxlZEltYWdlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgZXZlbnQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICByYWlzZUFkZEl0ZW1GYWlsZWQoZXZlbnQpO1xuICAgICAgICB9ICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHNpbXBsZSBpbWFnZSB0byB0aGUgdmlld2VyLlxuICAgICAqIFRoZSBvcHRpb25zIGFyZSB0aGUgc2FtZSBhcyB0aGUgb25lcyBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjYWRkVGlsZWRJbWFnZX1cbiAgICAgKiBleGNlcHQgZm9yIG9wdGlvbnMudGlsZVNvdXJjZSB3aGljaCBpcyByZXBsYWNlZCBieSBvcHRpb25zLnVybC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjYWRkVGlsZWRJbWFnZX1cbiAgICAgKiBmb3IgYWxsIHRoZSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMudXJsIC0gVGhlIFVSTCBvZiB0aGUgaW1hZ2UgdG8gYWRkLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLldvcmxkLmV2ZW50OmFkZC1pdGVtXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50OmFkZC1pdGVtLWZhaWxlZFxuICAgICAqL1xuICAgIGFkZFNpbXBsZUltYWdlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQob3B0aW9ucywgXCJbVmlld2VyLmFkZFNpbXBsZUltYWdlXSBvcHRpb25zIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KG9wdGlvbnMudXJsLCBcIltWaWV3ZXIuYWRkU2ltcGxlSW1hZ2VdIG9wdGlvbnMudXJsIGlzIHJlcXVpcmVkXCIpO1xuXG4gICAgICAgIHZhciBvcHRzID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHRpbGVTb3VyY2U6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxuICAgICAgICAgICAgICAgIHVybDogIG9wdGlvbnMudXJsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgb3B0cy51cmw7XG4gICAgICAgIHRoaXMuYWRkVGlsZWRJbWFnZShvcHRzKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGFkZExheWVyOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoIFwiW1ZpZXdlci5hZGRMYXllcl0gdGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkOyB1c2UgVmlld2VyLmFkZFRpbGVkSW1hZ2UoKSBpbnN0ZWFkLlwiICk7XG5cbiAgICAgICAgdmFyIG9wdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoXCJhZGQtbGF5ZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBkcmF3ZXI6IGV2ZW50Lml0ZW1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yYWlzZUV2ZW50KFwiYWRkLWxheWVyLWZhaWxlZFwiLCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkVGlsZWRJbWFnZShvcHRpb25zQ2xvbmUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGdldExheWVyQXRMZXZlbDogZnVuY3Rpb24oIGxldmVsICkge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoIFwiW1ZpZXdlci5nZXRMYXllckF0TGV2ZWxdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDsgdXNlIFdvcmxkLmdldEl0ZW1BdCgpIGluc3RlYWQuXCIgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGQuZ2V0SXRlbUF0KGxldmVsKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGdldExldmVsT2ZMYXllcjogZnVuY3Rpb24oIGRyYXdlciApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltWaWV3ZXIuZ2V0TGV2ZWxPZkxheWVyXSB0aGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQ7IHVzZSBXb3JsZC5nZXRJbmRleE9mSXRlbSgpIGluc3RlYWQuXCIgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGQuZ2V0SW5kZXhPZkl0ZW0oZHJhd2VyKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGdldExheWVyc0NvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltWaWV3ZXIuZ2V0TGF5ZXJzQ291bnRdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDsgdXNlIFdvcmxkLmdldEl0ZW1Db3VudCgpIGluc3RlYWQuXCIgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGQuZ2V0SXRlbUNvdW50KCk7XG4gICAgfSxcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBzZXRMYXllckxldmVsOiBmdW5jdGlvbiggZHJhd2VyLCBsZXZlbCApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltWaWV3ZXIuc2V0TGF5ZXJMZXZlbF0gdGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkOyB1c2UgV29ybGQuc2V0SXRlbUluZGV4KCkgaW5zdGVhZC5cIiApO1xuICAgICAgICByZXR1cm4gdGhpcy53b3JsZC5zZXRJdGVtSW5kZXgoZHJhd2VyLCBsZXZlbCk7XG4gICAgfSxcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICByZW1vdmVMYXllcjogZnVuY3Rpb24oIGRyYXdlciApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltWaWV3ZXIucmVtb3ZlTGF5ZXJdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDsgdXNlIFdvcmxkLnJlbW92ZUl0ZW0oKSBpbnN0ZWFkLlwiICk7XG4gICAgICAgIHJldHVybiB0aGlzLndvcmxkLnJlbW92ZUl0ZW0oZHJhd2VyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIHZpZXdlciB0byByZWRyYXcgaXRzIGNvbnRlbnRzLlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gQ2hhaW5hYmxlLlxuICAgICAqL1xuICAgIGZvcmNlUmVkcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uZm9yY2VSZWRyYXcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKi9cbiAgICBiaW5kU2VxdWVuY2VDb250cm9sczogZnVuY3Rpb24oKXtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBJbWFnZSBTZXF1ZW5jZSBDb250cm9sc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgb25Gb2N1c0hhbmRsZXIgICAgICAgICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBvbkZvY3VzICksXG4gICAgICAgICAgICBvbkJsdXJIYW5kbGVyICAgICAgICAgICA9ICQuZGVsZWdhdGUoIHRoaXMsIG9uQmx1ciApLFxuICAgICAgICAgICAgb25OZXh0SGFuZGxlciAgICAgICAgICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBvbk5leHQgKSxcbiAgICAgICAgICAgIG9uUHJldmlvdXNIYW5kbGVyICAgICAgID0gJC5kZWxlZ2F0ZSggdGhpcywgb25QcmV2aW91cyApLFxuICAgICAgICAgICAgbmF2SW1hZ2VzICAgICAgICAgICAgICAgPSB0aGlzLm5hdkltYWdlcyxcbiAgICAgICAgICAgIHVzZUdyb3VwICAgICAgICAgICAgICAgID0gdHJ1ZSA7XG5cbiAgICAgICAgaWYoIHRoaXMuc2hvd1NlcXVlbmNlQ29udHJvbCApe1xuXG4gICAgICAgICAgICBpZiggdGhpcy5wcmV2aW91c0J1dHRvbiB8fCB0aGlzLm5leHRCdXR0b24gKXtcbiAgICAgICAgICAgICAgICAvL2lmIHdlIGFyZSBiaW5kaW5nIHRvIGN1c3RvbSBidXR0b25zIHRoZW4gbGF5b3V0IGFuZFxuICAgICAgICAgICAgICAgIC8vZ3JvdXBpbmcgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBwYWdlIGF1dGhvclxuICAgICAgICAgICAgICAgIHVzZUdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNCdXR0b24gPSBuZXcgJC5CdXR0b24oe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6ICAgIHRoaXMucHJldmlvdXNCdXR0b24gPyAkLmdldEVsZW1lbnQoIHRoaXMucHJldmlvdXNCdXR0b24gKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiB0aGlzLmNsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6ICAgICQuZ2V0U3RyaW5nKCBcIlRvb2x0aXBzLlByZXZpb3VzUGFnZVwiICksXG4gICAgICAgICAgICAgICAgc3JjUmVzdDogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5wcmV2aW91cy5SRVNUICksXG4gICAgICAgICAgICAgICAgc3JjR3JvdXA6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5wcmV2aW91cy5HUk9VUCApLFxuICAgICAgICAgICAgICAgIHNyY0hvdmVyOiAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMucHJldmlvdXMuSE9WRVIgKSxcbiAgICAgICAgICAgICAgICBzcmNEb3duOiAgICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLnByZXZpb3VzLkRPV04gKSxcbiAgICAgICAgICAgICAgICBvblJlbGVhc2U6ICBvblByZXZpb3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICBvbkZvY3VzOiAgICBvbkZvY3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICBvbkJsdXI6ICAgICBvbkJsdXJIYW5kbGVyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5uZXh0QnV0dG9uID0gbmV3ICQuQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiAgICB0aGlzLm5leHRCdXR0b24gPyAkLmdldEVsZW1lbnQoIHRoaXMubmV4dEJ1dHRvbiApIDogbnVsbCxcbiAgICAgICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgIGNsaWNrRGlzdFRocmVzaG9sZDogdGhpcy5jbGlja0Rpc3RUaHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogICAgJC5nZXRTdHJpbmcoIFwiVG9vbHRpcHMuTmV4dFBhZ2VcIiApLFxuICAgICAgICAgICAgICAgIHNyY1Jlc3Q6ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMubmV4dC5SRVNUICksXG4gICAgICAgICAgICAgICAgc3JjR3JvdXA6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5uZXh0LkdST1VQICksXG4gICAgICAgICAgICAgICAgc3JjSG92ZXI6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5uZXh0LkhPVkVSICksXG4gICAgICAgICAgICAgICAgc3JjRG93bjogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5uZXh0LkRPV04gKSxcbiAgICAgICAgICAgICAgICBvblJlbGVhc2U6ICBvbk5leHRIYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9uRm9jdXM6ICAgIG9uRm9jdXNIYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9uQmx1cjogICAgIG9uQmx1ckhhbmRsZXJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiggIXRoaXMubmF2UHJldk5leHRXcmFwICl7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0J1dHRvbi5kaXNhYmxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy50aWxlU291cmNlcyB8fCAhdGhpcy50aWxlU291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRCdXR0b24uZGlzYWJsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggdXNlR3JvdXAgKXtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luZyA9IG5ldyAkLkJ1dHRvbkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0J1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luZ0NvbnRyb2wgPSB0aGlzLnBhZ2luZy5lbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMudG9vbGJhciApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXIuYWRkQ29udHJvbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5nQ29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHthbmNob3I6ICQuQ29udHJvbEFuY2hvci5CT1RUT01fUklHSFR9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29udHJvbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5nQ29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHthbmNob3I6IHRoaXMuc2VxdWVuY2VDb250cm9sQW5jaG9yIHx8ICQuQ29udHJvbEFuY2hvci5UT1BfTEVGVH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKi9cbiAgICBiaW5kU3RhbmRhcmRDb250cm9sczogZnVuY3Rpb24oKXtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gTmF2aWdhdGlvbiBDb250cm9sc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgYmVnaW5ab29taW5nSW5IYW5kbGVyICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBiZWdpblpvb21pbmdJbiApLFxuICAgICAgICAgICAgZW5kWm9vbWluZ0hhbmRsZXIgICAgICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBlbmRab29taW5nICksXG4gICAgICAgICAgICBkb1NpbmdsZVpvb21JbkhhbmRsZXIgICA9ICQuZGVsZWdhdGUoIHRoaXMsIGRvU2luZ2xlWm9vbUluICksXG4gICAgICAgICAgICBiZWdpblpvb21pbmdPdXRIYW5kbGVyICA9ICQuZGVsZWdhdGUoIHRoaXMsIGJlZ2luWm9vbWluZ091dCApLFxuICAgICAgICAgICAgZG9TaW5nbGVab29tT3V0SGFuZGxlciAgPSAkLmRlbGVnYXRlKCB0aGlzLCBkb1NpbmdsZVpvb21PdXQgKSxcbiAgICAgICAgICAgIG9uSG9tZUhhbmRsZXIgICAgICAgICAgID0gJC5kZWxlZ2F0ZSggdGhpcywgb25Ib21lICksXG4gICAgICAgICAgICBvbkZ1bGxTY3JlZW5IYW5kbGVyICAgICA9ICQuZGVsZWdhdGUoIHRoaXMsIG9uRnVsbFNjcmVlbiApLFxuICAgICAgICAgICAgb25Sb3RhdGVMZWZ0SGFuZGxlciAgICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBvblJvdGF0ZUxlZnQgKSxcbiAgICAgICAgICAgIG9uUm90YXRlUmlnaHRIYW5kbGVyICAgID0gJC5kZWxlZ2F0ZSggdGhpcywgb25Sb3RhdGVSaWdodCApLFxuICAgICAgICAgICAgb25Gb2N1c0hhbmRsZXIgICAgICAgICAgPSAkLmRlbGVnYXRlKCB0aGlzLCBvbkZvY3VzICksXG4gICAgICAgICAgICBvbkJsdXJIYW5kbGVyICAgICAgICAgICA9ICQuZGVsZWdhdGUoIHRoaXMsIG9uQmx1ciApLFxuICAgICAgICAgICAgbmF2SW1hZ2VzICAgICAgICAgICAgICAgPSB0aGlzLm5hdkltYWdlcyxcbiAgICAgICAgICAgIGJ1dHRvbnMgICAgICAgICAgICAgICAgID0gW10sXG4gICAgICAgICAgICB1c2VHcm91cCAgICAgICAgICAgICAgICA9IHRydWUgO1xuXG5cbiAgICAgICAgaWYgKCB0aGlzLnNob3dOYXZpZ2F0aW9uQ29udHJvbCApIHtcblxuICAgICAgICAgICAgaWYoIHRoaXMuem9vbUluQnV0dG9uIHx8IHRoaXMuem9vbU91dEJ1dHRvbiB8fFxuICAgICAgICAgICAgICAgIHRoaXMuaG9tZUJ1dHRvbiB8fCB0aGlzLmZ1bGxQYWdlQnV0dG9uIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVMZWZ0QnV0dG9uIHx8IHRoaXMucm90YXRlUmlnaHRCdXR0b24gKSB7XG4gICAgICAgICAgICAgICAgLy9pZiB3ZSBhcmUgYmluZGluZyB0byBjdXN0b20gYnV0dG9ucyB0aGVuIGxheW91dCBhbmRcbiAgICAgICAgICAgICAgICAvL2dyb3VwaW5nIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgcGFnZSBhdXRob3JcbiAgICAgICAgICAgICAgICB1c2VHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMuc2hvd1pvb21Db250cm9sICkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaCggdGhpcy56b29tSW5CdXR0b24gPSBuZXcgJC5CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAgICB0aGlzLnpvb21JbkJ1dHRvbiA/ICQuZ2V0RWxlbWVudCggdGhpcy56b29tSW5CdXR0b24gKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrVGltZVRocmVzaG9sZDogdGhpcy5jbGlja1RpbWVUaHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRGlzdFRocmVzaG9sZDogdGhpcy5jbGlja0Rpc3RUaHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICAgICQuZ2V0U3RyaW5nKCBcIlRvb2x0aXBzLlpvb21JblwiICksXG4gICAgICAgICAgICAgICAgICAgIHNyY1Jlc3Q6ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMuem9vbUluLlJFU1QgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjR3JvdXA6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy56b29tSW4uR1JPVVAgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjSG92ZXI6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy56b29tSW4uSE9WRVIgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjRG93bjogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy56b29tSW4uRE9XTiApLFxuICAgICAgICAgICAgICAgICAgICBvblByZXNzOiAgICBiZWdpblpvb21pbmdJbkhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uUmVsZWFzZTogIGVuZFpvb21pbmdIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAgICBkb1NpbmdsZVpvb21JbkhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uRW50ZXI6ICAgIGJlZ2luWm9vbWluZ0luSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25FeGl0OiAgICAgZW5kWm9vbWluZ0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXM6ICAgIG9uRm9jdXNIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkJsdXI6ICAgICBvbkJsdXJIYW5kbGVyXG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKCB0aGlzLnpvb21PdXRCdXR0b24gPSBuZXcgJC5CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAgICB0aGlzLnpvb21PdXRCdXR0b24gPyAkLmdldEVsZW1lbnQoIHRoaXMuem9vbU91dEJ1dHRvbiApIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiB0aGlzLmNsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tEaXN0VGhyZXNob2xkOiB0aGlzLmNsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogICAgJC5nZXRTdHJpbmcoIFwiVG9vbHRpcHMuWm9vbU91dFwiICksXG4gICAgICAgICAgICAgICAgICAgIHNyY1Jlc3Q6ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMuem9vbU91dC5SRVNUICksXG4gICAgICAgICAgICAgICAgICAgIHNyY0dyb3VwOiAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMuem9vbU91dC5HUk9VUCApLFxuICAgICAgICAgICAgICAgICAgICBzcmNIb3ZlcjogICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLnpvb21PdXQuSE9WRVIgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjRG93bjogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy56b29tT3V0LkRPV04gKSxcbiAgICAgICAgICAgICAgICAgICAgb25QcmVzczogICAgYmVnaW5ab29taW5nT3V0SGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25SZWxlYXNlOiAgZW5kWm9vbWluZ0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICAgIGRvU2luZ2xlWm9vbU91dEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uRW50ZXI6ICAgIGJlZ2luWm9vbWluZ091dEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uRXhpdDogICAgIGVuZFpvb21pbmdIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiAgICBvbkZvY3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25CbHVyOiAgICAgb25CbHVySGFuZGxlclxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLnNob3dIb21lQ29udHJvbCApIHtcbiAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goIHRoaXMuaG9tZUJ1dHRvbiA9IG5ldyAkLkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6ICAgIHRoaXMuaG9tZUJ1dHRvbiA/ICQuZ2V0RWxlbWVudCggdGhpcy5ob21lQnV0dG9uICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAgICAkLmdldFN0cmluZyggXCJUb29sdGlwcy5Ib21lXCIgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjUmVzdDogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5ob21lLlJFU1QgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjR3JvdXA6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5ob21lLkdST1VQICksXG4gICAgICAgICAgICAgICAgICAgIHNyY0hvdmVyOiAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMuaG9tZS5IT1ZFUiApLFxuICAgICAgICAgICAgICAgICAgICBzcmNEb3duOiAgICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLmhvbWUuRE9XTiApLFxuICAgICAgICAgICAgICAgICAgICBvblJlbGVhc2U6ICBvbkhvbWVIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiAgICBvbkZvY3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25CbHVyOiAgICAgb25CbHVySGFuZGxlclxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLnNob3dGdWxsUGFnZUNvbnRyb2wgKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKCB0aGlzLmZ1bGxQYWdlQnV0dG9uID0gbmV3ICQuQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogICAgdGhpcy5mdWxsUGFnZUJ1dHRvbiA/ICQuZ2V0RWxlbWVudCggdGhpcy5mdWxsUGFnZUJ1dHRvbiApIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiB0aGlzLmNsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tEaXN0VGhyZXNob2xkOiB0aGlzLmNsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogICAgJC5nZXRTdHJpbmcoIFwiVG9vbHRpcHMuRnVsbFBhZ2VcIiApLFxuICAgICAgICAgICAgICAgICAgICBzcmNSZXN0OiAgICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLmZ1bGxwYWdlLlJFU1QgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjR3JvdXA6ICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5mdWxscGFnZS5HUk9VUCApLFxuICAgICAgICAgICAgICAgICAgICBzcmNIb3ZlcjogICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLmZ1bGxwYWdlLkhPVkVSICksXG4gICAgICAgICAgICAgICAgICAgIHNyY0Rvd246ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMuZnVsbHBhZ2UuRE9XTiApLFxuICAgICAgICAgICAgICAgICAgICBvblJlbGVhc2U6ICBvbkZ1bGxTY3JlZW5IYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiAgICBvbkZvY3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25CbHVyOiAgICAgb25CbHVySGFuZGxlclxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLnNob3dSb3RhdGlvbkNvbnRyb2wgKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKCB0aGlzLnJvdGF0ZUxlZnRCdXR0b24gPSBuZXcgJC5CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAgICB0aGlzLnJvdGF0ZUxlZnRCdXR0b24gPyAkLmdldEVsZW1lbnQoIHRoaXMucm90YXRlTGVmdEJ1dHRvbiApIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiB0aGlzLmNsaWNrVGltZVRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tEaXN0VGhyZXNob2xkOiB0aGlzLmNsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogICAgJC5nZXRTdHJpbmcoIFwiVG9vbHRpcHMuUm90YXRlTGVmdFwiICksXG4gICAgICAgICAgICAgICAgICAgIHNyY1Jlc3Q6ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMucm90YXRlbGVmdC5SRVNUICksXG4gICAgICAgICAgICAgICAgICAgIHNyY0dyb3VwOiAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMucm90YXRlbGVmdC5HUk9VUCApLFxuICAgICAgICAgICAgICAgICAgICBzcmNIb3ZlcjogICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLnJvdGF0ZWxlZnQuSE9WRVIgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjRG93bjogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5yb3RhdGVsZWZ0LkRPV04gKSxcbiAgICAgICAgICAgICAgICAgICAgb25SZWxlYXNlOiAgb25Sb3RhdGVMZWZ0SGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1czogICAgb25Gb2N1c0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cjogICAgIG9uQmx1ckhhbmRsZXJcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goIHRoaXMucm90YXRlUmlnaHRCdXR0b24gPSBuZXcgJC5CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAgICB0aGlzLnJvdGF0ZVJpZ2h0QnV0dG9uID8gJC5nZXRFbGVtZW50KCB0aGlzLnJvdGF0ZVJpZ2h0QnV0dG9uICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAgICAkLmdldFN0cmluZyggXCJUb29sdGlwcy5Sb3RhdGVSaWdodFwiICksXG4gICAgICAgICAgICAgICAgICAgIHNyY1Jlc3Q6ICAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMucm90YXRlcmlnaHQuUkVTVCApLFxuICAgICAgICAgICAgICAgICAgICBzcmNHcm91cDogICByZXNvbHZlVXJsKCB0aGlzLnByZWZpeFVybCwgbmF2SW1hZ2VzLnJvdGF0ZXJpZ2h0LkdST1VQICksXG4gICAgICAgICAgICAgICAgICAgIHNyY0hvdmVyOiAgIHJlc29sdmVVcmwoIHRoaXMucHJlZml4VXJsLCBuYXZJbWFnZXMucm90YXRlcmlnaHQuSE9WRVIgKSxcbiAgICAgICAgICAgICAgICAgICAgc3JjRG93bjogICAgcmVzb2x2ZVVybCggdGhpcy5wcmVmaXhVcmwsIG5hdkltYWdlcy5yb3RhdGVyaWdodC5ET1dOICksXG4gICAgICAgICAgICAgICAgICAgIG9uUmVsZWFzZTogIG9uUm90YXRlUmlnaHRIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiAgICBvbkZvY3VzSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb25CbHVyOiAgICAgb25CbHVySGFuZGxlclxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHVzZUdyb3VwICkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9ucyA9IG5ldyAkLkJ1dHRvbkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogICAgICAgICAgICBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm5hdkNvbnRyb2wgID0gdGhpcy5idXR0b25zLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRIYW5kbGVyKCAnb3BlbicsICQuZGVsZWdhdGUoIHRoaXMsIGxpZ2h0VXAgKSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMudG9vbGJhciApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXIuYWRkQ29udHJvbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF2Q29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHthbmNob3I6ICQuQ29udHJvbEFuY2hvci5UT1BfTEVGVH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbnRyb2woXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdkNvbnRyb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICB7YW5jaG9yOiB0aGlzLm5hdmlnYXRpb25Db250cm9sQW5jaG9yIHx8ICQuQ29udHJvbEFuY2hvci5UT1BfTEVGVH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYWN0aXZlIHBhZ2Ugb2YgYSBzZXF1ZW5jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBjdXJyZW50UGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXF1ZW5jZUluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpwYWdlXG4gICAgICovXG4gICAgZ29Ub1BhZ2U6IGZ1bmN0aW9uKCBwYWdlICl7XG4gICAgICAgIGlmKCB0aGlzLnRpbGVTb3VyY2VzICYmIHBhZ2UgPj0gMCAmJiBwYWdlIDwgdGhpcy50aWxlU291cmNlcy5sZW5ndGggKXtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIHBhZ2UgaXMgY2hhbmdlZCBvbiBhIHZpZXdlciBjb25maWd1cmVkIHdpdGggbXVsdGlwbGUgaW1hZ2Ugc291cmNlcyAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNnb1RvUGFnZX0pLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCBwYWdlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwYWdlIC0gVGhlIHBhZ2UgaW5kZXguXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMucmFpc2VFdmVudCggJ3BhZ2UnLCB7IHBhZ2U6IHBhZ2UgfSApO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXF1ZW5jZUluZGV4ID0gcGFnZTtcblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2VxdWVuY2VCdXR0b25zKCBwYWdlICk7XG5cbiAgICAgICAgICAgIHRoaXMub3BlbiggdGhpcy50aWxlU291cmNlc1sgcGFnZSBdICk7XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLnJlZmVyZW5jZVN0cmlwICl7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VTdHJpcC5zZXRGb2N1cyggcGFnZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgLyoqXG4gICAgICogQWRkcyBhbiBodG1sIGVsZW1lbnQgYXMgYW4gb3ZlcmxheSB0byB0aGUgY3VycmVudCB2aWV3cG9ydC4gIFVzZWZ1bCBmb3JcbiAgICAgKiBoaWdobGlnaHRpbmcgd29yZHMgb3IgYXJlYXMgb2YgaW50ZXJlc3Qgb24gYW4gaW1hZ2Ugb3Igb3RoZXIgem9vbWFibGVcbiAgICAgKiBpbnRlcmZhY2UuIFRoZSBvdmVybGF5cyBhZGRlZCB2aWEgdGhpcyBtZXRob2QgYXJlIHJlbW92ZWQgd2hlbiB0aGUgdmlld3BvcnRcbiAgICAgKiBpcyBjbG9zZWQgd2hpY2ggaW5jbHVkZSB3aGVuIGNoYW5naW5nIHBhZ2UuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd8T2JqZWN0fSBlbGVtZW50IC0gQSByZWZlcmVuY2UgdG8gYW4gZWxlbWVudCBvciBhbiBpZCBmb3JcbiAgICAgKiAgICAgIHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgb3ZlcmxheWVkLiBPciBhbiBPYmplY3Qgc3BlY2lmeWluZyB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIG92ZXJsYXkuXG4gICAgICogICAgICBJZiB1c2luZyBhbiBvYmplY3QsIHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5PdmVybGF5fSBmb3IgYSBsaXN0IG9mXG4gICAgICogICAgICBhbGwgYXZhaWxhYmxlIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fE9wZW5TZWFkcmFnb24uUmVjdH0gbG9jYXRpb24gLSBUaGUgcG9pbnQgb3JcbiAgICAgKiAgICAgIHJlY3RhbmdsZSB3aGljaCB3aWxsIGJlIG92ZXJsYXllZC4gVGhpcyBpcyBhIHZpZXdwb3J0IHJlbGF0aXZlIGxvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IHBsYWNlbWVudCAtIFRoZSBwb3NpdGlvbiBvZiB0aGVcbiAgICAgKiAgICAgIHZpZXdwb3J0IHdoaWNoIHRoZSBsb2NhdGlvbiBjb29yZGluYXRlcyB3aWxsIGJlIHRyZWF0ZWQgYXMgcmVsYXRpdmVcbiAgICAgKiAgICAgIHRvLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRHJhdyAtIElmIHN1cHBsaWVkIHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgb3ZlcmxheVxuICAgICAqICAgICAgbmVlZHMgdG8gYmUgZHJhd24uIEl0IGl0IHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgY2FsbGJhY2sgdG8gZG8gYW55IGRyYXdpbmcvcG9zaXRpb25pbmcuXG4gICAgICogICAgICBJdCBpcyBwYXNzZWQgcG9zaXRpb24sIHNpemUgYW5kIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6YWRkLW92ZXJsYXlcbiAgICAgKi9cbiAgICBhZGRPdmVybGF5OiBmdW5jdGlvbiggZWxlbWVudCwgbG9jYXRpb24sIHBsYWNlbWVudCwgb25EcmF3ICkge1xuICAgICAgICB2YXIgb3B0aW9ucztcbiAgICAgICAgaWYoICQuaXNQbGFpbk9iamVjdCggZWxlbWVudCApICl7XG4gICAgICAgICAgICBvcHRpb25zID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgb25EcmF3OiBvbkRyYXdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBvcHRpb25zLmVsZW1lbnQgKTtcblxuICAgICAgICBpZiAoIGdldE92ZXJsYXlJbmRleCggdGhpcy5jdXJyZW50T3ZlcmxheXMsIGVsZW1lbnQgKSA+PSAwICkge1xuICAgICAgICAgICAgLy8gdGhleSdyZSB0cnlpbmcgdG8gYWRkIGEgZHVwbGljYXRlIG92ZXJsYXlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG92ZXJsYXkgPSBnZXRPdmVybGF5T2JqZWN0KCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jdXJyZW50T3ZlcmxheXMucHVzaChvdmVybGF5KTtcbiAgICAgICAgb3ZlcmxheS5kcmF3SFRNTCggdGhpcy5vdmVybGF5c0NvbnRhaW5lciwgdGhpcy52aWV3cG9ydCApO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiBhbiBvdmVybGF5IGlzIGFkZGVkIHRvIHRoZSB2aWV3ZXIgKHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjYWRkT3ZlcmxheX0pLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgYWRkLW92ZXJsYXlcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgb3ZlcmxheSBlbGVtZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR8T3BlblNlYWRyYWdvbi5SZWN0fSBsb2NhdGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBwbGFjZW1lbnRcbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAnYWRkLW92ZXJsYXknLCB7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgbG9jYXRpb246IG9wdGlvbnMubG9jYXRpb24sXG4gICAgICAgICAgICBwbGFjZW1lbnQ6IG9wdGlvbnMucGxhY2VtZW50XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgb3ZlcmxheSByZXByZXNlbnRlZCBieSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IG9yXG4gICAgICogZWxlbWVudCBpZCBtb3ZpbmcgaXQgdG8gdGhlIG5ldyBsb2NhdGlvbiwgcmVsYXRpdmUgdG8gdGhlIG5ldyBwbGFjZW1lbnQuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnQgLSBBIHJlZmVyZW5jZSB0byBhbiBlbGVtZW50IG9yIGFuIGlkIGZvclxuICAgICAqICAgICAgdGhlIGVsZW1lbnQgd2hpY2ggaXMgb3ZlcmxheWVkLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludHxPcGVuU2VhZHJhZ29uLlJlY3R9IGxvY2F0aW9uIC0gVGhlIHBvaW50IG9yXG4gICAgICogICAgICByZWN0YW5nbGUgd2hpY2ggd2lsbCBiZSBvdmVybGF5ZWQuIFRoaXMgaXMgYSB2aWV3cG9ydCByZWxhdGl2ZSBsb2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBwbGFjZW1lbnQgLSBUaGUgcG9zaXRpb24gb2YgdGhlXG4gICAgICogICAgICB2aWV3cG9ydCB3aGljaCB0aGUgbG9jYXRpb24gY29vcmRpbmF0ZXMgd2lsbCBiZSB0cmVhdGVkIGFzIHJlbGF0aXZlXG4gICAgICogICAgICB0by5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDp1cGRhdGUtb3ZlcmxheVxuICAgICAqL1xuICAgIHVwZGF0ZU92ZXJsYXk6IGZ1bmN0aW9uKCBlbGVtZW50LCBsb2NhdGlvbiwgcGxhY2VtZW50ICkge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgIGkgPSBnZXRPdmVybGF5SW5kZXgoIHRoaXMuY3VycmVudE92ZXJsYXlzLCBlbGVtZW50ICk7XG5cbiAgICAgICAgaWYgKCBpID49IDAgKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRPdmVybGF5c1sgaSBdLnVwZGF0ZSggbG9jYXRpb24sIHBsYWNlbWVudCApO1xuICAgICAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uZm9yY2VSZWRyYXcgPSB0cnVlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiBhbiBvdmVybGF5J3MgbG9jYXRpb24gb3IgcGxhY2VtZW50IGNoYW5nZXNcbiAgICAgICAgICAgICAqIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI3VwZGF0ZU92ZXJsYXl9KS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXZlbnQgdXBkYXRlLW92ZXJsYXlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlXG4gICAgICAgICAgICAgKiBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fE9wZW5TZWFkcmFnb24uUmVjdH0gbG9jYXRpb25cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IHBsYWNlbWVudFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnJhaXNlRXZlbnQoICd1cGRhdGUtb3ZlcmxheScsIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gb3ZlcmxheSBpZGVudGlmaWVkIGJ5IHRoZSByZWZlcmVuY2UgZWxlbWVudCBvciBlbGVtZW50IGlkXG4gICAgICogYW5kIHNjaGVkdWxlcyBhbiB1cGRhdGUuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnQgLSBBIHJlZmVyZW5jZSB0byB0aGUgZWxlbWVudCBvciBhblxuICAgICAqICAgICAgZWxlbWVudCBpZCB3aGljaCByZXByZXNlbnQgdGhlIG92ZWxheSBjb250ZW50IHRvIGJlIHJlbW92ZWQuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6cmVtb3ZlLW92ZXJsYXlcbiAgICAgKi9cbiAgICByZW1vdmVPdmVybGF5OiBmdW5jdGlvbiggZWxlbWVudCApIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZWxlbWVudCA9ICQuZ2V0RWxlbWVudCggZWxlbWVudCApO1xuICAgICAgICBpID0gZ2V0T3ZlcmxheUluZGV4KCB0aGlzLmN1cnJlbnRPdmVybGF5cywgZWxlbWVudCApO1xuXG4gICAgICAgIGlmICggaSA+PSAwICkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50T3ZlcmxheXNbIGkgXS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRPdmVybGF5cy5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICAgIFRISVNbIHRoaXMuaGFzaCBdLmZvcmNlUmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gYW4gb3ZlcmxheSBpcyByZW1vdmVkIGZyb20gdGhlIHZpZXdlclxuICAgICAgICAgICAgICogKHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjcmVtb3ZlT3ZlcmxheX0pLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCByZW1vdmUtb3ZlcmxheVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgICAgICAqIFZpZXdlciB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIG92ZXJsYXkgZWxlbWVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAncmVtb3ZlLW92ZXJsYXknLCB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGN1cnJlbnRseSBjb25maWd1cmVkIE92ZXJsYXlzIGZyb20gdGhpcyBWaWV3ZXIgYW5kIHNjaGVkdWxlc1xuICAgICAqIGFuIHVwZGF0ZS5cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6Y2xlYXItb3ZlcmxheVxuICAgICAqL1xuICAgIGNsZWFyT3ZlcmxheXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aGlsZSAoIHRoaXMuY3VycmVudE92ZXJsYXlzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRPdmVybGF5cy5wb3AoKS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uZm9yY2VSZWRyYXcgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gYWxsIG92ZXJsYXlzIGFyZSByZW1vdmVkIGZyb20gdGhlIHZpZXdlciAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLkRyYXdlciNjbGVhck92ZXJsYXlzfSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBjbGVhci1vdmVybGF5XG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAnY2xlYXItb3ZlcmxheScsIHt9ICk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAgLyoqXG4gICAgICogRmluZHMgYW4gb3ZlcmxheSBpZGVudGlmaWVkIGJ5IHRoZSByZWZlcmVuY2UgZWxlbWVudCBvciBlbGVtZW50IGlkXG4gICAgICogYW5kIHJldHVybnMgaXQgYXMgYW4gb2JqZWN0LCByZXR1cm4gbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsZW1lbnQgLSBBIHJlZmVyZW5jZSB0byB0aGUgZWxlbWVudCBvciBhblxuICAgICAqICAgICAgZWxlbWVudCBpZCB3aGljaCByZXByZXNlbnRzIHRoZSBvdmVybGF5IGNvbnRlbnQuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5PdmVybGF5fSB0aGUgbWF0Y2hpbmcgb3ZlcmxheSBvciBudWxsIGlmIG5vbmUgZm91bmQuXG4gICAgICovXG4gICAgZ2V0T3ZlcmxheUJ5SWQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBlbGVtZW50ICk7XG4gICAgICAgIGkgPSBnZXRPdmVybGF5SW5kZXgoIHRoaXMuY3VycmVudE92ZXJsYXlzLCBlbGVtZW50ICk7XG5cbiAgICAgICAgaWYgKGk+PTApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRPdmVybGF5c1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHNlcXVlbmNlIGJ1dHRvbnMuXG4gICAgICogQGZ1bmN0aW9uIE9wZW5TZWFkcmFnb24uVmlld2VyLnByb3RvdHlwZS5fdXBkYXRlU2VxdWVuY2VCdXR0b25zXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gU2VxdWVuY2UgVmFsdWVcbiAgICAgKi9cbiAgICBfdXBkYXRlU2VxdWVuY2VCdXR0b25zOiBmdW5jdGlvbiggcGFnZSApIHtcblxuICAgICAgICAgICAgaWYgKCB0aGlzLm5leHRCdXR0b24gKSB7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMudGlsZVNvdXJjZXMgfHwgdGhpcy50aWxlU291cmNlcy5sZW5ndGggLSAxID09PSBwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vRGlzYWJsZSBuZXh0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBpZiAoICF0aGlzLm5hdlByZXZOZXh0V3JhcCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRCdXR0b24uZW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzQnV0dG9uICkge1xuICAgICAgICAgICAgICAgIGlmICggcGFnZSA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vRW5hYmxlIHByZXZpb3VzIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzQnV0dG9uLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggIXRoaXMubmF2UHJldk5leHRXcmFwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0J1dHRvbi5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBhIG1lc3NhZ2UgaW4gdGhlIHZpZXdwb3J0XG4gICAgICogQGZ1bmN0aW9uIE9wZW5TZWFkcmFnb24uVmlld2VyLnByb3RvdHlwZS5fc2hvd01lc3NhZ2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IG1lc3NhZ2VcbiAgICAgKi9cbiAgICBfc2hvd01lc3NhZ2U6IGZ1bmN0aW9uICggbWVzc2FnZSApIHtcbiAgICAgICAgdGhpcy5faGlkZU1lc3NhZ2UoKTtcblxuICAgICAgICB2YXIgZGl2ID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggbWVzc2FnZSApICk7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlRGl2ID0gJC5tYWtlQ2VudGVyZWROb2RlKCBkaXYgKTtcblxuICAgICAgICAkLmFkZENsYXNzKHRoaXMubWVzc2FnZURpdiwgXCJvcGVuc2VhZHJhZ29uLW1lc3NhZ2VcIik7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoIHRoaXMubWVzc2FnZURpdiApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWRlIGFueSBjdXJyZW50bHkgZGlzcGxheWVkIHZpZXdwb3J0IG1lc3NhZ2VcbiAgICAgKiBAZnVuY3Rpb24gT3BlblNlYWRyYWdvbi5WaWV3ZXIucHJvdG90eXBlLl9oaWRlTWVzc2FnZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hpZGVNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXYgPSB0aGlzLm1lc3NhZ2VEaXY7XG4gICAgICAgIGlmIChkaXYpIHtcbiAgICAgICAgICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tZXNzYWdlRGl2O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhpcyB2aWV3ZXIncyBnZXN0dXJlIHNldHRpbmdzIGZvciB0aGUgZ2l2ZW4gcG9pbnRlciBkZXZpY2UgdHlwZS5cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBUaGUgcG9pbnRlciBkZXZpY2UgdHlwZSB0byBnZXQgdGhlIGdlc3R1cmUgc2V0dGluZ3MgZm9yIChcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLikuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5HZXN0dXJlU2V0dGluZ3N9XG4gICAgICovXG4gICAgZ2VzdHVyZVNldHRpbmdzQnlEZXZpY2VUeXBlOiBmdW5jdGlvbiAoIHR5cGUgKSB7XG4gICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgICAgICAgICBjYXNlICdtb3VzZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VzdHVyZVNldHRpbmdzTW91c2U7XG4gICAgICAgICAgICBjYXNlICd0b3VjaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VzdHVyZVNldHRpbmdzVG91Y2g7XG4gICAgICAgICAgICBjYXNlICdwZW4nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlc3R1cmVTZXR0aW5nc1BlbjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VzdHVyZVNldHRpbmdzVW5rbm93bjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2RyYXdPdmVybGF5czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5jdXJyZW50T3ZlcmxheXMubGVuZ3RoO1xuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50T3ZlcmxheXNbIGkgXS5kcmF3SFRNTCggdGhpcy5vdmVybGF5c0NvbnRhaW5lciwgdGhpcy52aWV3cG9ydCApO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbmNlbCB0aGUgXCJpbiBmbGlnaHRcIiBpbWFnZXMuXG4gICAgICovXG4gICAgX2NhbmNlbFBlbmRpbmdJbWFnZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9sb2FkUXVldWUgPSBbXTtcbiAgICB9XG59KTtcblxuXG4vKipcbiAqIF9nZXRTYWZlRWxlbVNpemUgaXMgbGlrZSBnZXRFbGVtZW50U2l6ZSgpLCBidXQgcmVmdXNlcyB0byByZXR1cm4gMCBmb3IgeCBvciB5LFxuICogd2hpY2ggd2FzIGNhdXNpbmcgc29tZSBjYWxsaW5nIG9wZXJhdGlvbnMgdG8gcmV0dXJuIE5hTi5cbiAqIEByZXR1cm5zIHtQb2ludH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRTYWZlRWxlbVNpemUgKG9FbGVtZW50KSB7XG4gICAgb0VsZW1lbnQgPSAkLmdldEVsZW1lbnQoIG9FbGVtZW50ICk7XG5cbiAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgIChvRWxlbWVudC5jbGllbnRXaWR0aCA9PT0gMCA/IDEgOiBvRWxlbWVudC5jbGllbnRXaWR0aCksXG4gICAgICAgIChvRWxlbWVudC5jbGllbnRIZWlnaHQgPT09IDAgPyAxIDogb0VsZW1lbnQuY2xpZW50SGVpZ2h0KVxuICAgICk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRUaWxlU291cmNlSW1wbGVtZW50YXRpb24oIHZpZXdlciwgdGlsZVNvdXJjZSwgc3VjY2Vzc0NhbGxiYWNrLFxuICAgIGZhaWxDYWxsYmFjayApIHtcbiAgICB2YXIgX3RoaXMgPSB2aWV3ZXI7XG5cbiAgICAvL2FsbG93IHBsYWluIHhtbCBzdHJpbmdzIG9yIGpzb24gc3RyaW5ncyB0byBiZSBwYXJzZWQgaGVyZVxuICAgIGlmICggJC50eXBlKCB0aWxlU291cmNlICkgPT0gJ3N0cmluZycgKSB7XG4gICAgICAgIGlmICggdGlsZVNvdXJjZS5tYXRjaCggL1xccyo8LiovICkgKSB7XG4gICAgICAgICAgICB0aWxlU291cmNlID0gJC5wYXJzZVhtbCggdGlsZVNvdXJjZSApO1xuICAgICAgICB9IGVsc2UgaWYgKCB0aWxlU291cmNlLm1hdGNoKCAvXFxzKltcXHtcXFtdLiovICkgKSB7XG4gICAgICAgICAgICB0aWxlU291cmNlID0gJC5wYXJzZUpTT04odGlsZVNvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWl0VW50aWxSZWFkeSh0aWxlU291cmNlLCBvcmlnaW5hbFRpbGVTb3VyY2UpIHtcbiAgICAgICAgaWYgKHRpbGVTb3VyY2UucmVhZHkpIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh0aWxlU291cmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGVTb3VyY2UuYWRkSGFuZGxlcigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHRpbGVTb3VyY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aWxlU291cmNlLmFkZEhhbmRsZXIoJ29wZW4tZmFpbGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZmFpbENhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXZlbnQubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbFRpbGVTb3VyY2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggJC50eXBlKCB0aWxlU291cmNlICkgPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAvL0lmIGl0cyBzdGlsbCBhIHN0cmluZyBpdCBtZWFucyBpdCBtdXN0IGJlIGEgdXJsIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgICAgIHRpbGVTb3VyY2UgPSBuZXcgJC5UaWxlU291cmNlKHtcbiAgICAgICAgICAgICAgICB1cmw6IHRpbGVTb3VyY2UsXG4gICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW5Qb2xpY3k6IHZpZXdlci5jcm9zc09yaWdpblBvbGljeSxcbiAgICAgICAgICAgICAgICBhamF4V2l0aENyZWRlbnRpYWxzOiB2aWV3ZXIuYWpheFdpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICB1c2VDYW52YXM6IHZpZXdlci51c2VDYW52YXMsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soIGV2ZW50LnRpbGVTb3VyY2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbGVTb3VyY2UuYWRkSGFuZGxlciggJ29wZW4tZmFpbGVkJywgZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIGZhaWxDYWxsYmFjayggZXZlbnQgKTtcbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICB9IGVsc2UgaWYgKCQuaXNQbGFpbk9iamVjdCh0aWxlU291cmNlKSB8fCB0aWxlU291cmNlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICBpZiAoIXRpbGVTb3VyY2UuY3Jvc3NPcmlnaW5Qb2xpY3kgJiYgdmlld2VyLmNyb3NzT3JpZ2luUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgdGlsZVNvdXJjZS5jcm9zc09yaWdpblBvbGljeSA9IHZpZXdlci5jcm9zc09yaWdpblBvbGljeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aWxlU291cmNlLmFqYXhXaXRoQ3JlZGVudGlhbHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRpbGVTb3VyY2UuYWpheFdpdGhDcmVkZW50aWFscyA9IHZpZXdlci5hamF4V2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbGVTb3VyY2UudXNlQ2FudmFzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aWxlU291cmNlLnVzZUNhbnZhcyA9IHZpZXdlci51c2VDYW52YXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCB0aWxlU291cmNlLmdldFRpbGVVcmwgKSApIHtcbiAgICAgICAgICAgICAgICAvL0N1c3RvbSB0aWxlIHNvdXJjZVxuICAgICAgICAgICAgICAgIHZhciBjdXN0b21UaWxlU291cmNlID0gbmV3ICQuVGlsZVNvdXJjZSggdGlsZVNvdXJjZSApO1xuICAgICAgICAgICAgICAgIGN1c3RvbVRpbGVTb3VyY2UuZ2V0VGlsZVVybCA9IHRpbGVTb3VyY2UuZ2V0VGlsZVVybDtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soIGN1c3RvbVRpbGVTb3VyY2UgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9pbmxpbmUgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgIHZhciAkVGlsZVNvdXJjZSA9ICQuVGlsZVNvdXJjZS5kZXRlcm1pbmVUeXBlKCBfdGhpcywgdGlsZVNvdXJjZSApO1xuICAgICAgICAgICAgICAgIGlmICggISRUaWxlU291cmNlICkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsQ2FsbGJhY2soIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVW5hYmxlIHRvIGxvYWQgVGlsZVNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiB0aWxlU291cmNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gJFRpbGVTb3VyY2UucHJvdG90eXBlLmNvbmZpZ3VyZS5hcHBseSggX3RoaXMsIFsgdGlsZVNvdXJjZSBdICk7XG4gICAgICAgICAgICAgICAgd2FpdFVudGlsUmVhZHkobmV3ICRUaWxlU291cmNlKG9wdGlvbnMpLCB0aWxlU291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vY2FuIGFzc3VtZSBpdCdzIGFscmVhZHkgYSB0aWxlIHNvdXJjZSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgd2FpdFVudGlsUmVhZHkodGlsZVNvdXJjZSwgdGlsZVNvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0T3ZlcmxheU9iamVjdCggdmlld2VyLCBvdmVybGF5ICkge1xuICAgIGlmICggb3ZlcmxheSBpbnN0YW5jZW9mICQuT3ZlcmxheSApIHtcbiAgICAgICAgcmV0dXJuIG92ZXJsYXk7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuICAgIGlmICggb3ZlcmxheS5lbGVtZW50ICkge1xuICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBvdmVybGF5LmVsZW1lbnQgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaWQgPSBvdmVybGF5LmlkID9cbiAgICAgICAgICAgIG92ZXJsYXkuaWQgOlxuICAgICAgICAgICAgXCJvcGVuc2VhZHJhZ29uLW92ZXJsYXktXCIgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAgKTtcblxuICAgICAgICBlbGVtZW50ID0gJC5nZXRFbGVtZW50KCBvdmVybGF5LmlkICk7XG4gICAgICAgIGlmICggIWVsZW1lbnQgKSB7XG4gICAgICAgICAgICBlbGVtZW50ICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuICAgICAgICAgICAgZWxlbWVudC5ocmVmICAgID0gXCIjL292ZXJsYXkvXCIgKyBpZDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmlkID0gaWQ7XG4gICAgICAgICQuYWRkQ2xhc3MoIGVsZW1lbnQsIG92ZXJsYXkuY2xhc3NOYW1lID9cbiAgICAgICAgICAgIG92ZXJsYXkuY2xhc3NOYW1lIDpcbiAgICAgICAgICAgIFwib3BlbnNlYWRyYWdvbi1vdmVybGF5XCJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb24gPSBvdmVybGF5LmxvY2F0aW9uO1xuICAgIHZhciB3aWR0aCA9IG92ZXJsYXkud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IG92ZXJsYXkuaGVpZ2h0O1xuICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgICAgdmFyIHggPSBvdmVybGF5Lng7XG4gICAgICAgIHZhciB5ID0gb3ZlcmxheS55O1xuICAgICAgICBpZiAob3ZlcmxheS5weCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHZpZXdlci52aWV3cG9ydC5pbWFnZVRvVmlld3BvcnRSZWN0YW5nbGUobmV3ICQuUmVjdChcbiAgICAgICAgICAgICAgICBvdmVybGF5LnB4LFxuICAgICAgICAgICAgICAgIG92ZXJsYXkucHksXG4gICAgICAgICAgICAgICAgd2lkdGggfHwgMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgfHwgMCkpO1xuICAgICAgICAgICAgeCA9IHJlY3QueDtcbiAgICAgICAgICAgIHkgPSByZWN0Lnk7XG4gICAgICAgICAgICB3aWR0aCA9IHdpZHRoICE9PSB1bmRlZmluZWQgPyByZWN0LndpZHRoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICE9PSB1bmRlZmluZWQgPyByZWN0LmhlaWdodCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsb2NhdGlvbiA9IG5ldyAkLlBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIHZhciBwbGFjZW1lbnQgPSBvdmVybGF5LnBsYWNlbWVudDtcbiAgICBpZiAocGxhY2VtZW50ICYmICQudHlwZShwbGFjZW1lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHBsYWNlbWVudCA9ICQuUGxhY2VtZW50W292ZXJsYXkucGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgJC5PdmVybGF5KHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgb25EcmF3OiBvdmVybGF5Lm9uRHJhdyxcbiAgICAgICAgY2hlY2tSZXNpemU6IG92ZXJsYXkuY2hlY2tSZXNpemUsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHJvdGF0aW9uTW9kZTogb3ZlcmxheS5yb3RhdGlvbk1vZGVcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBEZXRlcm1pbmVzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gb3ZlcmxheSBpbiB0aGUgZ2l2ZW4gb3ZlcmxheXMgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGdldE92ZXJsYXlJbmRleCggb3ZlcmxheXMsIGVsZW1lbnQgKSB7XG4gICAgdmFyIGk7XG4gICAgZm9yICggaSA9IG92ZXJsYXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuICAgICAgICBpZiAoIG92ZXJsYXlzWyBpIF0uZWxlbWVudCA9PT0gZWxlbWVudCApIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBTY2hlZHVsZXJzIHByb3ZpZGUgdGhlIGdlbmVyYWwgZW5naW5lIGZvciBhbmltYXRpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIHNjaGVkdWxlVXBkYXRlKCB2aWV3ZXIsIHVwZGF0ZUZ1bmMgKXtcbiAgICByZXR1cm4gJC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZ1bmN0aW9uKCl7XG4gICAgICAgIHVwZGF0ZUZ1bmMoIHZpZXdlciApO1xuICAgIH0gKTtcbn1cblxuXG4vL3Byb3ZpZGVzIGEgc2VxdWVuY2UgaW4gdGhlIGZhZGUgYW5pbWF0aW9uXG5mdW5jdGlvbiBzY2hlZHVsZUNvbnRyb2xzRmFkZSggdmlld2VyICkge1xuICAgICQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmdW5jdGlvbigpe1xuICAgICAgICB1cGRhdGVDb250cm9sc0ZhZGUoIHZpZXdlciApO1xuICAgIH0pO1xufVxuXG5cbi8vaW5pdGlhdGVzIGFuIGFuaW1hdGlvbiB0byBoaWRlIHRoZSBjb250cm9sc1xuZnVuY3Rpb24gYmVnaW5Db250cm9sc0F1dG9IaWRlKCB2aWV3ZXIgKSB7XG4gICAgaWYgKCAhdmlld2VyLmF1dG9IaWRlQ29udHJvbHMgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmlld2VyLmNvbnRyb2xzU2hvdWxkRmFkZSA9IHRydWU7XG4gICAgdmlld2VyLmNvbnRyb2xzRmFkZUJlZ2luVGltZSA9XG4gICAgICAgICQubm93KCkgK1xuICAgICAgICB2aWV3ZXIuY29udHJvbHNGYWRlRGVsYXk7XG5cbiAgICB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgICAgc2NoZWR1bGVDb250cm9sc0ZhZGUoIHZpZXdlciApO1xuICAgIH0sIHZpZXdlci5jb250cm9sc0ZhZGVEZWxheSApO1xufVxuXG5cbi8vZGV0ZXJtaW5lcyBpZiBmYWRlIGFuaW1hdGlvbiBpcyBkb25lIG9yIGNvbnRpbnVlcyB0aGUgYW5pbWF0aW9uXG5mdW5jdGlvbiB1cGRhdGVDb250cm9sc0ZhZGUoIHZpZXdlciApIHtcbiAgICB2YXIgY3VycmVudFRpbWUsXG4gICAgICAgIGRlbHRhVGltZSxcbiAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgaTtcbiAgICBpZiAoIHZpZXdlci5jb250cm9sc1Nob3VsZEZhZGUgKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lID0gJC5ub3coKTtcbiAgICAgICAgZGVsdGFUaW1lID0gY3VycmVudFRpbWUgLSB2aWV3ZXIuY29udHJvbHNGYWRlQmVnaW5UaW1lO1xuICAgICAgICBvcGFjaXR5ID0gMS4wIC0gZGVsdGFUaW1lIC8gdmlld2VyLmNvbnRyb2xzRmFkZUxlbmd0aDtcblxuICAgICAgICBvcGFjaXR5ID0gTWF0aC5taW4oIDEuMCwgb3BhY2l0eSApO1xuICAgICAgICBvcGFjaXR5ID0gTWF0aC5tYXgoIDAuMCwgb3BhY2l0eSApO1xuXG4gICAgICAgIGZvciAoIGkgPSB2aWV3ZXIuY29udHJvbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh2aWV3ZXIuY29udHJvbHNbIGkgXS5hdXRvRmFkZSkge1xuICAgICAgICAgICAgICAgIHZpZXdlci5jb250cm9sc1sgaSBdLnNldE9wYWNpdHkoIG9wYWNpdHkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggb3BhY2l0eSA+IDAgKSB7XG4gICAgICAgICAgICAvLyBmYWRlIGFnYWluXG4gICAgICAgICAgICBzY2hlZHVsZUNvbnRyb2xzRmFkZSggdmlld2VyICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLy9zdG9wIHRoZSBmYWRlIGFuaW1hdGlvbiBvbiB0aGUgY29udHJvbHMgYW5kIHNob3cgdGhlbVxuZnVuY3Rpb24gYWJvcnRDb250cm9sc0F1dG9IaWRlKCB2aWV3ZXIgKSB7XG4gICAgdmFyIGk7XG4gICAgdmlld2VyLmNvbnRyb2xzU2hvdWxkRmFkZSA9IGZhbHNlO1xuICAgIGZvciAoIGkgPSB2aWV3ZXIuY29udHJvbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgIHZpZXdlci5jb250cm9sc1sgaSBdLnNldE9wYWNpdHkoIDEuMCApO1xuICAgIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERlZmF1bHQgdmlldyBldmVudCBoYW5kbGVycy5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIG9uRm9jdXMoKXtcbiAgICBhYm9ydENvbnRyb2xzQXV0b0hpZGUoIHRoaXMgKTtcbn1cblxuZnVuY3Rpb24gb25CbHVyKCl7XG4gICAgYmVnaW5Db250cm9sc0F1dG9IaWRlKCB0aGlzICk7XG5cbn1cblxuZnVuY3Rpb24gb25DYW52YXNLZXlEb3duKCBldmVudCApIHtcbiAgICBpZiAoICFldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvbiAmJiAhZXZlbnQuY3RybCAmJiAhZXZlbnQuYWx0ICYmICFldmVudC5tZXRhICkge1xuICAgICAgICBzd2l0Y2goIGV2ZW50LmtleUNvZGUgKXtcbiAgICAgICAgICAgIGNhc2UgMzg6Ly91cCBhcnJvd1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQuc2hpZnQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KDEuMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5wYW5CeSh0aGlzLnZpZXdwb3J0LmRlbHRhUG9pbnRzRnJvbVBpeGVscyhuZXcgJC5Qb2ludCgwLCAtNDApKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgNDA6Ly9kb3duIGFycm93XG4gICAgICAgICAgICAgICAgaWYgKCBldmVudC5zaGlmdCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC56b29tQnkoMC45KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LnBhbkJ5KHRoaXMudmlld3BvcnQuZGVsdGFQb2ludHNGcm9tUGl4ZWxzKG5ldyAkLlBvaW50KDAsIDQwKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LmFwcGx5Q29uc3RyYWludHMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIDM3Oi8vbGVmdCBhcnJvd1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQucGFuQnkodGhpcy52aWV3cG9ydC5kZWx0YVBvaW50c0Zyb21QaXhlbHMobmV3ICQuUG9pbnQoLTQwLCAwKSkpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgMzk6Ly9yaWdodCBhcnJvd1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQucGFuQnkodGhpcy52aWV3cG9ydC5kZWx0YVBvaW50c0Zyb21QaXhlbHMobmV3ICQuUG9pbnQoNDAsIDApKSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCAnbmF2aWdhdG9yIGtleWNvZGUgJXMnLCBldmVudC5rZXlDb2RlICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2FudmFzS2V5UHJlc3MoIGV2ZW50ICkge1xuICAgIGlmICggIWV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uICYmICFldmVudC5jdHJsICYmICFldmVudC5hbHQgJiYgIWV2ZW50Lm1ldGEgKSB7XG4gICAgICAgIHN3aXRjaCggZXZlbnQua2V5Q29kZSApe1xuICAgICAgICAgICAgY2FzZSA0MzovLz18K1xuICAgICAgICAgICAgY2FzZSA2MTovLz18K1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KDEuMSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSA0NTovLy18X1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KDAuOSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSA0ODovLzB8KVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuZ29Ib21lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSAxMTk6Ly93XG4gICAgICAgICAgICBjYXNlIDg3Oi8vV1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQuc2hpZnQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KDEuMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5wYW5CeSh0aGlzLnZpZXdwb3J0LmRlbHRhUG9pbnRzRnJvbVBpeGVscyhuZXcgJC5Qb2ludCgwLCAtNDApKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgMTE1Oi8vc1xuICAgICAgICAgICAgY2FzZSA4MzovL1NcbiAgICAgICAgICAgICAgICBpZiAoIGV2ZW50LnNoaWZ0ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0Lnpvb21CeSgwLjkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQucGFuQnkodGhpcy52aWV3cG9ydC5kZWx0YVBvaW50c0Zyb21QaXhlbHMobmV3ICQuUG9pbnQoMCwgNDApKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgOTc6Ly9hXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5wYW5CeSh0aGlzLnZpZXdwb3J0LmRlbHRhUG9pbnRzRnJvbVBpeGVscyhuZXcgJC5Qb2ludCgtNDAsIDApKSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSAxMDA6Ly9kXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5wYW5CeSh0aGlzLnZpZXdwb3J0LmRlbHRhUG9pbnRzRnJvbVBpeGVscyhuZXcgJC5Qb2ludCg0MCwgMCkpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LmFwcGx5Q29uc3RyYWludHMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coICduYXZpZ2F0b3Iga2V5Y29kZSAlcycsIGV2ZW50LmtleUNvZGUgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25DYW52YXNDbGljayggZXZlbnQgKSB7XG4gICAgdmFyIGdlc3R1cmVTZXR0aW5ncztcblxuICAgIHZhciBoYXZlS2V5Ym9hcmRGb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT0gdGhpcy5jYW52YXM7XG5cbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGtleWJvYXJkIGZvY3VzLCByZXF1ZXN0IGl0LlxuICAgIGlmICggIWhhdmVLZXlib2FyZEZvY3VzICkge1xuICAgICAgICB0aGlzLmNhbnZhcy5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmICggIWV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uICYmIHRoaXMudmlld3BvcnQgJiYgZXZlbnQucXVpY2sgKSB7XG4gICAgICAgIGdlc3R1cmVTZXR0aW5ncyA9IHRoaXMuZ2VzdHVyZVNldHRpbmdzQnlEZXZpY2VUeXBlKCBldmVudC5wb2ludGVyVHlwZSApO1xuICAgICAgICBpZiAoIGdlc3R1cmVTZXR0aW5ncy5jbGlja1RvWm9vbSApIHtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KFxuICAgICAgICAgICAgICAgIGV2ZW50LnNoaWZ0ID8gMS4wIC8gdGhpcy56b29tUGVyQ2xpY2sgOiB0aGlzLnpvb21QZXJDbGljayxcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKCBldmVudC5wb3NpdGlvbiwgdHJ1ZSApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmFpc2VkIHdoZW4gYSBtb3VzZSBwcmVzcy9yZWxlYXNlIG9yIHRvdWNoL3JlbW92ZSBvY2N1cnMgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNjYW52YXN9IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgY2FudmFzLWNsaWNrXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBxdWljayAtIFRydWUgb25seSBpZiB0aGUgY2xpY2tEaXN0VGhyZXNob2xkIGFuZCBjbGlja1RpbWVUaHJlc2hvbGQgYXJlIGJvdGggcGFzc2VkLiBVc2VmdWwgZm9yIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIGNsaWNrcyBhbmQgZHJhZ3MuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBzaGlmdCAtIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMucmFpc2VFdmVudCggJ2NhbnZhcy1jbGljaycsIHtcbiAgICAgICAgdHJhY2tlcjogZXZlbnQuZXZlbnRTb3VyY2UsXG4gICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgcXVpY2s6IGV2ZW50LnF1aWNrLFxuICAgICAgICBzaGlmdDogZXZlbnQuc2hpZnQsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25DYW52YXNEYmxDbGljayggZXZlbnQgKSB7XG4gICAgdmFyIGdlc3R1cmVTZXR0aW5ncztcblxuICAgIGlmICggIWV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uICYmIHRoaXMudmlld3BvcnQgKSB7XG4gICAgICAgIGdlc3R1cmVTZXR0aW5ncyA9IHRoaXMuZ2VzdHVyZVNldHRpbmdzQnlEZXZpY2VUeXBlKCBldmVudC5wb2ludGVyVHlwZSApO1xuICAgICAgICBpZiAoIGdlc3R1cmVTZXR0aW5ncy5kYmxDbGlja1RvWm9vbSApIHtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KFxuICAgICAgICAgICAgICAgIGV2ZW50LnNoaWZ0ID8gMS4wIC8gdGhpcy56b29tUGVyQ2xpY2sgOiB0aGlzLnpvb21QZXJDbGljayxcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKCBldmVudC5wb3NpdGlvbiwgdHJ1ZSApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmFpc2VkIHdoZW4gYSBkb3VibGUgbW91c2UgcHJlc3MvcmVsZWFzZSBvciB0b3VjaC9yZW1vdmUgb2NjdXJzIG9uIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2FudmFzfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNhbnZhcy1kb3VibGUtY2xpY2tcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyIC0gQSByZWZlcmVuY2UgdG8gdGhlIE1vdXNlVHJhY2tlciB3aGljaCBvcmlnaW5hdGVkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNoaWZ0IC0gVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCAnY2FudmFzLWRvdWJsZS1jbGljaycsIHtcbiAgICAgICAgdHJhY2tlcjogZXZlbnQuZXZlbnRTb3VyY2UsXG4gICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgc2hpZnQ6IGV2ZW50LnNoaWZ0LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQ2FudmFzRHJhZyggZXZlbnQgKSB7XG4gICAgdmFyIGdlc3R1cmVTZXR0aW5ncztcblxuICAgIGlmICggIWV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uICYmIHRoaXMudmlld3BvcnQgKSB7XG4gICAgICAgIGdlc3R1cmVTZXR0aW5ncyA9IHRoaXMuZ2VzdHVyZVNldHRpbmdzQnlEZXZpY2VUeXBlKCBldmVudC5wb2ludGVyVHlwZSApO1xuICAgICAgICBpZiggIXRoaXMucGFuSG9yaXpvbnRhbCApe1xuICAgICAgICAgICAgZXZlbnQuZGVsdGEueCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYoICF0aGlzLnBhblZlcnRpY2FsICl7XG4gICAgICAgICAgICBldmVudC5kZWx0YS55ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXdwb3J0LnBhbkJ5KCB0aGlzLnZpZXdwb3J0LmRlbHRhUG9pbnRzRnJvbVBpeGVscyggZXZlbnQuZGVsdGEubmVnYXRlKCkgKSwgZ2VzdHVyZVNldHRpbmdzLmZsaWNrRW5hYmxlZCApO1xuICAgICAgICBpZiggdGhpcy5jb25zdHJhaW5EdXJpbmdQYW4gKXtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJhaXNlZCB3aGVuIGEgbW91c2Ugb3IgdG91Y2ggZHJhZyBvcGVyYXRpb24gb2NjdXJzIG9uIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2FudmFzfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNhbnZhcy1kcmFnXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBkZWx0YSAtIFRoZSB4LHkgY29tcG9uZW50cyBvZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHN0YXJ0IGRyYWcgYW5kIGVuZCBkcmFnLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzcGVlZCAtIEN1cnJlbnQgY29tcHV0ZWQgc3BlZWQsIGluIHBpeGVscyBwZXIgc2Vjb25kLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkaXJlY3Rpb24gLSBDdXJyZW50IGNvbXB1dGVkIGRpcmVjdGlvbiwgZXhwcmVzc2VkIGFzIGFuIGFuZ2xlIGNvdW50ZXJjbG9ja3dpc2UgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aXZlIFggYXhpcyAoLXBpIHRvIHBpLCBpbiByYWRpYW5zKS4gT25seSB2YWxpZCBpZiBzcGVlZCA+IDAuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBzaGlmdCAtIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMucmFpc2VFdmVudCggJ2NhbnZhcy1kcmFnJywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICBkZWx0YTogZXZlbnQuZGVsdGEsXG4gICAgICAgIHNwZWVkOiBldmVudC5zcGVlZCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudC5kaXJlY3Rpb24sXG4gICAgICAgIHNoaWZ0OiBldmVudC5zaGlmdCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkNhbnZhc0RyYWdFbmQoIGV2ZW50ICkge1xuICAgIGlmICghZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb24gJiYgdGhpcy52aWV3cG9ydCkge1xuICAgICAgICB2YXIgZ2VzdHVyZVNldHRpbmdzID0gdGhpcy5nZXN0dXJlU2V0dGluZ3NCeURldmljZVR5cGUoZXZlbnQucG9pbnRlclR5cGUpO1xuICAgICAgICBpZiAoZ2VzdHVyZVNldHRpbmdzLmZsaWNrRW5hYmxlZCAmJlxuICAgICAgICAgICAgZXZlbnQuc3BlZWQgPj0gZ2VzdHVyZVNldHRpbmdzLmZsaWNrTWluU3BlZWQpIHtcbiAgICAgICAgICAgIHZhciBhbXBsaXR1ZGVYID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhbkhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBhbXBsaXR1ZGVYID0gZ2VzdHVyZVNldHRpbmdzLmZsaWNrTW9tZW50dW0gKiBldmVudC5zcGVlZCAqXG4gICAgICAgICAgICAgICAgICAgIE1hdGguY29zKGV2ZW50LmRpcmVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYW1wbGl0dWRlWSA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5wYW5WZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIGFtcGxpdHVkZVkgPSBnZXN0dXJlU2V0dGluZ3MuZmxpY2tNb21lbnR1bSAqIGV2ZW50LnNwZWVkICpcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZXZlbnQuZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjZW50ZXIgPSB0aGlzLnZpZXdwb3J0LnBpeGVsRnJvbVBvaW50KFxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuZ2V0Q2VudGVyKHRydWUpKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKFxuICAgICAgICAgICAgICAgIG5ldyAkLlBvaW50KGNlbnRlci54IC0gYW1wbGl0dWRlWCwgY2VudGVyLnkgLSBhbXBsaXR1ZGVZKSk7XG4gICAgICAgICAgICB0aGlzLnZpZXdwb3J0LnBhblRvKHRhcmdldCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSYWlzZWQgd2hlbiBhIG1vdXNlIG9yIHRvdWNoIGRyYWcgb3BlcmF0aW9uIGVuZHMgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNjYW52YXN9IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgY2FudmFzLWRyYWctZW5kXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHNwZWVkIC0gU3BlZWQgYXQgdGhlIGVuZCBvZiBhIGRyYWcgZ2VzdHVyZSwgaW4gcGl4ZWxzIHBlciBzZWNvbmQuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGRpcmVjdGlvbiAtIERpcmVjdGlvbiBhdCB0aGUgZW5kIG9mIGEgZHJhZyBnZXN0dXJlLCBleHByZXNzZWQgYXMgYW4gYW5nbGUgY291bnRlcmNsb2Nrd2lzZSByZWxhdGl2ZSB0byB0aGUgcG9zaXRpdmUgWCBheGlzICgtcGkgdG8gcGksIGluIHJhZGlhbnMpLiBPbmx5IHZhbGlkIGlmIHNwZWVkID4gMC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNoaWZ0IC0gVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCdjYW52YXMtZHJhZy1lbmQnLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBwb3NpdGlvbjogZXZlbnQucG9zaXRpb24sXG4gICAgICAgIHNwZWVkOiBldmVudC5zcGVlZCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudC5kaXJlY3Rpb24sXG4gICAgICAgIHNoaWZ0OiBldmVudC5zaGlmdCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkNhbnZhc0VudGVyKCBldmVudCApIHtcbiAgICAvKipcbiAgICAgKiBSYWlzZWQgd2hlbiBhIHBvaW50ZXIgZW50ZXJzIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2FudmFzfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNhbnZhcy1lbnRlclxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IHRyYWNrZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIHdoaWNoIG9yaWdpbmF0ZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gcG9pbnRlclR5cGUgLSBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJ1dHRvbnMgLSBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZC4gQSBjb21iaW5hdGlvbiBvZiBiaXQgZmxhZ3MgMDogbm9uZSwgMTogcHJpbWFyeSAob3IgdG91Y2ggY29udGFjdCksIDI6IHNlY29uZGFyeSwgNDogYXV4IChvZnRlbiBtaWRkbGUpLCA4OiBYMSAob2Z0ZW4gYmFjayksIDE2OiBYMiAob2Z0ZW4gZm9yd2FyZCksIDMyOiBwZW4gZXJhc2VyLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwb2ludGVycyAtIE51bWJlciBvZiBwb2ludGVycyAoYWxsIHR5cGVzKSBhY3RpdmUgaW4gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGluc2lkZUVsZW1lbnRQcmVzc2VkIC0gVHJ1ZSBpZiB0aGUgbGVmdCBtb3VzZSBidXR0b24gaXMgY3VycmVudGx5IGJlaW5nIHByZXNzZWQgYW5kIHdhcyBpbml0aWF0ZWQgaW5zaWRlIHRoZSB0cmFja2VkIGVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGJ1dHRvbkRvd25BbnkgLSBXYXMgdGhlIGJ1dHRvbiBkb3duIGFueXdoZXJlIGluIHRoZSBzY3JlZW4gZHVyaW5nIHRoZSBldmVudC4gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWQ7XCI+RGVwcmVjYXRlZC4gVXNlIGJ1dHRvbnMgaW5zdGVhZC48L3NwYW4+XG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IG9yaWdpbmFsRXZlbnQgLSBUaGUgb3JpZ2luYWwgRE9NIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLnJhaXNlRXZlbnQoICdjYW52YXMtZW50ZXInLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBwb2ludGVyVHlwZTogZXZlbnQucG9pbnRlclR5cGUsXG4gICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgYnV0dG9uczogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgcG9pbnRlcnM6IGV2ZW50LnBvaW50ZXJzLFxuICAgICAgICBpbnNpZGVFbGVtZW50UHJlc3NlZDogZXZlbnQuaW5zaWRlRWxlbWVudFByZXNzZWQsXG4gICAgICAgIGJ1dHRvbkRvd25Bbnk6IGV2ZW50LmJ1dHRvbkRvd25BbnksXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnRcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25DYW52YXNFeGl0KCBldmVudCApIHtcbiAgICAvKipcbiAgICAgKiBSYWlzZWQgd2hlbiBhIHBvaW50ZXIgbGVhdmVzIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2FudmFzfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNhbnZhcy1leGl0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwb2ludGVyVHlwZSAtIFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gYnV0dG9ucyAtIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLiBBIGNvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHBvaW50ZXJzIC0gTnVtYmVyIG9mIHBvaW50ZXJzIChhbGwgdHlwZXMpIGFjdGl2ZSBpbiB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW5zaWRlRWxlbWVudFByZXNzZWQgLSBUcnVlIGlmIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBpcyBjdXJyZW50bHkgYmVpbmcgcHJlc3NlZCBhbmQgd2FzIGluaXRpYXRlZCBpbnNpZGUgdGhlIHRyYWNrZWQgZWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gYnV0dG9uRG93bkFueSAtIFdhcyB0aGUgYnV0dG9uIGRvd24gYW55d2hlcmUgaW4gdGhlIHNjcmVlbiBkdXJpbmcgdGhlIGV2ZW50LiA8c3BhbiBzdHlsZT1cImNvbG9yOnJlZDtcIj5EZXByZWNhdGVkLiBVc2UgYnV0dG9ucyBpbnN0ZWFkLjwvc3Bhbj5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMucmFpc2VFdmVudCggJ2NhbnZhcy1leGl0Jywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9pbnRlclR5cGU6IGV2ZW50LnBvaW50ZXJUeXBlLFxuICAgICAgICBwb3NpdGlvbjogZXZlbnQucG9zaXRpb24sXG4gICAgICAgIGJ1dHRvbnM6IGV2ZW50LmJ1dHRvbnMsXG4gICAgICAgIHBvaW50ZXJzOiBldmVudC5wb2ludGVycyxcbiAgICAgICAgaW5zaWRlRWxlbWVudFByZXNzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkLFxuICAgICAgICBidXR0b25Eb3duQW55OiBldmVudC5idXR0b25Eb3duQW55LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQ2FudmFzUHJlc3MoIGV2ZW50ICkge1xuICAgIC8qKlxuICAgICAqIFJhaXNlZCB3aGVuIHRoZSBwcmltYXJ5IG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIG9yIHRvdWNoIHN0YXJ0cyBvbiB0aGUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI2NhbnZhc30gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBldmVudCBjYW52YXMtcHJlc3NcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyIC0gQSByZWZlcmVuY2UgdG8gdGhlIE1vdXNlVHJhY2tlciB3aGljaCBvcmlnaW5hdGVkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHBvaW50ZXJUeXBlIC0gXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW5zaWRlRWxlbWVudFByZXNzZWQgLSBUcnVlIGlmIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBpcyBjdXJyZW50bHkgYmVpbmcgcHJlc3NlZCBhbmQgd2FzIGluaXRpYXRlZCBpbnNpZGUgdGhlIHRyYWNrZWQgZWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW5zaWRlRWxlbWVudFJlbGVhc2VkIC0gVHJ1ZSBpZiB0aGUgY3Vyc29yIHN0aWxsIGluc2lkZSB0aGUgdHJhY2tlZCBlbGVtZW50IHdoZW4gdGhlIGJ1dHRvbiB3YXMgcmVsZWFzZWQuXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IG9yaWdpbmFsRXZlbnQgLSBUaGUgb3JpZ2luYWwgRE9NIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLnJhaXNlRXZlbnQoICdjYW52YXMtcHJlc3MnLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBwb2ludGVyVHlwZTogZXZlbnQucG9pbnRlclR5cGUsXG4gICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgaW5zaWRlRWxlbWVudFByZXNzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkLFxuICAgICAgICBpbnNpZGVFbGVtZW50UmVsZWFzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRSZWxlYXNlZCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkNhbnZhc1JlbGVhc2UoIGV2ZW50ICkge1xuICAgIC8qKlxuICAgICAqIFJhaXNlZCB3aGVuIHRoZSBwcmltYXJ5IG1vdXNlIGJ1dHRvbiBpcyByZWxlYXNlZCBvciB0b3VjaCBlbmRzIG9uIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY2FudmFzfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNhbnZhcy1yZWxlYXNlXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwb2ludGVyVHlwZSAtIFwibW91c2VcIiwgXCJ0b3VjaFwiLCBcInBlblwiLCBldGMuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGluc2lkZUVsZW1lbnRQcmVzc2VkIC0gVHJ1ZSBpZiB0aGUgbGVmdCBtb3VzZSBidXR0b24gaXMgY3VycmVudGx5IGJlaW5nIHByZXNzZWQgYW5kIHdhcyBpbml0aWF0ZWQgaW5zaWRlIHRoZSB0cmFja2VkIGVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGluc2lkZUVsZW1lbnRSZWxlYXNlZCAtIFRydWUgaWYgdGhlIGN1cnNvciBzdGlsbCBpbnNpZGUgdGhlIHRyYWNrZWQgZWxlbWVudCB3aGVuIHRoZSBidXR0b24gd2FzIHJlbGVhc2VkLlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCAnY2FudmFzLXJlbGVhc2UnLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBwb2ludGVyVHlwZTogZXZlbnQucG9pbnRlclR5cGUsXG4gICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgaW5zaWRlRWxlbWVudFByZXNzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkLFxuICAgICAgICBpbnNpZGVFbGVtZW50UmVsZWFzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRSZWxlYXNlZCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkNhbnZhc05vblByaW1hcnlQcmVzcyggZXZlbnQgKSB7XG4gICAgLyoqXG4gICAgICogUmFpc2VkIHdoZW4gYW55IG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uIGlzIHByZXNzZWQgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNjYW52YXN9IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgY2FudmFzLW5vbnByaW1hcnktcHJlc3NcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyIC0gQSByZWZlcmVuY2UgdG8gdGhlIE1vdXNlVHJhY2tlciB3aGljaCBvcmlnaW5hdGVkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gcG9pbnRlclR5cGUgLSBcIm1vdXNlXCIsIFwidG91Y2hcIiwgXCJwZW5cIiwgZXRjLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBidXR0b24gLSBCdXR0b24gd2hpY2ggY2F1c2VkIHRoZSBldmVudC5cbiAgICAgKiAgICAgIC0xOiBub25lLCAwOiBwcmltYXJ5L2xlZnQsIDE6IGF1eC9taWRkbGUsIDI6IHNlY29uZGFyeS9yaWdodCwgMzogWDEvYmFjaywgNDogWDIvZm9yd2FyZCwgNTogcGVuIGVyYXNlci5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gYnV0dG9ucyAtIEN1cnJlbnQgYnV0dG9ucyBwcmVzc2VkLlxuICAgICAqICAgICAgQ29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMucmFpc2VFdmVudCggJ2NhbnZhcy1ub25wcmltYXJ5LXByZXNzJywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICBwb2ludGVyVHlwZTogZXZlbnQucG9pbnRlclR5cGUsXG4gICAgICAgIGJ1dHRvbjogZXZlbnQuYnV0dG9uLFxuICAgICAgICBidXR0b25zOiBldmVudC5idXR0b25zLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQ2FudmFzTm9uUHJpbWFyeVJlbGVhc2UoIGV2ZW50ICkge1xuICAgIC8qKlxuICAgICAqIFJhaXNlZCB3aGVuIGFueSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiBpcyByZWxlYXNlZCBvbiB0aGUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI2NhbnZhc30gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBldmVudCBjYW52YXMtbm9ucHJpbWFyeS1yZWxlYXNlXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHBvaW50ZXJUeXBlIC0gXCJtb3VzZVwiLCBcInRvdWNoXCIsIFwicGVuXCIsIGV0Yy5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gYnV0dG9uIC0gQnV0dG9uIHdoaWNoIGNhdXNlZCB0aGUgZXZlbnQuXG4gICAgICogICAgICAtMTogbm9uZSwgMDogcHJpbWFyeS9sZWZ0LCAxOiBhdXgvbWlkZGxlLCAyOiBzZWNvbmRhcnkvcmlnaHQsIDM6IFgxL2JhY2ssIDQ6IFgyL2ZvcndhcmQsIDU6IHBlbiBlcmFzZXIuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJ1dHRvbnMgLSBDdXJyZW50IGJ1dHRvbnMgcHJlc3NlZC5cbiAgICAgKiAgICAgIENvbWJpbmF0aW9uIG9mIGJpdCBmbGFncyAwOiBub25lLCAxOiBwcmltYXJ5IChvciB0b3VjaCBjb250YWN0KSwgMjogc2Vjb25kYXJ5LCA0OiBhdXggKG9mdGVuIG1pZGRsZSksIDg6IFgxIChvZnRlbiBiYWNrKSwgMTY6IFgyIChvZnRlbiBmb3J3YXJkKSwgMzI6IHBlbiBlcmFzZXIuXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IG9yaWdpbmFsRXZlbnQgLSBUaGUgb3JpZ2luYWwgRE9NIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLnJhaXNlRXZlbnQoICdjYW52YXMtbm9ucHJpbWFyeS1yZWxlYXNlJywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICBwb2ludGVyVHlwZTogZXZlbnQucG9pbnRlclR5cGUsXG4gICAgICAgIGJ1dHRvbjogZXZlbnQuYnV0dG9uLFxuICAgICAgICBidXR0b25zOiBldmVudC5idXR0b25zLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQ2FudmFzUGluY2goIGV2ZW50ICkge1xuICAgIHZhciBnZXN0dXJlU2V0dGluZ3MsXG4gICAgICAgIGNlbnRlclB0LFxuICAgICAgICBsYXN0Q2VudGVyUHQsXG4gICAgICAgIHBhbkJ5UHQ7XG5cbiAgICBpZiAoICFldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvbiAmJiB0aGlzLnZpZXdwb3J0ICkge1xuICAgICAgICBnZXN0dXJlU2V0dGluZ3MgPSB0aGlzLmdlc3R1cmVTZXR0aW5nc0J5RGV2aWNlVHlwZSggZXZlbnQucG9pbnRlclR5cGUgKTtcbiAgICAgICAgaWYgKCBnZXN0dXJlU2V0dGluZ3MucGluY2hUb1pvb20gKSB7XG4gICAgICAgICAgICBjZW50ZXJQdCA9IHRoaXMudmlld3BvcnQucG9pbnRGcm9tUGl4ZWwoIGV2ZW50LmNlbnRlciwgdHJ1ZSApO1xuICAgICAgICAgICAgbGFzdENlbnRlclB0ID0gdGhpcy52aWV3cG9ydC5wb2ludEZyb21QaXhlbCggZXZlbnQubGFzdENlbnRlciwgdHJ1ZSApO1xuICAgICAgICAgICAgcGFuQnlQdCA9IGxhc3RDZW50ZXJQdC5taW51cyggY2VudGVyUHQgKTtcbiAgICAgICAgICAgIGlmKCAhdGhpcy5wYW5Ib3Jpem9udGFsICkge1xuICAgICAgICAgICAgICAgIHBhbkJ5UHQueCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggIXRoaXMucGFuVmVydGljYWwgKSB7XG4gICAgICAgICAgICAgICAgcGFuQnlQdC55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KCBldmVudC5kaXN0YW5jZSAvIGV2ZW50Lmxhc3REaXN0YW5jZSwgY2VudGVyUHQsIHRydWUgKTtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQucGFuQnkoIHBhbkJ5UHQsIHRydWUgKTtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICggZ2VzdHVyZVNldHRpbmdzLnBpbmNoUm90YXRlICkge1xuICAgICAgICAgICAgLy8gUGluY2ggcm90YXRlXG4gICAgICAgICAgICB2YXIgYW5nbGUxID0gTWF0aC5hdGFuMihldmVudC5nZXN0dXJlUG9pbnRzWzBdLmN1cnJlbnRQb3MueSAtIGV2ZW50Lmdlc3R1cmVQb2ludHNbMV0uY3VycmVudFBvcy55LFxuICAgICAgICAgICAgICAgIGV2ZW50Lmdlc3R1cmVQb2ludHNbMF0uY3VycmVudFBvcy54IC0gZXZlbnQuZ2VzdHVyZVBvaW50c1sxXS5jdXJyZW50UG9zLngpO1xuICAgICAgICAgICAgdmFyIGFuZ2xlMiA9IE1hdGguYXRhbjIoZXZlbnQuZ2VzdHVyZVBvaW50c1swXS5sYXN0UG9zLnkgLSBldmVudC5nZXN0dXJlUG9pbnRzWzFdLmxhc3RQb3MueSxcbiAgICAgICAgICAgICAgICBldmVudC5nZXN0dXJlUG9pbnRzWzBdLmxhc3RQb3MueCAtIGV2ZW50Lmdlc3R1cmVQb2ludHNbMV0ubGFzdFBvcy54KTtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuc2V0Um90YXRpb24odGhpcy52aWV3cG9ydC5nZXRSb3RhdGlvbigpICsgKChhbmdsZTEgLSBhbmdsZTIpICogKDE4MCAvIE1hdGguUEkpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmFpc2VkIHdoZW4gYSBwaW5jaCBldmVudCBvY2N1cnMgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNjYW52YXN9IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgY2FudmFzLXBpbmNoXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyLkdlc3R1cmVQb2ludD59IGdlc3R1cmVQb2ludHMgLSBHZXN0dXJlIHBvaW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIGdlc3R1cmUuIFZlbG9jaXR5IGRhdGEgY2FuIGJlIGZvdW5kIGhlcmUuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBsYXN0Q2VudGVyIC0gVGhlIHByZXZpb3VzIGNlbnRlciBwb2ludCBvZiB0aGUgdHdvIHBpbmNoIGNvbnRhY3QgcG9pbnRzIHJlbGF0aXZlIHRvIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBjZW50ZXIgLSBUaGUgY2VudGVyIHBvaW50IG9mIHRoZSB0d28gcGluY2ggY29udGFjdCBwb2ludHMgcmVsYXRpdmUgdG8gdGhlIHRyYWNrZWQgZWxlbWVudC5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbGFzdERpc3RhbmNlIC0gVGhlIHByZXZpb3VzIGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBwaW5jaCBjb250YWN0IHBvaW50cyBpbiBDU1MgcGl4ZWxzLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcGluY2ggY29udGFjdCBwb2ludHMgaW4gQ1NTIHBpeGVscy5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNoaWZ0IC0gVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCdjYW52YXMtcGluY2gnLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBnZXN0dXJlUG9pbnRzOiBldmVudC5nZXN0dXJlUG9pbnRzLFxuICAgICAgICBsYXN0Q2VudGVyOiBldmVudC5sYXN0Q2VudGVyLFxuICAgICAgICBjZW50ZXI6IGV2ZW50LmNlbnRlcixcbiAgICAgICAgbGFzdERpc3RhbmNlOiBldmVudC5sYXN0RGlzdGFuY2UsXG4gICAgICAgIGRpc3RhbmNlOiBldmVudC5kaXN0YW5jZSxcbiAgICAgICAgc2hpZnQ6IGV2ZW50LnNoaWZ0LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG4gICAgLy9jYW5jZWxzIGV2ZW50XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNhbnZhc1Njcm9sbCggZXZlbnQgKSB7XG4gICAgdmFyIGdlc3R1cmVTZXR0aW5ncyxcbiAgICAgICAgZmFjdG9yLFxuICAgICAgICB0aGlzU2Nyb2xsVGltZSxcbiAgICAgICAgZGVsdGFTY3JvbGxUaW1lO1xuXG4gICAgLyogQ2VydGFpbiBzY3JvbGwgZGV2aWNlcyBmaXJlIHRoZSBzY3JvbGwgZXZlbnQgd2F5IHRvbyBmYXN0IHNvIHdlIGFyZSBpbmplY3RpbmcgYSBzaW1wbGUgYWRqdXN0bWVudCB0byBrZWVwIHRoaW5nc1xuICAgICAqIHBhcnRpYWxseSBub3JtYWxpemVkLiBJZiB3ZSBoYXZlIGFscmVhZHkgZmlyZWQgYW4gZXZlbnQgd2l0aGluIHRoZSBsYXN0ICdtaW5TY3JvbGxEZWx0YScgbWlsbGlzZWNvbmRzIHdlIHNraXBcbiAgICAgKiB0aGlzIG9uZSBhbmQgd2FpdCBmb3IgdGhlIG5leHQgZXZlbnQuICovXG4gICAgdGhpc1Njcm9sbFRpbWUgPSAkLm5vdygpO1xuICAgIGRlbHRhU2Nyb2xsVGltZSA9IHRoaXNTY3JvbGxUaW1lIC0gdGhpcy5fbGFzdFNjcm9sbFRpbWU7XG4gICAgaWYgKGRlbHRhU2Nyb2xsVGltZSA+IHRoaXMubWluU2Nyb2xsRGVsdGFUaW1lKSB7XG4gICAgICAgIHRoaXMuX2xhc3RTY3JvbGxUaW1lID0gdGhpc1Njcm9sbFRpbWU7XG5cbiAgICAgICAgaWYgKCAhZXZlbnQucHJldmVudERlZmF1bHRBY3Rpb24gJiYgdGhpcy52aWV3cG9ydCApIHtcbiAgICAgICAgICAgIGdlc3R1cmVTZXR0aW5ncyA9IHRoaXMuZ2VzdHVyZVNldHRpbmdzQnlEZXZpY2VUeXBlKCBldmVudC5wb2ludGVyVHlwZSApO1xuICAgICAgICAgICAgaWYgKCBnZXN0dXJlU2V0dGluZ3Muc2Nyb2xsVG9ab29tICkge1xuICAgICAgICAgICAgICAgIGZhY3RvciA9IE1hdGgucG93KCB0aGlzLnpvb21QZXJTY3JvbGwsIGV2ZW50LnNjcm9sbCApO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KFxuICAgICAgICAgICAgICAgICAgICBmYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQucG9pbnRGcm9tUGl4ZWwoIGV2ZW50LnBvc2l0aW9uLCB0cnVlIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiBhIHNjcm9sbCBldmVudCBvY2N1cnMgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNjYW52YXN9IGVsZW1lbnQgKG1vdXNlIHdoZWVsKS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IGNhbnZhcy1zY3JvbGxcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBNb3VzZVRyYWNrZXIgd2hpY2ggb3JpZ2luYXRlZCB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gc2Nyb2xsIC0gVGhlIHNjcm9sbCBkZWx0YSBmb3IgdGhlIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNoaWZ0IC0gVHJ1ZSBpZiB0aGUgc2hpZnQga2V5IHdhcyBwcmVzc2VkIGR1cmluZyB0aGlzIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ2NhbnZhcy1zY3JvbGwnLCB7XG4gICAgICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgICAgIHNjcm9sbDogZXZlbnQuc2Nyb2xsLFxuICAgICAgICAgICAgc2hpZnQ6IGV2ZW50LnNoaWZ0LFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGdlc3R1cmVTZXR0aW5ncyAmJiBnZXN0dXJlU2V0dGluZ3Muc2Nyb2xsVG9ab29tKSB7XG4gICAgICAgICAgICAvL2NhbmNlbHMgZXZlbnRcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZVNldHRpbmdzID0gdGhpcy5nZXN0dXJlU2V0dGluZ3NCeURldmljZVR5cGUoIGV2ZW50LnBvaW50ZXJUeXBlICk7XG4gICAgICAgIGlmIChnZXN0dXJlU2V0dGluZ3MgJiYgZ2VzdHVyZVNldHRpbmdzLnNjcm9sbFRvWm9vbSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8vIFdlIGFyZSBzd2FsbG93aW5nIHRoaXMgZXZlbnRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gb25Db250YWluZXJFbnRlciggZXZlbnQgKSB7XG4gICAgVEhJU1sgdGhpcy5oYXNoIF0ubW91c2VJbnNpZGUgPSB0cnVlO1xuICAgIGFib3J0Q29udHJvbHNBdXRvSGlkZSggdGhpcyApO1xuICAgIC8qKlxuICAgICAqIFJhaXNlZCB3aGVuIHRoZSBjdXJzb3IgZW50ZXJzIHRoZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjY29udGFpbmVyfSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV2ZW50IGNvbnRhaW5lci1lbnRlclxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IHRyYWNrZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIHdoaWNoIG9yaWdpbmF0ZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBidXR0b25zIC0gQ3VycmVudCBidXR0b25zIHByZXNzZWQuIEEgY29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcG9pbnRlcnMgLSBOdW1iZXIgb2YgcG9pbnRlcnMgKGFsbCB0eXBlcykgYWN0aXZlIGluIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpbnNpZGVFbGVtZW50UHJlc3NlZCAtIFRydWUgaWYgdGhlIGxlZnQgbW91c2UgYnV0dG9uIGlzIGN1cnJlbnRseSBiZWluZyBwcmVzc2VkIGFuZCB3YXMgaW5pdGlhdGVkIGluc2lkZSB0aGUgdHJhY2tlZCBlbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBidXR0b25Eb3duQW55IC0gV2FzIHRoZSBidXR0b24gZG93biBhbnl3aGVyZSBpbiB0aGUgc2NyZWVuIGR1cmluZyB0aGUgZXZlbnQuIDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkO1wiPkRlcHJlY2F0ZWQuIFVzZSBidXR0b25zIGluc3RlYWQuPC9zcGFuPlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCAnY29udGFpbmVyLWVudGVyJywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICBidXR0b25zOiBldmVudC5idXR0b25zLFxuICAgICAgICBwb2ludGVyczogZXZlbnQucG9pbnRlcnMsXG4gICAgICAgIGluc2lkZUVsZW1lbnRQcmVzc2VkOiBldmVudC5pbnNpZGVFbGVtZW50UHJlc3NlZCxcbiAgICAgICAgYnV0dG9uRG93bkFueTogZXZlbnQuYnV0dG9uRG93bkFueSxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbkNvbnRhaW5lckV4aXQoIGV2ZW50ICkge1xuICAgIGlmICggZXZlbnQucG9pbnRlcnMgPCAxICkge1xuICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS5tb3VzZUluc2lkZSA9IGZhbHNlO1xuICAgICAgICBpZiAoICFUSElTWyB0aGlzLmhhc2ggXS5hbmltYXRpbmcgKSB7XG4gICAgICAgICAgICBiZWdpbkNvbnRyb2xzQXV0b0hpZGUoIHRoaXMgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSYWlzZWQgd2hlbiB0aGUgY3Vyc29yIGxlYXZlcyB0aGUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI2NvbnRhaW5lcn0gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBldmVudCBjb250YWluZXItZXhpdFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IHRyYWNrZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIHdoaWNoIG9yaWdpbmF0ZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBidXR0b25zIC0gQ3VycmVudCBidXR0b25zIHByZXNzZWQuIEEgY29tYmluYXRpb24gb2YgYml0IGZsYWdzIDA6IG5vbmUsIDE6IHByaW1hcnkgKG9yIHRvdWNoIGNvbnRhY3QpLCAyOiBzZWNvbmRhcnksIDQ6IGF1eCAob2Z0ZW4gbWlkZGxlKSwgODogWDEgKG9mdGVuIGJhY2spLCAxNjogWDIgKG9mdGVuIGZvcndhcmQpLCAzMjogcGVuIGVyYXNlci5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcG9pbnRlcnMgLSBOdW1iZXIgb2YgcG9pbnRlcnMgKGFsbCB0eXBlcykgYWN0aXZlIGluIHRoZSB0cmFja2VkIGVsZW1lbnQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpbnNpZGVFbGVtZW50UHJlc3NlZCAtIFRydWUgaWYgdGhlIGxlZnQgbW91c2UgYnV0dG9uIGlzIGN1cnJlbnRseSBiZWluZyBwcmVzc2VkIGFuZCB3YXMgaW5pdGlhdGVkIGluc2lkZSB0aGUgdHJhY2tlZCBlbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBidXR0b25Eb3duQW55IC0gV2FzIHRoZSBidXR0b24gZG93biBhbnl3aGVyZSBpbiB0aGUgc2NyZWVuIGR1cmluZyB0aGUgZXZlbnQuIDxzcGFuIHN0eWxlPVwiY29sb3I6cmVkO1wiPkRlcHJlY2F0ZWQuIFVzZSBidXR0b25zIGluc3RlYWQuPC9zcGFuPlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5yYWlzZUV2ZW50KCAnY29udGFpbmVyLWV4aXQnLCB7XG4gICAgICAgIHRyYWNrZXI6IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICBwb3NpdGlvbjogZXZlbnQucG9zaXRpb24sXG4gICAgICAgIGJ1dHRvbnM6IGV2ZW50LmJ1dHRvbnMsXG4gICAgICAgIHBvaW50ZXJzOiBldmVudC5wb2ludGVycyxcbiAgICAgICAgaW5zaWRlRWxlbWVudFByZXNzZWQ6IGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkLFxuICAgICAgICBidXR0b25Eb3duQW55OiBldmVudC5idXR0b25Eb3duQW55LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUGFnZSB1cGRhdGUgcm91dGluZXMgKCBha2EgVmlld3MgLSBmb3IgZnV0dXJlIHJlZmVyZW5jZSApXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHVwZGF0ZU11bHRpKCB2aWV3ZXIgKSB7XG4gICAgdXBkYXRlT25jZSggdmlld2VyICk7XG5cbiAgICAvLyBSZXF1ZXN0IHRoZSBuZXh0IGZyYW1lLCB1bmxlc3Mgd2UndmUgYmVlbiBjbG9zZWRcbiAgICBpZiAoIHZpZXdlci5pc09wZW4oKSApIHtcbiAgICAgICAgdmlld2VyLl91cGRhdGVSZXF1ZXN0SWQgPSBzY2hlZHVsZVVwZGF0ZSggdmlld2VyLCB1cGRhdGVNdWx0aSApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXdlci5fdXBkYXRlUmVxdWVzdElkID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPbmNlKCB2aWV3ZXIgKSB7XG5cbiAgICAvL3ZpZXdlci5wcm9maWxlci5iZWdpblVwZGF0ZSgpO1xuXG4gICAgaWYgKHZpZXdlci5fb3BlbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZpZXdlci5hdXRvUmVzaXplKSB7XG4gICAgICAgIHZhciBjb250YWluZXJTaXplID0gX2dldFNhZmVFbGVtU2l6ZSh2aWV3ZXIuY29udGFpbmVyKTtcbiAgICAgICAgdmFyIHByZXZDb250YWluZXJTaXplID0gVEhJU1t2aWV3ZXIuaGFzaF0ucHJldkNvbnRhaW5lclNpemU7XG4gICAgICAgIGlmICghY29udGFpbmVyU2l6ZS5lcXVhbHMocHJldkNvbnRhaW5lclNpemUpKSB7XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSB2aWV3ZXIudmlld3BvcnQ7XG4gICAgICAgICAgICBpZiAodmlld2VyLnByZXNlcnZlSW1hZ2VTaXplT25SZXNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzaXplUmF0aW8gPSBwcmV2Q29udGFpbmVyU2l6ZS54IC8gY29udGFpbmVyU2l6ZS54O1xuICAgICAgICAgICAgICAgIHZhciB6b29tID0gdmlld3BvcnQuZ2V0Wm9vbSgpICogcmVzaXplUmF0aW87XG4gICAgICAgICAgICAgICAgdmFyIGNlbnRlciA9IHZpZXdwb3J0LmdldENlbnRlcigpO1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0LnJlc2l6ZShjb250YWluZXJTaXplLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmlld3BvcnQuem9vbVRvKHpvb20sIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0LnBhblRvKGNlbnRlciwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG1haW50YWluIGltYWdlIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIG9sZEJvdW5kcyA9IHZpZXdwb3J0LmdldEJvdW5kcygpO1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0LnJlc2l6ZShjb250YWluZXJTaXplLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2aWV3cG9ydC5maXRCb3VuZHNXaXRoQ29uc3RyYWludHMob2xkQm91bmRzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRISVNbdmlld2VyLmhhc2hdLnByZXZDb250YWluZXJTaXplID0gY29udGFpbmVyU2l6ZTtcbiAgICAgICAgICAgIFRISVNbdmlld2VyLmhhc2hdLmZvcmNlUmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB2aWV3cG9ydENoYW5nZSA9IHZpZXdlci52aWV3cG9ydC51cGRhdGUoKTtcbiAgICB2YXIgYW5pbWF0ZWQgPSB2aWV3ZXIud29ybGQudXBkYXRlKCkgfHwgdmlld3BvcnRDaGFuZ2U7XG5cbiAgICBpZiAodmlld3BvcnRDaGFuZ2UpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJhaXNlZCB3aGVuIGFueSBzcHJpbmcgYW5pbWF0aW9uIHVwZGF0ZSBvY2N1cnMgKHpvb20sIHBhbiwgZXRjLiksXG4gICAgICAgICAqIGJlZm9yZSB0aGUgdmlld2VyIGhhcyBkcmF3biB0aGUgbmV3IGxvY2F0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgdmlld3BvcnQtY2hhbmdlXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZpZXdlci5yYWlzZUV2ZW50KCd2aWV3cG9ydC1jaGFuZ2UnKTtcbiAgICB9XG5cbiAgICBpZiggdmlld2VyLnJlZmVyZW5jZVN0cmlwICl7XG4gICAgICAgIGFuaW1hdGVkID0gdmlld2VyLnJlZmVyZW5jZVN0cmlwLnVwZGF0ZSggdmlld2VyLnZpZXdwb3J0ICkgfHwgYW5pbWF0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKCAhVEhJU1sgdmlld2VyLmhhc2ggXS5hbmltYXRpbmcgJiYgYW5pbWF0ZWQgKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiBhbnkgc3ByaW5nIGFuaW1hdGlvbiBzdGFydHMgKHpvb20sIHBhbiwgZXRjLikuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBhbmltYXRpb24tc3RhcnRcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdmlld2VyLnJhaXNlRXZlbnQoIFwiYW5pbWF0aW9uLXN0YXJ0XCIgKTtcbiAgICAgICAgYWJvcnRDb250cm9sc0F1dG9IaWRlKCB2aWV3ZXIgKTtcbiAgICB9XG5cbiAgICBpZiAoIGFuaW1hdGVkIHx8IFRISVNbIHZpZXdlci5oYXNoIF0uZm9yY2VSZWRyYXcgfHwgdmlld2VyLndvcmxkLm5lZWRzRHJhdygpICkge1xuICAgICAgICBkcmF3V29ybGQoIHZpZXdlciApO1xuICAgICAgICB2aWV3ZXIuX2RyYXdPdmVybGF5cygpO1xuICAgICAgICBpZiggdmlld2VyLm5hdmlnYXRvciApe1xuICAgICAgICAgICAgdmlld2VyLm5hdmlnYXRvci51cGRhdGUoIHZpZXdlci52aWV3cG9ydCApO1xuICAgICAgICB9XG5cbiAgICAgICAgVEhJU1sgdmlld2VyLmhhc2ggXS5mb3JjZVJlZHJhdyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiBhbnkgc3ByaW5nIGFuaW1hdGlvbiB1cGRhdGUgb2NjdXJzICh6b29tLCBwYW4sIGV0Yy4pLFxuICAgICAgICAgICAgICogYWZ0ZXIgdGhlIHZpZXdlciBoYXMgZHJhd24gdGhlIG5ldyBsb2NhdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXZlbnQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZpZXdlci5yYWlzZUV2ZW50KCBcImFuaW1hdGlvblwiICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIFRISVNbIHZpZXdlci5oYXNoIF0uYW5pbWF0aW5nICYmICFhbmltYXRlZCApIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJhaXNlZCB3aGVuIGFueSBzcHJpbmcgYW5pbWF0aW9uIGVuZHMgKHpvb20sIHBhbiwgZXRjLikuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBhbmltYXRpb24tZmluaXNoXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZpZXdlci5yYWlzZUV2ZW50KCBcImFuaW1hdGlvbi1maW5pc2hcIiApO1xuXG4gICAgICAgIGlmICggIVRISVNbIHZpZXdlci5oYXNoIF0ubW91c2VJbnNpZGUgKSB7XG4gICAgICAgICAgICBiZWdpbkNvbnRyb2xzQXV0b0hpZGUoIHZpZXdlciApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgVEhJU1sgdmlld2VyLmhhc2ggXS5hbmltYXRpbmcgPSBhbmltYXRlZDtcblxuICAgIC8vdmlld2VyLnByb2ZpbGVyLmVuZFVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBkcmF3V29ybGQoIHZpZXdlciApIHtcbiAgICB2aWV3ZXIuaW1hZ2VMb2FkZXIuY2xlYXIoKTtcbiAgICB2aWV3ZXIuZHJhd2VyLmNsZWFyKCk7XG4gICAgdmlld2VyLndvcmxkLmRyYXcoKTtcblxuICAgIC8qKlxuICAgICAqIDxlbT4tIE5lZWRzIGRvY3VtZW50YXRpb24gLTwvZW0+XG4gICAgICpcbiAgICAgKiBAZXZlbnQgdXBkYXRlLXZpZXdwb3J0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICovXG4gICAgdmlld2VyLnJhaXNlRXZlbnQoICd1cGRhdGUtdmlld3BvcnQnLCB7fSApO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBOYXZpZ2F0aW9uIENvbnRyb2xzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiByZXNvbHZlVXJsKCBwcmVmaXgsIHVybCApIHtcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgdXJsIDogdXJsO1xufVxuXG5cblxuZnVuY3Rpb24gYmVnaW5ab29taW5nSW4oKSB7XG4gICAgVEhJU1sgdGhpcy5oYXNoIF0ubGFzdFpvb21UaW1lID0gJC5ub3coKTtcbiAgICBUSElTWyB0aGlzLmhhc2ggXS56b29tRmFjdG9yID0gdGhpcy56b29tUGVyU2Vjb25kO1xuICAgIFRISVNbIHRoaXMuaGFzaCBdLnpvb21pbmcgPSB0cnVlO1xuICAgIHNjaGVkdWxlWm9vbSggdGhpcyApO1xufVxuXG5cbmZ1bmN0aW9uIGJlZ2luWm9vbWluZ091dCgpIHtcbiAgICBUSElTWyB0aGlzLmhhc2ggXS5sYXN0Wm9vbVRpbWUgPSAkLm5vdygpO1xuICAgIFRISVNbIHRoaXMuaGFzaCBdLnpvb21GYWN0b3IgPSAxLjAgLyB0aGlzLnpvb21QZXJTZWNvbmQ7XG4gICAgVEhJU1sgdGhpcy5oYXNoIF0uem9vbWluZyA9IHRydWU7XG4gICAgc2NoZWR1bGVab29tKCB0aGlzICk7XG59XG5cblxuZnVuY3Rpb24gZW5kWm9vbWluZygpIHtcbiAgICBUSElTWyB0aGlzLmhhc2ggXS56b29taW5nID0gZmFsc2U7XG59XG5cblxuZnVuY3Rpb24gc2NoZWR1bGVab29tKCB2aWV3ZXIgKSB7XG4gICAgJC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoICQuZGVsZWdhdGUoIHZpZXdlciwgZG9ab29tICkgKTtcbn1cblxuXG5mdW5jdGlvbiBkb1pvb20oKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lLFxuICAgICAgICBkZWx0YVRpbWUsXG4gICAgICAgIGFkanVzdGVkRmFjdG9yO1xuXG4gICAgaWYgKCBUSElTWyB0aGlzLmhhc2ggXS56b29taW5nICYmIHRoaXMudmlld3BvcnQpIHtcbiAgICAgICAgY3VycmVudFRpbWUgICAgID0gJC5ub3coKTtcbiAgICAgICAgZGVsdGFUaW1lICAgICAgID0gY3VycmVudFRpbWUgLSBUSElTWyB0aGlzLmhhc2ggXS5sYXN0Wm9vbVRpbWU7XG4gICAgICAgIGFkanVzdGVkRmFjdG9yICA9IE1hdGgucG93KCBUSElTWyB0aGlzLmhhc2ggXS56b29tRmFjdG9yLCBkZWx0YVRpbWUgLyAxMDAwICk7XG5cbiAgICAgICAgdGhpcy52aWV3cG9ydC56b29tQnkoIGFkanVzdGVkRmFjdG9yICk7XG4gICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS5sYXN0Wm9vbVRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgc2NoZWR1bGVab29tKCB0aGlzICk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGRvU2luZ2xlWm9vbUluKCkge1xuICAgIGlmICggdGhpcy52aWV3cG9ydCApIHtcbiAgICAgICAgVEhJU1sgdGhpcy5oYXNoIF0uem9vbWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZpZXdwb3J0Lnpvb21CeShcbiAgICAgICAgICAgIHRoaXMuem9vbVBlckNsaWNrIC8gMS4wXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudmlld3BvcnQuYXBwbHlDb25zdHJhaW50cygpO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBkb1NpbmdsZVpvb21PdXQoKSB7XG4gICAgaWYgKCB0aGlzLnZpZXdwb3J0ICkge1xuICAgICAgICBUSElTWyB0aGlzLmhhc2ggXS56b29taW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmlld3BvcnQuem9vbUJ5KFxuICAgICAgICAgICAgMS4wIC8gdGhpcy56b29tUGVyQ2xpY2tcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGxpZ2h0VXAoKSB7XG4gICAgdGhpcy5idXR0b25zLmVtdWxhdGVFbnRlcigpO1xuICAgIHRoaXMuYnV0dG9ucy5lbXVsYXRlRXhpdCgpO1xufVxuXG5cbmZ1bmN0aW9uIG9uSG9tZSgpIHtcbiAgICBpZiAoIHRoaXMudmlld3BvcnQgKSB7XG4gICAgICAgIHRoaXMudmlld3BvcnQuZ29Ib21lKCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIG9uRnVsbFNjcmVlbigpIHtcbiAgICBpZiAoIHRoaXMuaXNGdWxsUGFnZSgpICYmICEkLmlzRnVsbFNjcmVlbigpICkge1xuICAgICAgICAvLyBJcyBmdWxsUGFnZSBidXQgbm90IGZ1bGxTY3JlZW5cbiAgICAgICAgdGhpcy5zZXRGdWxsUGFnZSggZmFsc2UgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEZ1bGxTY3JlZW4oICF0aGlzLmlzRnVsbFBhZ2UoKSApO1xuICAgIH1cbiAgICAvLyBjb3JyZWN0IGZvciBubyBtb3VzZW91dCBldmVudCBvbiBjaGFuZ2VcbiAgICBpZiAoIHRoaXMuYnV0dG9ucyApIHtcbiAgICAgICAgdGhpcy5idXR0b25zLmVtdWxhdGVFeGl0KCk7XG4gICAgfVxuICAgIHRoaXMuZnVsbFBhZ2VCdXR0b24uZWxlbWVudC5mb2N1cygpO1xuICAgIGlmICggdGhpcy52aWV3cG9ydCApIHtcbiAgICAgICAgdGhpcy52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGU6IFRoZSBjdXJyZW50IHJvdGF0aW9uIGZlYXR1cmUgaXMgbGltaXRlZCB0byA5MCBkZWdyZWUgdHVybnMuXG4gKi9cbmZ1bmN0aW9uIG9uUm90YXRlTGVmdCgpIHtcbiAgICBpZiAoIHRoaXMudmlld3BvcnQgKSB7XG4gICAgICAgIHZhciBjdXJyUm90YXRpb24gPSB0aGlzLnZpZXdwb3J0LmdldFJvdGF0aW9uKCk7XG4gICAgICAgIGlmIChjdXJyUm90YXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIGN1cnJSb3RhdGlvbiA9IDI3MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJSb3RhdGlvbiAtPSA5MDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXdwb3J0LnNldFJvdGF0aW9uKGN1cnJSb3RhdGlvbik7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGU6IFRoZSBjdXJyZW50IHJvdGF0aW9uIGZlYXR1cmUgaXMgbGltaXRlZCB0byA5MCBkZWdyZWUgdHVybnMuXG4gKi9cbmZ1bmN0aW9uIG9uUm90YXRlUmlnaHQoKSB7XG4gICAgaWYgKCB0aGlzLnZpZXdwb3J0ICkge1xuICAgICAgICB2YXIgY3VyclJvdGF0aW9uID0gdGhpcy52aWV3cG9ydC5nZXRSb3RhdGlvbigpO1xuICAgICAgICBpZiAoY3VyclJvdGF0aW9uID09PSAyNzApIHtcbiAgICAgICAgICAgIGN1cnJSb3RhdGlvbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXJyUm90YXRpb24gKz0gOTA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3cG9ydC5zZXRSb3RhdGlvbihjdXJyUm90YXRpb24pO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBvblByZXZpb3VzKCl7XG4gICAgdmFyIHByZXZpb3VzID0gdGhpcy5fc2VxdWVuY2VJbmRleCAtIDE7XG4gICAgaWYodGhpcy5uYXZQcmV2TmV4dFdyYXAgJiYgcHJldmlvdXMgPCAwKXtcbiAgICAgICAgcHJldmlvdXMgKz0gdGhpcy50aWxlU291cmNlcy5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuZ29Ub1BhZ2UoIHByZXZpb3VzICk7XG59XG5cblxuZnVuY3Rpb24gb25OZXh0KCl7XG4gICAgdmFyIG5leHQgPSB0aGlzLl9zZXF1ZW5jZUluZGV4ICsgMTtcbiAgICBpZih0aGlzLm5hdlByZXZOZXh0V3JhcCAmJiBuZXh0ID49IHRoaXMudGlsZVNvdXJjZXMubGVuZ3RoKXtcbiAgICAgICAgbmV4dCA9IDA7XG4gICAgfVxuICAgIHRoaXMuZ29Ub1BhZ2UoIG5leHQgKTtcbn1cblxuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIE5hdmlnYXRvclxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4oZnVuY3Rpb24oICQgKXtcblxuLyoqXG4gKiBAY2xhc3MgTmF2aWdhdG9yXG4gKiBAY2xhc3NkZXNjIFRoZSBOYXZpZ2F0b3IgcHJvdmlkZXMgYSBzbWFsbCB2aWV3IG9mIHRoZSBjdXJyZW50IGltYWdlIGFzIGZpeGVkXG4gKiB3aGlsZSByZXByZXNlbnRpbmcgdGhlIHZpZXdwb3J0IGFzIGEgbW92aW5nIGJveCBzZXJ2aW5nIGFzIGEgZnJhbWVcbiAqIG9mIHJlZmVyZW5jZSBpbiB0aGUgbGFyZ2VyIHZpZXdwb3J0IGFzIHRvIHdoaWNoIHBvcnRpb24gb2YgdGhlIGltYWdlXG4gKiBpcyBjdXJyZW50bHkgYmVpbmcgZXhhbWluZWQuICBUaGUgbmF2aWdhdG9yJ3Mgdmlld3BvcnQgY2FuIGJlIGludGVyYWN0ZWRcbiAqIHdpdGggdXNpbmcgdGhlIGtleWJvYXJkIG9yIHRoZSBtb3VzZS5cbiAqXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGV4dGVuZHMgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAqIEBleHRlbmRzIE9wZW5TZWFkcmFnb24uRXZlbnRTb3VyY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbiQuTmF2aWdhdG9yID0gZnVuY3Rpb24oIG9wdGlvbnMgKXtcblxuICAgIHZhciB2aWV3ZXIgICAgICA9IG9wdGlvbnMudmlld2VyLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHZpZXdlclNpemUsXG4gICAgICAgIG5hdmlnYXRvclNpemU7XG5cbiAgICAvL1dlIG1heSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBlbGVtZW50IGFuZCBpZCBpZiB0aGV5IGRpZCBub3RcbiAgICAvL3Byb3ZpZGUgdGhlIGlkIGZvciB0aGUgZXhpc3RpbmcgZWxlbWVudFxuICAgIGlmKCAhb3B0aW9ucy5pZCApe1xuICAgICAgICBvcHRpb25zLmlkICAgICAgICAgICAgICA9ICduYXZpZ2F0b3ItJyArICQubm93KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudCAgICAgICAgICAgID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcbiAgICAgICAgb3B0aW9ucy5jb250cm9sT3B0aW9ucyAgPSB7XG4gICAgICAgICAgICBhbmNob3I6ICAgICAgICAgICAkLkNvbnRyb2xBbmNob3IuVE9QX1JJR0hULFxuICAgICAgICAgICAgYXR0YWNoVG9WaWV3ZXI6ICAgdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9GYWRlOiAgICAgICAgIG9wdGlvbnMuYXV0b0ZhZGVcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggb3B0aW9ucy5wb3NpdGlvbiApe1xuICAgICAgICAgICAgaWYoICdCT1RUT01fUklHSFQnID09IG9wdGlvbnMucG9zaXRpb24gKXtcbiAgICAgICAgICAgICAgIG9wdGlvbnMuY29udHJvbE9wdGlvbnMuYW5jaG9yID0gJC5Db250cm9sQW5jaG9yLkJPVFRPTV9SSUdIVDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiggJ0JPVFRPTV9MRUZUJyA9PSBvcHRpb25zLnBvc2l0aW9uICl7XG4gICAgICAgICAgICAgICBvcHRpb25zLmNvbnRyb2xPcHRpb25zLmFuY2hvciA9ICQuQ29udHJvbEFuY2hvci5CT1RUT01fTEVGVDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiggJ1RPUF9SSUdIVCcgPT0gb3B0aW9ucy5wb3NpdGlvbiApe1xuICAgICAgICAgICAgICAgb3B0aW9ucy5jb250cm9sT3B0aW9ucy5hbmNob3IgPSAkLkNvbnRyb2xBbmNob3IuVE9QX1JJR0hUO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCAnVE9QX0xFRlQnID09IG9wdGlvbnMucG9zaXRpb24gKXtcbiAgICAgICAgICAgICAgIG9wdGlvbnMuY29udHJvbE9wdGlvbnMuYW5jaG9yID0gJC5Db250cm9sQW5jaG9yLlRPUF9MRUZUO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCAnQUJTT0xVVEUnID09IG9wdGlvbnMucG9zaXRpb24gKXtcbiAgICAgICAgICAgICAgIG9wdGlvbnMuY29udHJvbE9wdGlvbnMuYW5jaG9yID0gJC5Db250cm9sQW5jaG9yLkFCU09MVVRFO1xuICAgICAgICAgICAgICAgb3B0aW9ucy5jb250cm9sT3B0aW9ucy50b3AgPSBvcHRpb25zLnRvcDtcbiAgICAgICAgICAgICAgIG9wdGlvbnMuY29udHJvbE9wdGlvbnMubGVmdCA9IG9wdGlvbnMubGVmdDtcbiAgICAgICAgICAgICAgIG9wdGlvbnMuY29udHJvbE9wdGlvbnMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgICAgICAgICAgICBvcHRpb25zLmNvbnRyb2xPcHRpb25zLndpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ICAgICAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggb3B0aW9ucy5pZCApO1xuICAgICAgICBvcHRpb25zLmNvbnRyb2xPcHRpb25zICA9IHtcbiAgICAgICAgICAgIGFuY2hvcjogICAgICAgICAgICQuQ29udHJvbEFuY2hvci5OT05FLFxuICAgICAgICAgICAgYXR0YWNoVG9WaWV3ZXI6ICAgZmFsc2UsXG4gICAgICAgICAgICBhdXRvRmFkZTogICAgICAgICBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQuaWQgICAgICAgICA9IG9wdGlvbnMuaWQ7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSAgKz0gJyBuYXZpZ2F0b3InO1xuXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB7XG4gICAgICAgIHNpemVSYXRpbzogICAgICQuREVGQVVMVF9TRVRUSU5HUy5uYXZpZ2F0b3JTaXplUmF0aW9cbiAgICB9LCBvcHRpb25zLCB7XG4gICAgICAgIGVsZW1lbnQ6ICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAgdGFiSW5kZXg6ICAgICAgICAgICAgICAgLTEsIC8vIE5vIGtleWJvYXJkIG5hdmlnYXRpb24sIG9taXQgZnJvbSB0YWIgb3JkZXJcbiAgICAgICAgLy9UaGVzZSBuZWVkIHRvIGJlIG92ZXJyaWRkZW4gdG8gcHJldmVudCByZWN1cnNpb24gc2luY2VcbiAgICAgICAgLy90aGUgbmF2aWdhdG9yIGlzIGEgdmlld2VyIGFuZCBhIHZpZXdlciBoYXMgYSBuYXZpZ2F0b3JcbiAgICAgICAgc2hvd05hdmlnYXRvcjogICAgICAgICAgZmFsc2UsXG4gICAgICAgIG1vdXNlTmF2RW5hYmxlZDogICAgICAgIGZhbHNlLFxuICAgICAgICBzaG93TmF2aWdhdGlvbkNvbnRyb2w6ICBmYWxzZSxcbiAgICAgICAgc2hvd1NlcXVlbmNlQ29udHJvbDogICAgZmFsc2UsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogICAgICAgIHRydWUsXG4gICAgICAgIGJsZW5kVGltZTogICAgICAgICAgICAgIDAsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6ICAgICAgICAgIDAsXG4gICAgICAgIGF1dG9SZXNpemU6ICAgICAgICAgICAgIG9wdGlvbnMuYXV0b1Jlc2l6ZSxcbiAgICAgICAgLy8gcHJldmVudCByZXNpemluZyB0aGUgbmF2aWdhdG9yIGZyb20gYWRkaW5nIHVud2FudGVkIHNwYWNlIGFyb3VuZCB0aGUgaW1hZ2VcbiAgICAgICAgbWluWm9vbUltYWdlUmF0aW86ICAgICAgMS4wXG4gICAgfSk7XG5cbiAgICBvcHRpb25zLm1pblBpeGVsUmF0aW8gPSB0aGlzLm1pblBpeGVsUmF0aW8gPSB2aWV3ZXIubWluUGl4ZWxSYXRpbztcblxuICAgICQuc2V0RWxlbWVudFRvdWNoQWN0aW9uTm9uZSggdGhpcy5lbGVtZW50ICk7XG5cbiAgICB0aGlzLmJvcmRlcldpZHRoID0gMjtcbiAgICAvL0F0IHNvbWUgYnJvd3NlciBtYWduaWZpY2F0aW9uIGxldmVscyB0aGUgZGlzcGxheSByZWdpb25zIGxpbmVzIHVwIGNvcnJlY3RseSwgYnV0IGF0IHNvbWUgdGhlcmUgYXBwZWFycyB0b1xuICAgIC8vYmUgYSBvbmUgcGl4ZWwgZ2FwLlxuICAgIHRoaXMuZnVkZ2UgPSBuZXcgJC5Qb2ludCgxLCAxKTtcbiAgICB0aGlzLnRvdGFsQm9yZGVyV2lkdGhzID0gbmV3ICQuUG9pbnQodGhpcy5ib3JkZXJXaWR0aCoyLCB0aGlzLmJvcmRlcldpZHRoKjIpLm1pbnVzKHRoaXMuZnVkZ2UpO1xuXG5cbiAgICBpZiAoIG9wdGlvbnMuY29udHJvbE9wdGlvbnMuYW5jaG9yICE9ICQuQ29udHJvbEFuY2hvci5OT05FICkge1xuICAgICAgICAoZnVuY3Rpb24oIHN0eWxlLCBib3JkZXJXaWR0aCApe1xuICAgICAgICAgICAgc3R5bGUubWFyZ2luICAgICAgICA9ICcwcHgnO1xuICAgICAgICAgICAgc3R5bGUuYm9yZGVyICAgICAgICA9IGJvcmRlcldpZHRoICsgJ3B4IHNvbGlkICM1NTUnO1xuICAgICAgICAgICAgc3R5bGUucGFkZGluZyAgICAgICA9ICcwcHgnO1xuICAgICAgICAgICAgc3R5bGUuYmFja2dyb3VuZCAgICA9ICcjMDAwJztcbiAgICAgICAgICAgIHN0eWxlLm9wYWNpdHkgICAgICAgPSAwLjg7XG4gICAgICAgICAgICBzdHlsZS5vdmVyZmxvdyAgICAgID0gJ2hpZGRlbic7XG4gICAgICAgIH0oIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5ib3JkZXJXaWR0aCkpO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGxheVJlZ2lvbiAgICAgICAgICAgPSAkLm1ha2VOZXV0cmFsRWxlbWVudCggXCJkaXZcIiApO1xuICAgIHRoaXMuZGlzcGxheVJlZ2lvbi5pZCAgICAgICAgPSB0aGlzLmVsZW1lbnQuaWQgKyAnLWRpc3BsYXlyZWdpb24nO1xuICAgIHRoaXMuZGlzcGxheVJlZ2lvbi5jbGFzc05hbWUgPSAnZGlzcGxheXJlZ2lvbic7XG5cbiAgICAoZnVuY3Rpb24oIHN0eWxlLCBib3JkZXJXaWR0aCApe1xuICAgICAgICBzdHlsZS5wb3NpdGlvbiAgICAgID0gJ3JlbGF0aXZlJztcbiAgICAgICAgc3R5bGUudG9wICAgICAgICAgICA9ICcwcHgnO1xuICAgICAgICBzdHlsZS5sZWZ0ICAgICAgICAgID0gJzBweCc7XG4gICAgICAgIHN0eWxlLmZvbnRTaXplICAgICAgPSAnMHB4JztcbiAgICAgICAgc3R5bGUub3ZlcmZsb3cgICAgICA9ICdoaWRkZW4nO1xuICAgICAgICBzdHlsZS5ib3JkZXIgICAgICAgID0gYm9yZGVyV2lkdGggKyAncHggc29saWQgIzkwMCc7XG4gICAgICAgIHN0eWxlLm1hcmdpbiAgICAgICAgPSAnMHB4JztcbiAgICAgICAgc3R5bGUucGFkZGluZyAgICAgICA9ICcwcHgnO1xuICAgICAgICAvL1RPRE86IElFIGRvZXNudCBsaWtlIHRoaXMgcHJvcGVydHkgYmVpbmcgc2V0XG4gICAgICAgIC8vdHJ5eyBzdHlsZS5vdXRsaW5lICA9ICcycHggYXV0byAjOTA5JzsgfWNhdGNoKGUpey8qaWdub3JlKi99XG5cbiAgICAgICAgc3R5bGUuYmFja2dyb3VuZCAgICA9ICd0cmFuc3BhcmVudCc7XG5cbiAgICAgICAgLy8gV2UgdXNlIHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIG9uIHRoZSBzdGF0ZW1lbnQgYmVsb3csIGJlY2F1c2UgZmxvYXQgaXMgYSBrZXl3b3JkLlxuICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgdGhlIEdvb2dsZSBDbG9zdXJlIGNvbXBpbGVyLCBpZiBub3RoaW5nIGVsc2UuXG4gICAgICAgIC8qanNoaW50IHN1Yjp0cnVlICovXG4gICAgICAgIHN0eWxlWydmbG9hdCddICAgICAgPSAnbGVmdCc7IC8vV2Via2l0XG5cbiAgICAgICAgc3R5bGUuY3NzRmxvYXQgICAgICA9ICdsZWZ0JzsgLy9GaXJlZm94XG4gICAgICAgIHN0eWxlLnN0eWxlRmxvYXQgICAgPSAnbGVmdCc7IC8vSUVcbiAgICAgICAgc3R5bGUuekluZGV4ICAgICAgICA9IDk5OTk5OTk5OTtcbiAgICAgICAgc3R5bGUuY3Vyc29yICAgICAgICA9ICdkZWZhdWx0JztcbiAgICB9KCB0aGlzLmRpc3BsYXlSZWdpb24uc3R5bGUsIHRoaXMuYm9yZGVyV2lkdGggKSk7XG5cbiAgICB0aGlzLmRpc3BsYXlSZWdpb25Db250YWluZXIgPSAkLm1ha2VOZXV0cmFsRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpc3BsYXlSZWdpb25Db250YWluZXIuaWQgPSB0aGlzLmVsZW1lbnQuaWQgKyAnLWRpc3BsYXlyZWdpb25jb250YWluZXInO1xuICAgIHRoaXMuZGlzcGxheVJlZ2lvbkNvbnRhaW5lci5jbGFzc05hbWUgPSBcImRpc3BsYXlyZWdpb25jb250YWluZXJcIjtcbiAgICB0aGlzLmRpc3BsYXlSZWdpb25Db250YWluZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICB0aGlzLmRpc3BsYXlSZWdpb25Db250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cbiAgICB2aWV3ZXIuYWRkQ29udHJvbChcbiAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICBvcHRpb25zLmNvbnRyb2xPcHRpb25zXG4gICAgKTtcblxuICAgIHRoaXMuX3Jlc2l6ZVdpdGhWaWV3ZXIgPSBvcHRpb25zLmNvbnRyb2xPcHRpb25zLmFuY2hvciAhPSAkLkNvbnRyb2xBbmNob3IuQUJTT0xVVEUgJiZcbiAgICAgICAgb3B0aW9ucy5jb250cm9sT3B0aW9ucy5hbmNob3IgIT0gJC5Db250cm9sQW5jaG9yLk5PTkU7XG5cbiAgICBpZiAoIHRoaXMuX3Jlc2l6ZVdpdGhWaWV3ZXIgKSB7XG4gICAgICAgIGlmICggb3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCApIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0eXBlb2YgKCBvcHRpb25zLmhlaWdodCApICA9PSBcIm51bWJlclwiID8gKCBvcHRpb25zLmhlaWdodCArICdweCcgKSA6IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoICA9IHR5cGVvZiAoIG9wdGlvbnMud2lkdGggKSAgPT0gXCJudW1iZXJcIiA/ICggb3B0aW9ucy53aWR0aCArICdweCcgKSA6IG9wdGlvbnMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2aWV3ZXJTaXplID0gJC5nZXRFbGVtZW50U2l6ZSggdmlld2VyLmVsZW1lbnQgKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBNYXRoLnJvdW5kKCB2aWV3ZXJTaXplLnkgKiBvcHRpb25zLnNpemVSYXRpbyApICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCAgPSBNYXRoLnJvdW5kKCB2aWV3ZXJTaXplLnggKiBvcHRpb25zLnNpemVSYXRpbyApICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMub2xkVmlld2VyU2l6ZSA9IHZpZXdlclNpemU7XG4gICAgICAgIH1cbiAgICAgICAgbmF2aWdhdG9yU2l6ZSA9ICQuZ2V0RWxlbWVudFNpemUoIHRoaXMuZWxlbWVudCApO1xuICAgICAgICB0aGlzLmVsZW1lbnRBcmVhID0gbmF2aWdhdG9yU2l6ZS54ICogbmF2aWdhdG9yU2l6ZS55O1xuICAgIH1cblxuICAgIHRoaXMub2xkQ29udGFpbmVyU2l6ZSA9IG5ldyAkLlBvaW50KCAwLCAwICk7XG5cbiAgICAkLlZpZXdlci5hcHBseSggdGhpcywgWyBvcHRpb25zIF0gKTtcblxuICAgIHRoaXMuZGlzcGxheVJlZ2lvbkNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmRpc3BsYXlSZWdpb24pO1xuICAgIHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0uYXBwZW5kQ2hpbGQodGhpcy5kaXNwbGF5UmVnaW9uQ29udGFpbmVyKTtcblxuICAgIGZ1bmN0aW9uIHJvdGF0ZShkZWdyZWVzKSB7XG4gICAgICAgIF9zZXRUcmFuc2Zvcm1Sb3RhdGUoX3RoaXMuZGlzcGxheVJlZ2lvbkNvbnRhaW5lciwgZGVncmVlcyk7XG4gICAgICAgIF9zZXRUcmFuc2Zvcm1Sb3RhdGUoX3RoaXMuZGlzcGxheVJlZ2lvbiwgLWRlZ3JlZXMpO1xuICAgICAgICBfdGhpcy52aWV3cG9ydC5zZXRSb3RhdGlvbihkZWdyZWVzKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubmF2aWdhdG9yUm90YXRlKSB7XG4gICAgICAgIHZhciBkZWdyZWVzID0gb3B0aW9ucy52aWV3ZXIudmlld3BvcnQgP1xuICAgICAgICAgICAgb3B0aW9ucy52aWV3ZXIudmlld3BvcnQuZ2V0Um90YXRpb24oKSA6XG4gICAgICAgICAgICBvcHRpb25zLnZpZXdlci5kZWdyZWVzIHx8IDA7XG4gICAgICAgIHJvdGF0ZShkZWdyZWVzKTtcbiAgICAgICAgb3B0aW9ucy52aWV3ZXIuYWRkSGFuZGxlcihcInJvdGF0ZVwiLCBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgcm90YXRlKGFyZ3MuZGVncmVlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgYmFzZSBjbGFzcycgKFZpZXdlcidzKSBpbm5lclRyYWNrZXIgYW5kIHJlcGxhY2UgaXQgd2l0aCBvdXIgb3duXG4gICAgdGhpcy5pbm5lclRyYWNrZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuaW5uZXJUcmFja2VyID0gbmV3ICQuTW91c2VUcmFja2VyKHtcbiAgICAgICAgZWxlbWVudDogICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgIGRyYWdIYW5kbGVyOiAgICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNEcmFnICksXG4gICAgICAgIGNsaWNrSGFuZGxlcjogICAgJC5kZWxlZ2F0ZSggdGhpcywgb25DYW52YXNDbGljayApLFxuICAgICAgICByZWxlYXNlSGFuZGxlcjogICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzUmVsZWFzZSApLFxuICAgICAgICBzY3JvbGxIYW5kbGVyOiAgICQuZGVsZWdhdGUoIHRoaXMsIG9uQ2FudmFzU2Nyb2xsIClcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkSGFuZGxlcihcInJlc2V0LXNpemVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfdGhpcy52aWV3cG9ydCkge1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQuZ29Ib21lKHRydWUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2aWV3ZXIud29ybGQuYWRkSGFuZGxlcihcIml0ZW0taW5kZXgtY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBpdGVtID0gX3RoaXMud29ybGQuZ2V0SXRlbUF0KGV2ZW50LnByZXZpb3VzSW5kZXgpO1xuICAgICAgICBfdGhpcy53b3JsZC5zZXRJdGVtSW5kZXgoaXRlbSwgZXZlbnQubmV3SW5kZXgpO1xuICAgIH0pO1xuXG4gICAgdmlld2VyLndvcmxkLmFkZEhhbmRsZXIoXCJyZW1vdmUtaXRlbVwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgdGhlaXJJdGVtID0gZXZlbnQuaXRlbTtcbiAgICAgICAgdmFyIG15SXRlbSA9IF90aGlzLl9nZXRNYXRjaGluZ0l0ZW0odGhlaXJJdGVtKTtcbiAgICAgICAgaWYgKG15SXRlbSkge1xuICAgICAgICAgICAgX3RoaXMud29ybGQucmVtb3ZlSXRlbShteUl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnVwZGF0ZSh2aWV3ZXIudmlld3BvcnQpO1xufTtcblxuJC5leHRlbmQoICQuTmF2aWdhdG9yLnByb3RvdHlwZSwgJC5FdmVudFNvdXJjZS5wcm90b3R5cGUsICQuVmlld2VyLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLk5hdmlnYXRvci5wcm90b3R5cGUgKi97XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIG5vdGlmeSB0aGUgbmF2aWdhdG9yIHdoZW4gaXRzIHNpemUgaGFzIGNoYW5nZWQuXG4gICAgICogRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5uYXZpZ2F0b3JBdXRvUmVzaXplIGlzIHNldCB0byBmYWxzZSBhbmQgdGhlIG5hdmlnYXRvciBpcyByZXNpemFibGUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgdXBkYXRlU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIHRoaXMudmlld3BvcnQgKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyU2l6ZSA9IG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5jb250YWluZXIuY2xpZW50V2lkdGggPT09IDAgPyAxIDogdGhpcy5jb250YWluZXIuY2xpZW50V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5jb250YWluZXIuY2xpZW50SGVpZ2h0ID09PSAwID8gMSA6IHRoaXMuY29udGFpbmVyLmNsaWVudEhlaWdodClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoICFjb250YWluZXJTaXplLmVxdWFscyggdGhpcy5vbGRDb250YWluZXJTaXplICkgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5yZXNpemUoIGNvbnRhaW5lclNpemUsIHRydWUgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LmdvSG9tZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9sZENvbnRhaW5lclNpemUgPSBjb250YWluZXJTaXplO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd2VyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZC5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIG5hdmlnYXRvciBtaW5pbWFwJ3Mgdmlld3BvcnQgcmVjdGFuZ2xlIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIHZpZXdlcidzIHZpZXdwb3J0IG9jY3Vycy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IFRoZSB2aWV3cG9ydCB0aGlzIG5hdmlnYXRvciBpcyB0cmFja2luZy5cbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCB2aWV3cG9ydCApIHtcblxuICAgICAgICB2YXIgdmlld2VyU2l6ZSxcbiAgICAgICAgICAgIG5ld1dpZHRoLFxuICAgICAgICAgICAgbmV3SGVpZ2h0LFxuICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgdG9wbGVmdCxcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0O1xuXG4gICAgICAgIHZpZXdlclNpemUgPSAkLmdldEVsZW1lbnRTaXplKCB0aGlzLnZpZXdlci5lbGVtZW50ICk7XG4gICAgICAgIGlmICggdGhpcy5fcmVzaXplV2l0aFZpZXdlciAmJiB2aWV3ZXJTaXplLnggJiYgdmlld2VyU2l6ZS55ICYmICF2aWV3ZXJTaXplLmVxdWFscyggdGhpcy5vbGRWaWV3ZXJTaXplICkgKSB7XG4gICAgICAgICAgICB0aGlzLm9sZFZpZXdlclNpemUgPSB2aWV3ZXJTaXplO1xuXG4gICAgICAgICAgICBpZiAoIHRoaXMubWFpbnRhaW5TaXplUmF0aW8gfHwgIXRoaXMuZWxlbWVudEFyZWEpIHtcbiAgICAgICAgICAgICAgICBuZXdXaWR0aCAgPSB2aWV3ZXJTaXplLnggKiB0aGlzLnNpemVSYXRpbztcbiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSB2aWV3ZXJTaXplLnkgKiB0aGlzLnNpemVSYXRpbztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3V2lkdGggPSBNYXRoLnNxcnQodGhpcy5lbGVtZW50QXJlYSAqICh2aWV3ZXJTaXplLnggLyB2aWV3ZXJTaXplLnkpKTtcbiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSB0aGlzLmVsZW1lbnRBcmVhIC8gbmV3V2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCAgPSBNYXRoLnJvdW5kKCBuZXdXaWR0aCApICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBNYXRoLnJvdW5kKCBuZXdIZWlnaHQgKSArICdweCc7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5lbGVtZW50QXJlYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEFyZWEgPSBuZXdXaWR0aCAqIG5ld0hlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlld3BvcnQgJiYgdGhpcy52aWV3cG9ydCkge1xuICAgICAgICAgICAgYm91bmRzICAgICAgPSB2aWV3cG9ydC5nZXRCb3VuZHNOb1JvdGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIHRvcGxlZnQgICAgID0gdGhpcy52aWV3cG9ydC5waXhlbEZyb21Qb2ludE5vUm90YXRlKGJvdW5kcy5nZXRUb3BMZWZ0KCksIGZhbHNlKTtcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gdGhpcy52aWV3cG9ydC5waXhlbEZyb21Qb2ludE5vUm90YXRlKGJvdW5kcy5nZXRCb3R0b21SaWdodCgpLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAubWludXMoIHRoaXMudG90YWxCb3JkZXJXaWR0aHMgKTtcblxuICAgICAgICAgICAgLy91cGRhdGUgc3R5bGUgZm9yIG5hdmlnYXRvci1ib3hcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZGlzcGxheVJlZ2lvbi5zdHlsZTtcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSB0aGlzLndvcmxkLmdldEl0ZW1Db3VudCgpID8gJ2Jsb2NrJyA6ICdub25lJztcblxuICAgICAgICAgICAgc3R5bGUudG9wICAgID0gTWF0aC5yb3VuZCggdG9wbGVmdC55ICkgKyAncHgnO1xuICAgICAgICAgICAgc3R5bGUubGVmdCAgID0gTWF0aC5yb3VuZCggdG9wbGVmdC54ICkgKyAncHgnO1xuXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBNYXRoLmFicyggdG9wbGVmdC54IC0gYm90dG9tcmlnaHQueCApO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IE1hdGguYWJzKCB0b3BsZWZ0LnkgLSBib3R0b21yaWdodC55ICk7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2lkdGggYW5kIGhlaWdodCBhcmUgbm9uLW5lZ2F0aXZlIHNvIElFIGRvZXNuJ3QgdGhyb3dcbiAgICAgICAgICAgIHN0eWxlLndpZHRoICA9IE1hdGgucm91bmQoIE1hdGgubWF4KCB3aWR0aCwgMCApICkgKyAncHgnO1xuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gTWF0aC5yb3VuZCggTWF0aC5tYXgoIGhlaWdodCwgMCApICkgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgLy8gb3ZlcnJpZGVzIFZpZXdlci5hZGRUaWxlZEltYWdlXG4gICAgYWRkVGlsZWRJbWFnZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IG9wdGlvbnMub3JpZ2luYWxUaWxlZEltYWdlO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5vcmlnaW5hbDtcblxuICAgICAgICB2YXIgb3B0aW9uc0Nsb25lID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG15SXRlbSA9IGV2ZW50Lml0ZW07XG4gICAgICAgICAgICAgICAgbXlJdGVtLl9vcmlnaW5hbEZvck5hdmlnYXRvciA9IG9yaWdpbmFsO1xuICAgICAgICAgICAgICAgIF90aGlzLl9tYXRjaEJvdW5kcyhteUl0ZW0sIG9yaWdpbmFsLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIG9yaWdpbmFsLmFkZEhhbmRsZXIoJ2JvdW5kcy1jaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21hdGNoQm91bmRzKG15SXRlbSwgb3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gJC5WaWV3ZXIucHJvdG90eXBlLmFkZFRpbGVkSW1hZ2UuYXBwbHkodGhpcywgW29wdGlvbnNDbG9uZV0pO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2dldE1hdGNoaW5nSXRlbTogZnVuY3Rpb24odGhlaXJJdGVtKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMud29ybGQuZ2V0SXRlbUNvdW50KCk7XG4gICAgICAgIHZhciBpdGVtO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0aGlzLndvcmxkLmdldEl0ZW1BdChpKTtcbiAgICAgICAgICAgIGlmIChpdGVtLl9vcmlnaW5hbEZvck5hdmlnYXRvciA9PT0gdGhlaXJJdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9tYXRjaEJvdW5kczogZnVuY3Rpb24obXlJdGVtLCB0aGVpckl0ZW0sIGltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSB0aGVpckl0ZW0uZ2V0Qm91bmRzKCk7XG4gICAgICAgIG15SXRlbS5zZXRQb3NpdGlvbihib3VuZHMuZ2V0VG9wTGVmdCgpLCBpbW1lZGlhdGVseSk7XG4gICAgICAgIG15SXRlbS5zZXRXaWR0aChib3VuZHMud2lkdGgsIGltbWVkaWF0ZWx5KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gb25DYW52YXNDbGljayggZXZlbnQgKSB7XG4gICAgaWYgKCBldmVudC5xdWljayAmJiB0aGlzLnZpZXdlci52aWV3cG9ydCApIHtcbiAgICAgICAgdGhpcy52aWV3ZXIudmlld3BvcnQucGFuVG8odGhpcy52aWV3cG9ydC5wb2ludEZyb21QaXhlbChldmVudC5wb3NpdGlvbikpO1xuICAgICAgICB0aGlzLnZpZXdlci52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBvbkNhbnZhc0RyYWcoIGV2ZW50ICkge1xuICAgIGlmICggdGhpcy52aWV3ZXIudmlld3BvcnQgKSB7XG4gICAgICAgIGlmKCAhdGhpcy5wYW5Ib3Jpem9udGFsICl7XG4gICAgICAgICAgICBldmVudC5kZWx0YS54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiggIXRoaXMucGFuVmVydGljYWwgKXtcbiAgICAgICAgICAgIGV2ZW50LmRlbHRhLnkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlld2VyLnZpZXdwb3J0LnBhbkJ5KFxuICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5kZWx0YVBvaW50c0Zyb21QaXhlbHMoXG4gICAgICAgICAgICAgICAgZXZlbnQuZGVsdGFcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gb25DYW52YXNSZWxlYXNlKCBldmVudCApIHtcbiAgICBpZiAoIGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkICYmIHRoaXMudmlld2VyLnZpZXdwb3J0ICkge1xuICAgICAgICB0aGlzLnZpZXdlci52aWV3cG9ydC5hcHBseUNvbnN0cmFpbnRzKCk7XG4gICAgfVxufVxuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogQGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIG9uQ2FudmFzU2Nyb2xsKCBldmVudCApIHtcbiAgICAvKipcbiAgICAgKiBSYWlzZWQgd2hlbiBhIHNjcm9sbCBldmVudCBvY2N1cnMgb24gdGhlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlciNuYXZpZ2F0b3J9IGVsZW1lbnQgKG1vdXNlIHdoZWVsLCB0b3VjaCBwaW5jaCwgZXRjLikuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbmF2aWdhdG9yLXNjcm9sbFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGlzIGV2ZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Nb3VzZVRyYWNrZXJ9IHRyYWNrZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgTW91c2VUcmFja2VyIHdoaWNoIG9yaWdpbmF0ZWQgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCByZWxhdGl2ZSB0byB0aGUgdHJhY2tlZCBlbGVtZW50LlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzY3JvbGwgLSBUaGUgc2Nyb2xsIGRlbHRhIGZvciB0aGUgZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBzaGlmdCAtIFRydWUgaWYgdGhlIHNoaWZ0IGtleSB3YXMgcHJlc3NlZCBkdXJpbmcgdGhpcyBldmVudC5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMudmlld2VyLnJhaXNlRXZlbnQoICduYXZpZ2F0b3Itc2Nyb2xsJywge1xuICAgICAgICB0cmFja2VyOiBldmVudC5ldmVudFNvdXJjZSxcbiAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICBzY3JvbGw6IGV2ZW50LnNjcm9sbCxcbiAgICAgICAgc2hpZnQ6IGV2ZW50LnNoaWZ0LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50XG4gICAgfSk7XG5cbiAgICAvL2RvbnQgc2Nyb2xsIHRoZSBwYWdlIHVwIGFuZCBkb3duIGlmIHRoZSB1c2VyIGlzIHNjcm9sbGluZ1xuICAgIC8vaW4gdGhlIG5hdmlnYXRvclxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlZ3JlZXNcbiAgICAqL1xuZnVuY3Rpb24gX3NldFRyYW5zZm9ybVJvdGF0ZSAoZWxlbWVudCwgZGVncmVlcykge1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyBkZWdyZWVzICsgXCJkZWcpXCI7XG4gICAgZWxlbWVudC5zdHlsZS5tb3pUcmFuc2Zvcm0gPSBcInJvdGF0ZShcIiArIGRlZ3JlZXMgKyBcImRlZylcIjtcbiAgICBlbGVtZW50LnN0eWxlLm1zVHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyBkZWdyZWVzICsgXCJkZWcpXCI7XG4gICAgZWxlbWVudC5zdHlsZS5vVHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyBkZWdyZWVzICsgXCJkZWcpXCI7XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZShcIiArIGRlZ3JlZXMgKyBcImRlZylcIjtcbn1cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBnZXRTdHJpbmcvc2V0U3RyaW5nXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vL1RPRE86IEkgZ3Vlc3MgdGhpcyBpcyB3aGVyZSB0aGUgaTE4biBuZWVkcyB0byBiZSByZWltcGxlbWVudGVkLiAgSSdsbCBsb29rXG4vLyAgICAgIGludG8gZXhpc3RpbmcgcGF0dGVybnMgZm9yIGkxOG4gaW4gamF2YXNjcmlwdCBidXQgaSB0aGluayB0aGF0IG1pbWlja2luZ1xuLy8gICAgICBweXRob25zIGdldHRleHQgbWlnaHQgYmUgYSByZWFzb25hYmxlIGFwcHJvYWNoLlxudmFyIEkxOE4gPSB7XG4gICAgRXJyb3JzOiB7XG4gICAgICAgIER6YzogICAgICAgICAgICBcIlNvcnJ5LCB3ZSBkb24ndCBzdXBwb3J0IERlZXAgWm9vbSBDb2xsZWN0aW9ucyFcIixcbiAgICAgICAgRHppOiAgICAgICAgICAgIFwiSG1tLCB0aGlzIGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGEgdmFsaWQgRGVlcCBab29tIEltYWdlLlwiLFxuICAgICAgICBYbWw6ICAgICAgICAgICAgXCJIbW0sIHRoaXMgZG9lc24ndCBhcHBlYXIgdG8gYmUgYSB2YWxpZCBEZWVwIFpvb20gSW1hZ2UuXCIsXG4gICAgICAgIEltYWdlRm9ybWF0OiAgICBcIlNvcnJ5LCB3ZSBkb24ndCBzdXBwb3J0IHswfS1iYXNlZCBEZWVwIFpvb20gSW1hZ2VzLlwiLFxuICAgICAgICBTZWN1cml0eTogICAgICAgXCJJdCBsb29rcyBsaWtlIGEgc2VjdXJpdHkgcmVzdHJpY3Rpb24gc3RvcHBlZCB1cyBmcm9tIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibG9hZGluZyB0aGlzIERlZXAgWm9vbSBJbWFnZS5cIixcbiAgICAgICAgU3RhdHVzOiAgICAgICAgIFwiVGhpcyBzcGFjZSB1bmludGVudGlvbmFsbHkgbGVmdCBibGFuayAoezB9IHsxfSkuXCIsXG4gICAgICAgIE9wZW5GYWlsZWQ6ICAgICBcIlVuYWJsZSB0byBvcGVuIHswfTogezF9XCJcbiAgICB9LFxuXG4gICAgVG9vbHRpcHM6IHtcbiAgICAgICAgRnVsbFBhZ2U6ICAgICAgIFwiVG9nZ2xlIGZ1bGwgcGFnZVwiLFxuICAgICAgICBIb21lOiAgICAgICAgICAgXCJHbyBob21lXCIsXG4gICAgICAgIFpvb21JbjogICAgICAgICBcIlpvb20gaW5cIixcbiAgICAgICAgWm9vbU91dDogICAgICAgIFwiWm9vbSBvdXRcIixcbiAgICAgICAgTmV4dFBhZ2U6ICAgICAgIFwiTmV4dCBwYWdlXCIsXG4gICAgICAgIFByZXZpb3VzUGFnZTogICBcIlByZXZpb3VzIHBhZ2VcIixcbiAgICAgICAgUm90YXRlTGVmdDogICAgIFwiUm90YXRlIGxlZnRcIixcbiAgICAgICAgUm90YXRlUmlnaHQ6ICAgIFwiUm90YXRlIHJpZ2h0XCJcbiAgICB9XG59O1xuXG4kLmV4dGVuZCggJCwgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uICove1xuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAgICovXG4gICAgZ2V0U3RyaW5nOiBmdW5jdGlvbiggcHJvcCApIHtcblxuICAgICAgICB2YXIgcHJvcHMgICA9IHByb3Auc3BsaXQoJy4nKSxcbiAgICAgICAgICAgIHN0cmluZyAgPSBudWxsLFxuICAgICAgICAgICAgYXJncyAgICA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IEkxOE4sXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoLTE7IGkrKyApIHtcbiAgICAgICAgICAgIC8vIGluIGNhc2Ugbm90IGEgc3VicHJvcGVydHlcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lclsgcHJvcHNbIGkgXSBdIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIHN0cmluZyA9IGNvbnRhaW5lclsgcHJvcHNbIGkgXSBdO1xuXG4gICAgICAgIGlmICggdHlwZW9mKCBzdHJpbmcgKSAhPSBcInN0cmluZ1wiICkge1xuICAgICAgICAgICAgJC5jb25zb2xlLmRlYnVnKCBcIlVudHJhbnNsYXRlZCBzb3VyY2Ugc3RyaW5nOlwiLCBwcm9wICk7XG4gICAgICAgICAgICBzdHJpbmcgPSBcIlwiOyAvLyBGSVhNRTogdGhpcyBicmVha3MgZ2V0dGV4dCgpLXN0eWxlIGNvbnZlbnRpb24sIHdoaWNoIHdvdWxkIHJldHVybiBzb3VyY2VcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFx7XFxkK1xcfS9nLCBmdW5jdGlvbihjYXB0dXJlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KCBjYXB0dXJlLm1hdGNoKCAvXFxkKy8gKSwgMTAgKSArIDE7XG4gICAgICAgICAgICByZXR1cm4gaSA8IGFyZ3MubGVuZ3RoID9cbiAgICAgICAgICAgICAgICBhcmdzWyBpIF0gOlxuICAgICAgICAgICAgICAgIFwiXCI7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gICAgc2V0U3RyaW5nOiBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cbiAgICAgICAgdmFyIHByb3BzICAgICA9IHByb3Auc3BsaXQoJy4nKSxcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IEkxOE4sXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoIC0gMTsgaSsrICkge1xuICAgICAgICAgICAgaWYgKCAhY29udGFpbmVyWyBwcm9wc1sgaSBdIF0gKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyWyBwcm9wc1sgaSBdIF0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lclsgcHJvcHNbIGkgXSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyWyBwcm9wc1sgaSBdIF0gPSB2YWx1ZTtcbiAgICB9XG5cbn0pO1xuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIFBvaW50XG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIEBjbGFzcyBQb2ludFxuICogQGNsYXNzZGVzYyBBIFBvaW50IGlzIHJlYWxseSB1c2VkIGFzIGEgMi1kaW1lbnNpb25hbCB2ZWN0b3IsIGVxdWFsbHkgdXNlZnVsIGZvclxuICogcmVwcmVzZW50aW5nIGEgcG9pbnQgb24gYSBwbGFuZSwgb3IgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgYSBwbGFuZVxuICogbm90IHJlcXVpcmluZyBhbnkgb3RoZXIgZnJhbWUgb2YgcmVmZXJlbmNlLlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAcGFyYW0ge051bWJlcn0gW3hdIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd4Jy4gRGVmYXVsdHMgdG8gdGhlIG9yaWdpbiBhdCAwLlxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XSBUaGUgdmVjdG9yIGNvbXBvbmVudCAneScuIERlZmF1bHRzIHRvIHRoZSBvcmlnaW4gYXQgMC5cbiAqL1xuJC5Qb2ludCA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd4Jy5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHhcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Qb2ludCNcbiAgICAgKi9cbiAgICB0aGlzLnggPSB0eXBlb2YgKCB4ICkgPT0gXCJudW1iZXJcIiA/IHggOiAwO1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd5Jy5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHlcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5Qb2ludCNcbiAgICAgKi9cbiAgICB0aGlzLnkgPSB0eXBlb2YgKCB5ICkgPT0gXCJudW1iZXJcIiA/IHkgOiAwO1xufTtcblxuLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLlBvaW50LnByb3RvdHlwZSAqL1xuJC5Qb2ludC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IGEgZHVwbGljYXRlIG9mIHRoaXMgUG9pbnRcbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCh0aGlzLngsIHRoaXMueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbm90aGVyIFBvaW50IHRvIHRoaXMgcG9pbnQgYW5kIHJldHVybiBhIG5ldyBQb2ludC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50IFRoZSBwb2ludCB0byBhZGQgdmVjdG9yIGNvbXBvbmVudHMuXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IEEgbmV3IHBvaW50IHJlcHJlc2VudGluZyB0aGUgc3VtIG9mIHRoZVxuICAgICAqICB2ZWN0b3IgY29tcG9uZW50c1xuICAgICAqL1xuICAgIHBsdXM6IGZ1bmN0aW9uKCBwb2ludCApIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgdGhpcy54ICsgcG9pbnQueCxcbiAgICAgICAgICAgIHRoaXMueSArIHBvaW50LnlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3Vic3RyYWN0IGFub3RoZXIgUG9pbnQgdG8gdGhpcyBwb2ludCBhbmQgcmV0dXJuIGEgbmV3IFBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHRvIHN1YnN0cmFjdCB2ZWN0b3IgY29tcG9uZW50cy5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gQSBuZXcgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBzdWJzdHJhY3Rpb24gb2YgdGhlXG4gICAgICogIHZlY3RvciBjb21wb25lbnRzXG4gICAgICovXG4gICAgbWludXM6IGZ1bmN0aW9uKCBwb2ludCApIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgdGhpcy54IC0gcG9pbnQueCxcbiAgICAgICAgICAgIHRoaXMueSAtIHBvaW50LnlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhpcyBwb2ludCBieSBhIGZhY3RvciBhbmQgcmV0dXJuIGEgbmV3IFBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmYWN0b3IgVGhlIGZhY3RvciB0byBtdWx0aXBseSB2ZWN0b3IgY29tcG9uZW50cy5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gQSBuZXcgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBtdWx0aXBsaWNhdGlvblxuICAgICAqICBvZiB0aGUgdmVjdG9yIGNvbXBvbmVudHMgYnkgdGhlIGZhY3RvclxuICAgICAqL1xuICAgIHRpbWVzOiBmdW5jdGlvbiggZmFjdG9yICkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICB0aGlzLnggKiBmYWN0b3IsXG4gICAgICAgICAgICB0aGlzLnkgKiBmYWN0b3JcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHRoaXMgcG9pbnQgYnkgYSBmYWN0b3IgYW5kIHJldHVybiBhIG5ldyBQb2ludC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZmFjdG9yIFRoZSBmYWN0b3IgdG8gZGl2aWRlIHZlY3RvciBjb21wb25lbnRzLlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBBIG5ldyBwb2ludCByZXByZXNlbnRpbmcgdGhlIGRpdmlzaW9uIG9mIHRoZVxuICAgICAqICB2ZWN0b3IgY29tcG9uZW50cyBieSB0aGUgZmFjdG9yXG4gICAgICovXG4gICAgZGl2aWRlOiBmdW5jdGlvbiggZmFjdG9yICkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICB0aGlzLnggLyBmYWN0b3IsXG4gICAgICAgICAgICB0aGlzLnkgLyBmYWN0b3JcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgb3Bwb3NpdGUgb2YgdGhpcyBwb2ludCBhbmQgcmV0dXJuIGEgbmV3IFBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBBIG5ldyBwb2ludCByZXByZXNlbnRpbmcgdGhlIG9wcG9zaXRlIG9mIHRoZVxuICAgICAqICB2ZWN0b3IgY29tcG9uZW50c1xuICAgICAqL1xuICAgIG5lZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCggLXRoaXMueCwgLXRoaXMueSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIGFub3RoZXIgcG9pbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2Ugd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgMiBwb2ludHNcbiAgICAgKi9cbiAgICBkaXN0YW5jZVRvOiBmdW5jdGlvbiggcG9pbnQgKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyggdGhpcy54IC0gcG9pbnQueCwgMiApICtcbiAgICAgICAgICAgIE1hdGgucG93KCB0aGlzLnkgLSBwb2ludC55LCAyIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgYSBmdW5jdGlvbiB0byBlYWNoIGNvb3JkaW5hdGUgb2YgdGhpcyBwb2ludCBhbmQgcmV0dXJuIGEgbmV3IHBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggY29vcmRpbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gQSBuZXcgcG9pbnQgd2l0aCB0aGUgY29vcmRpbmF0ZXMgY29tcHV0ZWRcbiAgICAgKiBieSB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uXG4gICAgICovXG4gICAgYXBwbHk6IGZ1bmN0aW9uKCBmdW5jICkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoIGZ1bmMoIHRoaXMueCApLCBmdW5jKCB0aGlzLnkgKSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIHBvaW50IGlzIGVxdWFsIHRvIGFub3RoZXIgb25lLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHRvIGNvbXBhcmUgdGhpcyBwb2ludCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZXkgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZXF1YWxzOiBmdW5jdGlvbiggcG9pbnQgKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBwb2ludCBpbnN0YW5jZW9mICQuUG9pbnRcbiAgICAgICAgKSAmJiAoXG4gICAgICAgICAgICB0aGlzLnggPT09IHBvaW50LnhcbiAgICAgICAgKSAmJiAoXG4gICAgICAgICAgICB0aGlzLnkgPT09IHBvaW50LnlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgcG9pbnQgYXJvdW5kIHRoZSBzcGVjaWZpZWQgcGl2b3RcbiAgICAgKiBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDQ2NTkzMS9yb3RhdGUtcmVjdGFuZ2xlLWFyb3VuZC1hLXBvaW50XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlZ3Jlc3MgdG8gcm90YXRlIGFyb3VuZCB0aGUgcGl2b3QuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBbcGl2b3Q9KDAsMCldIFBvaW50IGFyb3VuZCB3aGljaCB0byByb3RhdGUuXG4gICAgICogRGVmYXVsdHMgdG8gdGhlIG9yaWdpbi5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0uIEEgbmV3IHBvaW50IHJlcHJlc2VudGluZyB0aGUgcG9pbnQgcm90YXRlZCBhcm91bmQgdGhlIHNwZWNpZmllZCBwaXZvdFxuICAgICAqL1xuICAgIHJvdGF0ZTogZnVuY3Rpb24gKGRlZ3JlZXMsIHBpdm90KSB7XG4gICAgICAgIHBpdm90ID0gcGl2b3QgfHwgbmV3ICQuUG9pbnQoMCwgMCk7XG4gICAgICAgIHZhciBjb3M7XG4gICAgICAgIHZhciBzaW47XG4gICAgICAgIC8vIEF2b2lkIGZsb2F0IGNvbXB1dGF0aW9ucyB3aGVuIHBvc3NpYmxlXG4gICAgICAgIGlmIChkZWdyZWVzICUgOTAgPT09IDApIHtcbiAgICAgICAgICAgIHZhciBkID0gZGVncmVlcyAlIDM2MDtcbiAgICAgICAgICAgIGlmIChkIDwgMCkge1xuICAgICAgICAgICAgICAgIGQgKz0gMzYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjb3MgPSAxO1xuICAgICAgICAgICAgICAgICAgICBzaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDkwOlxuICAgICAgICAgICAgICAgICAgICBjb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBzaW4gPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE4MDpcbiAgICAgICAgICAgICAgICAgICAgY29zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHNpbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjcwOlxuICAgICAgICAgICAgICAgICAgICBjb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBzaW4gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBkZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wO1xuICAgICAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gY29zICogKHRoaXMueCAtIHBpdm90LngpIC0gc2luICogKHRoaXMueSAtIHBpdm90LnkpICsgcGl2b3QueDtcbiAgICAgICAgdmFyIHkgPSBzaW4gKiAodGhpcy54IC0gcGl2b3QueCkgKyBjb3MgKiAodGhpcy55IC0gcGl2b3QueSkgKyBwaXZvdC55O1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoeCwgeSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhpcyBwb2ludCB0byBhIHN0cmluZyBpbiB0aGUgZm9ybWF0ICh4LHkpIHdoZXJlIHggYW5kIHkgYXJlXG4gICAgICogcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcG9pbnQuXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCIoXCIgKyAoTWF0aC5yb3VuZCh0aGlzLnggKiAxMDApIC8gMTAwKSArIFwiLFwiICsgKE1hdGgucm91bmQodGhpcy55ICogMTAwKSAvIDEwMCkgKyBcIilcIjtcbiAgICB9XG59O1xuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIFRpbGVTb3VyY2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cblxuLyoqXG4gKiBAY2xhc3MgVGlsZVNvdXJjZVxuICogQGNsYXNzZGVzYyBUaGUgVGlsZVNvdXJjZSBjb250YWlucyB0aGUgbW9zdCBiYXNpYyBpbXBsZW1lbnRhdGlvbiByZXF1aXJlZCB0byBjcmVhdGUgYVxuICogc21vb3RoIHRyYW5zaXRpb24gYmV0d2VlbiBsYXllcnMgaW4gYW4gaW1hZ2UgcHlyYW1pZC4gSXQgaGFzIG9ubHkgYSBzaW5nbGUga2V5XG4gKiBpbnRlcmZhY2UgdGhhdCBtdXN0IGJlIGltcGxlbWVudGVkIHRvIGNvbXBsZXRlIGl0cyBrZXkgZnVuY3Rpb25hbGl0eTpcbiAqICdnZXRUaWxlVXJsJy4gIEl0IGFsc28gaGFzIHNldmVyYWwgb3B0aW9uYWwgaW50ZXJmYWNlcyB0aGF0IGNhbiBiZVxuICogaW1wbGVtZW50ZWQgaWYgYSBuZXcgVGlsZVNvdXJjZSB3aXNoZXMgdG8gc3VwcG9ydCBjb25maWd1cmF0aW9uIHZpYSBhIHNpbXBsZVxuICogb2JqZWN0IG9yIGFycmF5ICgnY29uZmlndXJlJykgYW5kIGlmIHRoZSB0aWxlIHNvdXJjZSBzdXBwb3J0cyBvciByZXF1aXJlc1xuICogY29uZmlndXJhdGlvbiB2aWEgcmV0cmlldmFsIG9mIGEgZG9jdW1lbnQgb24gdGhlIG5ldHdvcmsgYWxhIEFKQVggb3IgSlNPTlAsXG4gKiAoJ2dldEltYWdlSW5mbycpLlxuICogPGJyLz5cbiAqIEJ5IGRlZmF1bHQgdGhlIGltYWdlIHB5cmFtaWQgaXMgc3BsaXQgaW50byBOIGxheWVycyB3aGVyZSB0aGUgaW1hZ2UncyBsb25nZXN0XG4gKiBzaWRlIGluIE0gKGluIHBpeGVscyksIHdoZXJlIE4gaXMgdGhlIHNtYWxsZXN0IGludGVnZXIgd2hpY2ggc2F0aXNmaWVzXG4gKiAgICAgIDxzdHJvbmc+Ml4oTisxKSA+PSBNPC9zdHJvbmc+LlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLkV2ZW50U291cmNlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogICAgICBZb3UgY2FuIGVpdGhlciBzcGVjaWZ5IGEgVVJMLCBvciBsaXRlcmFsbHkgZGVmaW5lIHRoZSBUaWxlU291cmNlIChieSBzcGVjaWZ5aW5nXG4gKiAgICAgIHdpZHRoLCBoZWlnaHQsIHRpbGVTaXplLCB0aWxlT3ZlcmxhcCwgbWluTGV2ZWwsIGFuZCBtYXhMZXZlbCkuIEZvciB0aGUgZm9ybWVyLFxuICogICAgICB0aGUgZXh0ZW5kaW5nIGNsYXNzIGlzIGV4cGVjdGVkIHRvIGltcGxlbWVudCAnZ2V0SW1hZ2VJbmZvJyBhbmQgJ2NvbmZpZ3VyZScuXG4gKiAgICAgIEZvciB0aGUgbGF0dGVyLCB0aGUgY29uc3RydWN0aW9uIGlzIGFzc3VtZWQgdG8gb2NjdXIgdGhyb3VnaFxuICogICAgICB0aGUgZXh0ZW5kaW5nIGNsYXNzZXMgaW1wbGVtZW50YXRpb24gb2YgJ2NvbmZpZ3VyZScuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMudXJsXVxuICogICAgICBUaGUgVVJMIGZvciB0aGUgZGF0YSBuZWNlc3NhcnkgZm9yIHRoaXMgVGlsZVNvdXJjZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnN1Y2Nlc3NdXG4gKiAgICAgIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCBjcmVhdGlvbi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWpheFdpdGhDcmVkZW50aWFsc11cbiAqICAgICAgSWYgdGhpcyBUaWxlU291cmNlIG5lZWRzIHRvIG1ha2UgYW4gQUpBWCBjYWxsLCB0aGlzIHNwZWNpZmllcyB3aGV0aGVyIHRvIHNldFxuICogICAgICB0aGUgWEhSJ3Mgd2l0aENyZWRlbnRpYWxzIChmb3IgYWNjZXNzaW5nIHNlY3VyZSBkYXRhKS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aF1cbiAqICAgICAgV2lkdGggb2YgdGhlIHNvdXJjZSBpbWFnZSBhdCBtYXggcmVzb2x1dGlvbiBpbiBwaXhlbHMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaGVpZ2h0XVxuICogICAgICBIZWlnaHQgb2YgdGhlIHNvdXJjZSBpbWFnZSBhdCBtYXggcmVzb2x1dGlvbiBpbiBwaXhlbHMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudGlsZVNpemVdXG4gKiAgICAgIFRoZSBzaXplIG9mIHRoZSB0aWxlcyB0byBhc3N1bWVkIHRvIG1ha2UgdXAgZWFjaCBweXJhbWlkIGxheWVyIGluIHBpeGVscy5cbiAqICAgICAgVGlsZSBzaXplIGRldGVybWluZXMgdGhlIHBvaW50IGF0IHdoaWNoIHRoZSBpbWFnZSBweXJhbWlkIG11c3QgYmVcbiAqICAgICAgZGl2aWRlZCBpbnRvIGEgbWF0cml4IG9mIHNtYWxsZXIgaW1hZ2VzLlxuICogICAgICBVc2Ugb3B0aW9ucy50aWxlV2lkdGggYW5kIG9wdGlvbnMudGlsZUhlaWdodCB0byBzdXBwb3J0IG5vbi1zcXVhcmUgdGlsZXMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudGlsZVdpZHRoXVxuICogICAgICBUaGUgd2lkdGggb2YgdGhlIHRpbGVzIHRvIGFzc3VtZWQgdG8gbWFrZSB1cCBlYWNoIHB5cmFtaWQgbGF5ZXIgaW4gcGl4ZWxzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRpbGVIZWlnaHRdXG4gKiAgICAgIFRoZSBoZWlnaHQgb2YgdGhlIHRpbGVzIHRvIGFzc3VtZWQgdG8gbWFrZSB1cCBlYWNoIHB5cmFtaWQgbGF5ZXIgaW4gcGl4ZWxzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRpbGVPdmVybGFwXVxuICogICAgICBUaGUgbnVtYmVyIG9mIHBpeGVscyBlYWNoIHRpbGUgaXMgZXhwZWN0ZWQgdG8gb3ZlcmxhcCB0b3VjaGluZyB0aWxlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5taW5MZXZlbF1cbiAqICAgICAgVGhlIG1pbmltdW0gbGV2ZWwgdG8gYXR0ZW1wdCB0byBsb2FkLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1heExldmVsXVxuICogICAgICBUaGUgbWF4aW11bSBsZXZlbCB0byBhdHRlbXB0IHRvIGxvYWQuXG4gKi9cbiQuVGlsZVNvdXJjZSA9IGZ1bmN0aW9uKCB3aWR0aCwgaGVpZ2h0LCB0aWxlU2l6ZSwgdGlsZU92ZXJsYXAsIG1pbkxldmVsLCBtYXhMZXZlbCApIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGk7XG5cbiAgICBpZiggJC5pc1BsYWluT2JqZWN0KCB3aWR0aCApICl7XG4gICAgICAgIG9wdGlvbnMgPSB3aWR0aDtcbiAgICB9ZWxzZXtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHdpZHRoOiBhcmdzWzBdLFxuICAgICAgICAgICAgaGVpZ2h0OiBhcmdzWzFdLFxuICAgICAgICAgICAgdGlsZVNpemU6IGFyZ3NbMl0sXG4gICAgICAgICAgICB0aWxlT3ZlcmxhcDogYXJnc1szXSxcbiAgICAgICAgICAgIG1pbkxldmVsOiBhcmdzWzRdLFxuICAgICAgICAgICAgbWF4TGV2ZWw6IGFyZ3NbNV1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL1RpbGUgc291cmNlcyBzdXBwbHkgc29tZSBldmVudHMsIG5hbWVseSAncmVhZHknIHdoZW4gdGhleSBtdXN0IGJlIGNvbmZpZ3VyZWRcbiAgICAvL2J5IGFzeW5jaHJvbm91c2x5IGZldGNoaW5nIHRoZWlyIGNvbmZpZ3VyYXRpb24gZGF0YS5cbiAgICAkLkV2ZW50U291cmNlLmNhbGwoIHRoaXMgKTtcblxuICAgIC8vd2UgYWxsb3cgb3B0aW9ucyB0byBvdmVycmlkZSBhbnl0aGluZyB3ZSBkb250IHRyZWF0IGFzXG4gICAgLy9yZXF1aXJlZCB2aWEgaWRpb21hdGljIG9wdGlvbnMgb3Igd2hpY2ggaXMgZnVuY3Rpb25hbGx5XG4gICAgLy9zZXQgZGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZGluZXNzIG9mIHRoaXMgdGlsZVxuICAgIC8vc291cmNlXG4gICAgJC5leHRlbmQoIHRydWUsIHRoaXMsIG9wdGlvbnMgKTtcblxuICAgIGlmICghdGhpcy5zdWNjZXNzKSB7XG4gICAgICAgIC8vQW55IGZ1bmN0aW9ucyB0aGF0IGFyZSBwYXNzZWQgYXMgYXJndW1lbnRzIGFyZSBib3VuZCB0byB0aGUgcmVhZHkgY2FsbGJhY2tcbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggYXJndW1lbnRzWyBpIF0gKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MgPSBhcmd1bWVudHNbIGkgXTtcbiAgICAgICAgICAgICAgICAvL29ubHkgb25lIGNhbGxiYWNrIHBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3VjY2Vzcykge1xuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoICdyZWFkeScsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgICAgICBfdGhpcy5zdWNjZXNzKCBldmVudCApO1xuICAgICAgICB9ICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmF0aW8gb2Ygd2lkdGggdG8gaGVpZ2h0XG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBhc3BlY3RSYXRpb1xuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2UjXG4gICAgICovXG4gICAgLyoqXG4gICAgICogVmVjdG9yIHN0b3JpbmcgeCBhbmQgeSBkaW1lbnNpb25zICggd2lkdGggYW5kIGhlaWdodCByZXNwZWN0aXZlbHkgKS5cbiAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBkaW1lbnNpb25zXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZVNvdXJjZSNcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBUaGUgb3ZlcmxhcCBpbiBwaXhlbHMgZWFjaCB0aWxlIHNoYXJlcyB3aXRoIGl0cyBhZGphY2VudCBuZWlnaGJvcnMuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSB0aWxlT3ZlcmxhcFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2UjXG4gICAgICovXG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gcHlyYW1pZCBsZXZlbCB0aGlzIHRpbGUgc291cmNlIHN1cHBvcnRzIG9yIHNob3VsZCBhdHRlbXB0IHRvIGxvYWQuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBtaW5MZXZlbFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2UjXG4gICAgICovXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gcHlyYW1pZCBsZXZlbCB0aGlzIHRpbGUgc291cmNlIHN1cHBvcnRzIG9yIHNob3VsZCBhdHRlbXB0IHRvIGxvYWQuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBtYXhMZXZlbFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2UjXG4gICAgICovXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSByZWFkeVxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2UjXG4gICAgICovXG5cbiAgICBpZiggJ3N0cmluZycgPT0gJC50eXBlKCBhcmd1bWVudHNbIDAgXSApICl7XG4gICAgICAgIHRoaXMudXJsID0gYXJndW1lbnRzWzBdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVybCkge1xuICAgICAgICAvL2luIGNhc2UgdGhlIGdldEltYWdlSW5mbyBtZXRob2QgaXMgb3ZlcnJpZGVuIGFuZC9vciBpbXBsaWVzIGFuXG4gICAgICAgIC8vYXN5bmMgbWVjaGFuaXNtIHNldCBzb21lIHNhZmUgZGVmYXVsdHMgZmlyc3RcbiAgICAgICAgdGhpcy5hc3BlY3RSYXRpbyA9IDE7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyAgPSBuZXcgJC5Qb2ludCggMTAsIDEwICk7XG4gICAgICAgIHRoaXMuX3RpbGVXaWR0aCAgPSAwO1xuICAgICAgICB0aGlzLl90aWxlSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy50aWxlT3ZlcmxhcCA9IDA7XG4gICAgICAgIHRoaXMubWluTGV2ZWwgICAgPSAwO1xuICAgICAgICB0aGlzLm1heExldmVsICAgID0gMDtcbiAgICAgICAgdGhpcy5yZWFkeSAgICAgICA9IGZhbHNlO1xuICAgICAgICAvL2NvbmZpZ3VyYXRpb24gdmlhIHVybCBpbXBsaWVzIHRoZSBleHRlbmRpbmcgY2xhc3NcbiAgICAgICAgLy9pbXBsZW1lbnRzIGFuZCAnY29uZmlndXJlJ1xuICAgICAgICB0aGlzLmdldEltYWdlSW5mbyggdGhpcy51cmwgKTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy9leHBsaWNpdCBjb25maWd1cmF0aW9uIHZpYSBwb3NpdGlvbmFsIGFyZ3MgaW4gY29uc3RydWN0b3JcbiAgICAgICAgLy9vciB0aGUgbW9yZSBpZGlvbWF0aWMgJ29wdGlvbnMnIG9iamVjdFxuICAgICAgICB0aGlzLnJlYWR5ICAgICAgID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hc3BlY3RSYXRpbyA9ICggb3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCApID9cbiAgICAgICAgICAgICggIG9wdGlvbnMud2lkdGggLyBvcHRpb25zLmhlaWdodCApIDogMTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zICA9IG5ldyAkLlBvaW50KCBvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCApO1xuXG4gICAgICAgIGlmICggdGhpcy50aWxlU2l6ZSApe1xuICAgICAgICAgICAgdGhpcy5fdGlsZVdpZHRoID0gdGhpcy5fdGlsZUhlaWdodCA9IHRoaXMudGlsZVNpemU7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy50aWxlU2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKCB0aGlzLnRpbGVXaWR0aCApe1xuICAgICAgICAgICAgICAgIC8vIFdlIHdlcmUgcGFzc2VkIHRpbGVXaWR0aCBpbiBvcHRpb25zLCBidXQgd2Ugd2FudCB0byByZW5hbWUgaXRcbiAgICAgICAgICAgICAgICAvLyB3aXRoIGEgbGVhZGluZyB1bmRlcnNjb3JlIHRvIG1ha2UgY2xlYXIgdGhhdCBpdCBpcyBub3Qgc2FmZSB0byBkaXJlY3RseSBtb2RpZnkgaXRcbiAgICAgICAgICAgICAgICB0aGlzLl90aWxlV2lkdGggPSB0aGlzLnRpbGVXaWR0aDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50aWxlV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RpbGVXaWR0aCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLnRpbGVIZWlnaHQgKXtcbiAgICAgICAgICAgICAgICAvLyBTZWUgbm90ZSBhYm92ZSBhYm91dCByZW5hbWluZyB0aGlzLnRpbGVXaWR0aFxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbGVIZWlnaHQgPSB0aGlzLnRpbGVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudGlsZUhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGlsZUhlaWdodCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbGVPdmVybGFwID0gb3B0aW9ucy50aWxlT3ZlcmxhcCA/IG9wdGlvbnMudGlsZU92ZXJsYXAgOiAwO1xuICAgICAgICB0aGlzLm1pbkxldmVsICAgID0gb3B0aW9ucy5taW5MZXZlbCA/IG9wdGlvbnMubWluTGV2ZWwgOiAwO1xuICAgICAgICB0aGlzLm1heExldmVsICAgID0gKCB1bmRlZmluZWQgIT09IG9wdGlvbnMubWF4TGV2ZWwgJiYgbnVsbCAhPT0gb3B0aW9ucy5tYXhMZXZlbCApID9cbiAgICAgICAgICAgIG9wdGlvbnMubWF4TGV2ZWwgOiAoXG4gICAgICAgICAgICAgICAgKCBvcHRpb25zLndpZHRoICYmIG9wdGlvbnMuaGVpZ2h0ICkgPyBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubG9nKCBNYXRoLm1heCggb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQgKSApIC9cbiAgICAgICAgICAgICAgICAgICAgTWF0aC5sb2coIDIgKVxuICAgICAgICAgICAgICAgICkgOiAwXG4gICAgICAgICAgICApO1xuICAgICAgICBpZiggdGhpcy5zdWNjZXNzICYmICQuaXNGdW5jdGlvbiggdGhpcy5zdWNjZXNzICkgKXtcbiAgICAgICAgICAgIHRoaXMuc3VjY2VzcyggdGhpcyApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn07XG5cbi8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5UaWxlU291cmNlLnByb3RvdHlwZSAqL1xuJC5UaWxlU291cmNlLnByb3RvdHlwZSA9IHtcblxuICAgIGdldFRpbGVTaXplOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG4gICAgICAgICQuY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIFwiW1RpbGVTb3VyY2UuZ2V0VGlsZVNpemVdIGlzIGRlcHJlY2F0ZWQuXCIgK1xuICAgICAgICAgICAgXCJVc2UgVGlsZVNvdXJjZS5nZXRUaWxlV2lkdGgoKSBhbmQgVGlsZVNvdXJjZS5nZXRUaWxlSGVpZ2h0KCkgaW5zdGVhZFwiXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLl90aWxlV2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdGlsZVdpZHRoIGZvciBhIGdpdmVuIGxldmVsLlxuICAgICAqIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgaWYgdGlsZVdpZHRoIGNhbiBiZSBkaWZmZXJlbnQgYXQgZGlmZmVyZW50IGxldmVsc1xuICAgICAqICAgc3VjaCBhcyBpbiBJSUlGVGlsZVNvdXJjZS4gIENvZGUgc2hvdWxkIHVzZSB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJlYWRpbmdcbiAgICAgKiAgIGZyb20gLl90aWxlV2lkdGggZGlyZWN0bHkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsXG4gICAgICovXG4gICAgZ2V0VGlsZVdpZHRoOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGlsZVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUaWxlU2l6ZShsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVXaWR0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB0aWxlSGVpZ2h0IGZvciBhIGdpdmVuIGxldmVsLlxuICAgICAqIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgaWYgdGlsZUhlaWdodCBjYW4gYmUgZGlmZmVyZW50IGF0IGRpZmZlcmVudCBsZXZlbHNcbiAgICAgKiAgIHN1Y2ggYXMgaW4gSUlJRlRpbGVTb3VyY2UuICBDb2RlIHNob3VsZCB1c2UgdGhpcyBmdW5jdGlvbiByYXRoZXIgdGhhbiByZWFkaW5nXG4gICAgICogICBmcm9tIC5fdGlsZUhlaWdodCBkaXJlY3RseS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKi9cbiAgICBnZXRUaWxlSGVpZ2h0OiBmdW5jdGlvbiggbGV2ZWwgKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGlsZUhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlsZVNpemUobGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90aWxlSGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKi9cbiAgICBnZXRMZXZlbFNjYWxlOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG5cbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuc2VhZHJhZ29uL29wZW5zZWFkcmFnb24vaXNzdWVzLzIyXG4gICAgICAgIC8vIHdlIHVzZSB0aGUgdGlsZXNvdXJjZXMgaW1wbGVtZW50YXRpb24gb2YgZ2V0TGV2ZWxTY2FsZSB0byBnZW5lcmF0ZVxuICAgICAgICAvLyBhIG1lbW9pemVkIHJlLWltcGxlbWVudGF0aW9uXG4gICAgICAgIHZhciBsZXZlbFNjYWxlQ2FjaGUgPSB7fSxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciggaSA9IDA7IGkgPD0gdGhpcy5tYXhMZXZlbDsgaSsrICl7XG4gICAgICAgICAgICBsZXZlbFNjYWxlQ2FjaGVbIGkgXSA9IDEgLyBNYXRoLnBvdygyLCB0aGlzLm1heExldmVsIC0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRMZXZlbFNjYWxlID0gZnVuY3Rpb24oIF9sZXZlbCApe1xuICAgICAgICAgICAgcmV0dXJuIGxldmVsU2NhbGVDYWNoZVsgX2xldmVsIF07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmdldExldmVsU2NhbGUoIGxldmVsICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldE51bVRpbGVzOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0TGV2ZWxTY2FsZSggbGV2ZWwgKSxcbiAgICAgICAgICAgIHggPSBNYXRoLmNlaWwoIHNjYWxlICogdGhpcy5kaW1lbnNpb25zLnggLyB0aGlzLmdldFRpbGVXaWR0aChsZXZlbCkgKSxcbiAgICAgICAgICAgIHkgPSBNYXRoLmNlaWwoIHNjYWxlICogdGhpcy5kaW1lbnNpb25zLnkgLyB0aGlzLmdldFRpbGVIZWlnaHQobGV2ZWwpICk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KCB4LCB5ICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldFBpeGVsUmF0aW86IGZ1bmN0aW9uKCBsZXZlbCApIHtcbiAgICAgICAgdmFyIGltYWdlU2l6ZVNjYWxlZCA9IHRoaXMuZGltZW5zaW9ucy50aW1lcyggdGhpcy5nZXRMZXZlbFNjYWxlKCBsZXZlbCApICksXG4gICAgICAgICAgICByeCA9IDEuMCAvIGltYWdlU2l6ZVNjYWxlZC54LFxuICAgICAgICAgICAgcnkgPSAxLjAgLyBpbWFnZVNpemVTY2FsZWQueTtcblxuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQocngsIHJ5KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKi9cbiAgICBnZXRDbG9zZXN0TGV2ZWw6IGZ1bmN0aW9uKCByZWN0ICkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHRpbGVzUGVyU2lkZSxcbiAgICAgICAgICAgIHRpbGVzO1xuXG4gICAgICAgIGZvciggaSA9IHRoaXMubWluTGV2ZWw7IGkgPCB0aGlzLm1heExldmVsOyBpKysgKXtcbiAgICAgICAgICAgIHRpbGVzID0gdGhpcy5nZXROdW1UaWxlcyggaSApO1xuICAgICAgICAgICAgdGlsZXNQZXJTaWRlID0gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICAgIE1hdGguZmxvb3IoIHJlY3QueCAvIHRoaXMuZ2V0VGlsZVdpZHRoKGkpICksXG4gICAgICAgICAgICAgIE1hdGguZmxvb3IoIHJlY3QueSAvIHRoaXMuZ2V0VGlsZUhlaWdodChpKSApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiggdGlsZXMueCArIDEgPj0gdGlsZXNQZXJTaWRlLnggJiYgdGlsZXMueSArIDEgPj0gdGlsZXNQZXJTaWRlLnkgKXtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoIDAsIGkgLSAxICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9pbnRcbiAgICAgKi9cbiAgICBnZXRUaWxlQXRQb2ludDogZnVuY3Rpb24oIGxldmVsLCBwb2ludCApIHtcbiAgICAgICAgdmFyIHBpeGVsID0gcG9pbnQudGltZXMoIHRoaXMuZGltZW5zaW9ucy54ICkudGltZXMoIHRoaXMuZ2V0TGV2ZWxTY2FsZShsZXZlbCkgKSxcbiAgICAgICAgICAgIHR4ID0gTWF0aC5mbG9vciggcGl4ZWwueCAvIHRoaXMuZ2V0VGlsZVdpZHRoKGxldmVsKSApLFxuICAgICAgICAgICAgdHkgPSBNYXRoLmZsb29yKCBwaXhlbC55IC8gdGhpcy5nZXRUaWxlSGVpZ2h0KGxldmVsKSApO1xuXG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCggdHgsIHR5ICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBnZXRUaWxlQm91bmRzOiBmdW5jdGlvbiggbGV2ZWwsIHgsIHkgKSB7XG4gICAgICAgIHZhciBkaW1lbnNpb25zU2NhbGVkID0gdGhpcy5kaW1lbnNpb25zLnRpbWVzKCB0aGlzLmdldExldmVsU2NhbGUoIGxldmVsICkgKSxcbiAgICAgICAgICAgIHRpbGVXaWR0aCA9IHRoaXMuZ2V0VGlsZVdpZHRoKGxldmVsKSxcbiAgICAgICAgICAgIHRpbGVIZWlnaHQgPSB0aGlzLmdldFRpbGVIZWlnaHQobGV2ZWwpLFxuICAgICAgICAgICAgcHggPSAoIHggPT09IDAgKSA/IDAgOiB0aWxlV2lkdGggKiB4IC0gdGhpcy50aWxlT3ZlcmxhcCxcbiAgICAgICAgICAgIHB5ID0gKCB5ID09PSAwICkgPyAwIDogdGlsZUhlaWdodCAqIHkgLSB0aGlzLnRpbGVPdmVybGFwLFxuICAgICAgICAgICAgc3ggPSB0aWxlV2lkdGggKyAoIHggPT09IDAgPyAxIDogMiApICogdGhpcy50aWxlT3ZlcmxhcCxcbiAgICAgICAgICAgIHN5ID0gdGlsZUhlaWdodCArICggeSA9PT0gMCA/IDEgOiAyICkgKiB0aGlzLnRpbGVPdmVybGFwLFxuICAgICAgICAgICAgc2NhbGUgPSAxLjAgLyBkaW1lbnNpb25zU2NhbGVkLng7XG5cbiAgICAgICAgc3ggPSBNYXRoLm1pbiggc3gsIGRpbWVuc2lvbnNTY2FsZWQueCAtIHB4ICk7XG4gICAgICAgIHN5ID0gTWF0aC5taW4oIHN5LCBkaW1lbnNpb25zU2NhbGVkLnkgLSBweSApO1xuXG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KCBweCAqIHNjYWxlLCBweSAqIHNjYWxlLCBzeCAqIHNjYWxlLCBzeSAqIHNjYWxlICk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVzcG9uc2libGUgZm9yIHJldHJpZXZpbmcsIGFuZCBjYWNoaW5nIHRoZVxuICAgICAqIGltYWdlIG1ldGFkYXRhIHBlcnRpbmVudCB0byB0aGlzIFRpbGVTb3VyY2VzIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgKi9cbiAgICBnZXRJbWFnZUluZm86IGZ1bmN0aW9uKCB1cmwgKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBjYWxsYmFja05hbWUsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHJlYWR5U291cmNlLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIHVybFBhcnRzLFxuICAgICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgICAgICBsYXN0RG90O1xuXG5cbiAgICAgICAgaWYoIHVybCApIHtcbiAgICAgICAgICAgIHVybFBhcnRzID0gdXJsLnNwbGl0KCAnLycgKTtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gdXJsUGFydHNbIHVybFBhcnRzLmxlbmd0aCAtIDEgXTtcbiAgICAgICAgICAgIGxhc3REb3QgID0gZmlsZW5hbWUubGFzdEluZGV4T2YoICcuJyApO1xuICAgICAgICAgICAgaWYgKCBsYXN0RG90ID4gLTEgKSB7XG4gICAgICAgICAgICAgICAgdXJsUGFydHNbIHVybFBhcnRzLmxlbmd0aCAtIDEgXSA9IGZpbGVuYW1lLnNsaWNlKCAwLCBsYXN0RG90ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKCBkYXRhICl7XG4gICAgICAgICAgICBpZiggdHlwZW9mKGRhdGEpID09PSBcInN0cmluZ1wiICkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSAkLnBhcnNlWG1sKCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgJFRpbGVTb3VyY2UgPSAkLlRpbGVTb3VyY2UuZGV0ZXJtaW5lVHlwZSggX3RoaXMsIGRhdGEsIHVybCApO1xuICAgICAgICAgICAgaWYgKCAhJFRpbGVTb3VyY2UgKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGxvYWRpbmcgYSBUaWxlU291cmNlLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQGV2ZW50IG9wZW4tZmFpbGVkXG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZVNvdXJjZVxuICAgICAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2V9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFRpbGVTb3VyY2Ugd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gbWVzc2FnZVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzb3VyY2VcbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggJ29wZW4tZmFpbGVkJywgeyBtZXNzYWdlOiBcIlVuYWJsZSB0byBsb2FkIFRpbGVTb3VyY2VcIiwgc291cmNlOiB1cmwgfSApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucyA9ICRUaWxlU291cmNlLnByb3RvdHlwZS5jb25maWd1cmUuYXBwbHkoIF90aGlzLCBbIGRhdGEsIHVybCBdKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFqYXhXaXRoQ3JlZGVudGlhbHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWpheFdpdGhDcmVkZW50aWFscyA9IF90aGlzLmFqYXhXaXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlYWR5U291cmNlID0gbmV3ICRUaWxlU291cmNlKCBvcHRpb25zICk7XG4gICAgICAgICAgICBfdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIGEgVGlsZVNvdXJjZSBpcyBvcGVuZWQgYW5kIGluaXRpYWxpemVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCByZWFkeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZVNvdXJjZVxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5UaWxlU291cmNlfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBUaWxlU291cmNlIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gdGlsZVNvdXJjZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdGhpcy5yYWlzZUV2ZW50KCAncmVhZHknLCB7IHRpbGVTb3VyY2U6IHJlYWR5U291cmNlIH0gKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggdXJsLm1hdGNoKC9cXC5qcyQvKSApe1xuICAgICAgICAgICAgLy9UT0RPOiBJdHMgbm90IHZlcnkgZmxleGlibGUgdG8gcmVxdWlyZSB0aWxlIHNvdXJjZXMgdG8gZW5kIGpzb25wXG4gICAgICAgICAgICAvLyAgICAgIHJlcXVlc3QgZm9yIGluZm8gIHdpdGggYSB1cmwgdGhhdCBlbmRzIHdpdGggJy5qcycgYnV0IGZvclxuICAgICAgICAgICAgLy8gICAgICBub3cgaXQncyB0aGUgb25seSB3YXkgSSBzZWUgdG8gZGlzdGluZ3Vpc2ggdW5pZm9ybWx5LlxuICAgICAgICAgICAgY2FsbGJhY2tOYW1lID0gdXJsLnNwbGl0KCAnLycgKS5wb3AoKS5yZXBsYWNlKCcuanMnLCcnKTtcbiAgICAgICAgICAgICQuanNvbnAoe1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjYWxsYmFja05hbWU6IGNhbGxiYWNrTmFtZSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVxdWVzdCBpbmZvIHZpYSB4aHIgYXN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICAkLm1ha2VBamF4UmVxdWVzdCgge1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5hamF4V2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCB4aHIgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcHJvY2Vzc1Jlc3BvbnNlKCB4aHIgKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soIGRhdGEgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoIHhociwgZXhjICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXNnO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICBJRSA8IDEwIHdpbGwgYmxvY2sgWEhSIHJlcXVlc3RzIHRvIGRpZmZlcmVudCBvcmlnaW5zLiBBbnkgcHJvcGVydHkgYWNjZXNzIG9uIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2lsbCByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggd2UnbGwgYXR0ZW1wdCB0byBoYW5kbGUgYnkgZm9ybWF0dGluZyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiByYXRoZXIgdGhhbiB0aGUgc2Vjb25kIG9uZSByYWlzZWQgd2hlbiB3ZSB0cnkgdG8gYWNjZXNzIHhoci5zdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBcIkhUVFAgXCIgKyB4aHIuc3RhdHVzICsgXCIgYXR0ZW1wdGluZyB0byBsb2FkIFRpbGVTb3VyY2VcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkRXhjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YoIGV4YyApID09IFwidW5kZWZpbmVkXCIgfHwgIWV4Yy50b1N0cmluZyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRFeGMgPSBcIlVua25vd24gZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkRXhjID0gZXhjLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IGZvcm1hdHRlZEV4YyArIFwiIGF0dGVtcHRpbmcgdG8gbG9hZCBUaWxlU291cmNlXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKioqXG4gICAgICAgICAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBsb2FkaW5nIGEgVGlsZVNvdXJjZS5cbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogQGV2ZW50IG9wZW4tZmFpbGVkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2V9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFRpbGVTb3VyY2Ugd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yYWlzZUV2ZW50KCAnb3Blbi1mYWlsZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2csXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHVybFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3BvbnNpYmxlIGRldGVybWluaW5nIGlmIGEgdGhlIHBhcnRpY3VsYXIgVGlsZVNvdXJjZSBzdXBwb3J0cyB0aGVcbiAgICAgKiBkYXRhIGZvcm1hdCAoIGFuZCBhbGxvd2VkIHRvIGFwcGx5IGxvZ2ljIGFnYWluc3QgdGhlIHVybCB0aGUgZGF0YSB3YXNcbiAgICAgKiBsb2FkZWQgZnJvbSwgaWYgYW55ICkuIE92ZXJyaWRpbmcgaW1wbGVtZW50YXRpb25zIGFyZSBleHBlY3RlZCB0byBkb1xuICAgICAqIHNvbWV0aGluZyBzbWFydCB3aXRoIGRhdGEgYW5kIC8gb3IgdXJsIHRvIGRldGVybWluZSBzdXBwb3J0LiAgQWxzb1xuICAgICAqIHVuZGVyc3RhbmQgdGhhdCBpdGVyYXRpb24gb3JkZXIgb2YgVGlsZVNvdXJjZXMgaXMgbm90IGd1YXJ1bnRlZWQgc29cbiAgICAgKiBwbGVhc2UgbWFrZSBzdXJlIHlvdXIgZGF0YSBvciB1cmwgaXMgZXhwcmVzc2l2ZSBlbm91Z2ggdG8gZW5zdXJlIGEgc2ltcGxlXG4gICAgICogYW5kIHN1ZmZpY2llbnQgbWVjaGFuaXNpbSBmb3IgY2xlYXIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8QXJyYXl8RG9jdW1lbnR9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gdGhlIHVybCB0aGUgZGF0YSB3YXMgbG9hZGVkXG4gICAgICogICAgICBmcm9tIGlmIGFueS5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHN1cHBvcnRzOiBmdW5jdGlvbiggZGF0YSwgdXJsICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3BvbnNpYmxlIGZvciBwYXJzaW5nIGFuZCBjb25maWd1cmluZyB0aGVcbiAgICAgKiBpbWFnZSBtZXRhZGF0YSBwZXJ0aW5lbnQgdG8gdGhpcyBUaWxlU291cmNlcyBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQgYnkgdGhpcyBjbGFzcyBvdGhlciB0aGFuIHRvIHRocm93IGFuIEVycm9yXG4gICAgICogYW5ub3VuY2luZyB5b3UgaGF2ZSB0byBpbXBsZW1lbnQgaXQuICBCZWNhdXNlIG9mIHRoZSB2YXJpZXR5IG9mIHRpbGVcbiAgICAgKiBzZXJ2ZXIgdGVjaG5vbG9naWVzLCBhbmQgdmFyaW91cyBzcGVjaWZpY2F0aW9ucyBmb3IgYnVpbGRpbmcgaW1hZ2VcbiAgICAgKiBweXJhbWlkcywgdGhpcyBtZXRob2QgaXMgaGVyZSB0byBhbGxvdyBlYXN5IGludGVncmF0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxBcnJheXxEb2N1bWVudH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSB0aGUgdXJsIHRoZSBkYXRhIHdhcyBsb2FkZWRcbiAgICAgKiAgICAgIGZyb20gaWYgYW55LlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb3B0aW9ucyAtIEEgZGljdGlvbmFyeSBvZiBrZXl3b3JkIGFyZ3VtZW50cyBzdWZmaWNpZW50XG4gICAgICogICAgICB0byBjb25maWd1cmUgdGhpcyB0aWxlIHNvdXJjZXMgY29uc3RydWN0b3IuXG4gICAgICogQHRocm93cyB7RXJyb3J9XG4gICAgICovXG4gICAgY29uZmlndXJlOiBmdW5jdGlvbiggZGF0YSwgdXJsICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIiApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zaWJsZSBmb3IgcmV0cml2aW5nIHRoZSB1cmwgd2hpY2ggd2lsbCByZXR1cm4gYW4gaW1hZ2UgZm9yIHRoZVxuICAgICAqIHJlZ2lvbiBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHgsIHksIGFuZCBsZXZlbCBjb21wb25lbnRzLlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCBieSB0aGlzIGNsYXNzIG90aGVyIHRoYW4gdG8gdGhyb3cgYW4gRXJyb3JcbiAgICAgKiBhbm5vdW5jaW5nIHlvdSBoYXZlIHRvIGltcGxlbWVudCBpdC4gIEJlY2F1c2Ugb2YgdGhlIHZhcmlldHkgb2YgdGlsZVxuICAgICAqIHNlcnZlciB0ZWNobm9sb2dpZXMsIGFuZCB2YXJpb3VzIHNwZWNpZmljYXRpb25zIGZvciBidWlsZGluZyBpbWFnZVxuICAgICAqIHB5cmFtaWRzLCB0aGlzIG1ldGhvZCBpcyBoZXJlIHRvIGFsbG93IGVhc3kgaW50ZWdyYXRpb24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqL1xuICAgIGdldFRpbGVVcmw6IGZ1bmN0aW9uKCBsZXZlbCwgeCwgeSApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqL1xuICAgIHRpbGVFeGlzdHM6IGZ1bmN0aW9uKCBsZXZlbCwgeCwgeSApIHtcbiAgICAgICAgdmFyIG51bVRpbGVzID0gdGhpcy5nZXROdW1UaWxlcyggbGV2ZWwgKTtcbiAgICAgICAgcmV0dXJuICBsZXZlbCA+PSB0aGlzLm1pbkxldmVsICYmXG4gICAgICAgICAgICAgICAgbGV2ZWwgPD0gdGhpcy5tYXhMZXZlbCAmJlxuICAgICAgICAgICAgICAgIHggPj0gMCAmJlxuICAgICAgICAgICAgICAgIHkgPj0gMCAmJlxuICAgICAgICAgICAgICAgIHggPCBudW1UaWxlcy54ICYmXG4gICAgICAgICAgICAgICAgeSA8IG51bVRpbGVzLnk7XG4gICAgfVxufTtcblxuXG4kLmV4dGVuZCggdHJ1ZSwgJC5UaWxlU291cmNlLnByb3RvdHlwZSwgJC5FdmVudFNvdXJjZS5wcm90b3R5cGUgKTtcblxuXG4vKipcbiAqIERlY2lkZXMgd2hldGhlciB0byB0cnkgdG8gcHJvY2VzcyB0aGUgcmVzcG9uc2UgYXMgeG1sLCBqc29uLCBvciBoYW5kIGJhY2tcbiAqIHRoZSB0ZXh0XG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7WE1MSHR0cFJlcXVlc3R9IHhociAtIHRoZSBjb21wbGV0ZWQgbmV0d29yayByZXF1ZXN0XG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NSZXNwb25zZSggeGhyICl7XG4gICAgdmFyIHJlc3BvbnNlVGV4dCA9IHhoci5yZXNwb25zZVRleHQsXG4gICAgICAgIHN0YXR1cyAgICAgICA9IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgIGRhdGE7XG5cbiAgICBpZiAoICF4aHIgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJC5nZXRTdHJpbmcoIFwiRXJyb3JzLlNlY3VyaXR5XCIgKSApO1xuICAgIH0gZWxzZSBpZiAoIHhoci5zdGF0dXMgIT09IDIwMCAmJiB4aHIuc3RhdHVzICE9PSAwICkge1xuICAgICAgICBzdGF0dXMgICAgID0geGhyLnN0YXR1cztcbiAgICAgICAgc3RhdHVzVGV4dCA9ICggc3RhdHVzID09IDQwNCApID9cbiAgICAgICAgICAgIFwiTm90IEZvdW5kXCIgOlxuICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQ7XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJC5nZXRTdHJpbmcoIFwiRXJyb3JzLlN0YXR1c1wiLCBzdGF0dXMsIHN0YXR1c1RleHQgKSApO1xuICAgIH1cblxuICAgIGlmKCByZXNwb25zZVRleHQubWF0Y2goL1xccyo8LiovKSApe1xuICAgICAgICB0cnl7XG4gICAgICAgIGRhdGEgPSAoIHhoci5yZXNwb25zZVhNTCAmJiB4aHIucmVzcG9uc2VYTUwuZG9jdW1lbnRFbGVtZW50ICkgP1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlWE1MIDpcbiAgICAgICAgICAgICQucGFyc2VYbWwoIHJlc3BvbnNlVGV4dCApO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIGRhdGEgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICB9XG4gICAgfWVsc2UgaWYoIHJlc3BvbnNlVGV4dC5tYXRjaCgvXFxzKltcXHtcXFtdLiovKSApe1xuICAgICAgICBkYXRhID0gJC5wYXJzZUpTT04ocmVzcG9uc2VUZXh0KTtcbiAgICB9ZWxzZXtcbiAgICAgICAgZGF0YSA9IHJlc3BvbnNlVGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBUaWxlU291cmNlIEltcGxlbWVudGF0aW9uIGJ5IGludHJvc3BlY3Rpb24gb2YgT3BlblNlYWRyYWdvblxuICogbmFtZXNwYWNlLCBjYWxsaW5nIGVhY2ggVGlsZVNvdXJjZSBpbXBsZW1lbnRhdGlvbiBvZiAnaXNUeXBlJ1xuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxEb2N1bWVudH0gZGF0YSAtIHRoZSB0aWxlIHNvdXJjZSBjb25maWd1cmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIHRoZSB1cmwgd2hlcmUgdGhlIHRpbGUgc291cmNlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdhc1xuICogICAgICBsb2FkZWQgZnJvbSwgaWYgYW55LlxuICovXG4kLlRpbGVTb3VyY2UuZGV0ZXJtaW5lVHlwZSA9IGZ1bmN0aW9uKCB0aWxlU291cmNlLCBkYXRhLCB1cmwgKXtcbiAgICB2YXIgcHJvcGVydHk7XG4gICAgZm9yKCBwcm9wZXJ0eSBpbiBPcGVuU2VhZHJhZ29uICl7XG4gICAgICAgIGlmKCBwcm9wZXJ0eS5tYXRjaCgvLitUaWxlU291cmNlJC8pICYmXG4gICAgICAgICAgICAkLmlzRnVuY3Rpb24oIE9wZW5TZWFkcmFnb25bIHByb3BlcnR5IF0gKSAmJlxuICAgICAgICAgICAgJC5pc0Z1bmN0aW9uKCBPcGVuU2VhZHJhZ29uWyBwcm9wZXJ0eSBdLnByb3RvdHlwZS5zdXBwb3J0cyApICYmXG4gICAgICAgICAgICBPcGVuU2VhZHJhZ29uWyBwcm9wZXJ0eSBdLnByb3RvdHlwZS5zdXBwb3J0cy5jYWxsKCB0aWxlU291cmNlLCBkYXRhLCB1cmwgKVxuICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuIE9wZW5TZWFkcmFnb25bIHByb3BlcnR5IF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkLmNvbnNvbGUuZXJyb3IoIFwiTm8gVGlsZVNvdXJjZSB3YXMgYWJsZSB0byBvcGVuICVzICVzXCIsIHVybCwgZGF0YSApO1xufTtcblxuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIER6aVRpbGVTb3VyY2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIER6aVRpbGVTb3VyY2VcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2VcbiAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gd2lkdGggLSB0aGUgcGl4ZWwgd2lkdGggb2YgdGhlIGltYWdlIG9yIHRoZSBpZGlvbWF0aWNcbiAqICAgICAgb3B0aW9ucyBvYmplY3Qgd2hpY2ggaXMgdXNlZCBpbnN0ZWFkIG9mIHBvc2l0aW9uYWwgYXJndW1lbnRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplXG4gKiBAcGFyYW0ge051bWJlcn0gdGlsZU92ZXJsYXBcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aWxlc1VybFxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGVGb3JtYXRcbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5EaXNwbGF5UmVjdFtdfSBkaXNwbGF5UmVjdHNcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0aWxlc1VybFxuICogQHByb3BlcnR5IHtTdHJpbmd9IGZpbGVGb3JtYXRcbiAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5EaXNwbGF5UmVjdFtdfSBkaXNwbGF5UmVjdHNcbiAqL1xuJC5EemlUaWxlU291cmNlID0gZnVuY3Rpb24oIHdpZHRoLCBoZWlnaHQsIHRpbGVTaXplLCB0aWxlT3ZlcmxhcCwgdGlsZXNVcmwsIGZpbGVGb3JtYXQsIGRpc3BsYXlSZWN0cywgbWluTGV2ZWwsIG1heExldmVsICkge1xuICAgIHZhciBpLFxuICAgICAgICByZWN0LFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgb3B0aW9ucztcblxuICAgIGlmKCAkLmlzUGxhaW5PYmplY3QoIHdpZHRoICkgKXtcbiAgICAgICAgb3B0aW9ucyA9IHdpZHRoO1xuICAgIH1lbHNle1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgd2lkdGg6IGFyZ3VtZW50c1sgMCBdLFxuICAgICAgICAgICAgaGVpZ2h0OiBhcmd1bWVudHNbIDEgXSxcbiAgICAgICAgICAgIHRpbGVTaXplOiBhcmd1bWVudHNbIDIgXSxcbiAgICAgICAgICAgIHRpbGVPdmVybGFwOiBhcmd1bWVudHNbIDMgXSxcbiAgICAgICAgICAgIHRpbGVzVXJsOiBhcmd1bWVudHNbIDQgXSxcbiAgICAgICAgICAgIGZpbGVGb3JtYXQ6IGFyZ3VtZW50c1sgNSBdLFxuICAgICAgICAgICAgZGlzcGxheVJlY3RzOiBhcmd1bWVudHNbIDYgXSxcbiAgICAgICAgICAgIG1pbkxldmVsOiBhcmd1bWVudHNbIDcgXSxcbiAgICAgICAgICAgIG1heExldmVsOiBhcmd1bWVudHNbIDggXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuX2xldmVsUmVjdHMgID0ge307XG4gICAgdGhpcy50aWxlc1VybCAgICAgPSBvcHRpb25zLnRpbGVzVXJsO1xuICAgIHRoaXMuZmlsZUZvcm1hdCAgID0gb3B0aW9ucy5maWxlRm9ybWF0O1xuICAgIHRoaXMuZGlzcGxheVJlY3RzID0gb3B0aW9ucy5kaXNwbGF5UmVjdHM7XG5cbiAgICBpZiAoIHRoaXMuZGlzcGxheVJlY3RzICkge1xuICAgICAgICBmb3IgKCBpID0gdGhpcy5kaXNwbGF5UmVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgICAgICByZWN0ID0gdGhpcy5kaXNwbGF5UmVjdHNbIGkgXTtcbiAgICAgICAgICAgIGZvciAoIGxldmVsID0gcmVjdC5taW5MZXZlbDsgbGV2ZWwgPD0gcmVjdC5tYXhMZXZlbDsgbGV2ZWwrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoICF0aGlzLl9sZXZlbFJlY3RzWyBsZXZlbCBdICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sZXZlbFJlY3RzWyBsZXZlbCBdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2xldmVsUmVjdHNbIGxldmVsIF0ucHVzaCggcmVjdCApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJC5UaWxlU291cmNlLmFwcGx5KCB0aGlzLCBbIG9wdGlvbnMgXSApO1xuXG59O1xuXG4kLmV4dGVuZCggJC5EemlUaWxlU291cmNlLnByb3RvdHlwZSwgJC5UaWxlU291cmNlLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLkR6aVRpbGVTb3VyY2UucHJvdG90eXBlICove1xuXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGRhdGEgYW5kL29yIHVybCBpbXBseSB0aGUgaW1hZ2Ugc2VydmljZSBpcyBzdXBwb3J0ZWQgYnlcbiAgICAgKiB0aGlzIHRpbGUgc291cmNlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbmFsIC0gdXJsXG4gICAgICovXG4gICAgc3VwcG9ydHM6IGZ1bmN0aW9uKCBkYXRhLCB1cmwgKXtcbiAgICAgICAgdmFyIG5zO1xuICAgICAgICBpZiAoIGRhdGEuSW1hZ2UgKSB7XG4gICAgICAgICAgICBucyA9IGRhdGEuSW1hZ2UueG1sbnM7XG4gICAgICAgIH0gZWxzZSBpZiAoIGRhdGEuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoXCJJbWFnZVwiID09IGRhdGEuZG9jdW1lbnRFbGVtZW50LmxvY2FsTmFtZSB8fCBcIkltYWdlXCIgPT0gZGF0YS5kb2N1bWVudEVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgICAgICAgICAgIG5zID0gZGF0YS5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICggXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2RlZXB6b29tLzIwMDhcIiA9PSBucyB8fFxuICAgICAgICAgICAgXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2RlZXB6b29tLzIwMDlcIiA9PSBucyApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFhNTERvY3VtZW50fSBkYXRhIC0gdGhlIHJhdyBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIHRoZSB1cmwgdGhlIGRhdGEgd2FzIHJldHJlaXZlZCBmcm9tIGlmIGFueS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9wdGlvbnMgLSBBIGRpY3Rpb25hcnkgb2Yga2V5d29yZCBhcmd1bWVudHMgc3VmZmljaWVudFxuICAgICAqICAgICAgdG8gY29uZmlndXJlIHRoaXMgdGlsZSBzb3VyY2VzIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24oIGRhdGEsIHVybCApe1xuXG4gICAgICAgIHZhciBvcHRpb25zO1xuXG4gICAgICAgIGlmKCAhJC5pc1BsYWluT2JqZWN0KGRhdGEpICl7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWd1cmVGcm9tWE1MKCB0aGlzLCBkYXRhICk7XG5cbiAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWd1cmVGcm9tT2JqZWN0KCB0aGlzLCBkYXRhICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXJsICYmICFvcHRpb25zLnRpbGVzVXJsKSB7XG4gICAgICAgICAgICBvcHRpb25zLnRpbGVzVXJsID0gdXJsLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC8oW15cXC9dKz8pKFxcLihkeml8eG1sfGpzKSk/XFwvPyhcXD8uKik/JC8sICckMV9maWxlcy8nKTtcblxuICAgICAgICAgICAgaWYgKHVybC5zZWFyY2goL1xcLihkeml8eG1sfGpzKVxcPy8pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5xdWVyeVBhcmFtcyA9IHVybC5tYXRjaCgvXFw/LiovKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucXVlcnlQYXJhbXMgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBnZXRUaWxlVXJsOiBmdW5jdGlvbiggbGV2ZWwsIHgsIHkgKSB7XG4gICAgICAgIHJldHVybiBbIHRoaXMudGlsZXNVcmwsIGxldmVsLCAnLycsIHgsICdfJywgeSwgJy4nLCB0aGlzLmZpbGVGb3JtYXQsIHRoaXMucXVlcnlQYXJhbXMgXS5qb2luKCAnJyApO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICB0aWxlRXhpc3RzOiBmdW5jdGlvbiggbGV2ZWwsIHgsIHkgKSB7XG4gICAgICAgIHZhciByZWN0cyA9IHRoaXMuX2xldmVsUmVjdHNbIGxldmVsIF0sXG4gICAgICAgICAgICByZWN0LFxuICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICB4TWluLFxuICAgICAgICAgICAgeU1pbixcbiAgICAgICAgICAgIHhNYXgsXG4gICAgICAgICAgICB5TWF4LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBpZiAoICFyZWN0cyB8fCAhcmVjdHMubGVuZ3RoICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBpID0gcmVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgICAgICByZWN0ID0gcmVjdHNbIGkgXTtcblxuICAgICAgICAgICAgaWYgKCBsZXZlbCA8IHJlY3QubWluTGV2ZWwgfHwgbGV2ZWwgPiByZWN0Lm1heExldmVsICkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY2FsZSA9IHRoaXMuZ2V0TGV2ZWxTY2FsZSggbGV2ZWwgKTtcbiAgICAgICAgICAgIHhNaW4gPSByZWN0LnggKiBzY2FsZTtcbiAgICAgICAgICAgIHlNaW4gPSByZWN0LnkgKiBzY2FsZTtcbiAgICAgICAgICAgIHhNYXggPSB4TWluICsgcmVjdC53aWR0aCAqIHNjYWxlO1xuICAgICAgICAgICAgeU1heCA9IHlNaW4gKyByZWN0LmhlaWdodCAqIHNjYWxlO1xuXG4gICAgICAgICAgICB4TWluID0gTWF0aC5mbG9vciggeE1pbiAvIHRoaXMudGlsZVNpemUgKTtcbiAgICAgICAgICAgIHlNaW4gPSBNYXRoLmZsb29yKCB5TWluIC8gdGhpcy50aWxlU2l6ZSApO1xuICAgICAgICAgICAgeE1heCA9IE1hdGguY2VpbCggeE1heCAvIHRoaXMudGlsZVNpemUgKTtcbiAgICAgICAgICAgIHlNYXggPSBNYXRoLmNlaWwoIHlNYXggLyB0aGlzLnRpbGVTaXplICk7XG5cbiAgICAgICAgICAgIGlmICggeE1pbiA8PSB4ICYmIHggPCB4TWF4ICYmIHlNaW4gPD0geSAmJiB5IDwgeU1heCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59KTtcblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjb25maWd1cmVGcm9tWE1MKCB0aWxlU291cmNlLCB4bWxEb2MgKXtcblxuICAgIGlmICggIXhtbERvYyB8fCAheG1sRG9jLmRvY3VtZW50RWxlbWVudCApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAkLmdldFN0cmluZyggXCJFcnJvcnMuWG1sXCIgKSApO1xuICAgIH1cblxuICAgIHZhciByb290ICAgICAgICAgICA9IHhtbERvYy5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHJvb3ROYW1lICAgICAgID0gcm9vdC5sb2NhbE5hbWUgfHwgcm9vdC50YWdOYW1lLFxuICAgICAgICBucyAgICAgICAgICAgICA9IHhtbERvYy5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJLFxuICAgICAgICBjb25maWd1cmF0aW9uICA9IG51bGwsXG4gICAgICAgIGRpc3BsYXlSZWN0cyAgID0gW10sXG4gICAgICAgIGRpc3BSZWN0Tm9kZXMsXG4gICAgICAgIGRpc3BSZWN0Tm9kZSxcbiAgICAgICAgcmVjdE5vZGUsXG4gICAgICAgIHNpemVOb2RlLFxuICAgICAgICBpO1xuXG4gICAgaWYgKCByb290TmFtZSA9PSBcIkltYWdlXCIgKSB7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNpemVOb2RlID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIlNpemVcIiApWyAwIF07XG4gICAgICAgICAgICBpZiAoc2l6ZU5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNpemVOb2RlID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZU5TKG5zLCBcIlNpemVcIiApWyAwIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgSW1hZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICAgICAgIFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9kZWVwem9vbS8yMDA4XCIsXG4gICAgICAgICAgICAgICAgICAgIFVybDogICAgICAgICByb290LmdldEF0dHJpYnV0ZSggXCJVcmxcIiApLFxuICAgICAgICAgICAgICAgICAgICBGb3JtYXQ6ICAgICAgcm9vdC5nZXRBdHRyaWJ1dGUoIFwiRm9ybWF0XCIgKSxcbiAgICAgICAgICAgICAgICAgICAgRGlzcGxheVJlY3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIE92ZXJsYXA6ICAgICBwYXJzZUludCggcm9vdC5nZXRBdHRyaWJ1dGUoIFwiT3ZlcmxhcFwiICksIDEwICksXG4gICAgICAgICAgICAgICAgICAgIFRpbGVTaXplOiAgICBwYXJzZUludCggcm9vdC5nZXRBdHRyaWJ1dGUoIFwiVGlsZVNpemVcIiApLCAxMCApLFxuICAgICAgICAgICAgICAgICAgICBTaXplOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBIZWlnaHQ6IHBhcnNlSW50KCBzaXplTm9kZS5nZXRBdHRyaWJ1dGUoIFwiSGVpZ2h0XCIgKSwgMTAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFdpZHRoOiAgcGFyc2VJbnQoIHNpemVOb2RlLmdldEF0dHJpYnV0ZSggXCJXaWR0aFwiICksIDEwIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICggISQuaW1hZ2VGb3JtYXRTdXBwb3J0ZWQoIGNvbmZpZ3VyYXRpb24uSW1hZ2UuRm9ybWF0ICkgKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAkLmdldFN0cmluZyggXCJFcnJvcnMuSW1hZ2VGb3JtYXRcIiwgY29uZmlndXJhdGlvbi5JbWFnZS5Gb3JtYXQudG9VcHBlckNhc2UoKSApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGlzcFJlY3ROb2RlcyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJEaXNwbGF5UmVjdFwiICk7XG4gICAgICAgICAgICBpZiAoZGlzcFJlY3ROb2RlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGlzcFJlY3ROb2RlcyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhucywgXCJEaXNwbGF5UmVjdFwiIClbIDAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBkaXNwUmVjdE5vZGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgIGRpc3BSZWN0Tm9kZSA9IGRpc3BSZWN0Tm9kZXNbIGkgXTtcbiAgICAgICAgICAgICAgICByZWN0Tm9kZSAgICAgPSBkaXNwUmVjdE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJSZWN0XCIgKVsgMCBdO1xuICAgICAgICAgICAgICAgIGlmIChyZWN0Tm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3ROb2RlID0gZGlzcFJlY3ROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMobnMsIFwiUmVjdFwiIClbIDAgXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaXNwbGF5UmVjdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIFJlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFg6IHBhcnNlSW50KCByZWN0Tm9kZS5nZXRBdHRyaWJ1dGUoIFwiWFwiICksIDEwICksXG4gICAgICAgICAgICAgICAgICAgICAgICBZOiBwYXJzZUludCggcmVjdE5vZGUuZ2V0QXR0cmlidXRlKCBcIllcIiApLCAxMCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGg6IHBhcnNlSW50KCByZWN0Tm9kZS5nZXRBdHRyaWJ1dGUoIFwiV2lkdGhcIiApLCAxMCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgSGVpZ2h0OiBwYXJzZUludCggcmVjdE5vZGUuZ2V0QXR0cmlidXRlKCBcIkhlaWdodFwiICksIDEwICksXG4gICAgICAgICAgICAgICAgICAgICAgICBNaW5MZXZlbDogcGFyc2VJbnQoIGRpc3BSZWN0Tm9kZS5nZXRBdHRyaWJ1dGUoIFwiTWluTGV2ZWxcIiApLCAxMCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF4TGV2ZWw6IHBhcnNlSW50KCBkaXNwUmVjdE5vZGUuZ2V0QXR0cmlidXRlKCBcIk1heExldmVsXCIgKSwgMTAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXNwbGF5UmVjdHMubGVuZ3RoICl7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5JbWFnZS5EaXNwbGF5UmVjdCA9IGRpc3BsYXlSZWN0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyZUZyb21PYmplY3QoIHRpbGVTb3VyY2UsIGNvbmZpZ3VyYXRpb24gKTtcblxuICAgICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgICAgIHRocm93IChlIGluc3RhbmNlb2YgRXJyb3IpID9cbiAgICAgICAgICAgICAgICBlIDpcbiAgICAgICAgICAgICAgICBuZXcgRXJyb3IoICQuZ2V0U3RyaW5nKFwiRXJyb3JzLkR6aVwiKSApO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICggcm9vdE5hbWUgPT0gXCJDb2xsZWN0aW9uXCIgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJC5nZXRTdHJpbmcoIFwiRXJyb3JzLkR6Y1wiICkgKTtcbiAgICB9IGVsc2UgaWYgKCByb290TmFtZSA9PSBcIkVycm9yXCIgKSB7XG4gICAgICAgIHZhciBtZXNzYWdlTm9kZSA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJNZXNzYWdlXCIpWzBdO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VOb2RlLmZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCAkLmdldFN0cmluZyggXCJFcnJvcnMuRHppXCIgKSApO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjb25maWd1cmVGcm9tT2JqZWN0KCB0aWxlU291cmNlLCBjb25maWd1cmF0aW9uICl7XG4gICAgdmFyIGltYWdlRGF0YSAgICAgPSBjb25maWd1cmF0aW9uLkltYWdlLFxuICAgICAgICB0aWxlc1VybCAgICAgID0gaW1hZ2VEYXRhLlVybCxcbiAgICAgICAgZmlsZUZvcm1hdCAgICA9IGltYWdlRGF0YS5Gb3JtYXQsXG4gICAgICAgIHNpemVEYXRhICAgICAgPSBpbWFnZURhdGEuU2l6ZSxcbiAgICAgICAgZGlzcFJlY3REYXRhICA9IGltYWdlRGF0YS5EaXNwbGF5UmVjdCB8fCBbXSxcbiAgICAgICAgd2lkdGggICAgICAgICA9IHBhcnNlSW50KCBzaXplRGF0YS5XaWR0aCwgMTAgKSxcbiAgICAgICAgaGVpZ2h0ICAgICAgICA9IHBhcnNlSW50KCBzaXplRGF0YS5IZWlnaHQsIDEwICksXG4gICAgICAgIHRpbGVTaXplICAgICAgPSBwYXJzZUludCggaW1hZ2VEYXRhLlRpbGVTaXplLCAxMCApLFxuICAgICAgICB0aWxlT3ZlcmxhcCAgID0gcGFyc2VJbnQoIGltYWdlRGF0YS5PdmVybGFwLCAxMCApLFxuICAgICAgICBkaXNwbGF5UmVjdHMgID0gW10sXG4gICAgICAgIHJlY3REYXRhLFxuICAgICAgICBpO1xuXG4gICAgLy9UT0RPOiBuZWVkIHRvIGZpZ3VyZSBvdXQgb3V0IHRvIGJldHRlciBoYW5kbGUgaW1hZ2UgZm9ybWF0IGNvbXBhdGliaWxpdHlcbiAgICAvLyAgICAgIHdoaWNoIGFjdHVhbGx5IGluY2x1ZGVzIGFkZGl0aW9uYWwgZmlsZSBmb3JtYXRzIGxpa2UgeG1sIGFuZCBwZGZcbiAgICAvLyAgICAgIGFuZCBwbGFpbiB0ZXh0IGZvciB2YXJpb3VzIHRpbGVzb3VyY2UgaW1wbGVtZW50YXRpb25zIHRvIGF2b2lkIGxvd1xuICAgIC8vICAgICAgbGV2ZWwgZXJyb3JzLlxuICAgIC8vXG4gICAgLy8gICAgICBGb3Igbm93LCBqdXN0IGRvbid0IHBlcmZvcm0gdGhlIGNoZWNrLlxuICAgIC8vXG4gICAgLyppZiAoICFpbWFnZUZvcm1hdFN1cHBvcnRlZCggZmlsZUZvcm1hdCApICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAkLmdldFN0cmluZyggXCJFcnJvcnMuSW1hZ2VGb3JtYXRcIiwgZmlsZUZvcm1hdC50b1VwcGVyQ2FzZSgpIClcbiAgICAgICAgKTtcbiAgICB9Ki9cblxuICAgIGZvciAoIGkgPSAwOyBpIDwgZGlzcFJlY3REYXRhLmxlbmd0aDsgaSsrICkge1xuICAgICAgICByZWN0RGF0YSA9IGRpc3BSZWN0RGF0YVsgaSBdLlJlY3Q7XG5cbiAgICAgICAgZGlzcGxheVJlY3RzLnB1c2goIG5ldyAkLkRpc3BsYXlSZWN0KFxuICAgICAgICAgICAgcGFyc2VJbnQoIHJlY3REYXRhLlgsIDEwICksXG4gICAgICAgICAgICBwYXJzZUludCggcmVjdERhdGEuWSwgMTAgKSxcbiAgICAgICAgICAgIHBhcnNlSW50KCByZWN0RGF0YS5XaWR0aCwgMTAgKSxcbiAgICAgICAgICAgIHBhcnNlSW50KCByZWN0RGF0YS5IZWlnaHQsIDEwICksXG4gICAgICAgICAgICBwYXJzZUludCggcmVjdERhdGEuTWluTGV2ZWwsIDEwICksXG4gICAgICAgICAgICBwYXJzZUludCggcmVjdERhdGEuTWF4TGV2ZWwsIDEwIClcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLCAvKiB3aWR0aCAqcmVxdWlyZWQgKi9cbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsIC8qIGhlaWdodCAqcmVxdWlyZWQgKi9cbiAgICAgICAgdGlsZVNpemU6IHRpbGVTaXplLCAvKiB0aWxlU2l6ZSAqcmVxdWlyZWQgKi9cbiAgICAgICAgdGlsZU92ZXJsYXA6IHRpbGVPdmVybGFwLCAvKiB0aWxlT3ZlcmxhcCAqcmVxdWlyZWQgKi9cbiAgICAgICAgbWluTGV2ZWw6IG51bGwsIC8qIG1pbkxldmVsICovXG4gICAgICAgIG1heExldmVsOiBudWxsLCAvKiBtYXhMZXZlbCAqL1xuICAgICAgICB0aWxlc1VybDogdGlsZXNVcmwsIC8qIHRpbGVzVXJsICovXG4gICAgICAgIGZpbGVGb3JtYXQ6IGZpbGVGb3JtYXQsIC8qIGZpbGVGb3JtYXQgKi9cbiAgICAgICAgZGlzcGxheVJlY3RzOiBkaXNwbGF5UmVjdHMgLyogZGlzcGxheVJlY3RzICovXG4gICAgfSwgY29uZmlndXJhdGlvbiApO1xuXG59XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gSUlJRlRpbGVTb3VyY2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIElJSUZUaWxlU291cmNlXG4gKiBAY2xhc3NkZXNjIEEgY2xpZW50IGltcGxlbWVudGF0aW9uIG9mIHRoZSBJbnRlcm5hdGlvbmFsIEltYWdlIEludGVyb3BlcmFiaWxpdHkgRnJhbWV3b3JrXG4gKiBGb3JtYXQ6IEltYWdlIEFQSSAxLjAgLSAyLjFcbiAqXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGV4dGVuZHMgT3BlblNlYWRyYWdvbi5UaWxlU291cmNlXG4gKiBAc2VlIGh0dHA6Ly9paWlmLmlvL2FwaS9pbWFnZS9cbiAqL1xuJC5JSUlGVGlsZVNvdXJjZSA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG5cblxuICAgICQuZXh0ZW5kKCB0cnVlLCB0aGlzLCBvcHRpb25zICk7XG5cbiAgICBpZiAoICEoIHRoaXMuaGVpZ2h0ICYmIHRoaXMud2lkdGggJiYgdGhpc1snQGlkJ10gKSApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnSUlJRiByZXF1aXJlZCBwYXJhbWV0ZXJzIG5vdCBwcm92aWRlZC4nICk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy50aWxlU2l6ZVBlclNjYWxlRmFjdG9yID0ge307XG5cbiAgICAvLyBOLkIuIDIuMCByZW5hbWVkIHNjYWxlX2ZhY3RvcnMgdG8gc2NhbGVGYWN0b3JzXG4gICAgaWYgKCB0aGlzLnRpbGVfd2lkdGggJiYgdGhpcy50aWxlX2hlaWdodCApIHtcbiAgICAgICAgb3B0aW9ucy50aWxlV2lkdGggPSB0aGlzLnRpbGVfd2lkdGg7XG4gICAgICAgIG9wdGlvbnMudGlsZUhlaWdodCA9IHRoaXMudGlsZV9oZWlnaHQ7XG4gICAgfSBlbHNlIGlmICggdGhpcy50aWxlX3dpZHRoICkge1xuICAgICAgICBvcHRpb25zLnRpbGVTaXplID0gdGhpcy50aWxlX3dpZHRoO1xuICAgIH0gZWxzZSBpZiAoIHRoaXMudGlsZV9oZWlnaHQgKSB7XG4gICAgICAgIG9wdGlvbnMudGlsZVNpemUgPSB0aGlzLnRpbGVfaGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoIHRoaXMudGlsZXMgKSB7XG4gICAgICAgIC8vIFZlcnNpb24gMi4wIGZvcndhcmRzXG4gICAgICAgIGlmICggdGhpcy50aWxlcy5sZW5ndGggPT0gMSApIHtcbiAgICAgICAgICAgIG9wdGlvbnMudGlsZVdpZHRoICA9IHRoaXMudGlsZXNbMF0ud2lkdGg7XG4gICAgICAgICAgICAvLyBVc2UgaGVpZ2h0IGlmIHByb3ZpZGVkLCBvdGhlcndpc2UgYXNzdW1lIHNxdWFyZSB0aWxlcyBhbmQgdXNlIHdpZHRoLlxuICAgICAgICAgICAgb3B0aW9ucy50aWxlSGVpZ2h0ID0gdGhpcy50aWxlc1swXS5oZWlnaHQgfHwgdGhpcy50aWxlc1swXS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVfZmFjdG9ycyA9IHRoaXMudGlsZXNbMF0uc2NhbGVGYWN0b3JzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTXVsdGlwbGUgdGlsZSBzaXplcyBhdCBkaWZmZXJlbnQgbGV2ZWxzXG4gICAgICAgICAgICB0aGlzLnNjYWxlX2ZhY3RvcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy50aWxlcy5sZW5ndGg7IHQrKyApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzZiA9IDA7IHNmIDwgdGhpcy50aWxlc1t0XS5zY2FsZUZhY3RvcnMubGVuZ3RoOyBzZisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZUZhY3RvciA9IHRoaXMudGlsZXNbdF0uc2NhbGVGYWN0b3JzW3NmXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3JzLnB1c2goc2NhbGVGYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnRpbGVTaXplUGVyU2NhbGVGYWN0b3Jbc2NhbGVGYWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMudGlsZXNbdF0ud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGlsZXNbdF0uaGVpZ2h0IHx8IHRoaXMudGlsZXNbdF0ud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCBjYW5CZVRpbGVkKG9wdGlvbnMucHJvZmlsZSkgKSB7XG4gICAgICAgIC8vIHVzZSB0aGUgbGFyZ2VzdCBvZiB0aWxlT3B0aW9ucyB0aGF0IGlzIHNtYWxsZXIgdGhhbiB0aGUgc2hvcnQgZGltZW5zaW9uXG4gICAgICAgIHZhciBzaG9ydERpbSA9IE1hdGgubWluKCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCApLFxuICAgICAgICAgICAgdGlsZU9wdGlvbnMgPSBbMjU2LDUxMiwxMDI0XSxcbiAgICAgICAgICAgIHNtYWxsZXJUaWxlcyA9IFtdO1xuXG4gICAgICAgIGZvciAoIHZhciBjID0gMDsgYyA8IHRpbGVPcHRpb25zLmxlbmd0aDsgYysrICkge1xuICAgICAgICAgICAgaWYgKCB0aWxlT3B0aW9uc1tjXSA8PSBzaG9ydERpbSApIHtcbiAgICAgICAgICAgICAgICBzbWFsbGVyVGlsZXMucHVzaCggdGlsZU9wdGlvbnNbY10gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc21hbGxlclRpbGVzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICBvcHRpb25zLnRpbGVTaXplID0gTWF0aC5tYXguYXBwbHkoIG51bGwsIHNtYWxsZXJUaWxlcyApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgc21hbGxlciB0aGFuIDI1NiwganVzdCB1c2UgdGhlIHNob3J0IHNpZGUuXG4gICAgICAgICAgICBvcHRpb25zLnRpbGVTaXplID0gc2hvcnREaW07XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuc2l6ZXMgJiYgdGhpcy5zaXplcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFRoaXMgaW5mby5qc29uIGNhbid0IGJlIHRpbGVkLCBidXQgd2UgY2FuIHN0aWxsIGNvbnN0cnVjdCBhIGxlZ2FjeSBweXJhbWlkIGZyb20gdGhlIHNpemVzIGFycmF5LiBcbiAgICAgICAgLy8gSW4gdGhpcyBtb2RlLCBJSUlGVGlsZVNvdXJjZSB3aWxsIGNhbGwgZnVuY3Rpb25zIGZyb20gdGhlIGFic3RyYWN0IGJhc2VUaWxlU291cmNlIG9yIHRoZSBcbiAgICAgICAgLy8gTGVnYWN5VGlsZVNvdXJjZSBpbnN0ZWFkIG9mIHBlcmZvcm1pbmcgSUlJRiB0aWxpbmcuICAgICAgXG4gICAgICAgIHRoaXMuZW11bGF0ZUxlZ2FjeUltYWdlUHlyYW1pZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICBvcHRpb25zLmxldmVscyA9IGNvbnN0cnVjdExldmVscyggdGhpcyApO1xuICAgICAgICAvLyB1c2UgdGhlIGxhcmdlc3QgYXZhaWxhYmxlIHNpemUgdG8gZGVmaW5lIHRpbGVzXG4gICAgICAgICQuZXh0ZW5kKCB0cnVlLCBvcHRpb25zLCB7XG4gICAgICAgICAgICB3aWR0aDogb3B0aW9ucy5sZXZlbHNbIG9wdGlvbnMubGV2ZWxzLmxlbmd0aCAtIDEgXS53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogb3B0aW9ucy5sZXZlbHNbIG9wdGlvbnMubGV2ZWxzLmxlbmd0aCAtIDEgXS5oZWlnaHQsXG4gICAgICAgICAgICB0aWxlU2l6ZTogTWF0aC5tYXgoIG9wdGlvbnMuaGVpZ2h0LCBvcHRpb25zLndpZHRoICksXG4gICAgICAgICAgICB0aWxlT3ZlcmxhcDogMCxcbiAgICAgICAgICAgIG1pbkxldmVsOiAwLFxuICAgICAgICAgICAgbWF4TGV2ZWw6IG9wdGlvbnMubGV2ZWxzLmxlbmd0aCAtIDFcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGV2ZWxzID0gb3B0aW9ucy5sZXZlbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiTm90aGluZyBpbiB0aGUgaW5mby5qc29uIHRvIGNvbnN0cnVjdCBpbWFnZSBweXJhbWlkcyBmcm9tXCIpO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5tYXhMZXZlbCAmJiAhdGhpcy5lbXVsYXRlTGVnYWN5SW1hZ2VQeXJhbWlkKSB7XG4gICAgICAgIGlmICghdGhpcy5zY2FsZV9mYWN0b3JzKSB7XG4gICAgICAgICAgICBvcHRpb25zLm1heExldmVsID0gTnVtYmVyKE1hdGguY2VpbChNYXRoLmxvZyhNYXRoLm1heCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCksIDIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLm1heExldmVsID0gTWF0aC5mbG9vcihNYXRoLnBvdyhNYXRoLm1heC5hcHBseShudWxsLCB0aGlzLnNjYWxlX2ZhY3RvcnMpLCAwLjUpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQuVGlsZVNvdXJjZS5hcHBseSggdGhpcywgWyBvcHRpb25zIF0gKTtcbn07XG5cbiQuZXh0ZW5kKCAkLklJSUZUaWxlU291cmNlLnByb3RvdHlwZSwgJC5UaWxlU291cmNlLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLklJSUZUaWxlU291cmNlLnByb3RvdHlwZSAqL3tcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGRhdGEgYW5kL29yIHVybCBpbXBseSB0aGUgaW1hZ2Ugc2VydmljZSBpcyBzdXBwb3J0ZWQgYnlcbiAgICAgKiB0aGlzIHRpbGUgc291cmNlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbmFsIC0gdXJsXG4gICAgICovXG4gICAgIFxuICAgIHN1cHBvcnRzOiBmdW5jdGlvbiggZGF0YSwgdXJsICkge1xuICAgICAgICAvLyBWZXJzaW9uIDIuMCBhbmQgZm9yd2FyZHNcbiAgICAgICAgaWYgKGRhdGEucHJvdG9jb2wgJiYgZGF0YS5wcm90b2NvbCA9PSAnaHR0cDovL2lpaWYuaW8vYXBpL2ltYWdlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vIFZlcnNpb24gMS4xXG4gICAgICAgIH0gZWxzZSBpZiAoIGRhdGFbJ0Bjb250ZXh0J10gJiYgKFxuICAgICAgICAgICAgZGF0YVsnQGNvbnRleHQnXSA9PSBcImh0dHA6Ly9saWJyYXJ5LnN0YW5mb3JkLmVkdS9paWlmL2ltYWdlLWFwaS8xLjEvY29udGV4dC5qc29uXCIgfHxcbiAgICAgICAgICAgIGRhdGFbJ0Bjb250ZXh0J10gPT0gXCJodHRwOi8vaWlpZi5pby9hcGkvaW1hZ2UvMS9jb250ZXh0Lmpzb25cIikgKSB7XG4gICAgICAgICAgICAvLyBOLkIuIHRoZSBpaWlmLmlvIGNvbnRleHQgaXMgd3JvbmcsIGJ1dCB3aGVyZSB0aGUgcmVwcmVzZW50YXRpb24gbGl2ZXMgc28gbGlrZWx5IHRvIGJlIHVzZWRcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIFZlcnNpb24gMS4wXG4gICAgICAgIH0gZWxzZSBpZiAoIGRhdGEucHJvZmlsZSAmJlxuICAgICAgICAgICAgZGF0YS5wcm9maWxlLmluZGV4T2YoXCJodHRwOi8vbGlicmFyeS5zdGFuZm9yZC5lZHUvaWlpZi9pbWFnZS1hcGkvY29tcGxpYW5jZS5odG1sXCIpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICggZGF0YS5pZGVudGlmaWVyICYmIGRhdGEud2lkdGggJiYgZGF0YS5oZWlnaHQgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICggZGF0YS5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgICAgIFwiaW5mb1wiID09IGRhdGEuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUgJiZcbiAgICAgICAgICAgIFwiaHR0cDovL2xpYnJhcnkuc3RhbmZvcmQuZWR1L2lpaWYvaW1hZ2UtYXBpL25zL1wiID09XG4gICAgICAgICAgICAgICAgZGF0YS5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAvLyBOb3QgSUlJRlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSB0aGUgcmF3IGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5JSUlGIDEuMSBJbmZvIExvb2tzIGxpa2UgdGhpczwvY2FwdGlvbj5cbiAgICAgKiB7XG4gICAgICogICBcIkBjb250ZXh0XCIgOiBcImh0dHA6Ly9saWJyYXJ5LnN0YW5mb3JkLmVkdS9paWlmL2ltYWdlLWFwaS8xLjEvY29udGV4dC5qc29uXCIsXG4gICAgICogICBcIkBpZFwiIDogXCJodHRwOi8vaWlpZi5leGFtcGxlLmNvbS9wcmVmaXgvMUUzNDc1MEQtMzhEQi00ODI1LUEzOEEtQjYwQTM0NUU1OTFDXCIsXG4gICAgICogICBcIndpZHRoXCIgOiA2MDAwLFxuICAgICAqICAgXCJoZWlnaHRcIiA6IDQwMDAsXG4gICAgICogICBcInNjYWxlX2ZhY3RvcnNcIiA6IFsgMSwgMiwgNCBdLFxuICAgICAqICAgXCJ0aWxlX3dpZHRoXCIgOiAxMDI0LFxuICAgICAqICAgXCJ0aWxlX2hlaWdodFwiIDogMTAyNCxcbiAgICAgKiAgIFwiZm9ybWF0c1wiIDogWyBcImpwZ1wiLCBcInBuZ1wiIF0sXG4gICAgICogICBcInF1YWxpdGllc1wiIDogWyBcIm5hdGl2ZVwiLCBcImdyZXlcIiBdLFxuICAgICAqICAgXCJwcm9maWxlXCIgOiBcImh0dHA6Ly9saWJyYXJ5LnN0YW5mb3JkLmVkdS9paWlmL2ltYWdlLWFwaS8xLjEvY29tcGxpYW5jZS5odG1sI2xldmVsMFwiXG4gICAgICogfVxuICAgICAqL1xuICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24oIGRhdGEsIHVybCApe1xuICAgICAgICAvLyBUcnkgdG8gZGVkdWNlIG91ciB2ZXJzaW9uIGFuZCBmYWtlIGl0IHVwd2FyZHMgaWYgbmVlZGVkXG4gICAgICAgIGlmICggISQuaXNQbGFpbk9iamVjdChkYXRhKSApIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29uZmlndXJlRnJvbVhtbDEwKCBkYXRhICk7XG4gICAgICAgICAgICBvcHRpb25zWydAY29udGV4dCddID0gXCJodHRwOi8vaWlpZi5pby9hcGkvaW1hZ2UvMS4wL2NvbnRleHQuanNvblwiO1xuICAgICAgICAgICAgb3B0aW9uc1snQGlkJ10gPSB1cmwucmVwbGFjZSgnL2luZm8ueG1sJywgJycpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSBpZiAoICFkYXRhWydAY29udGV4dCddICkge1xuICAgICAgICAgICAgZGF0YVsnQGNvbnRleHQnXSA9ICdodHRwOi8vaWlpZi5pby9hcGkvaW1hZ2UvMS4wL2NvbnRleHQuanNvbic7XG4gICAgICAgICAgICBkYXRhWydAaWQnXSA9IHVybC5yZXBsYWNlKCcvaW5mby5qc29uJywgJycpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHRpbGVXaWR0aCBmb3IgdGhlIGdpdmVuIGxldmVsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldFRpbGVXaWR0aDogZnVuY3Rpb24oIGxldmVsICkge1xuXG4gICAgICAgIGlmKHRoaXMuZW11bGF0ZUxlZ2FjeUltYWdlUHlyYW1pZCkge1xuICAgICAgICAgICAgcmV0dXJuICQuVGlsZVNvdXJjZS5wcm90b3R5cGUuZ2V0VGlsZVdpZHRoLmNhbGwodGhpcywgbGV2ZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjYWxlRmFjdG9yID0gTWF0aC5wb3coMiwgdGhpcy5tYXhMZXZlbCAtIGxldmVsKTtcblxuICAgICAgICBpZiAodGhpcy50aWxlU2l6ZVBlclNjYWxlRmFjdG9yICYmIHRoaXMudGlsZVNpemVQZXJTY2FsZUZhY3RvcltzY2FsZUZhY3Rvcl0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbGVTaXplUGVyU2NhbGVGYWN0b3Jbc2NhbGVGYWN0b3JdLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90aWxlV2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdGlsZUhlaWdodCBmb3IgdGhlIGdpdmVuIGxldmVsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldFRpbGVIZWlnaHQ6IGZ1bmN0aW9uKCBsZXZlbCApIHtcblxuICAgICAgICBpZih0aGlzLmVtdWxhdGVMZWdhY3lJbWFnZVB5cmFtaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAkLlRpbGVTb3VyY2UucHJvdG90eXBlLmdldFRpbGVIZWlnaHQuY2FsbCh0aGlzLCBsZXZlbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2NhbGVGYWN0b3IgPSBNYXRoLnBvdygyLCB0aGlzLm1heExldmVsIC0gbGV2ZWwpO1xuXG4gICAgICAgIGlmICh0aGlzLnRpbGVTaXplUGVyU2NhbGVGYWN0b3IgJiYgdGhpcy50aWxlU2l6ZVBlclNjYWxlRmFjdG9yW3NjYWxlRmFjdG9yXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGlsZVNpemVQZXJTY2FsZUZhY3RvcltzY2FsZUZhY3Rvcl0uaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90aWxlSGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKi9cbiAgICBnZXRMZXZlbFNjYWxlOiBmdW5jdGlvbiAoIGxldmVsICkge1xuXG4gICAgICAgIGlmKHRoaXMuZW11bGF0ZUxlZ2FjeUltYWdlUHlyYW1pZCkge1xuICAgICAgICAgICAgdmFyIGxldmVsU2NhbGUgPSBOYU47XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbHMubGVuZ3RoID4gMCAmJiBsZXZlbCA+PSB0aGlzLm1pbkxldmVsICYmIGxldmVsIDw9IHRoaXMubWF4TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBsZXZlbFNjYWxlID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbHNbbGV2ZWxdLndpZHRoIC9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbHNbdGhpcy5tYXhMZXZlbF0ud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGV2ZWxTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkLlRpbGVTb3VyY2UucHJvdG90eXBlLmdldExldmVsU2NhbGUuY2FsbCh0aGlzLCBsZXZlbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldE51bVRpbGVzOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG5cbiAgICAgICAgaWYodGhpcy5lbXVsYXRlTGVnYWN5SW1hZ2VQeXJhbWlkKSB7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLmdldExldmVsU2NhbGUobGV2ZWwpO1xuICAgICAgICAgICAgaWYgKHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KDEsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJC5UaWxlU291cmNlLnByb3RvdHlwZS5nZXROdW1UaWxlcy5jYWxsKHRoaXMsIGxldmVsKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50XG4gICAgICovXG4gICAgZ2V0VGlsZUF0UG9pbnQ6IGZ1bmN0aW9uKCBsZXZlbCwgcG9pbnQgKSB7XG5cbiAgICAgICAgaWYodGhpcy5lbXVsYXRlTGVnYWN5SW1hZ2VQeXJhbWlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJC5UaWxlU291cmNlLnByb3RvdHlwZS5nZXRUaWxlQXRQb2ludC5jYWxsKHRoaXMsIGxldmVsLCBwb2ludCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVzcG9uc2libGUgZm9yIHJldHJpZXZpbmcgdGhlIHVybCB3aGljaCB3aWxsIHJldHVybiBhbiBpbWFnZSBmb3IgdGhlXG4gICAgICogcmVnaW9uIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4geCwgeSwgYW5kIGxldmVsIGNvbXBvbmVudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIC0geiBpbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgKi9cbiAgICBnZXRUaWxlVXJsOiBmdW5jdGlvbiggbGV2ZWwsIHgsIHkgKXtcblxuICAgICAgICBpZih0aGlzLmVtdWxhdGVMZWdhY3lJbWFnZVB5cmFtaWQpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCB0aGlzLmxldmVscy5sZW5ndGggPiAwICYmIGxldmVsID49IHRoaXMubWluTGV2ZWwgJiYgbGV2ZWwgPD0gdGhpcy5tYXhMZXZlbCApIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmxldmVsc1sgbGV2ZWwgXS51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8jIGNvbnN0YW50c1xuICAgICAgICB2YXIgSUlJRl9ST1RBVElPTiA9ICcwJyxcbiAgICAgICAgICAgIC8vIyMgZ2V0IHRoZSBzY2FsZSAobGV2ZWwgYXMgYSBkZWNpbWFsKVxuICAgICAgICAgICAgc2NhbGUgPSBNYXRoLnBvdyggMC41LCB0aGlzLm1heExldmVsIC0gbGV2ZWwgKSxcblxuICAgICAgICAgICAgLy8jIGltYWdlIGRpbWVuc2lvbnMgYXQgdGhpcyBsZXZlbFxuICAgICAgICAgICAgbGV2ZWxXaWR0aCA9IE1hdGguY2VpbCggdGhpcy53aWR0aCAqIHNjYWxlICksXG4gICAgICAgICAgICBsZXZlbEhlaWdodCA9IE1hdGguY2VpbCggdGhpcy5oZWlnaHQgKiBzY2FsZSApLFxuXG4gICAgICAgICAgICAvLyMjIGlpaWYgcmVnaW9uXG4gICAgICAgICAgICB0aWxlV2lkdGgsXG4gICAgICAgICAgICB0aWxlSGVpZ2h0LFxuICAgICAgICAgICAgaWlpZlRpbGVTaXplV2lkdGgsXG4gICAgICAgICAgICBpaWlmVGlsZVNpemVIZWlnaHQsXG4gICAgICAgICAgICBpaWlmUmVnaW9uLFxuICAgICAgICAgICAgaWlpZlRpbGVYLFxuICAgICAgICAgICAgaWlpZlRpbGVZLFxuICAgICAgICAgICAgaWlpZlRpbGVXLFxuICAgICAgICAgICAgaWlpZlRpbGVILFxuICAgICAgICAgICAgaWlpZlNpemUsXG4gICAgICAgICAgICBpaWlmUXVhbGl0eSxcbiAgICAgICAgICAgIHVyaTtcblxuICAgICAgICB0aWxlV2lkdGggPSB0aGlzLmdldFRpbGVXaWR0aChsZXZlbCk7XG4gICAgICAgIHRpbGVIZWlnaHQgPSB0aGlzLmdldFRpbGVIZWlnaHQobGV2ZWwpO1xuICAgICAgICBpaWlmVGlsZVNpemVXaWR0aCA9IE1hdGguY2VpbCggdGlsZVdpZHRoIC8gc2NhbGUgKTtcbiAgICAgICAgaWlpZlRpbGVTaXplSGVpZ2h0ID0gTWF0aC5jZWlsKCB0aWxlSGVpZ2h0IC8gc2NhbGUgKTtcblxuICAgICAgICBpZiAoIHRoaXNbJ0Bjb250ZXh0J10uaW5kZXhPZignLzEuMC9jb250ZXh0Lmpzb24nKSA+IC0xIHx8XG4gICAgICAgICAgICAgdGhpc1snQGNvbnRleHQnXS5pbmRleE9mKCcvMS4xL2NvbnRleHQuanNvbicpID4gLTEgfHxcbiAgICAgICAgICAgICB0aGlzWydAY29udGV4dCddLmluZGV4T2YoJy8xL2NvbnRleHQuanNvbicpID4gLTEgKSB7XG4gICAgICAgICAgICBpaWlmUXVhbGl0eSA9IFwibmF0aXZlLmpwZ1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWlpZlF1YWxpdHkgPSBcImRlZmF1bHQuanBnXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGxldmVsV2lkdGggPCB0aWxlV2lkdGggJiYgbGV2ZWxIZWlnaHQgPCB0aWxlSGVpZ2h0ICl7XG4gICAgICAgICAgICBpaWlmU2l6ZSA9IGxldmVsV2lkdGggKyBcIixcIjtcbiAgICAgICAgICAgIGlpaWZSZWdpb24gPSAnZnVsbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaWlmVGlsZVggPSB4ICogaWlpZlRpbGVTaXplV2lkdGg7XG4gICAgICAgICAgICBpaWlmVGlsZVkgPSB5ICogaWlpZlRpbGVTaXplSGVpZ2h0O1xuICAgICAgICAgICAgaWlpZlRpbGVXID0gTWF0aC5taW4oIGlpaWZUaWxlU2l6ZVdpZHRoLCB0aGlzLndpZHRoIC0gaWlpZlRpbGVYICk7XG4gICAgICAgICAgICBpaWlmVGlsZUggPSBNYXRoLm1pbiggaWlpZlRpbGVTaXplSGVpZ2h0LCB0aGlzLmhlaWdodCAtIGlpaWZUaWxlWSApO1xuICAgICAgICAgICAgaWlpZlNpemUgPSBNYXRoLmNlaWwoIGlpaWZUaWxlVyAqIHNjYWxlICkgKyBcIixcIjtcbiAgICAgICAgICAgIGlpaWZSZWdpb24gPSBbIGlpaWZUaWxlWCwgaWlpZlRpbGVZLCBpaWlmVGlsZVcsIGlpaWZUaWxlSCBdLmpvaW4oICcsJyApO1xuICAgICAgICB9XG4gICAgICAgIHVyaSA9IFsgdGhpc1snQGlkJ10sIGlpaWZSZWdpb24sIGlpaWZTaXplLCBJSUlGX1JPVEFUSU9OLCBpaWlmUXVhbGl0eSBdLmpvaW4oICcvJyApO1xuXG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgfVxuXG4gIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYXJiaXRyYXJ5IHRpbGUgcmVxdWVzdHMgY2FuIGJlIG1hZGUgYWdhaW5zdCBhIHNlcnZpY2Ugd2l0aCB0aGUgZ2l2ZW4gcHJvZmlsZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9maWxlIC0gSUlJRiBwcm9maWxlIG9iamVjdFxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbkJlVGlsZWQgKHByb2ZpbGUgKSB7XG4gICAgICAgIHZhciBsZXZlbDBQcm9maWxlcyA9IFtcbiAgICAgICAgICAgIFwiaHR0cDovL2xpYnJhcnkuc3RhbmZvcmQuZWR1L2lpaWYvaW1hZ2UtYXBpL2NvbXBsaWFuY2UuaHRtbCNsZXZlbDBcIixcbiAgICAgICAgICAgIFwiaHR0cDovL2xpYnJhcnkuc3RhbmZvcmQuZWR1L2lpaWYvaW1hZ2UtYXBpLzEuMS9jb21wbGlhbmNlLmh0bWwjbGV2ZWwwXCIsXG4gICAgICAgICAgICBcImh0dHA6Ly9paWlmLmlvL2FwaS9pbWFnZS8yL2xldmVsMC5qc29uXCJcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGlzTGV2ZWwwID0gKGxldmVsMFByb2ZpbGVzLmluZGV4T2YocHJvZmlsZVswXSkgIT0gLTEpO1xuICAgICAgICByZXR1cm4gIWlzTGV2ZWwwIHx8IChwcm9maWxlLmluZGV4T2YoXCJzaXplQnlXXCIpICE9IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCB0aGUgbGVnYWN5IHB5cmFtaWQgVVJMcyAob25lIHRpbGUgcGVyIGxldmVsKVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gaW5mb0pzb25cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdHJ1Y3RMZXZlbHMob3B0aW9ucykge1xuICAgICAgICB2YXIgbGV2ZWxzID0gW107XG4gICAgICAgIGZvcih2YXIgaT0wOyBpPG9wdGlvbnMuc2l6ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldmVscy5wdXNoKHtcbiAgICAgICAgICAgICAgICB1cmw6IG9wdGlvbnNbJ0BpZCddICsgJy9mdWxsLycgKyBvcHRpb25zLnNpemVzW2ldLndpZHRoICsgJywvMC9kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMuc2l6ZXNbaV0ud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLnNpemVzW2ldLmhlaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxldmVscy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEud2lkdGggLSBiLndpZHRoO30pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29uZmlndXJlRnJvbVhtbDEwKHhtbERvYykge1xuICAgICAgICAvL3BhcnNlIHRoZSB4bWxcbiAgICAgICAgaWYgKCAheG1sRG9jIHx8ICF4bWxEb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAkLmdldFN0cmluZyggXCJFcnJvcnMuWG1sXCIgKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvb3QgICAgICAgICAgICA9IHhtbERvYy5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgICByb290TmFtZSAgICAgICAgPSByb290LnRhZ05hbWUsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uICAgPSBudWxsO1xuXG4gICAgICAgIGlmICggcm9vdE5hbWUgPT0gXCJpbmZvXCIgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgICAgICAgICBwYXJzZVhNTDEwKCByb290LCBjb25maWd1cmF0aW9uICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb247XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICAgICAgICAgIHRocm93IChlIGluc3RhbmNlb2YgRXJyb3IpID9cbiAgICAgICAgICAgICAgICAgICAgZSA6XG4gICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvciggJC5nZXRTdHJpbmcoXCJFcnJvcnMuSUlJRlwiKSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJC5nZXRTdHJpbmcoIFwiRXJyb3JzLklJSUZcIiApICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYTUwxMCggbm9kZSwgY29uZmlndXJhdGlvbiwgcHJvcGVydHkgKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgdmFsdWU7XG4gICAgICAgIGlmICggbm9kZS5ub2RlVHlwZSA9PSAzICYmIHByb3BlcnR5ICkgey8vdGV4dCBub2RlXG4gICAgICAgICAgICB2YWx1ZSA9IG5vZGUubm9kZVZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmKCB2YWx1ZS5tYXRjaCgvXlxcZCokLykpe1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyKCB2YWx1ZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoICFjb25maWd1cmF0aW9uWyBwcm9wZXJ0eSBdICl7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvblsgcHJvcGVydHkgXSA9IHZhbHVlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWYoICEkLmlzQXJyYXkoIGNvbmZpZ3VyYXRpb25bIHByb3BlcnR5IF0gKSApe1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uWyBwcm9wZXJ0eSBdID0gWyBjb25maWd1cmF0aW9uWyBwcm9wZXJ0eSBdIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25bIHByb3BlcnR5IF0ucHVzaCggdmFsdWUgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKCBub2RlLm5vZGVUeXBlID09IDEgKXtcbiAgICAgICAgICAgIGZvciggaSA9IDA7IGkgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgICAgICBwYXJzZVhNTDEwKCBub2RlLmNoaWxkTm9kZXNbIGkgXSwgY29uZmlndXJhdGlvbiwgbm9kZS5ub2RlTmFtZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBPc21UaWxlU291cmNlXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qXG4gKiBEZXJpdmVkIGZyb20gdGhlIE9TTSB0aWxlIHNvdXJjZSBpbiBSYWluZXIgU2ltb24ncyBzZWFqYXgtdXRpbHMgcHJvamVjdFxuICogPGh0dHA6Ly9naXRodWIuY29tL3JzaW1vbi9zZWFqYXgtdXRpbHM+LiAgUmFpbmVyIFNpbW9uIGhhcyBjb250cmlidXRlZFxuICogdGhlIGluY2x1ZGVkIGNvZGUgdG8gdGhlIE9wZW5TZWFkcmFnb24gcHJvamVjdCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlO1xuICogc2VlIDxodHRwczovL2dpdGh1Yi5jb20vb3BlbnNlYWRyYWdvbi9vcGVuc2VhZHJhZ29uL2lzc3Vlcy81OD4uXG4gKi9cblxuXG4oZnVuY3Rpb24oICQgKXtcblxuLyoqXG4gKiBAY2xhc3MgT3NtVGlsZVNvdXJjZVxuICogQGNsYXNzZGVzYyBBIHRpbGVzb3VyY2UgaW1wbGVtZW50YXRpb24gZm9yIE9wZW5TdHJlZXRNYXAuPGJyPjxicj5cbiAqXG4gKiBOb3RlIDEuIFpvb21sZXZlbHMuIERlZXAgWm9vbSBhbmQgT1NNIGRlZmluZSB6b29tIGxldmVscyBkaWZmZXJlbnRseS4gSW4gIERlZXBcbiAqIFpvb20sIGxldmVsIDAgZXF1YWxzIGFuIGltYWdlIG9mIDF4MSBwaXhlbHMuIEluIE9TTSwgbGV2ZWwgMCBlcXVhbHMgYW4gaW1hZ2Ugb2ZcbiAqIDI1NngyNTYgbGV2ZWxzIChzZWUgaHR0cDovL2dhc2kuY2gvYmxvZy9pbnNpZGUtZGVlcC16b29tLTIpLiBJLmUuIHRoZXJlIGlzIGFcbiAqIGRpZmZlcmVuY2Ugb2YgbG9nMigyNTYpPTggbGV2ZWxzLjxicj48YnI+XG4gKlxuICogTm90ZSAyLiBJbWFnZSBkaW1lbnNpb24uIEFjY29yZGluZyB0byB0aGUgT1NNIFdpa2lcbiAqIChodHRwOi8vd2lraS5vcGVuc3RyZWV0bWFwLm9yZy93aWtpL1NsaXBweV9tYXBfdGlsZW5hbWVzI1pvb21fbGV2ZWxzKVxuICogdGhlIGhpZ2hlc3QgTWFwbmlrIHpvb20gbGV2ZWwgaGFzIDI1Ni4xNDR4MjU2LjE0NCB0aWxlcywgd2l0aCBhIDI1NngyNTZcbiAqIHBpeGVsIHNpemUuIEkuZS4gdGhlIERlZXAgWm9vbSBpbWFnZSBkaW1lbnNpb24gaXMgNjUuNTcyLjg2NHg2NS41NzIuODY0XG4gKiBwaXhlbHMuXG4gKlxuICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAqIEBleHRlbmRzIE9wZW5TZWFkcmFnb24uVGlsZVNvdXJjZVxuICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSB3aWR0aCAtIHRoZSBwaXhlbCB3aWR0aCBvZiB0aGUgaW1hZ2Ugb3IgdGhlIGlkaW9tYXRpY1xuICogICAgICBvcHRpb25zIG9iamVjdCB3aGljaCBpcyB1c2VkIGluc3RlYWQgb2YgcG9zaXRpb25hbCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gKiBAcGFyYW0ge051bWJlcn0gdGlsZVNpemVcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aWxlT3ZlcmxhcFxuICogQHBhcmFtIHtTdHJpbmd9IHRpbGVzVXJsXG4gKi9cbiQuT3NtVGlsZVNvdXJjZSA9IGZ1bmN0aW9uKCB3aWR0aCwgaGVpZ2h0LCB0aWxlU2l6ZSwgdGlsZU92ZXJsYXAsIHRpbGVzVXJsICkge1xuICAgIHZhciBvcHRpb25zO1xuXG4gICAgaWYoICQuaXNQbGFpbk9iamVjdCggd2lkdGggKSApe1xuICAgICAgICBvcHRpb25zID0gd2lkdGg7XG4gICAgfWVsc2V7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB3aWR0aDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgaGVpZ2h0OiBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICB0aWxlU2l6ZTogYXJndW1lbnRzWzJdLFxuICAgICAgICAgICAgdGlsZU92ZXJsYXA6IGFyZ3VtZW50c1szXSxcbiAgICAgICAgICAgIHRpbGVzVXJsOiBhcmd1bWVudHNbNF1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy9hcHBseSBkZWZhdWx0IHNldHRpbmcgZm9yIHN0YW5kYXJkIHB1YmxpYyBPcGVuU3RyZWF0TWFwcyBzZXJ2aWNlXG4gICAgLy9idXQgYWxsb3cgdGhlbSB0byBiZSBzcGVjaWZpZWQgc28gZmxpa3MgY2FuIGhvc3QgdGhlcmUgb3duIGluc3RhbmNlXG4gICAgLy9vciBhcHBseSBhZ2FpbnN0IG90aGVyIHNlcnZpY2VzIHN1cHBvcnR0aW5nIHRoZSBzYW1lIHN0YW5kYXJkXG4gICAgaWYoICFvcHRpb25zLndpZHRoIHx8ICFvcHRpb25zLmhlaWdodCApe1xuICAgICAgICBvcHRpb25zLndpZHRoID0gNjU1NzI4NjQ7XG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gNjU1NzI4NjQ7XG4gICAgfVxuICAgIGlmKCAhb3B0aW9ucy50aWxlU2l6ZSApe1xuICAgICAgICBvcHRpb25zLnRpbGVTaXplID0gMjU2O1xuICAgICAgICBvcHRpb25zLnRpbGVPdmVybGFwID0gMDtcbiAgICB9XG4gICAgaWYoICFvcHRpb25zLnRpbGVzVXJsICl7XG4gICAgICAgIG9wdGlvbnMudGlsZXNVcmwgPSBcImh0dHA6Ly90aWxlLm9wZW5zdHJlZXRtYXAub3JnL1wiO1xuICAgIH1cbiAgICBvcHRpb25zLm1pbkxldmVsID0gODtcblxuICAgICQuVGlsZVNvdXJjZS5hcHBseSggdGhpcywgWyBvcHRpb25zIF0gKTtcblxufTtcblxuJC5leHRlbmQoICQuT3NtVGlsZVNvdXJjZS5wcm90b3R5cGUsICQuVGlsZVNvdXJjZS5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5Pc21UaWxlU291cmNlLnByb3RvdHlwZSAqL3tcblxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBkYXRhIGFuZC9vciB1cmwgaW1wbHkgdGhlIGltYWdlIHNlcnZpY2UgaXMgc3VwcG9ydGVkIGJ5XG4gICAgICogdGhpcyB0aWxlIHNvdXJjZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25hbCAtIHVybFxuICAgICAqL1xuICAgIHN1cHBvcnRzOiBmdW5jdGlvbiggZGF0YSwgdXJsICl7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBkYXRhLnR5cGUgJiZcbiAgICAgICAgICAgIFwib3BlbnN0cmVldG1hcHNcIiA9PSBkYXRhLnR5cGVcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSByYXcgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSB0aGUgdXJsIHRoZSBkYXRhIHdhcyByZXRyZWl2ZWQgZnJvbSBpZiBhbnkuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvcHRpb25zIC0gQSBkaWN0aW9uYXJ5IG9mIGtleXdvcmQgYXJndW1lbnRzIHN1ZmZpY2llbnRcbiAgICAgKiAgICAgIHRvIGNvbmZpZ3VyZSB0aGlzIHRpbGUgc291cmNlcyBjb25zdHJ1Y3Rvci5cbiAgICAgKi9cbiAgICBjb25maWd1cmU6IGZ1bmN0aW9uKCBkYXRhLCB1cmwgKXtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqL1xuICAgIGdldFRpbGVVcmw6IGZ1bmN0aW9uKCBsZXZlbCwgeCwgeSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZXNVcmwgKyAobGV2ZWwgLSA4KSArIFwiL1wiICsgeCArIFwiL1wiICsgeSArIFwiLnBuZ1wiO1xuICAgIH1cbn0pO1xuXG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gVG1zVGlsZVNvdXJjZVxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKlxuICogRGVyaXZlZCBmcm9tIHRoZSBUTVMgdGlsZSBzb3VyY2UgaW4gUmFpbmVyIFNpbW9uJ3Mgc2VhamF4LXV0aWxzIHByb2plY3RcbiAqIDxodHRwOi8vZ2l0aHViLmNvbS9yc2ltb24vc2VhamF4LXV0aWxzPi4gIFJhaW5lciBTaW1vbiBoYXMgY29udHJpYnV0ZWRcbiAqIHRoZSBpbmNsdWRlZCBjb2RlIHRvIHRoZSBPcGVuU2VhZHJhZ29uIHByb2plY3QgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZTtcbiAqIHNlZSA8aHR0cHM6Ly9naXRodWIuY29tL29wZW5zZWFkcmFnb24vb3BlbnNlYWRyYWdvbi9pc3N1ZXMvNTg+LlxuICovXG5cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIFRtc1RpbGVTb3VyY2VcbiAqIEBjbGFzc2Rlc2MgQSB0aWxlc291cmNlIGltcGxlbWVudGF0aW9uIGZvciBUaWxlZCBNYXAgU2VydmljZXMgKFRNUykuXG4gKiBUTVMgdGlsZSBzY2hlbWUgKCBbIGFzIHN1cHBvcnRlZCBieSBPcGVuTGF5ZXJzIF0gaXMgZGVzY3JpYmVkIGhlcmVcbiAqICggaHR0cDovL29wZW5sYXllcnMub3JnL2Rldi9leGFtcGxlcy90bXMuaHRtbCApLlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLlRpbGVTb3VyY2VcbiAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gd2lkdGggLSB0aGUgcGl4ZWwgd2lkdGggb2YgdGhlIGltYWdlIG9yIHRoZSBpZGlvbWF0aWNcbiAqICAgICAgb3B0aW9ucyBvYmplY3Qgd2hpY2ggaXMgdXNlZCBpbnN0ZWFkIG9mIHBvc2l0aW9uYWwgYXJndW1lbnRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplXG4gKiBAcGFyYW0ge051bWJlcn0gdGlsZU92ZXJsYXBcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aWxlc1VybFxuICovXG4kLlRtc1RpbGVTb3VyY2UgPSBmdW5jdGlvbiggd2lkdGgsIGhlaWdodCwgdGlsZVNpemUsIHRpbGVPdmVybGFwLCB0aWxlc1VybCApIHtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmKCAkLmlzUGxhaW5PYmplY3QoIHdpZHRoICkgKXtcbiAgICAgICAgb3B0aW9ucyA9IHdpZHRoO1xuICAgIH1lbHNle1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgd2lkdGg6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGhlaWdodDogYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgdGlsZVNpemU6IGFyZ3VtZW50c1syXSxcbiAgICAgICAgICAgIHRpbGVPdmVybGFwOiBhcmd1bWVudHNbM10sXG4gICAgICAgICAgICB0aWxlc1VybDogYXJndW1lbnRzWzRdXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFRNUyBoYXMgaW50ZWdlciBtdWx0aXBsZXMgb2YgMjU2IGZvciB3aWR0aC9oZWlnaHQgYW5kIGFkZHMgYnVmZmVyXG4gICAgLy8gaWYgbmVjZXNzYXJ5IC0+IGFjY291bnQgZm9yIHRoaXMhXG4gICAgdmFyIGJ1ZmZlcmVkV2lkdGggPSBNYXRoLmNlaWwob3B0aW9ucy53aWR0aCAvIDI1NikgKiAyNTYsXG4gICAgICAgIGJ1ZmZlcmVkSGVpZ2h0ID0gTWF0aC5jZWlsKG9wdGlvbnMuaGVpZ2h0IC8gMjU2KSAqIDI1NixcbiAgICAgICAgbWF4O1xuXG4gICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Ygem9vbWxldmVscyBpbiB0aGlzIHRpbGVzZXRcbiAgICBpZiAoYnVmZmVyZWRXaWR0aCA+IGJ1ZmZlcmVkSGVpZ2h0KSB7XG4gICAgICAgIG1heCA9IGJ1ZmZlcmVkV2lkdGggLyAyNTY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbWF4ID0gYnVmZmVyZWRIZWlnaHQgLyAyNTY7XG4gICAgfVxuICAgIG9wdGlvbnMubWF4TGV2ZWwgPSBNYXRoLmNlaWwoTWF0aC5sb2cobWF4KS9NYXRoLmxvZygyKSkgLSAxO1xuICAgIG9wdGlvbnMudGlsZVNpemUgPSAyNTY7XG4gICAgb3B0aW9ucy53aWR0aCA9IGJ1ZmZlcmVkV2lkdGg7XG4gICAgb3B0aW9ucy5oZWlnaHQgPSBidWZmZXJlZEhlaWdodDtcblxuICAgICQuVGlsZVNvdXJjZS5hcHBseSggdGhpcywgWyBvcHRpb25zIF0gKTtcblxufTtcblxuJC5leHRlbmQoICQuVG1zVGlsZVNvdXJjZS5wcm90b3R5cGUsICQuVGlsZVNvdXJjZS5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5UbXNUaWxlU291cmNlLnByb3RvdHlwZSAqL3tcblxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBkYXRhIGFuZC9vciB1cmwgaW1wbHkgdGhlIGltYWdlIHNlcnZpY2UgaXMgc3VwcG9ydGVkIGJ5XG4gICAgICogdGhpcyB0aWxlIHNvdXJjZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25hbCAtIHVybFxuICAgICAqL1xuICAgIHN1cHBvcnRzOiBmdW5jdGlvbiggZGF0YSwgdXJsICl7XG4gICAgICAgIHJldHVybiAoIGRhdGEudHlwZSAmJiBcInRpbGVkbWFwc2VydmljZVwiID09IGRhdGEudHlwZSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gdGhlIHJhdyBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIHRoZSB1cmwgdGhlIGRhdGEgd2FzIHJldHJlaXZlZCBmcm9tIGlmIGFueS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9wdGlvbnMgLSBBIGRpY3Rpb25hcnkgb2Yga2V5d29yZCBhcmd1bWVudHMgc3VmZmljaWVudFxuICAgICAqICAgICAgdG8gY29uZmlndXJlIHRoaXMgdGlsZSBzb3VyY2VzIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24oIGRhdGEsIHVybCApe1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICovXG4gICAgZ2V0VGlsZVVybDogZnVuY3Rpb24oIGxldmVsLCB4LCB5ICkge1xuICAgICAgICAvLyBDb252ZXJ0IGZyb20gRGVlcCBab29tIGRlZmluaXRpb24gdG8gVE1TIHpvb20gZGVmaW5pdGlvblxuICAgICAgICB2YXIgeVRpbGVzID0gdGhpcy5nZXROdW1UaWxlcyggbGV2ZWwgKS55IC0gMTtcblxuICAgICAgICByZXR1cm4gdGhpcy50aWxlc1VybCArIGxldmVsICsgXCIvXCIgKyB4ICsgXCIvXCIgKyAgKHlUaWxlcyAtIHkpICsgXCIucG5nXCI7XG4gICAgfVxufSk7XG5cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBMZWdhY3lUaWxlU291cmNlXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIEBjbGFzcyBMZWdhY3lUaWxlU291cmNlXG4gKiBAY2xhc3NkZXNjIFRoZSBMZWdhY3lUaWxlU291cmNlIGFsbG93cyBzaW1wbGUsIHRyYWRpdGlvbmFsIGltYWdlIHB5cmFtaWRzIHRvIGJlIGxvYWRlZFxuICogaW50byBhbiBPcGVuU2VhZHJhZ29uIFZpZXdlci4gIEJhc2ljYWxseSwgdGhpcyB0cmFuc2xhdGVzIHRvIHRoZSBoaXN0b3JpY2FsbHlcbiAqIGNvbW1vbiBwcmFjdGljZSBvZiBzdGFydGluZyB3aXRoIGEgJ21hc3RlcicgaW1hZ2UsIG1heWJlIGEgdGlmZiBmb3IgZXhhbXBsZSxcbiAqIGFuZCBnZW5lcmF0aW5nIGEgc2V0IG9mICdzZXJ2aWNlJyBpbWFnZXMgbGlrZSBvbmUgb3IgbW9yZSB0aHVtYm5haWxzLCBhIG1lZGl1bVxuICogcmVzb2x1dGlvbiBpbWFnZSBhbmQgYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgaW4gc3RhbmRhcmQgd2ViIGZvcm1hdHMgbGlrZVxuICogcG5nIG9yIGpwZy5cbiAqXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGV4dGVuZHMgT3BlblNlYWRyYWdvbi5UaWxlU291cmNlXG4gKiBAcGFyYW0ge0FycmF5fSBsZXZlbHMgQW4gYXJyYXkgb2YgZmlsZSBkZXNjcmlwdGlvbnMsIGVhY2ggaXMgYW4gb2JqZWN0IHdpdGhcbiAqICAgICAgYSAndXJsJywgYSAnd2lkdGgnLCBhbmQgYSAnaGVpZ2h0Jy4gIE92ZXJyaWRpbmcgY2xhc3NlcyBjYW4gZXhwZWN0IG1vcmVcbiAqICAgICAgcHJvcGVydGllcyBidXQgdGhlc2UgcHJvcGVydGllcyBhcmUgc3VmZmljaWVudCBmb3IgdGhpcyBpbXBsZW1lbnRhdGlvbi5cbiAqICAgICAgQWRkaXRpb25hbGx5LCB0aGUgbGV2ZWxzIGFyZSByZXF1aXJlZCB0byBiZSBsaXN0ZWQgaW4gb3JkZXIgZnJvbVxuICogICAgICBzbWFsbGVzdCB0byBsYXJnZXN0LlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IGFzcGVjdFJhdGlvXG4gKiBAcHJvcGVydHkge051bWJlcn0gZGltZW5zaW9uc1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IHRpbGVTaXplXG4gKiBAcHJvcGVydHkge051bWJlcn0gdGlsZU92ZXJsYXBcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5MZXZlbFxuICogQHByb3BlcnR5IHtOdW1iZXJ9IG1heExldmVsXG4gKiBAcHJvcGVydHkge0FycmF5fSAgbGV2ZWxzXG4gKi9cbiQuTGVnYWN5VGlsZVNvdXJjZSA9IGZ1bmN0aW9uKCBsZXZlbHMgKSB7XG5cbiAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodDtcblxuICAgIGlmKCAkLmlzQXJyYXkoIGxldmVscyApICl7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0eXBlOiAnbGVnYWN5LWltYWdlLXB5cmFtaWQnLFxuICAgICAgICAgICAgbGV2ZWxzOiBsZXZlbHNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL2NsZWFuIHVwIHRoZSBsZXZlbHMgdG8gbWFrZSBzdXJlIHdlIHN1cHBvcnQgYWxsIGZvcm1hdHNcbiAgICBvcHRpb25zLmxldmVscyA9IGZpbHRlckZpbGVzKCBvcHRpb25zLmxldmVscyApO1xuXG4gICAgaWYgKCBvcHRpb25zLmxldmVscy5sZW5ndGggPiAwICkge1xuICAgICAgICB3aWR0aCA9IG9wdGlvbnMubGV2ZWxzWyBvcHRpb25zLmxldmVscy5sZW5ndGggLSAxIF0ud2lkdGg7XG4gICAgICAgIGhlaWdodCA9IG9wdGlvbnMubGV2ZWxzWyBvcHRpb25zLmxldmVscy5sZW5ndGggLSAxIF0uaGVpZ2h0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2lkdGggPSAwO1xuICAgICAgICBoZWlnaHQgPSAwO1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoIFwiTm8gc3VwcG9ydGVkIGltYWdlIGZvcm1hdHMgZm91bmRcIiApO1xuICAgIH1cblxuICAgICQuZXh0ZW5kKCB0cnVlLCBvcHRpb25zLCB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRpbGVTaXplOiBNYXRoLm1heCggaGVpZ2h0LCB3aWR0aCApLFxuICAgICAgICB0aWxlT3ZlcmxhcDogMCxcbiAgICAgICAgbWluTGV2ZWw6IDAsXG4gICAgICAgIG1heExldmVsOiBvcHRpb25zLmxldmVscy5sZW5ndGggPiAwID8gb3B0aW9ucy5sZXZlbHMubGVuZ3RoIC0gMSA6IDBcbiAgICB9ICk7XG5cbiAgICAkLlRpbGVTb3VyY2UuYXBwbHkoIHRoaXMsIFsgb3B0aW9ucyBdICk7XG5cbiAgICB0aGlzLmxldmVscyA9IG9wdGlvbnMubGV2ZWxzO1xufTtcblxuJC5leHRlbmQoICQuTGVnYWN5VGlsZVNvdXJjZS5wcm90b3R5cGUsICQuVGlsZVNvdXJjZS5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5MZWdhY3lUaWxlU291cmNlLnByb3RvdHlwZSAqL3tcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGRhdGEgYW5kL29yIHVybCBpbXBseSB0aGUgaW1hZ2Ugc2VydmljZSBpcyBzdXBwb3J0ZWQgYnlcbiAgICAgKiB0aGlzIHRpbGUgc291cmNlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbmFsIC0gdXJsXG4gICAgICovXG4gICAgc3VwcG9ydHM6IGZ1bmN0aW9uKCBkYXRhLCB1cmwgKXtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGRhdGEudHlwZSAmJlxuICAgICAgICAgICAgXCJsZWdhY3ktaW1hZ2UtcHlyYW1pZFwiID09IGRhdGEudHlwZVxuICAgICAgICApIHx8IChcbiAgICAgICAgICAgIGRhdGEuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAgICBcImxlZ2FjeS1pbWFnZS1weXJhbWlkXCIgPT0gZGF0YS5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJylcbiAgICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFhNTERvY3VtZW50fSBjb25maWd1cmF0aW9uIC0gdGhlIHJhdyBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFVcmwgLSB0aGUgdXJsIHRoZSBkYXRhIHdhcyByZXRyZWl2ZWQgZnJvbSBpZiBhbnkuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvcHRpb25zIC0gQSBkaWN0aW9uYXJ5IG9mIGtleXdvcmQgYXJndW1lbnRzIHN1ZmZpY2llbnRcbiAgICAgKiAgICAgIHRvIGNvbmZpZ3VyZSB0aGlzIHRpbGUgc291cmNlcyBjb25zdHJ1Y3Rvci5cbiAgICAgKi9cbiAgICBjb25maWd1cmU6IGZ1bmN0aW9uKCBjb25maWd1cmF0aW9uLCBkYXRhVXJsICl7XG5cbiAgICAgICAgdmFyIG9wdGlvbnM7XG5cbiAgICAgICAgaWYoICEkLmlzUGxhaW5PYmplY3QoY29uZmlndXJhdGlvbikgKXtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IGNvbmZpZ3VyZUZyb21YTUwoIHRoaXMsIGNvbmZpZ3VyYXRpb24gKTtcblxuICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IGNvbmZpZ3VyZUZyb21PYmplY3QoIHRoaXMsIGNvbmZpZ3VyYXRpb24gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldExldmVsU2NhbGU6IGZ1bmN0aW9uICggbGV2ZWwgKSB7XG4gICAgICAgIHZhciBsZXZlbFNjYWxlID0gTmFOO1xuICAgICAgICBpZiAoIHRoaXMubGV2ZWxzLmxlbmd0aCA+IDAgJiYgbGV2ZWwgPj0gdGhpcy5taW5MZXZlbCAmJiBsZXZlbCA8PSB0aGlzLm1heExldmVsICkge1xuICAgICAgICAgICAgbGV2ZWxTY2FsZSA9XG4gICAgICAgICAgICAgICAgdGhpcy5sZXZlbHNbIGxldmVsIF0ud2lkdGggL1xuICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxzWyB0aGlzLm1heExldmVsIF0ud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxldmVsU2NhbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAqL1xuICAgIGdldE51bVRpbGVzOiBmdW5jdGlvbiggbGV2ZWwgKSB7XG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0TGV2ZWxTY2FsZSggbGV2ZWwgKTtcbiAgICAgICAgaWYgKCBzY2FsZSApe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KCAxLCAxICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoIDAsIDAgKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50XG4gICAgICovXG4gICAgZ2V0VGlsZUF0UG9pbnQ6IGZ1bmN0aW9uKCBsZXZlbCwgcG9pbnQgKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCggMCwgMCApO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCBieSB0aGlzIGNsYXNzIG90aGVyIHRoYW4gdG8gdGhyb3cgYW4gRXJyb3JcbiAgICAgKiBhbm5vdW5jaW5nIHlvdSBoYXZlIHRvIGltcGxlbWVudCBpdC4gIEJlY2F1c2Ugb2YgdGhlIHZhcmlldHkgb2YgdGlsZVxuICAgICAqIHNlcnZlciB0ZWNobm9sb2dpZXMsIGFuZCB2YXJpb3VzIHNwZWNpZmljYXRpb25zIGZvciBidWlsZGluZyBpbWFnZVxuICAgICAqIHB5cmFtaWRzLCB0aGlzIG1ldGhvZCBpcyBoZXJlIHRvIGFsbG93IGVhc3kgaW50ZWdyYXRpb24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqL1xuICAgIGdldFRpbGVVcmw6IGZ1bmN0aW9uICggbGV2ZWwsIHgsIHkgKSB7XG4gICAgICAgIHZhciB1cmwgPSBudWxsO1xuICAgICAgICBpZiAoIHRoaXMubGV2ZWxzLmxlbmd0aCA+IDAgJiYgbGV2ZWwgPj0gdGhpcy5taW5MZXZlbCAmJiBsZXZlbCA8PSB0aGlzLm1heExldmVsICkge1xuICAgICAgICAgICAgdXJsID0gdGhpcy5sZXZlbHNbIGxldmVsIF0udXJsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxufSApO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJlbW92ZXMgYW55IGZpbGVzIGZyb20gdGhlIEFycmF5IHdoaWNoIGRvbnQgY29uZm9ybSB0byBvdXJcbiAqIGJhc2ljIHJlcXVpcmVtZW50cyBmb3IgYSAnbGV2ZWwnIGluIHRoZSBMZWdhY3lUaWxlU291cmNlLlxuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogQGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckZpbGVzKCBmaWxlcyApe1xuICAgIHZhciBmaWx0ZXJlZCA9IFtdLFxuICAgICAgICBmaWxlLFxuICAgICAgICBpO1xuICAgIGZvciggaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICBmaWxlID0gZmlsZXNbIGkgXTtcbiAgICAgICAgaWYoIGZpbGUuaGVpZ2h0ICYmXG4gICAgICAgICAgICBmaWxlLndpZHRoICYmXG4gICAgICAgICAgICBmaWxlLnVybCAmJiAoXG4gICAgICAgICAgICAgICAgZmlsZS51cmwudG9Mb3dlckNhc2UoKS5tYXRjaCgvXi4qXFwuKHBuZ3xqcGd8anBlZ3xnaWYpKD86XFw/LiopPyQvKSB8fCAoXG4gICAgICAgICAgICAgICAgICAgIGZpbGUubWltZXR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgZmlsZS5taW1ldHlwZS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eLipcXC8ocG5nfGpwZ3xqcGVnfGdpZikkLylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApICl7XG4gICAgICAgICAgICAvL1RoaXMgaXMgc3VmZmljaWVudCB0byBzZXJ2ZSBhcyBhIGxldmVsXG4gICAgICAgICAgICBmaWx0ZXJlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICB1cmw6IGZpbGUudXJsLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBOdW1iZXIoIGZpbGUud2lkdGggKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IE51bWJlciggZmlsZS5oZWlnaHQgKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUuZXJyb3IoICdVbnN1cHBvcnRlZCBpbWFnZSBmb3JtYXQ6ICVzJywgZmlsZS51cmwgPyBmaWxlLnVybCA6ICc8bm8gVVJMPicgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgIHJldHVybiBhLmhlaWdodCAtIGIuaGVpZ2h0O1xuICAgIH0pO1xuXG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogQGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGNvbmZpZ3VyZUZyb21YTUwoIHRpbGVTb3VyY2UsIHhtbERvYyApe1xuXG4gICAgaWYgKCAheG1sRG9jIHx8ICF4bWxEb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICQuZ2V0U3RyaW5nKCBcIkVycm9ycy5YbWxcIiApICk7XG4gICAgfVxuXG4gICAgdmFyIHJvb3QgICAgICAgICA9IHhtbERvYy5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHJvb3ROYW1lICAgICA9IHJvb3QudGFnTmFtZSxcbiAgICAgICAgY29uZiAgICAgICAgID0gbnVsbCxcbiAgICAgICAgbGV2ZWxzICAgICAgID0gW10sXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpO1xuXG4gICAgaWYgKCByb290TmFtZSA9PSBcImltYWdlXCIgKSB7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmYgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogICAgICAgIHJvb3QuZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApLFxuICAgICAgICAgICAgICAgIGxldmVsczogICAgICBbXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV2ZWxzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJsZXZlbFwiICk7XG4gICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG4gICAgICAgICAgICAgICAgY29uZi5sZXZlbHMgLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICAgIGxldmVsLmdldEF0dHJpYnV0ZSggXCJ1cmxcIiApLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogIHBhcnNlSW50KCBsZXZlbC5nZXRBdHRyaWJ1dGUoIFwid2lkdGhcIiApLCAxMCApLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KCBsZXZlbC5nZXRBdHRyaWJ1dGUoIFwiaGVpZ2h0XCIgKSwgMTAgKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29uZmlndXJlRnJvbU9iamVjdCggdGlsZVNvdXJjZSwgY29uZiApO1xuXG4gICAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICAgICAgdGhyb3cgKGUgaW5zdGFuY2VvZiBFcnJvcikgP1xuICAgICAgICAgICAgICAgIGUgOlxuICAgICAgICAgICAgICAgIG5ldyBFcnJvciggJ1Vua25vd24gZXJyb3IgcGFyc2luZyBMZWdhY3kgSW1hZ2UgUHlyYW1pZCBYTUwuJyApO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICggcm9vdE5hbWUgPT0gXCJjb2xsZWN0aW9uXCIgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJ0xlZ2FjeSBJbWFnZSBQeXJhbWlkIENvbGxlY3Rpb25zIG5vdCB5ZXQgc3VwcG9ydGVkLicgKTtcbiAgICB9IGVsc2UgaWYgKCByb290TmFtZSA9PSBcImVycm9yXCIgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggJ0Vycm9yOiAnICsgeG1sRG9jICk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biBlbGVtZW50ICcgKyByb290TmFtZSApO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjb25maWd1cmVGcm9tT2JqZWN0KCB0aWxlU291cmNlLCBjb25maWd1cmF0aW9uICl7XG5cbiAgICByZXR1cm4gY29uZmlndXJhdGlvbi5sZXZlbHM7XG5cbn1cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBJbWFnZVRpbGVTb3VyY2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uICgkKSB7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgSW1hZ2VUaWxlU291cmNlXG4gICAgICogQGNsYXNzZGVzYyBUaGUgSW1hZ2VUaWxlU291cmNlIGFsbG93cyBhIHNpbXBsZSBpbWFnZSB0byBiZSBsb2FkZWRcbiAgICAgKiBpbnRvIGFuIE9wZW5TZWFkcmFnb24gVmlld2VyLlxuICAgICAqIFRoZXJlIGFyZSAyIHdheXMgdG8gb3BlbiBhbiBJbWFnZVRpbGVTb3VyY2U6XG4gICAgICogMS4gdmlld2VyLm9wZW4oe3R5cGU6ICdpbWFnZScsIHVybDogZm9vVXJsfSk7XG4gICAgICogMi4gdmlld2VyLm9wZW4obmV3IE9wZW5TZWFkcmFnb24uSW1hZ2VUaWxlU291cmNlKHt1cmw6IGZvb1VybH0pKTtcbiAgICAgKlxuICAgICAqIFdpdGggdGhlIGZpcnN0IHN5bnRheCwgdGhlIGNyb3NzT3JpZ2luUG9saWN5LCBhamF4V2l0aENyZWRlbnRpYWxzIGFuZFxuICAgICAqIHVzZUNhbnZhcyBvcHRpb25zIGFyZSBpbmhlcml0ZWQgZnJvbSB0aGUgdmlld2VyIGlmIHRoZXkgYXJlIG5vdFxuICAgICAqIHNwZWNpZmllZCBkaXJlY3RseSBpbiB0aGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBleHRlbmRzIE9wZW5TZWFkcmFnb24uVGlsZVNvdXJjZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnVybCBVUkwgb2YgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5idWlsZFB5cmFtaWQ9dHJ1ZV0gSWYgc2V0IHRvIHRydWUgKGRlZmF1bHQpLCBhXG4gICAgICogcHlyYW1pZCB3aWxsIGJlIGJ1aWx0IGludGVybmFsbHkgdG8gcHJvdmlkZSBhIGJldHRlciBkb3duc2FtcGxpbmcuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8Qm9vbGVhbn0gW29wdGlvbnMuY3Jvc3NPcmlnaW5Qb2xpY3k9ZmFsc2VdIFZhbGlkIHZhbHVlcyBhcmVcbiAgICAgKiAnQW5vbnltb3VzJywgJ3VzZS1jcmVkZW50aWFscycsIGFuZCBmYWxzZS4gSWYgZmFsc2UsIGltYWdlIHJlcXVlc3RzIHdpbGxcbiAgICAgKiBub3QgdXNlIENPUlMgcHJldmVudGluZyBpbnRlcm5hbCBweXJhbWlkIGJ1aWxkaW5nIGZvciBpbWFnZXMgZnJvbSBvdGhlclxuICAgICAqIGRvbWFpbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8Qm9vbGVhbn0gW29wdGlvbnMuYWpheFdpdGhDcmVkZW50aWFscz1mYWxzZV0gV2hldGhlciB0byBzZXRcbiAgICAgKiB0aGUgd2l0aENyZWRlbnRpYWxzIFhIUiBmbGFnIGZvciBBSkFYIHJlcXVlc3RzICh3aGVuIGxvYWRpbmcgdGlsZSBzb3VyY2VzKS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUNhbnZhcz10cnVlXSBTZXQgdG8gZmFsc2UgdG8gcHJldmVudCBhbnkgdXNlXG4gICAgICogb2YgdGhlIGNhbnZhcyBBUEkuXG4gICAgICovXG4gICAgJC5JbWFnZVRpbGVTb3VyY2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBidWlsZFB5cmFtaWQ6IHRydWUsXG4gICAgICAgICAgICBjcm9zc09yaWdpblBvbGljeTogZmFsc2UsXG4gICAgICAgICAgICBhamF4V2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZUNhbnZhczogdHJ1ZVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgJC5UaWxlU291cmNlLmFwcGx5KHRoaXMsIFtvcHRpb25zXSk7XG5cbiAgICB9O1xuXG4gICAgJC5leHRlbmQoJC5JbWFnZVRpbGVTb3VyY2UucHJvdG90eXBlLCAkLlRpbGVTb3VyY2UucHJvdG90eXBlLCAvKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uSW1hZ2VUaWxlU291cmNlLnByb3RvdHlwZSAqL3tcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSBpZiB0aGUgZGF0YSBhbmQvb3IgdXJsIGltcGx5IHRoZSBpbWFnZSBzZXJ2aWNlIGlzIHN1cHBvcnRlZCBieVxuICAgICAgICAgKiB0aGlzIHRpbGUgc291cmNlLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGRhdGFcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbmFsIC0gdXJsXG4gICAgICAgICAqL1xuICAgICAgICBzdXBwb3J0czogZnVuY3Rpb24gKGRhdGEsIHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEudHlwZSAmJiBkYXRhLnR5cGUgPT09IFwiaW1hZ2VcIjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBvcHRpb25zXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhVXJsIC0gdGhlIHVybCB0aGUgaW1hZ2Ugd2FzIHJldHJlaXZlZCBmcm9tLCBpZiBhbnkuXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gb3B0aW9ucyAtIEEgZGljdGlvbmFyeSBvZiBrZXl3b3JkIGFyZ3VtZW50cyBzdWZmaWNpZW50XG4gICAgICAgICAqICAgICAgdG8gY29uZmlndXJlIHRoaXMgdGlsZSBzb3VyY2VzIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uZmlndXJlOiBmdW5jdGlvbiAob3B0aW9ucywgZGF0YVVybCkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zaWJsZSBmb3IgcmV0cmlldmluZywgYW5kIGNhY2hpbmcgdGhlXG4gICAgICAgICAqIGltYWdlIG1ldGFkYXRhIHBlcnRpbmVudCB0byB0aGlzIFRpbGVTb3VyY2VzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldEltYWdlSW5mbzogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gdGhpcy5faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNyb3NzT3JpZ2luUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmNyb3NzT3JpZ2luUG9saWN5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYWpheFdpdGhDcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGltYWdlLnVzZUNyZWRlbnRpYWxzID0gdGhpcy5hamF4V2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkLmFkZEV2ZW50KGltYWdlLCAnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy53aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIF90aGlzLmFzcGVjdFJhdGlvID0gX3RoaXMud2lkdGggLyBfdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGltZW5zaW9ucyA9IG5ldyAkLlBvaW50KF90aGlzLndpZHRoLCBfdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIF90aGlzLl90aWxlV2lkdGggPSBfdGhpcy53aWR0aDtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdGlsZUhlaWdodCA9IF90aGlzLmhlaWdodDtcbiAgICAgICAgICAgICAgICBfdGhpcy50aWxlT3ZlcmxhcCA9IDA7XG4gICAgICAgICAgICAgICAgX3RoaXMubWluTGV2ZWwgPSAwO1xuICAgICAgICAgICAgICAgIF90aGlzLmxldmVscyA9IF90aGlzLl9idWlsZExldmVscygpO1xuICAgICAgICAgICAgICAgIF90aGlzLm1heExldmVsID0gX3RoaXMubGV2ZWxzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5yZWFkeSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGV2ZW50IGlzIGRvY3VtZW50ZWQgZWxzZXdoZXJlLCBpbiBUaWxlU291cmNlXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCgncmVhZHknLCB7dGlsZVNvdXJjZTogX3RoaXN9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkLmFkZEV2ZW50KGltYWdlLCAnZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBldmVudCBpcyBkb2N1bWVudGVkIGVsc2V3aGVyZSwgaW4gVGlsZVNvdXJjZVxuICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoJ29wZW4tZmFpbGVkJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVycm9yIGxvYWRpbmcgaW1hZ2UgYXQgXCIgKyB1cmwsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdXJsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGV2ZWxTY2FsZTogZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgICB2YXIgbGV2ZWxTY2FsZSA9IE5hTjtcbiAgICAgICAgICAgIGlmIChsZXZlbCA+PSB0aGlzLm1pbkxldmVsICYmIGxldmVsIDw9IHRoaXMubWF4TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBsZXZlbFNjYWxlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxzW2xldmVsXS53aWR0aCAvXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsc1t0aGlzLm1heExldmVsXS53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsZXZlbFNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TnVtVGlsZXM6IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5nZXRMZXZlbFNjYWxlKGxldmVsKTtcbiAgICAgICAgICAgIGlmIChzY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCgxLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50XG4gICAgICAgICAqL1xuICAgICAgICBnZXRUaWxlQXRQb2ludDogZnVuY3Rpb24gKGxldmVsLCBwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KDAsIDApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0cmlldmVzIGEgdGlsZSB1cmxcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBMZXZlbCBvZiB0aGUgdGlsZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0geCB4IGNvb3JkaW5hdGUgb2YgdGhlIHRpbGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgeSBjb29yZGluYXRlIG9mIHRoZSB0aWxlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUaWxlVXJsOiBmdW5jdGlvbiAobGV2ZWwsIHgsIHkpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxldmVsID49IHRoaXMubWluTGV2ZWwgJiYgbGV2ZWwgPD0gdGhpcy5tYXhMZXZlbCkge1xuICAgICAgICAgICAgICAgIHVybCA9IHRoaXMubGV2ZWxzW2xldmVsXS51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0cmlldmVzIGEgdGlsZSBjb250ZXh0IDJEXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgTGV2ZWwgb2YgdGhlIHRpbGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHggeCBjb29yZGluYXRlIG9mIHRoZSB0aWxlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IHkgY29vcmRpbmF0ZSBvZiB0aGUgdGlsZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29udGV4dDJEOiBmdW5jdGlvbiAobGV2ZWwsIHgsIHkpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChsZXZlbCA+PSB0aGlzLm1pbkxldmVsICYmIGxldmVsIDw9IHRoaXMubWF4TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5sZXZlbHNbbGV2ZWxdLmNvbnRleHQyRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByaXZhdGVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQnVpbGRzIHRoZSBkaWZmZXJlbnRzIGxldmVscyBvZiB0aGUgcHlyYW1pZCBpZiBwb3NzaWJsZVxuICAgICAgICAvLyAoaS5lLiBpZiBjYW52YXMgQVBJIGVuYWJsZWQgYW5kIG5vIGNhbnZhcyB0YWludGluZyBpc3N1ZSkuXG4gICAgICAgIF9idWlsZExldmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxldmVscyA9IFt7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5faW1hZ2Uuc3JjLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5faW1hZ2UubmF0dXJhbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuX2ltYWdlLm5hdHVyYWxIZWlnaHRcbiAgICAgICAgICAgICAgICB9XTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmJ1aWxkUHlyYW1pZCB8fCAhJC5zdXBwb3J0c0NhbnZhcyB8fCAhdGhpcy51c2VDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRoZSBpbWFnZSBhbnltb3JlLiBBbGxvd3MgaXQgdG8gYmUgR0MuXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ltYWdlO1xuICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50V2lkdGggPSB0aGlzLl9pbWFnZS5uYXR1cmFsV2lkdGg7XG4gICAgICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IHRoaXMuX2ltYWdlLm5hdHVyYWxIZWlnaHQ7XG5cbiAgICAgICAgICAgIHZhciBiaWdDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgdmFyIGJpZ0NvbnRleHQgPSBiaWdDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgICAgICBiaWdDYW52YXMud2lkdGggPSBjdXJyZW50V2lkdGg7XG4gICAgICAgICAgICBiaWdDYW52YXMuaGVpZ2h0ID0gY3VycmVudEhlaWdodDtcbiAgICAgICAgICAgIGJpZ0NvbnRleHQuZHJhd0ltYWdlKHRoaXMuX2ltYWdlLCAwLCAwLCBjdXJyZW50V2lkdGgsIGN1cnJlbnRIZWlnaHQpO1xuICAgICAgICAgICAgLy8gV2UgY2FjaGUgdGhlIGNvbnRleHQgb2YgdGhlIGhpZ2hlc3QgbGV2ZWwgYmVjYXVzZSB0aGUgYnJvd3NlclxuICAgICAgICAgICAgLy8gaXMgYSBsb3QgZmFzdGVyIGF0IGRvd25zYW1wbGluZyBzb21ldGhpbmcgaXQgYWxyZWFkeSBoYXNcbiAgICAgICAgICAgIC8vIGRvd25zYW1wbGVkIGJlZm9yZS5cbiAgICAgICAgICAgIGxldmVsc1swXS5jb250ZXh0MkQgPSBiaWdDb250ZXh0O1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgaW1hZ2UgYW55bW9yZS4gQWxsb3dzIGl0IHRvIGJlIEdDLlxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ltYWdlO1xuXG4gICAgICAgICAgICBpZiAoJC5pc0NhbnZhc1RhaW50ZWQoYmlnQ2FudmFzKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjYW52YXMgaXMgdGFpbnRlZCwgd2UgY2FuJ3QgY29tcHV0ZSB0aGUgcHlyYW1pZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGV2ZWxzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBidWlsZCBzbWFsbGVyIGxldmVscyB1bnRpbCBlaXRoZXIgd2lkdGggb3IgaGVpZ2h0IGJlY29tZXNcbiAgICAgICAgICAgIC8vIDEgcGl4ZWwgd2lkZS5cbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50V2lkdGggPj0gMiAmJiBjdXJyZW50SGVpZ2h0ID49IDIpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50V2lkdGggPSBNYXRoLmZsb29yKGN1cnJlbnRXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSBNYXRoLmZsb29yKGN1cnJlbnRIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgc21hbGxDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgICAgIHZhciBzbWFsbENvbnRleHQgPSBzbWFsbENhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICAgICAgc21hbGxDYW52YXMud2lkdGggPSBjdXJyZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgc21hbGxDYW52YXMuaGVpZ2h0ID0gY3VycmVudEhlaWdodDtcbiAgICAgICAgICAgICAgICBzbWFsbENvbnRleHQuZHJhd0ltYWdlKGJpZ0NhbnZhcywgMCwgMCwgY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIGxldmVscy5zcGxpY2UoMCwgMCwge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0MkQ6IHNtYWxsQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBiaWdDYW52YXMgPSBzbWFsbENhbnZhcztcbiAgICAgICAgICAgICAgICBiaWdDb250ZXh0ID0gc21hbGxDb250ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxldmVscztcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KE9wZW5TZWFkcmFnb24pKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBUaWxlU291cmNlQ29sbGVjdGlvblxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4oZnVuY3Rpb24oICQgKXtcblxuLy8gZGVwcmVjYXRlZFxuJC5UaWxlU291cmNlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKCB0aWxlU2l6ZSwgdGlsZVNvdXJjZXMsIHJvd3MsIGxheW91dCAgKSB7XG4gICAgJC5jb25zb2xlLmVycm9yKCdUaWxlU291cmNlQ29sbGVjdGlvbiBpcyBkZXByZWNhdGVkOyB1c2UgV29ybGQgaW5zdGVhZCcpO1xufTtcblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBCdXR0b25cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQW4gZW51bWVyYXRpb24gb2YgYnV0dG9uIHN0YXRlc1xuICogQG1lbWJlciBCdXR0b25TdGF0ZVxuICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJvcGVydHkge051bWJlcn0gUkVTVFxuICogQHByb3BlcnR5IHtOdW1iZXJ9IEdST1VQXG4gKiBAcHJvcGVydHkge051bWJlcn0gSE9WRVJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBET1dOXG4gKi9cbiQuQnV0dG9uU3RhdGUgPSB7XG4gICAgUkVTVDogICAwLFxuICAgIEdST1VQOiAgMSxcbiAgICBIT1ZFUjogIDIsXG4gICAgRE9XTjogICAzXG59O1xuXG4vKipcbiAqIEBjbGFzcyBCdXR0b25cbiAqIEBjbGFzc2Rlc2MgTWFuYWdlcyBldmVudHMsIGhvdmVyIHN0YXRlcyBmb3IgaW5kaXZpZHVhbCBidXR0b25zLCB0b29sLXRpcHMsIGFzIHdlbGxcbiAqIGFzIGZhZGluZyB0aGUgYnV0dG9ucyBvdXQgd2hlbiB0aGUgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGVtXG4gKiBmb3IgYSBzcGVjaWZpZWQgcGVyaW9kLlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAZXh0ZW5kcyBPcGVuU2VhZHJhZ29uLkV2ZW50U291cmNlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtFbGVtZW50fSBbb3B0aW9ucy5lbGVtZW50PW51bGxdIEVsZW1lbnQgdG8gdXNlIGFzIHRoZSBidXR0b24uIElmIG5vdCBzcGVjaWZpZWQsIGFuIEhUTUwgJmx0O2J1dHRvbiZndDsgZWxlbWVudCBpcyBjcmVhdGVkLlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRvb2x0aXA9bnVsbF0gUHJvdmlkZXMgY29udGV4dCBoZWxwIGZvciB0aGUgYnV0dG9uIHdoZW4gdGhlXG4gKiAgdXNlciBob3ZlcnMgb3ZlciBpdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5zcmNSZXN0PW51bGxdIFVSTCBvZiBpbWFnZSB0byB1c2UgaW4gJ3Jlc3QnIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnNyY0dyb3VwPW51bGxdIFVSTCBvZiBpbWFnZSB0byB1c2UgaW4gJ3VwJyBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5zcmNIb3Zlcj1udWxsXSBVUkwgb2YgaW1hZ2UgdG8gdXNlIGluICdob3Zlcicgc3RhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuc3JjRG93bj1udWxsXSBVUkwgb2YgaW1hZ2UgdG8gdXNlIGluICdkb3duJyBzdGF0ZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5mYWRlRGVsYXk9MF0gSG93IGxvbmcgdG8gd2FpdCBiZWZvcmUgZmFkaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZhZGVMZW5ndGg9MjAwMF0gSG93IGxvbmcgc2hvdWxkIGl0IHRha2UgdG8gZmFkZSB0aGUgYnV0dG9uLlxuICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gW29wdGlvbnMub25QcmVzcz1udWxsXSBFdmVudCBoYW5kbGVyIGNhbGxiYWNrIGZvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5CdXR0b24uZXZlbnQ6cHJlc3N9LlxuICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLkV2ZW50SGFuZGxlcn0gW29wdGlvbnMub25SZWxlYXNlPW51bGxdIEV2ZW50IGhhbmRsZXIgY2FsbGJhY2sgZm9yIHtAbGluayBPcGVuU2VhZHJhZ29uLkJ1dHRvbi5ldmVudDpyZWxlYXNlfS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLm9uQ2xpY2s9bnVsbF0gRXZlbnQgaGFuZGxlciBjYWxsYmFjayBmb3Ige0BsaW5rIE9wZW5TZWFkcmFnb24uQnV0dG9uLmV2ZW50OmNsaWNrfS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLm9uRW50ZXI9bnVsbF0gRXZlbnQgaGFuZGxlciBjYWxsYmFjayBmb3Ige0BsaW5rIE9wZW5TZWFkcmFnb24uQnV0dG9uLmV2ZW50OmVudGVyfS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5FdmVudEhhbmRsZXJ9IFtvcHRpb25zLm9uRXhpdD1udWxsXSBFdmVudCBoYW5kbGVyIGNhbGxiYWNrIGZvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5CdXR0b24uZXZlbnQ6ZXhpdH0uXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5vbkZvY3VzPW51bGxdIEV2ZW50IGhhbmRsZXIgY2FsbGJhY2sgZm9yIHtAbGluayBPcGVuU2VhZHJhZ29uLkJ1dHRvbi5ldmVudDpmb2N1c30uXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uRXZlbnRIYW5kbGVyfSBbb3B0aW9ucy5vbkJsdXI9bnVsbF0gRXZlbnQgaGFuZGxlciBjYWxsYmFjayBmb3Ige0BsaW5rIE9wZW5TZWFkcmFnb24uQnV0dG9uLmV2ZW50OmJsdXJ9LlxuICovXG4kLkJ1dHRvbiA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQuRXZlbnRTb3VyY2UuY2FsbCggdGhpcyApO1xuXG4gICAgJC5leHRlbmQoIHRydWUsIHRoaXMsIHtcblxuICAgICAgICB0b29sdGlwOiAgICAgICAgICAgIG51bGwsXG4gICAgICAgIHNyY1Jlc3Q6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgc3JjR3JvdXA6ICAgICAgICAgICBudWxsLFxuICAgICAgICBzcmNIb3ZlcjogICAgICAgICAgIG51bGwsXG4gICAgICAgIHNyY0Rvd246ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgY2xpY2tUaW1lVGhyZXNob2xkOiAkLkRFRkFVTFRfU0VUVElOR1MuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6ICQuREVGQVVMVF9TRVRUSU5HUy5jbGlja0Rpc3RUaHJlc2hvbGQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3cgbG9uZyB0byB3YWl0IGJlZm9yZSBmYWRpbmcuXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gZmFkZURlbGF5XG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkJ1dHRvbiNcbiAgICAgICAgICovXG4gICAgICAgIGZhZGVEZWxheTogICAgICAgICAgMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhvdyBsb25nIHNob3VsZCBpdCB0YWtlIHRvIGZhZGUgdGhlIGJ1dHRvbi5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBmYWRlTGVuZ3RoXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkJ1dHRvbiNcbiAgICAgICAgICovXG4gICAgICAgIGZhZGVMZW5ndGg6ICAgICAgICAgMjAwMCxcbiAgICAgICAgb25QcmVzczogICAgICAgICAgICBudWxsLFxuICAgICAgICBvblJlbGVhc2U6ICAgICAgICAgIG51bGwsXG4gICAgICAgIG9uQ2xpY2s6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgb25FbnRlcjogICAgICAgICAgICBudWxsLFxuICAgICAgICBvbkV4aXQ6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIG9uRm9jdXM6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgb25CbHVyOiAgICAgICAgICAgICBudWxsXG5cbiAgICB9LCBvcHRpb25zICk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYnV0dG9uIGVsZW1lbnQuXG4gICAgICogQG1lbWJlciB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkJ1dHRvbiNcbiAgICAgKi9cbiAgICB0aGlzLmVsZW1lbnQgICAgICAgID0gb3B0aW9ucy5lbGVtZW50ICAgfHwgJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcblxuICAgIC8vaWYgdGhlIHVzZXIgaGFzIHNwZWNpZmllZCB0aGUgZWxlbWVudCB0byBiaW5kIHRoZSBjb250cm9sIHRvIGV4cGxpY2l0bHlcbiAgICAvL3RoZW4gZG8gbm90IGFkZCB0aGUgZGVmYXVsdCBjb250cm9sIGltYWdlc1xuICAgIGlmICggIW9wdGlvbnMuZWxlbWVudCApIHtcbiAgICAgICAgdGhpcy5pbWdSZXN0ICAgICAgPSAkLm1ha2VUcmFuc3BhcmVudEltYWdlKCB0aGlzLnNyY1Jlc3QgKTtcbiAgICAgICAgdGhpcy5pbWdHcm91cCAgICAgPSAkLm1ha2VUcmFuc3BhcmVudEltYWdlKCB0aGlzLnNyY0dyb3VwICk7XG4gICAgICAgIHRoaXMuaW1nSG92ZXIgICAgID0gJC5tYWtlVHJhbnNwYXJlbnRJbWFnZSggdGhpcy5zcmNIb3ZlciApO1xuICAgICAgICB0aGlzLmltZ0Rvd24gICAgICA9ICQubWFrZVRyYW5zcGFyZW50SW1hZ2UoIHRoaXMuc3JjRG93biApO1xuXG4gICAgICAgIHRoaXMuaW1nUmVzdC5hbHQgID1cbiAgICAgICAgdGhpcy5pbWdHcm91cC5hbHQgPVxuICAgICAgICB0aGlzLmltZ0hvdmVyLmFsdCA9XG4gICAgICAgIHRoaXMuaW1nRG93bi5hbHQgID1cbiAgICAgICAgICAgIHRoaXMudG9vbHRpcDtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICQuc2V0RWxlbWVudFRvdWNoQWN0aW9uTm9uZSggdGhpcy5lbGVtZW50ICk7XG5cbiAgICAgICAgdGhpcy5pbWdHcm91cC5zdHlsZS5wb3NpdGlvbiA9XG4gICAgICAgIHRoaXMuaW1nSG92ZXIuc3R5bGUucG9zaXRpb24gPVxuICAgICAgICB0aGlzLmltZ0Rvd24uc3R5bGUucG9zaXRpb24gID1cbiAgICAgICAgICAgIFwiYWJzb2x1dGVcIjtcblxuICAgICAgICB0aGlzLmltZ0dyb3VwLnN0eWxlLnRvcCA9XG4gICAgICAgIHRoaXMuaW1nSG92ZXIuc3R5bGUudG9wID1cbiAgICAgICAgdGhpcy5pbWdEb3duLnN0eWxlLnRvcCAgPVxuICAgICAgICAgICAgXCIwcHhcIjtcblxuICAgICAgICB0aGlzLmltZ0dyb3VwLnN0eWxlLmxlZnQgPVxuICAgICAgICB0aGlzLmltZ0hvdmVyLnN0eWxlLmxlZnQgPVxuICAgICAgICB0aGlzLmltZ0Rvd24uc3R5bGUubGVmdCAgPVxuICAgICAgICAgICAgXCIwcHhcIjtcblxuICAgICAgICB0aGlzLmltZ0hvdmVyLnN0eWxlLnZpc2liaWxpdHkgPVxuICAgICAgICB0aGlzLmltZ0Rvd24uc3R5bGUudmlzaWJpbGl0eSAgPVxuICAgICAgICAgICAgXCJoaWRkZW5cIjtcblxuICAgICAgICBpZiAoICQuQnJvd3Nlci52ZW5kb3IgPT0gJC5CUk9XU0VSUy5GSVJFRk9YICAmJiAkLkJyb3dzZXIudmVyc2lvbiA8IDMgKXtcbiAgICAgICAgICAgIHRoaXMuaW1nR3JvdXAuc3R5bGUudG9wID1cbiAgICAgICAgICAgIHRoaXMuaW1nSG92ZXIuc3R5bGUudG9wID1cbiAgICAgICAgICAgIHRoaXMuaW1nRG93bi5zdHlsZS50b3AgID1cbiAgICAgICAgICAgICAgICBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmltZ1Jlc3QgKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmltZ0dyb3VwICk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy5pbWdIb3ZlciApO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuaW1nRG93biApO1xuICAgIH1cblxuXG4gICAgdGhpcy5hZGRIYW5kbGVyKCBcInByZXNzXCIsICAgICB0aGlzLm9uUHJlc3MgKTtcbiAgICB0aGlzLmFkZEhhbmRsZXIoIFwicmVsZWFzZVwiLCAgIHRoaXMub25SZWxlYXNlICk7XG4gICAgdGhpcy5hZGRIYW5kbGVyKCBcImNsaWNrXCIsICAgICB0aGlzLm9uQ2xpY2sgKTtcbiAgICB0aGlzLmFkZEhhbmRsZXIoIFwiZW50ZXJcIiwgICAgIHRoaXMub25FbnRlciApO1xuICAgIHRoaXMuYWRkSGFuZGxlciggXCJleGl0XCIsICAgICAgdGhpcy5vbkV4aXQgKTtcbiAgICB0aGlzLmFkZEhhbmRsZXIoIFwiZm9jdXNcIiwgICAgIHRoaXMub25Gb2N1cyApO1xuICAgIHRoaXMuYWRkSGFuZGxlciggXCJibHVyXCIsICAgICAgdGhpcy5vbkJsdXIgKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBidXR0b24ncyBjdXJyZW50IHN0YXRlLlxuICAgICAqIEBtZW1iZXIge09wZW5TZWFkcmFnb24uQnV0dG9uU3RhdGV9IGN1cnJlbnRTdGF0ZVxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkJ1dHRvbiNcbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9ICQuQnV0dG9uU3RhdGUuR1JPVVA7XG5cbiAgICAvLyBXaGVuIHRoZSBidXR0b24gbGFzdCBiZWdhbiB0byBmYWRlLlxuICAgIHRoaXMuZmFkZUJlZ2luVGltZSAgPSBudWxsO1xuICAgIC8vIFdoZXRoZXIgdGhpcyBidXR0b24gc2hvdWxkIGZhZGUgYWZ0ZXIgdXNlciBzdG9wcyBpbnRlcmFjdGluZyB3aXRoIHRoZSB2aWV3cG9ydC5cbiAgICB0aGlzLnNob3VsZEZhZGUgICAgID0gZmFsc2U7XG5cbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICB0aGlzLmVsZW1lbnQudGl0bGUgICAgICAgICAgPSB0aGlzLnRvb2x0aXA7XG5cbiAgICAvKipcbiAgICAgKiBUcmFja3MgbW91c2UvdG91Y2gva2V5IGV2ZW50cyBvbiB0aGUgYnV0dG9uLlxuICAgICAqIEBtZW1iZXIge09wZW5TZWFkcmFnb24uTW91c2VUcmFja2VyfSB0cmFja2VyXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uI1xuICAgICAqL1xuICAgIHRoaXMudHJhY2tlciA9IG5ldyAkLk1vdXNlVHJhY2tlcih7XG5cbiAgICAgICAgZWxlbWVudDogICAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgIGNsaWNrVGltZVRocmVzaG9sZDogdGhpcy5jbGlja1RpbWVUaHJlc2hvbGQsXG4gICAgICAgIGNsaWNrRGlzdFRocmVzaG9sZDogdGhpcy5jbGlja0Rpc3RUaHJlc2hvbGQsXG5cbiAgICAgICAgZW50ZXJIYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgICAgICBpZiAoIGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkICkge1xuICAgICAgICAgICAgICAgIGluVG8oIF90aGlzLCAkLkJ1dHRvblN0YXRlLkRPV04gKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgY3Vyc29yIGVudGVycyB0aGUgQnV0dG9uIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAZXZlbnQgZW50ZXJcbiAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5CdXR0b259IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIEJ1dHRvbiB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggXCJlbnRlclwiLCB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfSApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggIWV2ZW50LmJ1dHRvbkRvd25BbnkgKSB7XG4gICAgICAgICAgICAgICAgaW5UbyggX3RoaXMsICQuQnV0dG9uU3RhdGUuSE9WRVIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmb2N1c0hhbmRsZXI6IGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgICAgICB0aGlzLmVudGVySGFuZGxlciggZXZlbnQgKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIEJ1dHRvbiBlbGVtZW50IHJlY2VpdmVzIGZvY3VzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCBmb2N1c1xuICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uXG4gICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLkJ1dHRvbn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgQnV0dG9uIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoIFwiZm9jdXNcIiwgeyBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50IH0gKTtcbiAgICAgICAgfSxcblxuICAgICAgICBleGl0SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgb3V0VG8oIF90aGlzLCAkLkJ1dHRvblN0YXRlLkdST1VQICk7XG4gICAgICAgICAgICBpZiAoIGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkICkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSBjdXJzb3IgbGVhdmVzIHRoZSBCdXR0b24gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBldmVudCBleGl0XG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uXG4gICAgICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQnV0dG9ufSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBCdXR0b24gd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoIFwiZXhpdFwiLCB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGJsdXJIYW5kbGVyOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuICAgICAgICAgICAgdGhpcy5leGl0SGFuZGxlciggZXZlbnQgKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIEJ1dHRvbiBlbGVtZW50IGxvc2VzIGZvY3VzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCBibHVyXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25cbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQnV0dG9ufSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBCdXR0b24gd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggXCJibHVyXCIsIHsgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudCB9ICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHJlc3NIYW5kbGVyOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuICAgICAgICAgICAgaW5UbyggX3RoaXMsICQuQnV0dG9uU3RhdGUuRE9XTiApO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIG9yIHRvdWNoIG9jY3VycyBpbiB0aGUgQnV0dG9uIGVsZW1lbnQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV2ZW50IHByZXNzXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25cbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQnV0dG9ufSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBCdXR0b24gd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggXCJwcmVzc1wiLCB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfSApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbGVhc2VIYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgICAgICBpZiAoIGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkICYmIGV2ZW50Lmluc2lkZUVsZW1lbnRSZWxlYXNlZCApIHtcbiAgICAgICAgICAgICAgICBvdXRUbyggX3RoaXMsICQuQnV0dG9uU3RhdGUuSE9WRVIgKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkIG9yIHRvdWNoIGVuZHMgaW4gdGhlIEJ1dHRvbiBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQGV2ZW50IHJlbGVhc2VcbiAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5CdXR0b259IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIEJ1dHRvbiB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudCggXCJyZWxlYXNlXCIsIHsgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudCB9ICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBldmVudC5pbnNpZGVFbGVtZW50UHJlc3NlZCApIHtcbiAgICAgICAgICAgICAgICBvdXRUbyggX3RoaXMsICQuQnV0dG9uU3RhdGUuR1JPVVAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5UbyggX3RoaXMsICQuQnV0dG9uU3RhdGUuSE9WRVIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICAgICAgICAgIGlmICggZXZlbnQucXVpY2sgKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCBhbmQgcmVsZWFzZWQgb3IgdG91Y2ggaXMgaW5pdGlhdGVkIGFuZCBlbmRlZCBpbiB0aGUgQnV0dG9uIGVsZW1lbnQgd2l0aGluIHRoZSB0aW1lIGFuZCBkaXN0YW5jZSB0aHJlc2hvbGQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAZXZlbnQgY2xpY2tcbiAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5CdXR0b259IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIEJ1dHRvbiB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IC0gVGhlIG9yaWdpbmFsIERPTSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3RoaXMucmFpc2VFdmVudChcImNsaWNrXCIsIHsgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBrZXlIYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKXtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIFwiJXMgOiBoYW5kbGluZyBrZXkgJXMhXCIsIF90aGlzLnRvb2x0aXAsIGV2ZW50LmtleUNvZGUpO1xuICAgICAgICAgICAgaWYoIDEzID09PSBldmVudC5rZXlDb2RlICl7XG4gICAgICAgICAgICAgICAgLyoqKlxuICAgICAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWQgYW5kIHJlbGVhc2VkIG9yIHRvdWNoIGlzIGluaXRpYXRlZCBhbmQgZW5kZWQgaW4gdGhlIEJ1dHRvbiBlbGVtZW50IHdpdGhpbiB0aGUgdGltZSBhbmQgZGlzdGFuY2UgdGhyZXNob2xkLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQGV2ZW50IGNsaWNrXG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uXG4gICAgICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQnV0dG9ufSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBCdXR0b24gd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoIFwiY2xpY2tcIiwgeyBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50IH0gKTtcbiAgICAgICAgICAgICAgICAvKioqXG4gICAgICAgICAgICAgICAgICogUmFpc2VkIHdoZW4gdGhlIG1vdXNlIGJ1dHRvbiBpcyByZWxlYXNlZCBvciB0b3VjaCBlbmRzIGluIHRoZSBCdXR0b24gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBldmVudCByZWxlYXNlXG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uXG4gICAgICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uQnV0dG9ufSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBCdXR0b24gd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBET00gZXZlbnQuXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF90aGlzLnJhaXNlRXZlbnQoIFwicmVsZWFzZVwiLCB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfSApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIG91dFRvKCB0aGlzLCAkLkJ1dHRvblN0YXRlLlJFU1QgKTtcbn07XG5cbiQuZXh0ZW5kKCAkLkJ1dHRvbi5wcm90b3R5cGUsICQuRXZlbnRTb3VyY2UucHJvdG90eXBlLCAvKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uQnV0dG9uLnByb3RvdHlwZSAqL3tcblxuICAgIC8qKlxuICAgICAqIFRPRE86IERldGVybWluZSB3aGF0IHRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgdG8gZG8gYW5kIGlmIGl0J3MgYWN0dWFsbHlcbiAgICAgKiB1c2VmdWwgYXMgYW4gQVBJIHBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIG5vdGlmeUdyb3VwRW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpblRvKCB0aGlzLCAkLkJ1dHRvblN0YXRlLkdST1VQICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRPRE86IERldGVybWluZSB3aGF0IHRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgdG8gZG8gYW5kIGlmIGl0J3MgYWN0dWFsbHlcbiAgICAgKiB1c2VmdWwgYXMgYW4gQVBJIHBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIG5vdGlmeUdyb3VwRXhpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIG91dFRvKCB0aGlzLCAkLkJ1dHRvblN0YXRlLlJFU1QgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgZGlzYWJsZTogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5ub3RpZnlHcm91cEV4aXQoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgJC5zZXRFbGVtZW50T3BhY2l0eSggdGhpcy5lbGVtZW50LCAwLjIsIHRydWUgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgZW5hYmxlOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgJC5zZXRFbGVtZW50T3BhY2l0eSggdGhpcy5lbGVtZW50LCAxLjAsIHRydWUgKTtcbiAgICAgICAgdGhpcy5ub3RpZnlHcm91cEVudGVyKCk7XG4gICAgfVxuXG59KTtcblxuXG5mdW5jdGlvbiBzY2hlZHVsZUZhZGUoIGJ1dHRvbiApIHtcbiAgICAkLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe1xuICAgICAgICB1cGRhdGVGYWRlKCBidXR0b24gKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRmFkZSggYnV0dG9uICkge1xuICAgIHZhciBjdXJyZW50VGltZSxcbiAgICAgICAgZGVsdGFUaW1lLFxuICAgICAgICBvcGFjaXR5O1xuXG4gICAgaWYgKCBidXR0b24uc2hvdWxkRmFkZSApIHtcbiAgICAgICAgY3VycmVudFRpbWUgPSAkLm5vdygpO1xuICAgICAgICBkZWx0YVRpbWUgICA9IGN1cnJlbnRUaW1lIC0gYnV0dG9uLmZhZGVCZWdpblRpbWU7XG4gICAgICAgIG9wYWNpdHkgICAgID0gMS4wIC0gZGVsdGFUaW1lIC8gYnV0dG9uLmZhZGVMZW5ndGg7XG4gICAgICAgIG9wYWNpdHkgICAgID0gTWF0aC5taW4oIDEuMCwgb3BhY2l0eSApO1xuICAgICAgICBvcGFjaXR5ICAgICA9IE1hdGgubWF4KCAwLjAsIG9wYWNpdHkgKTtcblxuICAgICAgICBpZiggYnV0dG9uLmltZ0dyb3VwICl7XG4gICAgICAgICAgICAkLnNldEVsZW1lbnRPcGFjaXR5KCBidXR0b24uaW1nR3JvdXAsIG9wYWNpdHksIHRydWUgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIG9wYWNpdHkgPiAwICkge1xuICAgICAgICAgICAgLy8gZmFkZSBhZ2FpblxuICAgICAgICAgICAgc2NoZWR1bGVGYWRlKCBidXR0b24gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYmVnaW5GYWRpbmcoIGJ1dHRvbiApIHtcbiAgICBidXR0b24uc2hvdWxkRmFkZSA9IHRydWU7XG4gICAgYnV0dG9uLmZhZGVCZWdpblRpbWUgPSAkLm5vdygpICsgYnV0dG9uLmZhZGVEZWxheTtcbiAgICB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgICAgc2NoZWR1bGVGYWRlKCBidXR0b24gKTtcbiAgICB9LCBidXR0b24uZmFkZURlbGF5ICk7XG59XG5cbmZ1bmN0aW9uIHN0b3BGYWRpbmcoIGJ1dHRvbiApIHtcbiAgICBidXR0b24uc2hvdWxkRmFkZSA9IGZhbHNlO1xuICAgIGlmKCBidXR0b24uaW1nR3JvdXAgKXtcbiAgICAgICAgJC5zZXRFbGVtZW50T3BhY2l0eSggYnV0dG9uLmltZ0dyb3VwLCAxLjAsIHRydWUgKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluVG8oIGJ1dHRvbiwgbmV3U3RhdGUgKSB7XG5cbiAgICBpZiggYnV0dG9uLmVsZW1lbnQuZGlzYWJsZWQgKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICggbmV3U3RhdGUgPj0gJC5CdXR0b25TdGF0ZS5HUk9VUCAmJlxuICAgICAgICAgYnV0dG9uLmN1cnJlbnRTdGF0ZSA9PSAkLkJ1dHRvblN0YXRlLlJFU1QgKSB7XG4gICAgICAgIHN0b3BGYWRpbmcoIGJ1dHRvbiApO1xuICAgICAgICBidXR0b24uY3VycmVudFN0YXRlID0gJC5CdXR0b25TdGF0ZS5HUk9VUDtcbiAgICB9XG5cbiAgICBpZiAoIG5ld1N0YXRlID49ICQuQnV0dG9uU3RhdGUuSE9WRVIgJiZcbiAgICAgICAgIGJ1dHRvbi5jdXJyZW50U3RhdGUgPT0gJC5CdXR0b25TdGF0ZS5HUk9VUCApIHtcbiAgICAgICAgaWYoIGJ1dHRvbi5pbWdIb3ZlciApe1xuICAgICAgICAgICAgYnV0dG9uLmltZ0hvdmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbi5jdXJyZW50U3RhdGUgPSAkLkJ1dHRvblN0YXRlLkhPVkVSO1xuICAgIH1cblxuICAgIGlmICggbmV3U3RhdGUgPj0gJC5CdXR0b25TdGF0ZS5ET1dOICYmXG4gICAgICAgICBidXR0b24uY3VycmVudFN0YXRlID09ICQuQnV0dG9uU3RhdGUuSE9WRVIgKSB7XG4gICAgICAgIGlmKCBidXR0b24uaW1nRG93biApe1xuICAgICAgICAgICAgYnV0dG9uLmltZ0Rvd24uc3R5bGUudmlzaWJpbGl0eSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uLmN1cnJlbnRTdGF0ZSA9ICQuQnV0dG9uU3RhdGUuRE9XTjtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gb3V0VG8oIGJ1dHRvbiwgbmV3U3RhdGUgKSB7XG5cbiAgICBpZiggYnV0dG9uLmVsZW1lbnQuZGlzYWJsZWQgKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICggbmV3U3RhdGUgPD0gJC5CdXR0b25TdGF0ZS5IT1ZFUiAmJlxuICAgICAgICAgYnV0dG9uLmN1cnJlbnRTdGF0ZSA9PSAkLkJ1dHRvblN0YXRlLkRPV04gKSB7XG4gICAgICAgIGlmKCBidXR0b24uaW1nRG93biApe1xuICAgICAgICAgICAgYnV0dG9uLmltZ0Rvd24uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uLmN1cnJlbnRTdGF0ZSA9ICQuQnV0dG9uU3RhdGUuSE9WRVI7XG4gICAgfVxuXG4gICAgaWYgKCBuZXdTdGF0ZSA8PSAkLkJ1dHRvblN0YXRlLkdST1VQICYmXG4gICAgICAgICBidXR0b24uY3VycmVudFN0YXRlID09ICQuQnV0dG9uU3RhdGUuSE9WRVIgKSB7XG4gICAgICAgIGlmKCBidXR0b24uaW1nSG92ZXIgKXtcbiAgICAgICAgICAgIGJ1dHRvbi5pbWdIb3Zlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBidXR0b24uY3VycmVudFN0YXRlID0gJC5CdXR0b25TdGF0ZS5HUk9VUDtcbiAgICB9XG5cbiAgICBpZiAoIG5ld1N0YXRlIDw9ICQuQnV0dG9uU3RhdGUuUkVTVCAmJlxuICAgICAgICAgYnV0dG9uLmN1cnJlbnRTdGF0ZSA9PSAkLkJ1dHRvblN0YXRlLkdST1VQICkge1xuICAgICAgICBiZWdpbkZhZGluZyggYnV0dG9uICk7XG4gICAgICAgIGJ1dHRvbi5jdXJyZW50U3RhdGUgPSAkLkJ1dHRvblN0YXRlLlJFU1Q7XG4gICAgfVxufVxuXG5cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBCdXR0b25Hcm91cFxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4oZnVuY3Rpb24oICQgKXtcbi8qKlxuICogQGNsYXNzIEJ1dHRvbkdyb3VwXG4gKiBAY2xhc3NkZXNjIE1hbmFnZXMgZXZlbnRzIG9uIGdyb3VwcyBvZiBidXR0b25zLlxuICpcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEEgZGljdGlvbmFyeSBvZiBzZXR0aW5ncyBhcHBsaWVkIGFnYWluc3QgdGhlIGVudGlyZSBncm91cCBvZiBidXR0b25zLlxuICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucy5idXR0b25zIEFycmF5IG9mIGJ1dHRvbnNcbiAqIEBwYXJhbSB7RWxlbWVudH0gW29wdGlvbnMuZWxlbWVudF0gRWxlbWVudCB0byB1c2UgYXMgdGhlIGNvbnRhaW5lclxuICoqL1xuJC5CdXR0b25Hcm91cCA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG4gICAgJC5leHRlbmQoIHRydWUsIHRoaXMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGJ1dHRvbnMgdGhlbXNlbHZlcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXl9IGJ1dHRvbnNcbiAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uQnV0dG9uR3JvdXAjXG4gICAgICAgICAqL1xuICAgICAgICBidXR0b25zOiAgICAgICAgICAgIFtdLFxuICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6ICQuREVGQVVMVF9TRVRUSU5HUy5jbGlja1RpbWVUaHJlc2hvbGQsXG4gICAgICAgIGNsaWNrRGlzdFRocmVzaG9sZDogJC5ERUZBVUxUX1NFVFRJTkdTLmNsaWNrRGlzdFRocmVzaG9sZCxcbiAgICAgICAgbGFiZWxUZXh0OiAgICAgICAgICBcIlwiXG4gICAgfSwgb3B0aW9ucyApO1xuXG4gICAgLy8gY29weSB0aGUgYnV0dG9uIGVsZW1lbnRzICBUT0RPOiBXaHk/XG4gICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmJ1dHRvbnMuY29uY2F0KFtdKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICBpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNoYXJlZCBjb250YWluZXIgZm9yIHRoZSBidXR0b25zLlxuICAgICAqIEBtZW1iZXIge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5CdXR0b25Hcm91cCNcbiAgICAgKi9cbiAgICB0aGlzLmVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQgfHwgJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwiZGl2XCIgKTtcblxuICAgIC8vIFRPRE8gV2hhdCBpZiB0aGVyZSBJUyBhbiBvcHRpb25zLmdyb3VwIHNwZWNpZmllZD9cbiAgICBpZiggIW9wdGlvbnMuZ3JvdXAgKXtcbiAgICAgICAgdGhpcy5sYWJlbCAgID0gJC5tYWtlTmV1dHJhbEVsZW1lbnQoIFwibGFiZWxcIiApO1xuICAgICAgICAvL1RPRE86IHN1cHBvcnQgbGFiZWxzIGZvciBCdXR0b25Hcm91cHNcbiAgICAgICAgLy90aGlzLmxhYmVsLmlubmVySFRNTCA9IHRoaXMubGFiZWxUZXh0O1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy5sYWJlbCApO1xuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIGJ1dHRvbnNbIGkgXS5lbGVtZW50ICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkLnNldEVsZW1lbnRUb3VjaEFjdGlvbk5vbmUoIHRoaXMuZWxlbWVudCApO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2tzIG1vdXNlL3RvdWNoL2tleSBldmVudHMgYWNjcm9zcyB0aGUgZ3JvdXAgb2YgYnV0dG9ucy5cbiAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLk1vdXNlVHJhY2tlcn0gdHJhY2tlclxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkJ1dHRvbkdyb3VwI1xuICAgICAqL1xuICAgIHRoaXMudHJhY2tlciA9IG5ldyAkLk1vdXNlVHJhY2tlcih7XG4gICAgICAgIGVsZW1lbnQ6ICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICBjbGlja1RpbWVUaHJlc2hvbGQ6IHRoaXMuY2xpY2tUaW1lVGhyZXNob2xkLFxuICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICBlbnRlckhhbmRsZXI6IGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgX3RoaXMuYnV0dG9ucy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5idXR0b25zWyBpIF0ubm90aWZ5R3JvdXBFbnRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBleGl0SGFuZGxlcjogZnVuY3Rpb24gKCBldmVudCApIHtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgaWYgKCAhZXZlbnQuaW5zaWRlRWxlbWVudFByZXNzZWQgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBfdGhpcy5idXR0b25zLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idXR0b25zWyBpIF0ubm90aWZ5R3JvdXBFeGl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufTtcblxuLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLkJ1dHRvbkdyb3VwLnByb3RvdHlwZSAqL1xuJC5CdXR0b25Hcm91cC5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBGaWd1cmUgb3V0IHdoeSB0aGlzIGlzIHVzZWQgb24gdGhlIHB1YmxpYyBBUEkgYW5kIGlmIGEgbW9yZSB1c2VmdWxcbiAgICAgKiBhcGkgY2FuIGJlIGNyZWF0ZWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbXVsYXRlRW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRyYWNrZXIuZW50ZXJIYW5kbGVyKCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIgfSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBGaWd1cmUgb3V0IHdoeSB0aGlzIGlzIHVzZWQgb24gdGhlIHB1YmxpYyBBUEkgYW5kIGlmIGEgbW9yZSB1c2VmdWxcbiAgICAgKiBhcGkgY2FuIGJlIGNyZWF0ZWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbXVsYXRlRXhpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudHJhY2tlci5leGl0SGFuZGxlciggeyBldmVudFNvdXJjZTogdGhpcy50cmFja2VyIH0gKTtcbiAgICB9XG59O1xuXG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gUmVjdFxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBDb2RlUGxleCBGb3VuZGF0aW9uIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gKiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4oZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEBjbGFzcyBSZWN0XG4gKiBAY2xhc3NkZXNjIEEgUmVjdGFuZ2xlIGlzIGRlc2NyaWJlZCBieSBpdCB0b3AgbGVmdCBjb29yZGluYXRlcyAoeCwgeSksIHdpZHRoLFxuICogaGVpZ2h0IGFuZCBkZWdyZWVzIG9mIHJvdGF0aW9uIGFyb3VuZCAoeCwgeSkuXG4gKiBOb3RlIHRoYXQgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIHVzZWQgaXMgdGhlIG9uZSBjb21tb25seSB1c2VkIHdpdGggaW1hZ2VzOlxuICogeCBpbmNyZWFzZXMgd2hlbiBnb2luZyB0byB0aGUgcmlnaHRcbiAqIHkgaW5jcmVhc2VzIHdoZW4gZ29pbmcgdG8gdGhlIGJvdHRvbVxuICogZGVncmVlcyBpbmNyZWFzZXMgY2xvY2t3aXNlIHdpdGggMCBiZWluZyB0aGUgaG9yaXpvbnRhbFxuICpcbiAqIFRoZSBjb25zdHJ1Y3RvciBub3JtYWxpemVzIHRoZSByZWN0YW5nbGUgdG8gYWx3YXlzIGhhdmUgMCA8PSBkZWdyZWVzIDwgOTBcbiAqXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQHBhcmFtIHtOdW1iZXJ9IFt4PTBdIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd4Jy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeT0wXSBUaGUgdmVjdG9yIGNvbXBvbmVudCAneScuXG4gKiBAcGFyYW0ge051bWJlcn0gW3dpZHRoPTBdIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd3aWR0aCcuXG4gKiBAcGFyYW0ge051bWJlcn0gW2hlaWdodD0wXSBUaGUgdmVjdG9yIGNvbXBvbmVudCAnaGVpZ2h0Jy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVncmVlcz0wXSBSb3RhdGlvbiBvZiB0aGUgcmVjdGFuZ2xlIGFyb3VuZCAoeCx5KSBpbiBkZWdyZWVzLlxuICovXG4kLlJlY3QgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBkZWdyZWVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHZlY3RvciBjb21wb25lbnQgJ3gnLlxuICAgICAqIEBtZW1iZXIge051bWJlcn0geFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlJlY3QjXG4gICAgICovXG4gICAgdGhpcy54ID0gdHlwZW9mKHgpID09PSBcIm51bWJlclwiID8geCA6IDA7XG4gICAgLyoqXG4gICAgICogVGhlIHZlY3RvciBjb21wb25lbnQgJ3knLlxuICAgICAqIEBtZW1iZXIge051bWJlcn0geVxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlJlY3QjXG4gICAgICovXG4gICAgdGhpcy55ID0gdHlwZW9mKHkpID09PSBcIm51bWJlclwiID8geSA6IDA7XG4gICAgLyoqXG4gICAgICogVGhlIHZlY3RvciBjb21wb25lbnQgJ3dpZHRoJy5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHdpZHRoXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uUmVjdCNcbiAgICAgKi9cbiAgICB0aGlzLndpZHRoICA9IHR5cGVvZih3aWR0aCkgPT09IFwibnVtYmVyXCIgPyB3aWR0aCA6IDA7XG4gICAgLyoqXG4gICAgICogVGhlIHZlY3RvciBjb21wb25lbnQgJ2hlaWdodCcuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5SZWN0I1xuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gdHlwZW9mKGhlaWdodCkgPT09IFwibnVtYmVyXCIgPyBoZWlnaHQgOiAwO1xuXG4gICAgdGhpcy5kZWdyZWVzID0gdHlwZW9mKGRlZ3JlZXMpID09PSBcIm51bWJlclwiID8gZGVncmVlcyA6IDA7XG5cbiAgICAvLyBOb3JtYWxpemVzIHRoZSByZWN0YW5nbGUuXG4gICAgdGhpcy5kZWdyZWVzID0gdGhpcy5kZWdyZWVzICUgMzYwO1xuICAgIGlmICh0aGlzLmRlZ3JlZXMgPCAwKSB7XG4gICAgICAgIHRoaXMuZGVncmVlcyArPSAzNjA7XG4gICAgfVxuICAgIHZhciBuZXdUb3BMZWZ0LCBuZXdXaWR0aDtcbiAgICBpZiAodGhpcy5kZWdyZWVzID49IDI3MCkge1xuICAgICAgICBuZXdUb3BMZWZ0ID0gdGhpcy5nZXRUb3BSaWdodCgpO1xuICAgICAgICB0aGlzLnggPSBuZXdUb3BMZWZ0Lng7XG4gICAgICAgIHRoaXMueSA9IG5ld1RvcExlZnQueTtcbiAgICAgICAgbmV3V2lkdGggPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB0aGlzLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIHRoaXMuZGVncmVlcyAtPSAyNzA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRlZ3JlZXMgPj0gMTgwKSB7XG4gICAgICAgIG5ld1RvcExlZnQgPSB0aGlzLmdldEJvdHRvbVJpZ2h0KCk7XG4gICAgICAgIHRoaXMueCA9IG5ld1RvcExlZnQueDtcbiAgICAgICAgdGhpcy55ID0gbmV3VG9wTGVmdC55O1xuICAgICAgICB0aGlzLmRlZ3JlZXMgLT0gMTgwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kZWdyZWVzID49IDkwKSB7XG4gICAgICAgIG5ld1RvcExlZnQgPSB0aGlzLmdldEJvdHRvbUxlZnQoKTtcbiAgICAgICAgdGhpcy54ID0gbmV3VG9wTGVmdC54O1xuICAgICAgICB0aGlzLnkgPSBuZXdUb3BMZWZ0Lnk7XG4gICAgICAgIG5ld1dpZHRoID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICAgICAgdGhpcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICB0aGlzLmRlZ3JlZXMgLT0gOTA7XG4gICAgfVxufTtcblxuLyoqXG4gKiBCdWlsZHMgYSByZWN0YW5nbGUgaGF2aW5nIHRoZSAzIHNwZWNpZmllZCBwb2ludHMgYXMgc3VtbWl0cy5cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlJlY3RcbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gdG9wTGVmdFxuICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSB0b3BSaWdodFxuICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBib3R0b21MZWZ0XG4gKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fVxuICovXG4kLlJlY3QuZnJvbVN1bW1pdHMgPSBmdW5jdGlvbih0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCkge1xuICAgIHZhciB3aWR0aCA9IHRvcExlZnQuZGlzdGFuY2VUbyh0b3BSaWdodCk7XG4gICAgdmFyIGhlaWdodCA9IHRvcExlZnQuZGlzdGFuY2VUbyhib3R0b21MZWZ0KTtcbiAgICB2YXIgZGlmZiA9IHRvcFJpZ2h0Lm1pbnVzKHRvcExlZnQpO1xuICAgIHZhciByYWRpYW5zID0gTWF0aC5hdGFuKGRpZmYueSAvIGRpZmYueCk7XG4gICAgaWYgKGRpZmYueCA8IDApIHtcbiAgICAgICAgcmFkaWFucyArPSBNYXRoLlBJO1xuICAgIH0gZWxzZSBpZiAoZGlmZi55IDwgMCkge1xuICAgICAgICByYWRpYW5zICs9IDIgKiBNYXRoLlBJO1xuICAgIH1cbiAgICByZXR1cm4gbmV3ICQuUmVjdChcbiAgICAgICAgdG9wTGVmdC54LFxuICAgICAgICB0b3BMZWZ0LnksXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHJhZGlhbnMgLyBNYXRoLlBJICogMTgwKTtcbn07XG5cbi8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5SZWN0LnByb3RvdHlwZSAqL1xuJC5SZWN0LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBhIGR1cGxpY2F0ZSBvZiB0aGlzIFJlY3RcbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgdGhpcy54LFxuICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgdGhpcy53aWR0aCxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgdGhpcy5kZWdyZWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGFzcGVjdCByYXRpbyBpcyBzaW1wbHkgdGhlIHJhdGlvIG9mIHdpZHRoIHRvIGhlaWdodC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgcmF0aW8gb2Ygd2lkdGggdG8gaGVpZ2h0LlxuICAgICAqL1xuICAgIGdldEFzcGVjdFJhdGlvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlIGFzIGFcbiAgICAgKiBwb2ludC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH0gVGhlIGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mXG4gICAgICogIHRoZSByZWN0YW5nbGUuXG4gICAgICovXG4gICAgZ2V0VG9wTGVmdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgIHRoaXMueCxcbiAgICAgICAgICAgIHRoaXMueVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGJvdHRvbS1yaWdodCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZSBhcyBhXG4gICAgICogcG9pbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBjb29yZGluYXRlIG9mIHRoZSBib3R0b20tcmlnaHQgY29ybmVyIG9mXG4gICAgICogIHRoZSByZWN0YW5nbGUuXG4gICAgICovXG4gICAgZ2V0Qm90dG9tUmlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQodGhpcy54ICsgdGhpcy53aWR0aCwgdGhpcy55ICsgdGhpcy5oZWlnaHQpXG4gICAgICAgICAgICAucm90YXRlKHRoaXMuZGVncmVlcywgdGhpcy5nZXRUb3BMZWZ0KCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHRvcC1yaWdodCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZSBhcyBhXG4gICAgICogcG9pbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBjb29yZGluYXRlIG9mIHRoZSB0b3AtcmlnaHQgY29ybmVyIG9mXG4gICAgICogIHRoZSByZWN0YW5nbGUuXG4gICAgICovXG4gICAgZ2V0VG9wUmlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQodGhpcy54ICsgdGhpcy53aWR0aCwgdGhpcy55KVxuICAgICAgICAgICAgLnJvdGF0ZSh0aGlzLmRlZ3JlZXMsIHRoaXMuZ2V0VG9wTGVmdCgpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBib3R0b20tbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZSBhcyBhXG4gICAgICogcG9pbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBjb29yZGluYXRlIG9mIHRoZSBib3R0b20tbGVmdCBjb3JuZXIgb2ZcbiAgICAgKiAgdGhlIHJlY3RhbmdsZS5cbiAgICAgKi9cbiAgICBnZXRCb3R0b21MZWZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KHRoaXMueCwgdGhpcy55ICsgdGhpcy5oZWlnaHQpXG4gICAgICAgICAgICAucm90YXRlKHRoaXMuZGVncmVlcywgdGhpcy5nZXRUb3BMZWZ0KCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgY2VudGVyIG9mIHRoZSByZWN0YW5nbGUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBjZW50ZXIgb2YgdGhlIHJlY3RhbmdsZSBhcyByZXByZXNlbnRlZFxuICAgICAqICBhcyByZXByZXNlbnRlZCBieSBhIDItZGltZW5zaW9uYWwgdmVjdG9yICh4LHkpXG4gICAgICovXG4gICAgZ2V0Q2VudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgdGhpcy54ICsgdGhpcy53aWR0aCAvIDIuMCxcbiAgICAgICAgICAgIHRoaXMueSArIHRoaXMuaGVpZ2h0IC8gMi4wXG4gICAgICAgICkucm90YXRlKHRoaXMuZGVncmVlcywgdGhpcy5nZXRUb3BMZWZ0KCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGNvbXBvbmVudCBhcyBhIHZlY3RvciBPcGVuU2VhZHJhZ29uLlBvaW50XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSAyIGRpbWVuc2lvbmFsIHZlY3RvciByZXByZXNlbnRpbmcgdGhlXG4gICAgICogIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSByZWN0YW5nbGUuXG4gICAgICovXG4gICAgZ2V0U2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdHdvIFJlY3RhbmdsZXMgaGF2ZSBlcXVpdmFsZW50IGNvbXBvbmVudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlJlY3R9IHJlY3RhbmdsZSBUaGUgUmVjdGFuZ2xlIHRvIGNvbXBhcmUgdG8uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gJ3RydWUnIGlmIGFsbCBjb21wb25lbnRzIGFyZSBlcXVhbCwgb3RoZXJ3aXNlICdmYWxzZScuXG4gICAgICovXG4gICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgJC5SZWN0KSAmJlxuICAgICAgICAgICAgdGhpcy54ID09PSBvdGhlci54ICYmXG4gICAgICAgICAgICB0aGlzLnkgPT09IG90aGVyLnkgJiZcbiAgICAgICAgICAgIHRoaXMud2lkdGggPT09IG90aGVyLndpZHRoICYmXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9PT0gb3RoZXIuaGVpZ2h0ICYmXG4gICAgICAgICAgICB0aGlzLmRlZ3JlZXMgPT09IG90aGVyLmRlZ3JlZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICogTXVsdGlwbHkgYWxsIGRpbWVuc2lvbnMgKGV4Y2VwdCBkZWdyZWVzKSBpbiB0aGlzIFJlY3QgYnkgYSBmYWN0b3IgYW5kXG4gICAgKiByZXR1cm4gYSBuZXcgUmVjdC5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGZhY3RvciBUaGUgZmFjdG9yIHRvIG11bHRpcGx5IHZlY3RvciBjb21wb25lbnRzLlxuICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUmVjdH0gQSBuZXcgcmVjdCByZXByZXNlbnRpbmcgdGhlIG11bHRpcGxpY2F0aW9uXG4gICAgKiAgb2YgdGhlIHZlY3RvciBjb21wb25lbnRzIGJ5IHRoZSBmYWN0b3JcbiAgICAqL1xuICAgIHRpbWVzOiBmdW5jdGlvbihmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlJlY3QoXG4gICAgICAgICAgICB0aGlzLnggKiBmYWN0b3IsXG4gICAgICAgICAgICB0aGlzLnkgKiBmYWN0b3IsXG4gICAgICAgICAgICB0aGlzLndpZHRoICogZmFjdG9yLFxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgKiBmYWN0b3IsXG4gICAgICAgICAgICB0aGlzLmRlZ3JlZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAqIFRyYW5zbGF0ZS9tb3ZlIHRoaXMgUmVjdCBieSBhIHZlY3RvciBhbmQgcmV0dXJuIG5ldyBSZWN0LlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGRlbHRhIFRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IuXG4gICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBBIG5ldyByZWN0IHdpdGggYWx0ZXJlZCBwb3NpdGlvblxuICAgICovXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbihkZWx0YSkge1xuICAgICAgICByZXR1cm4gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIHRoaXMueCArIGRlbHRhLngsXG4gICAgICAgICAgICB0aGlzLnkgKyBkZWx0YS55LFxuICAgICAgICAgICAgdGhpcy53aWR0aCxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgdGhpcy5kZWdyZWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc21hbGxlc3QgcmVjdGFuZ2xlIHRoYXQgd2lsbCBjb250YWluIHRoaXMgYW5kIHRoZSBnaXZlblxuICAgICAqIHJlY3RhbmdsZSBib3VuZGluZyBib3hlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gcmVjdFxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uUmVjdH0gVGhlIG5ldyByZWN0YW5nbGUuXG4gICAgICovXG4gICAgdW5pb246IGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgdmFyIHRoaXNCb3VuZGluZ0JveCA9IHRoaXMuZ2V0Qm91bmRpbmdCb3goKTtcbiAgICAgICAgdmFyIG90aGVyQm91bmRpbmdCb3ggPSByZWN0LmdldEJvdW5kaW5nQm94KCk7XG5cbiAgICAgICAgdmFyIGxlZnQgPSBNYXRoLm1pbih0aGlzQm91bmRpbmdCb3gueCwgb3RoZXJCb3VuZGluZ0JveC54KTtcbiAgICAgICAgdmFyIHRvcCA9IE1hdGgubWluKHRoaXNCb3VuZGluZ0JveC55LCBvdGhlckJvdW5kaW5nQm94LnkpO1xuICAgICAgICB2YXIgcmlnaHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgIHRoaXNCb3VuZGluZ0JveC54ICsgdGhpc0JvdW5kaW5nQm94LndpZHRoLFxuICAgICAgICAgICAgb3RoZXJCb3VuZGluZ0JveC54ICsgb3RoZXJCb3VuZGluZ0JveC53aWR0aCk7XG4gICAgICAgIHZhciBib3R0b20gPSBNYXRoLm1heChcbiAgICAgICAgICAgIHRoaXNCb3VuZGluZ0JveC55ICsgdGhpc0JvdW5kaW5nQm94LmhlaWdodCxcbiAgICAgICAgICAgIG90aGVyQm91bmRpbmdCb3gueSArIG90aGVyQm91bmRpbmdCb3guaGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCAtIGxlZnQsXG4gICAgICAgICAgICBib3R0b20gLSB0b3ApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIHJlY3RhbmdsZSB3aXRoIHRoZVxuICAgICAqIGdpdmVuIHJlY3RhbmdsZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gcmVjdFxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uUmVjdH0gdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgaW50ZXJzZWN0aW9uXG4gICAgICogb3IgbnVsbCBpZiB0aGUgcmVjdGFuZ2xlcyBkb24ndCBpbnRlcnNlY3QuXG4gICAgICovXG4gICAgaW50ZXJzZWN0aW9uOiBmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgIC8vIFNpbXBsaWZpZWQgdmVyc2lvbiBvZiBXZWlsZXIgQXRoZXJ0b24gY2xpcHBpbmcgYWxnb3JpdGhtXG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlaWxlciVFMiU4MCU5M0F0aGVydG9uX2NsaXBwaW5nX2FsZ29yaXRobVxuICAgICAgICAvLyBCZWNhdXNlIHdlIGp1c3Qgd2FudCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBpbnRlcnNlY3Rpb24sXG4gICAgICAgIC8vIHdlIGNhbiBqdXN0IGNvbXB1dGUgdGhlIGJvdW5kaW5nIGJveCBvZjpcbiAgICAgICAgLy8gMS4gYWxsIHRoZSBzdW1taXRzIG9mIHRoaXMgd2hpY2ggYXJlIGluc2lkZSByZWN0XG4gICAgICAgIC8vIDIuIGFsbCB0aGUgc3VtbWl0cyBvZiByZWN0IHdoaWNoIGFyZSBpbnNpZGUgdGhpc1xuICAgICAgICAvLyAzLiBhbGwgdGhlIGludGVyc2VjdGlvbnMgb2YgcmVjdCBhbmQgdGhpc1xuICAgICAgICB2YXIgRVBTSUxPTiA9IDAuMDAwMDAwMDAwMTtcblxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uUG9pbnRzID0gW107XG5cbiAgICAgICAgdmFyIHRoaXNUb3BMZWZ0ID0gdGhpcy5nZXRUb3BMZWZ0KCk7XG4gICAgICAgIGlmIChyZWN0LmNvbnRhaW5zUG9pbnQodGhpc1RvcExlZnQsIEVQU0lMT04pKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludHMucHVzaCh0aGlzVG9wTGVmdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNUb3BSaWdodCA9IHRoaXMuZ2V0VG9wUmlnaHQoKTtcbiAgICAgICAgaWYgKHJlY3QuY29udGFpbnNQb2ludCh0aGlzVG9wUmlnaHQsIEVQU0lMT04pKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludHMucHVzaCh0aGlzVG9wUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQm90dG9tTGVmdCA9IHRoaXMuZ2V0Qm90dG9tTGVmdCgpO1xuICAgICAgICBpZiAocmVjdC5jb250YWluc1BvaW50KHRoaXNCb3R0b21MZWZ0LCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzLnB1c2godGhpc0JvdHRvbUxlZnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQm90dG9tUmlnaHQgPSB0aGlzLmdldEJvdHRvbVJpZ2h0KCk7XG4gICAgICAgIGlmIChyZWN0LmNvbnRhaW5zUG9pbnQodGhpc0JvdHRvbVJpZ2h0LCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzLnB1c2godGhpc0JvdHRvbVJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWN0VG9wTGVmdCA9IHJlY3QuZ2V0VG9wTGVmdCgpO1xuICAgICAgICBpZiAodGhpcy5jb250YWluc1BvaW50KHJlY3RUb3BMZWZ0LCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzLnB1c2gocmVjdFRvcExlZnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWN0VG9wUmlnaHQgPSByZWN0LmdldFRvcFJpZ2h0KCk7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9pbnQocmVjdFRvcFJpZ2h0LCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzLnB1c2gocmVjdFRvcFJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjdEJvdHRvbUxlZnQgPSByZWN0LmdldEJvdHRvbUxlZnQoKTtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnNQb2ludChyZWN0Qm90dG9tTGVmdCwgRVBTSUxPTikpIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50cy5wdXNoKHJlY3RCb3R0b21MZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjdEJvdHRvbVJpZ2h0ID0gcmVjdC5nZXRCb3R0b21SaWdodCgpO1xuICAgICAgICBpZiAodGhpcy5jb250YWluc1BvaW50KHJlY3RCb3R0b21SaWdodCwgRVBTSUxPTikpIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50cy5wdXNoKHJlY3RCb3R0b21SaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhpc1NlZ21lbnRzID0gdGhpcy5fZ2V0U2VnbWVudHMoKTtcbiAgICAgICAgdmFyIHJlY3RTZWdtZW50cyA9IHJlY3QuX2dldFNlZ21lbnRzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc1NlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdGhpc1NlZ21lbnQgPSB0aGlzU2VnbWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlY3RTZWdtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciByZWN0U2VnbWVudCA9IHJlY3RTZWdtZW50c1tqXTtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJzZWN0ID0gZ2V0SW50ZXJzZWN0aW9uKHRoaXNTZWdtZW50WzBdLCB0aGlzU2VnbWVudFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcmVjdFNlZ21lbnRbMF0sIHJlY3RTZWdtZW50WzFdKTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50cy5wdXNoKGludGVyc2VjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGludGVyc2VjdGlvbiBwb2ludCBvZiBzZWdtZW50cyBbYSxiXSBhbmQgW2MsZF1cbiAgICAgICAgZnVuY3Rpb24gZ2V0SW50ZXJzZWN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NjgzNDUvMTQ0MDQwM1xuICAgICAgICAgICAgdmFyIGFiVmVjdG9yID0gYi5taW51cyhhKTtcbiAgICAgICAgICAgIHZhciBjZFZlY3RvciA9IGQubWludXMoYyk7XG5cbiAgICAgICAgICAgIHZhciBkZW5vbSA9IC1jZFZlY3Rvci54ICogYWJWZWN0b3IueSArIGFiVmVjdG9yLnggKiBjZFZlY3Rvci55O1xuICAgICAgICAgICAgaWYgKGRlbm9tID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzID0gKGFiVmVjdG9yLnggKiAoYS55IC0gYy55KSAtIGFiVmVjdG9yLnkgKiAoYS54IC0gYy54KSkgLyBkZW5vbTtcbiAgICAgICAgICAgIHZhciB0ID0gKGNkVmVjdG9yLnggKiAoYS55IC0gYy55KSAtIGNkVmVjdG9yLnkgKiAoYS54IC0gYy54KSkgLyBkZW5vbTtcblxuICAgICAgICAgICAgaWYgKC1FUFNJTE9OIDw9IHMgJiYgcyA8PSAxIC0gRVBTSUxPTiAmJlxuICAgICAgICAgICAgICAgIC1FUFNJTE9OIDw9IHQgJiYgdCA8PSAxIC0gRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChhLnggKyB0ICogYWJWZWN0b3IueCwgYS55ICsgdCAqIGFiVmVjdG9yLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluWCA9IGludGVyc2VjdGlvblBvaW50c1swXS54O1xuICAgICAgICB2YXIgbWF4WCA9IGludGVyc2VjdGlvblBvaW50c1swXS54O1xuICAgICAgICB2YXIgbWluWSA9IGludGVyc2VjdGlvblBvaW50c1swXS55O1xuICAgICAgICB2YXIgbWF4WSA9IGludGVyc2VjdGlvblBvaW50c1swXS55O1xuICAgICAgICBmb3IgKHZhciBrID0gMTsgayA8IGludGVyc2VjdGlvblBvaW50cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gaW50ZXJzZWN0aW9uUG9pbnRzW2tdO1xuICAgICAgICAgICAgaWYgKHBvaW50LnggPCBtaW5YKSB7XG4gICAgICAgICAgICAgICAgbWluWCA9IHBvaW50Lng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9pbnQueCA+IG1heFgpIHtcbiAgICAgICAgICAgICAgICBtYXhYID0gcG9pbnQueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb2ludC55IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSBwb2ludC55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvaW50LnkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHBvaW50Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyAkLlJlY3QobWluWCwgbWluWSwgbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9nZXRTZWdtZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0b3BMZWZ0ID0gdGhpcy5nZXRUb3BMZWZ0KCk7XG4gICAgICAgIHZhciB0b3BSaWdodCA9IHRoaXMuZ2V0VG9wUmlnaHQoKTtcbiAgICAgICAgdmFyIGJvdHRvbUxlZnQgPSB0aGlzLmdldEJvdHRvbUxlZnQoKTtcbiAgICAgICAgdmFyIGJvdHRvbVJpZ2h0ID0gdGhpcy5nZXRCb3R0b21SaWdodCgpO1xuICAgICAgICByZXR1cm4gW1t0b3BMZWZ0LCB0b3BSaWdodF0sXG4gICAgICAgICAgICBbdG9wUmlnaHQsIGJvdHRvbVJpZ2h0XSxcbiAgICAgICAgICAgIFtib3R0b21SaWdodCwgYm90dG9tTGVmdF0sXG4gICAgICAgICAgICBbYm90dG9tTGVmdCwgdG9wTGVmdF1dO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgcmVjdGFuZ2xlIGFyb3VuZCBhIHBvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWdyZWVzIFRoZSBhbmdsZSBpbiBkZWdyZWVzIHRvIHJvdGF0ZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IFtwaXZvdF0gVGhlIHBvaW50IGFib3V0IHdoaWNoIHRvIHJvdGF0ZS5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgY2VudGVyIG9mIHRoZSByZWN0YW5nbGUuXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5SZWN0fVxuICAgICAqL1xuICAgIHJvdGF0ZTogZnVuY3Rpb24oZGVncmVlcywgcGl2b3QpIHtcbiAgICAgICAgZGVncmVlcyA9IGRlZ3JlZXMgJSAzNjA7XG4gICAgICAgIGlmIChkZWdyZWVzID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWdyZWVzIDwgMCkge1xuICAgICAgICAgICAgZGVncmVlcyArPSAzNjA7XG4gICAgICAgIH1cblxuICAgICAgICBwaXZvdCA9IHBpdm90IHx8IHRoaXMuZ2V0Q2VudGVyKCk7XG4gICAgICAgIHZhciBuZXdUb3BMZWZ0ID0gdGhpcy5nZXRUb3BMZWZ0KCkucm90YXRlKGRlZ3JlZXMsIHBpdm90KTtcbiAgICAgICAgdmFyIG5ld1RvcFJpZ2h0ID0gdGhpcy5nZXRUb3BSaWdodCgpLnJvdGF0ZShkZWdyZWVzLCBwaXZvdCk7XG5cbiAgICAgICAgdmFyIGRpZmYgPSBuZXdUb3BSaWdodC5taW51cyhuZXdUb3BMZWZ0KTtcbiAgICAgICAgdmFyIHJhZGlhbnMgPSBNYXRoLmF0YW4oZGlmZi55IC8gZGlmZi54KTtcbiAgICAgICAgaWYgKGRpZmYueCA8IDApIHtcbiAgICAgICAgICAgIHJhZGlhbnMgKz0gTWF0aC5QSTtcbiAgICAgICAgfSBlbHNlIGlmIChkaWZmLnkgPCAwKSB7XG4gICAgICAgICAgICByYWRpYW5zICs9IDIgKiBNYXRoLlBJO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgbmV3VG9wTGVmdC54LFxuICAgICAgICAgICAgbmV3VG9wTGVmdC55LFxuICAgICAgICAgICAgdGhpcy53aWR0aCxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgcmFkaWFucyAvIE1hdGguUEkgKiAxODApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNtYWxsZXN0IGhvcml6b250YWwgKGRlZ3JlZXM9MCkgcmVjdGFuZ2xlIHdoaWNoIGNvbnRhaW5zXG4gICAgICogdGhpcyByZWN0YW5nbGUuXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUmVjdH1cbiAgICAgKi9cbiAgICBnZXRCb3VuZGluZ0JveDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRlZ3JlZXMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvcExlZnQgPSB0aGlzLmdldFRvcExlZnQoKTtcbiAgICAgICAgdmFyIHRvcFJpZ2h0ID0gdGhpcy5nZXRUb3BSaWdodCgpO1xuICAgICAgICB2YXIgYm90dG9tTGVmdCA9IHRoaXMuZ2V0Qm90dG9tTGVmdCgpO1xuICAgICAgICB2YXIgYm90dG9tUmlnaHQgPSB0aGlzLmdldEJvdHRvbVJpZ2h0KCk7XG4gICAgICAgIHZhciBtaW5YID0gTWF0aC5taW4odG9wTGVmdC54LCB0b3BSaWdodC54LCBib3R0b21MZWZ0LngsIGJvdHRvbVJpZ2h0LngpO1xuICAgICAgICB2YXIgbWF4WCA9IE1hdGgubWF4KHRvcExlZnQueCwgdG9wUmlnaHQueCwgYm90dG9tTGVmdC54LCBib3R0b21SaWdodC54KTtcbiAgICAgICAgdmFyIG1pblkgPSBNYXRoLm1pbih0b3BMZWZ0LnksIHRvcFJpZ2h0LnksIGJvdHRvbUxlZnQueSwgYm90dG9tUmlnaHQueSk7XG4gICAgICAgIHZhciBtYXhZID0gTWF0aC5tYXgodG9wTGVmdC55LCB0b3BSaWdodC55LCBib3R0b21MZWZ0LnksIGJvdHRvbVJpZ2h0LnkpO1xuICAgICAgICByZXR1cm4gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIG1pblgsXG4gICAgICAgICAgICBtaW5ZLFxuICAgICAgICAgICAgbWF4WCAtIG1pblgsXG4gICAgICAgICAgICBtYXhZIC0gbWluWSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgc21hbGxlc3QgaG9yaXpvbnRhbCAoZGVncmVlcz0wKSByZWN0YW5nbGUgd2hpY2ggY29udGFpbnNcbiAgICAgKiB0aGlzIHJlY3RhbmdsZSBhbmQgaGFzIGludGVnZXJzIHgsIHksIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fVxuICAgICAqL1xuICAgIGdldEludGVnZXJCb3VuZGluZ0JveDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBib3VuZGluZ0JveCA9IHRoaXMuZ2V0Qm91bmRpbmdCb3goKTtcbiAgICAgICAgdmFyIHggPSBNYXRoLmZsb29yKGJvdW5kaW5nQm94LngpO1xuICAgICAgICB2YXIgeSA9IE1hdGguZmxvb3IoYm91bmRpbmdCb3gueSk7XG4gICAgICAgIHZhciB3aWR0aCA9IE1hdGguY2VpbChib3VuZGluZ0JveC53aWR0aCArIGJvdW5kaW5nQm94LnggLSB4KTtcbiAgICAgICAgdmFyIGhlaWdodCA9IE1hdGguY2VpbChib3VuZGluZ0JveC5oZWlnaHQgKyBib3VuZGluZ0JveC55IC0geSk7XG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBwb2ludCBpcyBpbnNpZGUgdGhpcyByZWN0YW5nbGUgKGVkZ2UgaW5jbHVkZWQpLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9pbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Vwc2lsb249MF0gdGhlIG1hcmdpbiBvZiBlcnJvciBhbGxvd2VkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGlzIHJlY3RhbmdsZSwgZmFsc2VcbiAgICAgKiBvdGhlcndpc2UuXG4gICAgICovXG4gICAgY29udGFpbnNQb2ludDogZnVuY3Rpb24ocG9pbnQsIGVwc2lsb24pIHtcbiAgICAgICAgZXBzaWxvbiA9IGVwc2lsb24gfHwgMDtcblxuICAgICAgICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjc1Mjc1NC8xNDQwNDAzIGZvciBleHBsYW5hdGlvblxuICAgICAgICB2YXIgdG9wTGVmdCA9IHRoaXMuZ2V0VG9wTGVmdCgpO1xuICAgICAgICB2YXIgdG9wUmlnaHQgPSB0aGlzLmdldFRvcFJpZ2h0KCk7XG4gICAgICAgIHZhciBib3R0b21MZWZ0ID0gdGhpcy5nZXRCb3R0b21MZWZ0KCk7XG4gICAgICAgIHZhciB0b3BEaWZmID0gdG9wUmlnaHQubWludXModG9wTGVmdCk7XG4gICAgICAgIHZhciBsZWZ0RGlmZiA9IGJvdHRvbUxlZnQubWludXModG9wTGVmdCk7XG5cbiAgICAgICAgcmV0dXJuICgocG9pbnQueCAtIHRvcExlZnQueCkgKiB0b3BEaWZmLnggK1xuICAgICAgICAgICAgKHBvaW50LnkgLSB0b3BMZWZ0LnkpICogdG9wRGlmZi55ID49IC1lcHNpbG9uKSAmJlxuXG4gICAgICAgICAgICAoKHBvaW50LnggLSB0b3BSaWdodC54KSAqIHRvcERpZmYueCArXG4gICAgICAgICAgICAocG9pbnQueSAtIHRvcFJpZ2h0LnkpICogdG9wRGlmZi55IDw9IGVwc2lsb24pICYmXG5cbiAgICAgICAgICAgICgocG9pbnQueCAtIHRvcExlZnQueCkgKiBsZWZ0RGlmZi54ICtcbiAgICAgICAgICAgIChwb2ludC55IC0gdG9wTGVmdC55KSAqIGxlZnREaWZmLnkgPj0gLWVwc2lsb24pICYmXG5cbiAgICAgICAgICAgICgocG9pbnQueCAtIGJvdHRvbUxlZnQueCkgKiBsZWZ0RGlmZi54ICtcbiAgICAgICAgICAgIChwb2ludC55IC0gYm90dG9tTGVmdC55KSAqIGxlZnREaWZmLnkgPD0gZXBzaWxvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWN0YW5nbGUgd2hpY2ggaXMgdXNlZnVsIGZvclxuICAgICAqIGRlYnVnZ2luZy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiW1wiICtcbiAgICAgICAgICAgIChNYXRoLnJvdW5kKHRoaXMueCAqIDEwMCkgLyAxMDApICsgXCIsIFwiICtcbiAgICAgICAgICAgIChNYXRoLnJvdW5kKHRoaXMueSAqIDEwMCkgLyAxMDApICsgXCIsIFwiICtcbiAgICAgICAgICAgIChNYXRoLnJvdW5kKHRoaXMud2lkdGggKiAxMDApIC8gMTAwKSArIFwieFwiICtcbiAgICAgICAgICAgIChNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0ICogMTAwKSAvIDEwMCkgKyBcIiwgXCIgK1xuICAgICAgICAgICAgKE1hdGgucm91bmQodGhpcy5kZWdyZWVzICogMTAwKSAvIDEwMCkgKyBcImRlZ1wiICtcbiAgICAgICAgICAgIFwiXVwiO1xuICAgIH1cbn07XG5cblxufShPcGVuU2VhZHJhZ29uKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gUmVmZXJlbmNlU3RyaXBcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uICggJCApIHtcblxuLy8gZGljdGlvbmFyeSBmcm9tIGlkIHRvIHByaXZhdGUgcHJvcGVydGllc1xudmFyIFRISVMgPSB7fTtcblxuLyoqXG4gKiAgVGhlIENvbGxlY3Rpb25EcmF3ZXIgaXMgYSByZWltcGxlbWVudGF0aW9uIGlmIHRoZSBEcmF3ZXIgQVBJIHRoYXRcbiAqICBmb2N1c2VzIG9uIGFsbG93aW5nIGEgdmlld3BvcnQgdG8gYmUgcmVkZWZpbmVkIGFzIGEgY29sbGVjdGlvblxuICogIG9mIHNtYWxsZXIgdmlld3BvcnRzLCBkZWZpbmVkIGJ5IGEgY2xlYXIgbnVtYmVyIG9mIHJvd3MgYW5kIC8gb3JcbiAqICBjb2x1bW5zIG9mIHdoaWNoIGVhY2ggaXRlbSBpbiB0aGUgbWF0cml4IG9mIHZpZXdwb3J0cyBoYXMgaXRzIG93blxuICogIHNvdXJjZS5cbiAqXG4gKiAgVGhpcyBpZGVhIGlzIGEgcmVleHByZXNzaW9uIG9mIHRoZSBpZGVhIG9mIGR6aSBjb2xsZWN0aW9uc1xuICogIHdoaWNoIGFsbG93cyBhIGNsZWFyZXIgYWxnb3JpdGhtIHRvIHJldXNlIHRoZSB0aWxlIHNvdXJjZXMgYWxyZWFkeVxuICogIHN1cHBvcnRlZCBieSBPcGVuU2VhZHJhZ29uLCBpbiBoZXRlcm9nZW5pb3VzIG9yIGhvbW9nZW5pb3VzXG4gKiAgc2VxdWVuY2VzIGp1c3QgbGlrZSBtaXhlZCBncm91cHMgYWxyZWFkeSBzdXBwb3J0ZWQgYnkgdGhlIHZpZXdlclxuICogIGZvciB0aGUgcHVycG9zZSBvZiBpbWFnZSBzZXF1bmNlcy5cbiAqXG4gKiAgVE9ETzogICBUaGUgZGlmZmljdWx0IHBhcnQgb2YgdGhpcyBmZWF0dXJlIGlzIGZpZ3VyaW5nIG91dCBob3cgdG8gZXhwcmVzc1xuICogICAgICAgICAgdGhpcyBmdW5jdGlvbmFsaXR5IGFzIGEgY29tYmluYXRpb24gb2YgdGhlIGZ1bmN0aW9uYWxpdHkgYWxyZWFkeVxuICogICAgICAgICAgcHJvdmlkZWQgYnkgRHJhd2VyLCBWaWV3cG9ydCwgVGlsZVNvdXJjZSwgYW5kIE5hdmlnYXRvci4gIEl0IG1heVxuICogICAgICAgICAgcmVxdWlyZSBiZXR0ZXIgYWJzdHJhY3Rpb24gYXQgdGhvc2UgcG9pbnRzIGluIG9yZGVyIHRvIGVmZmVjaWVudGx5XG4gKiAgICAgICAgICByZXVzZSB0aG9zZSBwYXJhZGlnbXMuXG4gKi9cbi8qKlxuICogQGNsYXNzIFJlZmVyZW5jZVN0cmlwXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuJC5SZWZlcmVuY2VTdHJpcCA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuICAgIHZhciBfdGhpcyAgICAgICA9IHRoaXMsXG4gICAgICAgIHZpZXdlciAgICAgID0gb3B0aW9ucy52aWV3ZXIsXG4gICAgICAgIHZpZXdlclNpemUgID0gJC5nZXRFbGVtZW50U2l6ZSggdmlld2VyLmVsZW1lbnQgKSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIGk7XG5cbiAgICAvL1dlIG1heSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBlbGVtZW50IGFuZCBpZCBpZiB0aGV5IGRpZCBub3RcbiAgICAvL3Byb3ZpZGUgdGhlIGlkIGZvciB0aGUgZXhpc3RpbmcgZWxlbWVudFxuICAgIGlmICggIW9wdGlvbnMuaWQgKSB7XG4gICAgICAgIG9wdGlvbnMuaWQgICAgICAgICAgICAgID0gJ3JlZmVyZW5jZXN0cmlwLScgKyAkLm5vdygpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgICAgICAgICAgICA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCBcImRpdlwiICk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5pZCAgICAgICAgID0gb3B0aW9ucy5pZDtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSAgPSAncmVmZXJlbmNlc3RyaXAnO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwge1xuICAgICAgICBzaXplUmF0aW86ICAkLkRFRkFVTFRfU0VUVElOR1MucmVmZXJlbmNlU3RyaXBTaXplUmF0aW8sXG4gICAgICAgIHBvc2l0aW9uOiAgICQuREVGQVVMVF9TRVRUSU5HUy5yZWZlcmVuY2VTdHJpcFBvc2l0aW9uLFxuICAgICAgICBzY3JvbGw6ICAgICAkLkRFRkFVTFRfU0VUVElOR1MucmVmZXJlbmNlU3RyaXBTY3JvbGwsXG4gICAgICAgIGNsaWNrVGltZVRocmVzaG9sZDogICQuREVGQVVMVF9TRVRUSU5HUy5jbGlja1RpbWVUaHJlc2hvbGRcbiAgICB9LCBvcHRpb25zLCB7XG4gICAgICAgIC8vcmVxdWlyZWQgb3ZlcnJpZGVzXG4gICAgICAgIGVsZW1lbnQ6ICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAgLy9UaGVzZSBuZWVkIHRvIGJlIG92ZXJyaWRkZW4gdG8gcHJldmVudCByZWN1cnNpb24gc2luY2VcbiAgICAgICAgLy90aGUgbmF2aWdhdG9yIGlzIGEgdmlld2VyIGFuZCBhIHZpZXdlciBoYXMgYSBuYXZpZ2F0b3JcbiAgICAgICAgc2hvd05hdmlnYXRvcjogICAgICAgICAgZmFsc2UsXG4gICAgICAgIG1vdXNlTmF2RW5hYmxlZDogICAgICAgIGZhbHNlLFxuICAgICAgICBzaG93TmF2aWdhdGlvbkNvbnRyb2w6ICBmYWxzZSxcbiAgICAgICAgc2hvd1NlcXVlbmNlQ29udHJvbDogICAgZmFsc2VcbiAgICB9ICk7XG5cbiAgICAkLmV4dGVuZCggdGhpcywgb3B0aW9ucyApO1xuICAgIC8vUHJpdmF0ZSBzdGF0ZSBwcm9wZXJ0aWVzXG4gICAgVEhJU1t0aGlzLmlkXSA9IHtcbiAgICAgICAgXCJhbmltYXRpbmdcIjogICAgICAgICAgIGZhbHNlXG4gICAgfTtcblxuICAgIHRoaXMubWluUGl4ZWxSYXRpbyA9IHRoaXMudmlld2VyLm1pblBpeGVsUmF0aW87XG5cbiAgICBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgICBzdHlsZS5tYXJnaW5Ub3AgICAgID0gJzBweCc7XG4gICAgc3R5bGUubWFyZ2luUmlnaHQgICA9ICcwcHgnO1xuICAgIHN0eWxlLm1hcmdpbkJvdHRvbSAgPSAnMHB4JztcbiAgICBzdHlsZS5tYXJnaW5MZWZ0ICAgID0gJzBweCc7XG4gICAgc3R5bGUubGVmdCAgICAgICAgICA9ICcwcHgnO1xuICAgIHN0eWxlLmJvdHRvbSAgICAgICAgPSAnMHB4JztcbiAgICBzdHlsZS5ib3JkZXIgICAgICAgID0gJzBweCc7XG4gICAgc3R5bGUuYmFja2dyb3VuZCAgICA9ICcjMDAwJztcbiAgICBzdHlsZS5wb3NpdGlvbiAgICAgID0gJ3JlbGF0aXZlJztcblxuICAgICQuc2V0RWxlbWVudFRvdWNoQWN0aW9uTm9uZSggdGhpcy5lbGVtZW50ICk7XG5cbiAgICAkLnNldEVsZW1lbnRPcGFjaXR5KCB0aGlzLmVsZW1lbnQsIDAuOCApO1xuXG4gICAgdGhpcy52aWV3ZXIgPSB2aWV3ZXI7XG4gICAgdGhpcy5pbm5lclRyYWNrZXIgPSBuZXcgJC5Nb3VzZVRyYWNrZXIoIHtcbiAgICAgICAgZWxlbWVudDogICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAgZHJhZ0hhbmRsZXI6ICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uU3RyaXBEcmFnICksXG4gICAgICAgIHNjcm9sbEhhbmRsZXI6ICAkLmRlbGVnYXRlKCB0aGlzLCBvblN0cmlwU2Nyb2xsICksXG4gICAgICAgIGVudGVySGFuZGxlcjogICAkLmRlbGVnYXRlKCB0aGlzLCBvblN0cmlwRW50ZXIgKSxcbiAgICAgICAgZXhpdEhhbmRsZXI6ICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uU3RyaXBFeGl0ICksXG4gICAgICAgIGtleURvd25IYW5kbGVyOiAkLmRlbGVnYXRlKCB0aGlzLCBvbktleURvd24gKSxcbiAgICAgICAga2V5SGFuZGxlcjogICAgICQuZGVsZWdhdGUoIHRoaXMsIG9uS2V5UHJlc3MgKVxuICAgIH0gKTtcblxuICAgIC8vQ29udHJvbHMgdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBvZiB0aGUgcmVmZXJlbmNlIHN0cmlwIGFuZCBzZXRzIHRoZVxuICAgIC8vYXBwcm9wcmlhdGUgd2lkdGggYW5kIGhlaWdodFxuICAgIGlmICggb3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCApIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoICA9IG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKyAncHgnO1xuICAgICAgICB2aWV3ZXIuYWRkQ29udHJvbChcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIHsgYW5jaG9yOiAkLkNvbnRyb2xBbmNob3IuQk9UVE9NX0xFRlQgfVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICggXCJob3Jpem9udGFsXCIgPT0gb3B0aW9ucy5zY3JvbGwgKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSAoXG4gICAgICAgICAgICAgICAgdmlld2VyU2l6ZS54ICpcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNpemVSYXRpbyAqXG4gICAgICAgICAgICAgICAgdmlld2VyLnRpbGVTb3VyY2VzLmxlbmd0aFxuICAgICAgICAgICAgKSArICggMTIgKiB2aWV3ZXIudGlsZVNvdXJjZXMubGVuZ3RoICkgKyAncHgnO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gKFxuICAgICAgICAgICAgICAgIHZpZXdlclNpemUueSAqXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zaXplUmF0aW9cbiAgICAgICAgICAgICkgKyAncHgnO1xuXG4gICAgICAgICAgICB2aWV3ZXIuYWRkQ29udHJvbChcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgeyBhbmNob3I6ICQuQ29udHJvbEFuY2hvci5CT1RUT01fTEVGVCB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IChcbiAgICAgICAgICAgICAgICB2aWV3ZXJTaXplLnkgKlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2l6ZVJhdGlvICpcbiAgICAgICAgICAgICAgICB2aWV3ZXIudGlsZVNvdXJjZXMubGVuZ3RoXG4gICAgICAgICAgICApICsgKCAxMiAqIHZpZXdlci50aWxlU291cmNlcy5sZW5ndGggKSArICdweCc7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IChcbiAgICAgICAgICAgICAgICB2aWV3ZXJTaXplLnggKlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2l6ZVJhdGlvXG4gICAgICAgICAgICApICsgJ3B4JztcblxuICAgICAgICAgICAgdmlld2VyLmFkZENvbnRyb2woXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgIHsgYW5jaG9yOiAkLkNvbnRyb2xBbmNob3IuVE9QX0xFRlQgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYW5lbFdpZHRoID0gKCB2aWV3ZXJTaXplLnggKiB0aGlzLnNpemVSYXRpbyApICsgODtcbiAgICB0aGlzLnBhbmVsSGVpZ2h0ID0gKCB2aWV3ZXJTaXplLnkgKiB0aGlzLnNpemVSYXRpbyApICsgODtcbiAgICB0aGlzLnBhbmVscyA9IFtdO1xuXG4gICAgLypqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSovXG4gICAgZm9yICggaSA9IDA7IGkgPCB2aWV3ZXIudGlsZVNvdXJjZXMubGVuZ3RoOyBpKysgKSB7XG5cbiAgICAgICAgZWxlbWVudCA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCAnZGl2JyApO1xuICAgICAgICBlbGVtZW50LmlkID0gdGhpcy5lbGVtZW50LmlkICsgXCItXCIgKyBpO1xuXG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggICAgICAgICA9IF90aGlzLnBhbmVsV2lkdGggKyAncHgnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCAgICAgICAgPSBfdGhpcy5wYW5lbEhlaWdodCArICdweCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSAgICAgICA9ICdpbmxpbmUnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZsb2F0ICAgICAgICAgPSAnbGVmdCc7IC8vV2Via2l0XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgICAgICA9ICdsZWZ0JzsgLy9GaXJlZm94XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc3R5bGVGbG9hdCAgICA9ICdsZWZ0JzsgLy9JRVxuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmcgICAgICAgPSAnMnB4JztcbiAgICAgICAgJC5zZXRFbGVtZW50VG91Y2hBY3Rpb25Ob25lKCBlbGVtZW50ICk7XG5cbiAgICAgICAgZWxlbWVudC5pbm5lclRyYWNrZXIgPSBuZXcgJC5Nb3VzZVRyYWNrZXIoIHtcbiAgICAgICAgICAgIGVsZW1lbnQ6ICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIGNsaWNrVGltZVRocmVzaG9sZDogdGhpcy5jbGlja1RpbWVUaHJlc2hvbGQsXG4gICAgICAgICAgICBjbGlja0Rpc3RUaHJlc2hvbGQ6IHRoaXMuY2xpY2tEaXN0VGhyZXNob2xkLFxuICAgICAgICAgICAgcHJlc3NIYW5kbGVyOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmV2ZW50U291cmNlLmRyYWdnaW5nID0gJC5ub3coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWxlYXNlSGFuZGxlcjogZnVuY3Rpb24gKCBldmVudCApIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tlciA9IGV2ZW50LmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gdHJhY2tlci5lbGVtZW50LmlkLFxuICAgICAgICAgICAgICAgICAgICBwYWdlICAgID0gTnVtYmVyKCBpZC5zcGxpdCggJy0nIClbMl0gKSxcbiAgICAgICAgICAgICAgICAgICAgbm93ICAgICA9ICQubm93KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGV2ZW50Lmluc2lkZUVsZW1lbnRQcmVzc2VkICYmXG4gICAgICAgICAgICAgICAgICAgICBldmVudC5pbnNpZGVFbGVtZW50UmVsZWFzZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuZHJhZ2dpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICggbm93IC0gdHJhY2tlci5kcmFnZ2luZyApIDwgdHJhY2tlci5jbGlja1RpbWVUaHJlc2hvbGQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuZHJhZ2dpbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2aWV3ZXIuZ29Ub1BhZ2UoIHBhZ2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTtcblxuICAgICAgICBlbGVtZW50LmFjdGl2ZVBhbmVsID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5wYW5lbHMucHVzaCggZWxlbWVudCApO1xuXG4gICAgfVxuICAgIGxvYWRQYW5lbHMoIHRoaXMsIHRoaXMuc2Nyb2xsID09ICd2ZXJ0aWNhbCcgPyB2aWV3ZXJTaXplLnkgOiB2aWV3ZXJTaXplLngsIDAgKTtcbiAgICB0aGlzLnNldEZvY3VzKCAwICk7XG5cbn07XG5cbiQuZXh0ZW5kKCAkLlJlZmVyZW5jZVN0cmlwLnByb3RvdHlwZSwgJC5FdmVudFNvdXJjZS5wcm90b3R5cGUsICQuVmlld2VyLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLlJlZmVyZW5jZVN0cmlwLnByb3RvdHlwZSAqL3tcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIHNldEZvY3VzOiBmdW5jdGlvbiAoIHBhZ2UgKSB7XG4gICAgICAgIHZhciBlbGVtZW50ICAgICAgPSAkLmdldEVsZW1lbnQoIHRoaXMuZWxlbWVudC5pZCArICctJyArIHBhZ2UgKSxcbiAgICAgICAgICAgIHZpZXdlclNpemUgICA9ICQuZ2V0RWxlbWVudFNpemUoIHRoaXMudmlld2VyLmNhbnZhcyApLFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGggID0gTnVtYmVyKCB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGgucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gTnVtYmVyKCB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0LnJlcGxhY2UoICdweCcsICcnICkgKSxcbiAgICAgICAgICAgIG9mZnNldExlZnQgICA9IC1OdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0LnJlcGxhY2UoICdweCcsICcnICkgKSxcbiAgICAgICAgICAgIG9mZnNldFRvcCAgICA9IC1OdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICAgICAgb2Zmc2V0O1xuXG4gICAgICAgIGlmICggdGhpcy5jdXJyZW50U2VsZWN0ZWQgIT09IGVsZW1lbnQgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuY3VycmVudFNlbGVjdGVkICkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGVkLnN0eWxlLmJhY2tncm91bmQgPSAnIzAwMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3RlZCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3RlZC5zdHlsZS5iYWNrZ3JvdW5kID0gJyM5OTknO1xuXG4gICAgICAgICAgICBpZiAoICdob3Jpem9udGFsJyA9PSB0aGlzLnNjcm9sbCApIHtcbiAgICAgICAgICAgICAgICAvL3JpZ2h0IGxlZnRcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAoIE51bWJlciggcGFnZSApICkgKiAoIHRoaXMucGFuZWxXaWR0aCArIDMgKTtcbiAgICAgICAgICAgICAgICBpZiAoIG9mZnNldCA+IG9mZnNldExlZnQgKyB2aWV3ZXJTaXplLnggLSB0aGlzLnBhbmVsV2lkdGggKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWluKCBvZmZzZXQsICggc2Nyb2xsV2lkdGggLSB2aWV3ZXJTaXplLnggKSApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IC1vZmZzZXQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBsb2FkUGFuZWxzKCB0aGlzLCB2aWV3ZXJTaXplLngsIC1vZmZzZXQgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBvZmZzZXQgPCBvZmZzZXRMZWZ0ICkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1heCggMCwgb2Zmc2V0IC0gdmlld2VyU2l6ZS54IC8gMiApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IC1vZmZzZXQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBsb2FkUGFuZWxzKCB0aGlzLCB2aWV3ZXJTaXplLngsIC1vZmZzZXQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9ICggTnVtYmVyKCBwYWdlICkgKSAqICggdGhpcy5wYW5lbEhlaWdodCArIDMgKTtcbiAgICAgICAgICAgICAgICBpZiAoIG9mZnNldCA+IG9mZnNldFRvcCArIHZpZXdlclNpemUueSAtIHRoaXMucGFuZWxIZWlnaHQgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWluKCBvZmZzZXQsICggc2Nyb2xsSGVpZ2h0IC0gdmlld2VyU2l6ZS55ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IC1vZmZzZXQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBsb2FkUGFuZWxzKCB0aGlzLCB2aWV3ZXJTaXplLnksIC1vZmZzZXQgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBvZmZzZXQgPCBvZmZzZXRUb3AgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KCAwLCBvZmZzZXQgLSB2aWV3ZXJTaXplLnkgLyAyICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAtb2Zmc2V0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS55LCAtb2Zmc2V0ICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgIG9uU3RyaXBFbnRlci5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLmlubmVyVHJhY2tlciB9ICk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICggVEhJU1t0aGlzLmlkXS5hbmltYXRpbmcgKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUubG9nKCAnaW1hZ2UgcmVmZXJlbmNlIHN0cmlwIHVwZGF0ZScgKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gT3ZlcnJpZGVzIFZpZXdlci5kZXN0cm95XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0gKTtcblxuXG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gb25TdHJpcERyYWcoIGV2ZW50ICkge1xuXG4gICAgdmFyIG9mZnNldExlZnQgICA9IE51bWJlciggdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICBvZmZzZXRUb3AgICAgPSBOdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICBzY3JvbGxXaWR0aCAgPSBOdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aC5yZXBsYWNlKCAncHgnLCAnJyApICksXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IE51bWJlciggdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodC5yZXBsYWNlKCAncHgnLCAnJyApICksXG4gICAgICAgIHZpZXdlclNpemUgICA9ICQuZ2V0RWxlbWVudFNpemUoIHRoaXMudmlld2VyLmNhbnZhcyApO1xuICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuICAgIGlmICggdGhpcy5lbGVtZW50ICkge1xuICAgICAgICBpZiAoICdob3Jpem9udGFsJyA9PSB0aGlzLnNjcm9sbCApIHtcbiAgICAgICAgICAgIGlmICggLWV2ZW50LmRlbHRhLnggPiAwICkge1xuICAgICAgICAgICAgICAgIC8vZm9yd2FyZFxuICAgICAgICAgICAgICAgIGlmICggb2Zmc2V0TGVmdCA+IC0oIHNjcm9sbFdpZHRoIC0gdmlld2VyU2l6ZS54ICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gKCBvZmZzZXRMZWZ0ICsgKCBldmVudC5kZWx0YS54ICogMiApICkgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBsb2FkUGFuZWxzKCB0aGlzLCB2aWV3ZXJTaXplLngsIG9mZnNldExlZnQgKyAoIGV2ZW50LmRlbHRhLnggKiAyICkgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCAtZXZlbnQuZGVsdGEueCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgLy9yZXZlcnNlXG4gICAgICAgICAgICAgICAgaWYgKCBvZmZzZXRMZWZ0IDwgMCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAoIG9mZnNldExlZnQgKyAoIGV2ZW50LmRlbHRhLnggKiAyICkgKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRQYW5lbHMoIHRoaXMsIHZpZXdlclNpemUueCwgb2Zmc2V0TGVmdCArICggZXZlbnQuZGVsdGEueCAqIDIgKSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICggLWV2ZW50LmRlbHRhLnkgPiAwICkge1xuICAgICAgICAgICAgICAgIC8vZm9yd2FyZFxuICAgICAgICAgICAgICAgIGlmICggb2Zmc2V0VG9wID4gLSggc2Nyb2xsSGVpZ2h0IC0gdmlld2VyU2l6ZS55ICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAoIG9mZnNldFRvcCArICggZXZlbnQuZGVsdGEueSAqIDIgKSApICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS55LCBvZmZzZXRUb3AgKyAoIGV2ZW50LmRlbHRhLnkgKiAyICkgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCAtZXZlbnQuZGVsdGEueSA8IDAgKSB7XG4gICAgICAgICAgICAgICAgLy9yZXZlcnNlXG4gICAgICAgICAgICAgICAgaWYgKCBvZmZzZXRUb3AgPCAwICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gKCBvZmZzZXRUb3AgKyAoIGV2ZW50LmRlbHRhLnkgKiAyICkgKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRQYW5lbHMoIHRoaXMsIHZpZXdlclNpemUueSwgb2Zmc2V0VG9wICsgKCBldmVudC5kZWx0YS55ICogMiApICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcblxufVxuXG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gb25TdHJpcFNjcm9sbCggZXZlbnQgKSB7XG4gICAgdmFyIG9mZnNldExlZnQgICA9IE51bWJlciggdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICBvZmZzZXRUb3AgICAgPSBOdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AucmVwbGFjZSggJ3B4JywgJycgKSApLFxuICAgICAgICBzY3JvbGxXaWR0aCAgPSBOdW1iZXIoIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aC5yZXBsYWNlKCAncHgnLCAnJyApICksXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IE51bWJlciggdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodC5yZXBsYWNlKCAncHgnLCAnJyApICksXG4gICAgICAgIHZpZXdlclNpemUgICA9ICQuZ2V0RWxlbWVudFNpemUoIHRoaXMudmlld2VyLmNhbnZhcyApO1xuICAgIGlmICggdGhpcy5lbGVtZW50ICkge1xuICAgICAgICBpZiAoICdob3Jpem9udGFsJyA9PSB0aGlzLnNjcm9sbCApIHtcbiAgICAgICAgICAgIGlmICggZXZlbnQuc2Nyb2xsID4gMCApIHtcbiAgICAgICAgICAgICAgICAvL2ZvcndhcmRcbiAgICAgICAgICAgICAgICBpZiAoIG9mZnNldExlZnQgPiAtKCBzY3JvbGxXaWR0aCAtIHZpZXdlclNpemUueCApICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9ICggb2Zmc2V0TGVmdCAtICggZXZlbnQuc2Nyb2xsICogNjAgKSApICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS54LCBvZmZzZXRMZWZ0IC0gKCBldmVudC5zY3JvbGwgKiA2MCApICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICggZXZlbnQuc2Nyb2xsIDwgMCApIHtcbiAgICAgICAgICAgICAgICAvL3JldmVyc2VcbiAgICAgICAgICAgICAgICBpZiAoIG9mZnNldExlZnQgPCAwICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9ICggb2Zmc2V0TGVmdCAtICggZXZlbnQuc2Nyb2xsICogNjAgKSApICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS54LCBvZmZzZXRMZWZ0IC0gKCBldmVudC5zY3JvbGwgKiA2MCApICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCBldmVudC5zY3JvbGwgPCAwICkge1xuICAgICAgICAgICAgICAgIC8vc2Nyb2xsIHVwXG4gICAgICAgICAgICAgICAgaWYgKCBvZmZzZXRUb3AgPiB2aWV3ZXJTaXplLnkgLSBzY3JvbGxIZWlnaHQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAoIG9mZnNldFRvcCArICggZXZlbnQuc2Nyb2xsICogNjAgKSApICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS55LCBvZmZzZXRUb3AgKyAoIGV2ZW50LnNjcm9sbCAqIDYwICkgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBldmVudC5zY3JvbGwgPiAwICkge1xuICAgICAgICAgICAgICAgIC8vc2Nyb2xsIGRvd21cbiAgICAgICAgICAgICAgICBpZiAoIG9mZnNldFRvcCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAoIG9mZnNldFRvcCArICggZXZlbnQuc2Nyb2xsICogNjAgKSApICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgbG9hZFBhbmVscyggdGhpcywgdmlld2VyU2l6ZS55LCBvZmZzZXRUb3AgKyAoIGV2ZW50LnNjcm9sbCAqIDYwICkgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9jYW5jZWxzIGV2ZW50XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmZ1bmN0aW9uIGxvYWRQYW5lbHMoIHN0cmlwLCB2aWV3ZXJTaXplLCBzY3JvbGwgKSB7XG4gICAgdmFyIHBhbmVsU2l6ZSxcbiAgICAgICAgYWN0aXZlUGFuZWxzU3RhcnQsXG4gICAgICAgIGFjdGl2ZVBhbmVsc0VuZCxcbiAgICAgICAgbWluaVZpZXdlcixcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIGksXG4gICAgICAgIGVsZW1lbnQ7XG4gICAgaWYgKCAnaG9yaXpvbnRhbCcgPT0gc3RyaXAuc2Nyb2xsICkge1xuICAgICAgICBwYW5lbFNpemUgPSBzdHJpcC5wYW5lbFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBhbmVsU2l6ZSA9IHN0cmlwLnBhbmVsSGVpZ2h0O1xuICAgIH1cbiAgICBhY3RpdmVQYW5lbHNTdGFydCA9IE1hdGguY2VpbCggdmlld2VyU2l6ZSAvIHBhbmVsU2l6ZSApICsgNTtcbiAgICBhY3RpdmVQYW5lbHNFbmQgPSBNYXRoLmNlaWwoICggTWF0aC5hYnMoIHNjcm9sbCApICsgdmlld2VyU2l6ZSApIC8gcGFuZWxTaXplICkgKyAxO1xuICAgIGFjdGl2ZVBhbmVsc1N0YXJ0ID0gYWN0aXZlUGFuZWxzRW5kIC0gYWN0aXZlUGFuZWxzU3RhcnQ7XG4gICAgYWN0aXZlUGFuZWxzU3RhcnQgPSBhY3RpdmVQYW5lbHNTdGFydCA8IDAgPyAwIDogYWN0aXZlUGFuZWxzU3RhcnQ7XG5cbiAgICBmb3IgKCBpID0gYWN0aXZlUGFuZWxzU3RhcnQ7IGkgPCBhY3RpdmVQYW5lbHNFbmQgJiYgaSA8IHN0cmlwLnBhbmVscy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgZWxlbWVudCA9IHN0cmlwLnBhbmVsc1tpXTtcbiAgICAgICAgaWYgKCAhZWxlbWVudC5hY3RpdmVQYW5lbCApIHtcbiAgICAgICAgICAgIG1pbmlWaWV3ZXIgPSBuZXcgJC5WaWV3ZXIoIHtcbiAgICAgICAgICAgICAgICBpZDogICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlkLFxuICAgICAgICAgICAgICAgIHRpbGVTb3VyY2VzOiAgICAgICAgICAgIFtzdHJpcC52aWV3ZXIudGlsZVNvdXJjZXNbaV1dLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6ICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yU2l6ZVJhdGlvOiAgICAgc3RyaXAuc2l6ZVJhdGlvLFxuICAgICAgICAgICAgICAgIHNob3dOYXZpZ2F0b3I6ICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIG1vdXNlTmF2RW5hYmxlZDogICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dOYXZpZ2F0aW9uQ29udHJvbDogIGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dTZXF1ZW5jZUNvbnRyb2w6ICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgYmxlbmRUaW1lOiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25UaW1lOiAgICAgICAgICAwXG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIG1pbmlWaWV3ZXIuZGlzcGxheVJlZ2lvbiAgICAgICAgICAgPSAkLm1ha2VOZXV0cmFsRWxlbWVudCggXCJkaXZcIiApO1xuICAgICAgICAgICAgbWluaVZpZXdlci5kaXNwbGF5UmVnaW9uLmlkICAgICAgICA9IGVsZW1lbnQuaWQgKyAnLWRpc3BsYXlyZWdpb24nO1xuICAgICAgICAgICAgbWluaVZpZXdlci5kaXNwbGF5UmVnaW9uLmNsYXNzTmFtZSA9ICdkaXNwbGF5cmVnaW9uJztcblxuICAgICAgICAgICAgc3R5bGUgICAgICAgICAgICAgICA9IG1pbmlWaWV3ZXIuZGlzcGxheVJlZ2lvbi5zdHlsZTtcbiAgICAgICAgICAgIHN0eWxlLnBvc2l0aW9uICAgICAgPSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgc3R5bGUudG9wICAgICAgICAgICA9ICcwcHgnO1xuICAgICAgICAgICAgc3R5bGUubGVmdCAgICAgICAgICA9ICcwcHgnO1xuICAgICAgICAgICAgc3R5bGUuZm9udFNpemUgICAgICA9ICcwcHgnO1xuICAgICAgICAgICAgc3R5bGUub3ZlcmZsb3cgICAgICA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgc3R5bGUuZmxvYXQgICAgICAgICA9ICdsZWZ0JzsgLy9XZWJraXRcbiAgICAgICAgICAgIHN0eWxlLmNzc0Zsb2F0ICAgICAgPSAnbGVmdCc7IC8vRmlyZWZveFxuICAgICAgICAgICAgc3R5bGUuc3R5bGVGbG9hdCAgICA9ICdsZWZ0JzsgLy9JRVxuICAgICAgICAgICAgc3R5bGUuekluZGV4ICAgICAgICA9IDk5OTk5OTk5OTtcbiAgICAgICAgICAgIHN0eWxlLmN1cnNvciAgICAgICAgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICBzdHlsZS53aWR0aCAgICAgICAgID0gKCBzdHJpcC5wYW5lbFdpZHRoIC0gNCApICsgJ3B4JztcbiAgICAgICAgICAgIHN0eWxlLmhlaWdodCAgICAgICAgPSAoIHN0cmlwLnBhbmVsSGVpZ2h0IC0gNCApICsgJ3B4JztcblxuICAgICAgICAgICAgLy8gVE9ETzogV2hhdCBpcyB0aGlzIGZvcj8gRnV0dXJlIGtleWJvYXJkIG5hdmlnYXRpb24gc3VwcG9ydD9cbiAgICAgICAgICAgIG1pbmlWaWV3ZXIuZGlzcGxheVJlZ2lvbi5pbm5lclRyYWNrZXIgPSBuZXcgJC5Nb3VzZVRyYWNrZXIoIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBtaW5pVmlld2VyLmRpc3BsYXlSZWdpb24sXG4gICAgICAgICAgICAgICAgc3RhcnREaXNhYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnZGl2JyApWzBdLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIG1pbmlWaWV3ZXIuZGlzcGxheVJlZ2lvblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVQYW5lbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gb25TdHJpcEVudGVyKCBldmVudCApIHtcbiAgICB2YXIgZWxlbWVudCA9IGV2ZW50LmV2ZW50U291cmNlLmVsZW1lbnQ7XG5cbiAgICAvLyQuc2V0RWxlbWVudE9wYWNpdHkoZWxlbWVudCwgMC44KTtcblxuICAgIC8vZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkICM1NTUnO1xuICAgIC8vZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJyMwMDAnO1xuXG4gICAgaWYgKCAnaG9yaXpvbnRhbCcgPT0gdGhpcy5zY3JvbGwgKSB7XG5cbiAgICAgICAgLy9lbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBcIjBweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiMHB4XCI7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjBweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjBweFwiO1xuXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBvblN0cmlwRXhpdCggZXZlbnQgKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBldmVudC5ldmVudFNvdXJjZS5lbGVtZW50O1xuXG4gICAgaWYgKCAnaG9yaXpvbnRhbCcgPT0gdGhpcy5zY3JvbGwgKSB7XG5cbiAgICAgICAgLy9lbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBcIjEwcHhcIjtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIi1cIiArICggJC5nZXRFbGVtZW50U2l6ZSggZWxlbWVudCApLnkgLyAyICkgKyBcInB4XCI7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjEwcHhcIjtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCItXCIgKyAoICQuZ2V0RWxlbWVudFNpemUoIGVsZW1lbnQgKS54IC8gMiApICsgXCJweFwiO1xuXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBvbktleURvd24oIGV2ZW50ICkge1xuICAgIC8vY29uc29sZS5sb2coIGV2ZW50LmtleUNvZGUgKTtcblxuICAgIGlmICggIWV2ZW50LnByZXZlbnREZWZhdWx0QWN0aW9uICYmICFldmVudC5jdHJsICYmICFldmVudC5hbHQgJiYgIWV2ZW50Lm1ldGEgKSB7XG4gICAgICAgIHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG4gICAgICAgICAgICBjYXNlIDM4OiAvL3VwIGFycm93XG4gICAgICAgICAgICAgICAgb25TdHJpcFNjcm9sbC5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIsIHBvc2l0aW9uOiBudWxsLCBzY3JvbGw6IDEsIHNoaWZ0OiBudWxsIH0gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIDQwOiAvL2Rvd24gYXJyb3dcbiAgICAgICAgICAgICAgICBvblN0cmlwU2Nyb2xsLmNhbGwoIHRoaXMsIHsgZXZlbnRTb3VyY2U6IHRoaXMudHJhY2tlciwgcG9zaXRpb246IG51bGwsIHNjcm9sbDogLTEsIHNoaWZ0OiBudWxsIH0gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIDM3OiAvL2xlZnQgYXJyb3dcbiAgICAgICAgICAgICAgICBvblN0cmlwU2Nyb2xsLmNhbGwoIHRoaXMsIHsgZXZlbnRTb3VyY2U6IHRoaXMudHJhY2tlciwgcG9zaXRpb246IG51bGwsIHNjcm9sbDogLTEsIHNoaWZ0OiBudWxsIH0gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIDM5OiAvL3JpZ2h0IGFycm93XG4gICAgICAgICAgICAgICAgb25TdHJpcFNjcm9sbC5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIsIHBvc2l0aW9uOiBudWxsLCBzY3JvbGw6IDEsIHNoaWZ0OiBudWxsIH0gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coICduYXZpZ2F0b3Iga2V5Y29kZSAlcycsIGV2ZW50LmtleUNvZGUgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBvbktleVByZXNzKCBldmVudCApIHtcbiAgICAvL2NvbnNvbGUubG9nKCBldmVudC5rZXlDb2RlICk7XG5cbiAgICBpZiAoICFldmVudC5wcmV2ZW50RGVmYXVsdEFjdGlvbiAmJiAhZXZlbnQuY3RybCAmJiAhZXZlbnQuYWx0ICYmICFldmVudC5tZXRhICkge1xuICAgICAgICBzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuICAgICAgICAgICAgY2FzZSA2MTogLy89fCtcbiAgICAgICAgICAgICAgICBvblN0cmlwU2Nyb2xsLmNhbGwoIHRoaXMsIHsgZXZlbnRTb3VyY2U6IHRoaXMudHJhY2tlciwgcG9zaXRpb246IG51bGwsIHNjcm9sbDogMSwgc2hpZnQ6IG51bGwgfSApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgNDU6IC8vLXxfXG4gICAgICAgICAgICAgICAgb25TdHJpcFNjcm9sbC5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIsIHBvc2l0aW9uOiBudWxsLCBzY3JvbGw6IC0xLCBzaGlmdDogbnVsbCB9ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSA0ODogLy8wfClcbiAgICAgICAgICAgIGNhc2UgMTE5OiAvL3dcbiAgICAgICAgICAgIGNhc2UgODc6IC8vV1xuICAgICAgICAgICAgICAgIG9uU3RyaXBTY3JvbGwuY2FsbCggdGhpcywgeyBldmVudFNvdXJjZTogdGhpcy50cmFja2VyLCBwb3NpdGlvbjogbnVsbCwgc2Nyb2xsOiAxLCBzaGlmdDogbnVsbCB9ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSAxMTU6IC8vc1xuICAgICAgICAgICAgY2FzZSA4MzogLy9TXG4gICAgICAgICAgICAgICAgb25TdHJpcFNjcm9sbC5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIsIHBvc2l0aW9uOiBudWxsLCBzY3JvbGw6IC0xLCBzaGlmdDogbnVsbCB9ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSA5NzogLy9hXG4gICAgICAgICAgICAgICAgb25TdHJpcFNjcm9sbC5jYWxsKCB0aGlzLCB7IGV2ZW50U291cmNlOiB0aGlzLnRyYWNrZXIsIHBvc2l0aW9uOiBudWxsLCBzY3JvbGw6IC0xLCBzaGlmdDogbnVsbCB9ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSAxMDA6IC8vZFxuICAgICAgICAgICAgICAgIG9uU3RyaXBTY3JvbGwuY2FsbCggdGhpcywgeyBldmVudFNvdXJjZTogdGhpcy50cmFja2VyLCBwb3NpdGlvbjogbnVsbCwgc2Nyb2xsOiAxLCBzaGlmdDogbnVsbCB9ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCAnbmF2aWdhdG9yIGtleWNvZGUgJXMnLCBldmVudC5rZXlDb2RlICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cblxuXG59ICggT3BlblNlYWRyYWdvbiApICk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gRGlzcGxheVJlY3RcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIERpc3BsYXlSZWN0XG4gKiBAY2xhc3NkZXNjIEEgZGlzcGxheSByZWN0YW5nbGUgaXMgdmVyeSBzaW1pbGFyIHRvIHtAbGluayBPcGVuU2VhZHJhZ29uLlJlY3R9IGJ1dCBhZGRzIHR3b1xuICogZmllbGRzLCAnbWluTGV2ZWwnIGFuZCAnbWF4TGV2ZWwnIHdoaWNoIGRlbm90ZSB0aGUgc3VwcG9ydGVkIHpvb20gbGV2ZWxzXG4gKiBmb3IgdGhpcyByZWN0YW5nbGUuXG4gKlxuICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb25cbiAqIEBleHRlbmRzIE9wZW5TZWFkcmFnb24uUmVjdFxuICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHZlY3RvciBjb21wb25lbnQgJ3gnLlxuICogQHBhcmFtIHtOdW1iZXJ9IHkgVGhlIHZlY3RvciBjb21wb25lbnQgJ3knLlxuICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIFRoZSB2ZWN0b3IgY29tcG9uZW50ICdoZWlnaHQnLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCBUaGUgdmVjdG9yIGNvbXBvbmVudCAnd2lkdGgnLlxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbkxldmVsIFRoZSBsb3dlc3Qgem9vbSBsZXZlbCBzdXBwb3J0ZWQuXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4TGV2ZWwgVGhlIGhpZ2hlc3Qgem9vbSBsZXZlbCBzdXBwb3J0ZWQuXG4gKi9cbiQuRGlzcGxheVJlY3QgPSBmdW5jdGlvbiggeCwgeSwgd2lkdGgsIGhlaWdodCwgbWluTGV2ZWwsIG1heExldmVsICkge1xuICAgICQuUmVjdC5hcHBseSggdGhpcywgWyB4LCB5LCB3aWR0aCwgaGVpZ2h0IF0gKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb3dlc3Qgem9vbSBsZXZlbCBzdXBwb3J0ZWQuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBtaW5MZXZlbFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkRpc3BsYXlSZWN0I1xuICAgICAqL1xuICAgIHRoaXMubWluTGV2ZWwgPSBtaW5MZXZlbDtcbiAgICAvKipcbiAgICAgKiBUaGUgaGlnaGVzdCB6b29tIGxldmVsIHN1cHBvcnRlZC5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IG1heExldmVsXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uRGlzcGxheVJlY3QjXG4gICAgICovXG4gICAgdGhpcy5tYXhMZXZlbCA9IG1heExldmVsO1xufTtcblxuJC5leHRlbmQoICQuRGlzcGxheVJlY3QucHJvdG90eXBlLCAkLlJlY3QucHJvdG90eXBlICk7XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gU3ByaW5nXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIEBjbGFzcyBTcHJpbmdcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFNwcmluZyBjb25maWd1cmF0aW9uIHNldHRpbmdzLlxuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuc3ByaW5nU3RpZmZuZXNzIC0gU3ByaW5nIHN0aWZmbmVzcy4gTXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby5cbiAqIFRoZSBjbG9zZXIgdG8gemVybywgdGhlIGNsb3NlciB0byBsaW5lYXIgYW5pbWF0aW9uLlxuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuYW5pbWF0aW9uVGltZSAtIEFuaW1hdGlvbiBkdXJhdGlvbiBwZXIgc3ByaW5nLCBpbiBzZWNvbmRzLlxuICogTXVzdCBiZSB6ZXJvIG9yIGdyZWF0ZXIuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaW5pdGlhbD0wXSAtIEluaXRpYWwgdmFsdWUgb2Ygc3ByaW5nLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5leHBvbmVudGlhbD1mYWxzZV0gLSBXaGV0aGVyIHRoaXMgc3ByaW5nIHJlcHJlc2VudHNcbiAqIGFuIGV4cG9uZW50aWFsIHNjYWxlIChzdWNoIGFzIHpvb20pIGFuZCBzaG91bGQgYmUgYW5pbWF0ZWQgYWNjb3JkaW5nbHkuIE5vdGUgdGhhdFxuICogZXhwb25lbnRpYWwgc3ByaW5ncyBtdXN0IGhhdmUgbm9uLXplcm8gdmFsdWVzLlxuICovXG4kLlNwcmluZyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgaWYoIHR5cGVvZiggb3B0aW9ucyApICE9ICdvYmplY3QnICl7XG4gICAgICAgIC8vYWxsb3dzIGJhY2t3YXJkIGNvbXBhdGlibGUgdXNlIG9mICggaW5pdGlhbFZhbHVlLCBjb25maWcgKSBhc1xuICAgICAgICAvL2NvbnN0cnVjdG9yIHBhcmFtZXRlcnNcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGluaXRpYWw6IGFyZ3MubGVuZ3RoICYmIHR5cGVvZiAoIGFyZ3NbIDAgXSApID09IFwibnVtYmVyXCIgP1xuICAgICAgICAgICAgICAgIGFyZ3NbIDAgXSA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcHJpbmcgc3RpZmZuZXNzLlxuICAgICAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBzcHJpbmdTdGlmZm5lc3NcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlNwcmluZyNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3ByaW5nU3RpZmZuZXNzOiBhcmdzLmxlbmd0aCA+IDEgP1xuICAgICAgICAgICAgICAgIGFyZ3NbIDEgXS5zcHJpbmdTdGlmZm5lc3MgOlxuICAgICAgICAgICAgICAgIDUuMCxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW5pbWF0aW9uIGR1cmF0aW9uIHBlciBzcHJpbmcuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGFuaW1hdGlvblRpbWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlNwcmluZyNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYW5pbWF0aW9uVGltZTogYXJncy5sZW5ndGggPiAxID9cbiAgICAgICAgICAgICAgICBhcmdzWyAxIF0uYW5pbWF0aW9uVGltZSA6XG4gICAgICAgICAgICAgICAgMS41XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgJC5jb25zb2xlLmFzc2VydCh0eXBlb2Ygb3B0aW9ucy5zcHJpbmdTdGlmZm5lc3MgPT09IFwibnVtYmVyXCIgJiYgb3B0aW9ucy5zcHJpbmdTdGlmZm5lc3MgIT09IDAsXG4gICAgICAgIFwiW09wZW5TZWFkcmFnb24uU3ByaW5nXSBvcHRpb25zLnNwcmluZ1N0aWZmbmVzcyBtdXN0IGJlIGEgbm9uLXplcm8gbnVtYmVyXCIpO1xuXG4gICAgJC5jb25zb2xlLmFzc2VydCh0eXBlb2Ygb3B0aW9ucy5hbmltYXRpb25UaW1lID09PSBcIm51bWJlclwiICYmIG9wdGlvbnMuYW5pbWF0aW9uVGltZSA+PSAwLFxuICAgICAgICBcIltPcGVuU2VhZHJhZ29uLlNwcmluZ10gb3B0aW9ucy5hbmltYXRpb25UaW1lIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDBcIik7XG5cbiAgICBpZiAob3B0aW9ucy5leHBvbmVudGlhbCkge1xuICAgICAgICB0aGlzLl9leHBvbmVudGlhbCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmV4cG9uZW50aWFsO1xuICAgIH1cblxuICAgICQuZXh0ZW5kKCB0cnVlLCB0aGlzLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gY3VycmVudFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlNwcmluZyNcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gdGltZVxuICAgICAqL1xuICAgIHRoaXMuY3VycmVudCA9IHtcbiAgICAgICAgdmFsdWU6IHR5cGVvZiAoIHRoaXMuaW5pdGlhbCApID09IFwibnVtYmVyXCIgP1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsIDpcbiAgICAgICAgICAgICh0aGlzLl9leHBvbmVudGlhbCA/IDAgOiAxKSxcbiAgICAgICAgdGltZTogICQubm93KCkgLy8gYWx3YXlzIHdvcmsgaW4gbWlsbGlzZWNvbmRzXG4gICAgfTtcblxuICAgICQuY29uc29sZS5hc3NlcnQoIXRoaXMuX2V4cG9uZW50aWFsIHx8IHRoaXMuY3VycmVudC52YWx1ZSAhPT0gMCxcbiAgICAgICAgXCJbT3BlblNlYWRyYWdvbi5TcHJpbmddIHZhbHVlIG11c3QgYmUgbm9uLXplcm8gZm9yIGV4cG9uZW50aWFsIHNwcmluZ3NcIik7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uU3ByaW5nI1xuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aW1lXG4gICAgICovXG4gICAgdGhpcy5zdGFydCA9IHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY3VycmVudC52YWx1ZSxcbiAgICAgICAgdGltZTogIHRoaXMuY3VycmVudC50aW1lXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gdGFyZ2V0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uU3ByaW5nI1xuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aW1lXG4gICAgICovXG4gICAgdGhpcy50YXJnZXQgPSB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmN1cnJlbnQudmFsdWUsXG4gICAgICAgIHRpbWU6ICB0aGlzLmN1cnJlbnQudGltZVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5fZXhwb25lbnRpYWwpIHtcbiAgICAgICAgdGhpcy5zdGFydC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLnN0YXJ0LnZhbHVlKTtcbiAgICAgICAgdGhpcy50YXJnZXQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy50YXJnZXQudmFsdWUpO1xuICAgICAgICB0aGlzLmN1cnJlbnQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy5jdXJyZW50LnZhbHVlKTtcbiAgICB9XG59O1xuXG4vKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uU3ByaW5nLnByb3RvdHlwZSAqL1xuJC5TcHJpbmcucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRhcmdldFxuICAgICAqL1xuICAgIHJlc2V0VG86IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoIXRoaXMuX2V4cG9uZW50aWFsIHx8IHRhcmdldCAhPT0gMCxcbiAgICAgICAgICAgIFwiW09wZW5TZWFkcmFnb24uU3ByaW5nLnJlc2V0VG9dIHRhcmdldCBtdXN0IGJlIG5vbi16ZXJvIGZvciBleHBvbmVudGlhbCBzcHJpbmdzXCIpO1xuXG4gICAgICAgIHRoaXMuc3RhcnQudmFsdWUgPSB0aGlzLnRhcmdldC52YWx1ZSA9IHRoaXMuY3VycmVudC52YWx1ZSA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5zdGFydC50aW1lID0gdGhpcy50YXJnZXQudGltZSA9IHRoaXMuY3VycmVudC50aW1lID0gJC5ub3coKTtcblxuICAgICAgICBpZiAodGhpcy5fZXhwb25lbnRpYWwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy5zdGFydC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy5jdXJyZW50LnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGFyZ2V0XG4gICAgICovXG4gICAgc3ByaW5nVG86IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoIXRoaXMuX2V4cG9uZW50aWFsIHx8IHRhcmdldCAhPT0gMCxcbiAgICAgICAgICAgIFwiW09wZW5TZWFkcmFnb24uU3ByaW5nLnNwcmluZ1RvXSB0YXJnZXQgbXVzdCBiZSBub24temVybyBmb3IgZXhwb25lbnRpYWwgc3ByaW5nc1wiKTtcblxuICAgICAgICB0aGlzLnN0YXJ0LnZhbHVlICA9IHRoaXMuY3VycmVudC52YWx1ZTtcbiAgICAgICAgdGhpcy5zdGFydC50aW1lICAgPSB0aGlzLmN1cnJlbnQudGltZTtcbiAgICAgICAgdGhpcy50YXJnZXQudmFsdWUgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMudGFyZ2V0LnRpbWUgID0gdGhpcy5zdGFydC50aW1lICsgMTAwMCAqIHRoaXMuYW5pbWF0aW9uVGltZTtcblxuICAgICAgICBpZiAodGhpcy5fZXhwb25lbnRpYWwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy5zdGFydC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAgICovXG4gICAgc2hpZnRCeTogZnVuY3Rpb24oIGRlbHRhICkge1xuICAgICAgICB0aGlzLnN0YXJ0LnZhbHVlICArPSBkZWx0YTtcbiAgICAgICAgdGhpcy50YXJnZXQudmFsdWUgKz0gZGVsdGE7XG5cbiAgICAgICAgaWYgKHRoaXMuX2V4cG9uZW50aWFsKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KHRoaXMudGFyZ2V0LnZhbHVlICE9PSAwICYmIHRoaXMuc3RhcnQudmFsdWUgIT09IDAsXG4gICAgICAgICAgICAgICAgXCJbT3BlblNlYWRyYWdvbi5TcHJpbmcuc2hpZnRCeV0gc3ByaW5nIHZhbHVlIG11c3QgYmUgbm9uLXplcm8gZm9yIGV4cG9uZW50aWFsIHNwcmluZ3NcIik7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnQuX2xvZ1ZhbHVlID0gTWF0aC5sb2codGhpcy5zdGFydC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0RXhwb25lbnRpYWw6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2V4cG9uZW50aWFsID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX2V4cG9uZW50aWFsKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KHRoaXMuY3VycmVudC52YWx1ZSAhPT0gMCAmJiB0aGlzLnRhcmdldC52YWx1ZSAhPT0gMCAmJiB0aGlzLnN0YXJ0LnZhbHVlICE9PSAwLFxuICAgICAgICAgICAgICAgIFwiW09wZW5TZWFkcmFnb24uU3ByaW5nLnNldEV4cG9uZW50aWFsXSBzcHJpbmcgdmFsdWUgbXVzdCBiZSBub24temVybyBmb3IgZXhwb25lbnRpYWwgc3ByaW5nc1wiKTtcblxuICAgICAgICAgICAgdGhpcy5zdGFydC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLnN0YXJ0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Ll9sb2dWYWx1ZSA9IE1hdGgubG9nKHRoaXMudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5fbG9nVmFsdWUgPSBNYXRoLmxvZyh0aGlzLmN1cnJlbnQudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC50aW1lICA9ICQubm93KCk7XG5cbiAgICAgICAgdmFyIHN0YXJ0VmFsdWUsIHRhcmdldFZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fZXhwb25lbnRpYWwpIHtcbiAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0aGlzLnN0YXJ0Ll9sb2dWYWx1ZTtcbiAgICAgICAgICAgIHRhcmdldFZhbHVlID0gdGhpcy50YXJnZXQuX2xvZ1ZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IHRoaXMuc3RhcnQudmFsdWU7XG4gICAgICAgICAgICB0YXJnZXRWYWx1ZSA9IHRoaXMudGFyZ2V0LnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICh0aGlzLmN1cnJlbnQudGltZSA+PSB0aGlzLnRhcmdldC50aW1lKSA/XG4gICAgICAgICAgICB0YXJnZXRWYWx1ZSA6XG4gICAgICAgICAgICBzdGFydFZhbHVlICtcbiAgICAgICAgICAgICAgICAoIHRhcmdldFZhbHVlIC0gc3RhcnRWYWx1ZSApICpcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaW5nU3RpZmZuZXNzLFxuICAgICAgICAgICAgICAgICAgICAoIHRoaXMuY3VycmVudC50aW1lIC0gdGhpcy5zdGFydC50aW1lICkgL1xuICAgICAgICAgICAgICAgICAgICAoIHRoaXMudGFyZ2V0LnRpbWUgIC0gdGhpcy5zdGFydC50aW1lIClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLl9leHBvbmVudGlhbCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50LnZhbHVlID0gTWF0aC5leHAoY3VycmVudFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC52YWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNwcmluZyBpcyBhdCB0aGUgdGFyZ2V0IHZhbHVlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYXQgdGFyZ2V0IHZhbHVlLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0F0VGFyZ2V0VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50LnZhbHVlID09PSB0aGlzLnRhcmdldC52YWx1ZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybSggc3RpZmZuZXNzLCB4ICkge1xuICAgIHJldHVybiAoIDEuMCAtIE1hdGguZXhwKCBzdGlmZm5lc3MgKiAteCApICkgL1xuICAgICAgICAoIDEuMCAtIE1hdGguZXhwKCAtc3RpZmZuZXNzICkgKTtcbn1cblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBJbWFnZUxvYWRlclxuICpcbiAqIENvcHlyaWdodCAoQykgMjAwOSBDb2RlUGxleCBGb3VuZGF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTAtMjAxMyBPcGVuU2VhZHJhZ29uIGNvbnRyaWJ1dG9yc1xuXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8vIHByaXZhdGUgY2xhc3NcbmZ1bmN0aW9uIEltYWdlSm9iICggb3B0aW9ucyApIHtcblxuICAgICQuZXh0ZW5kKCB0cnVlLCB0aGlzLCB7XG4gICAgICAgIHRpbWVvdXQ6ICAgICAgICAkLkRFRkFVTFRfU0VUVElOR1MudGltZW91dCxcbiAgICAgICAgam9iSWQ6ICAgICAgICAgIG51bGxcbiAgICB9LCBvcHRpb25zICk7XG5cbiAgICAvKipcbiAgICAgKiBJbWFnZSBvYmplY3Qgd2hpY2ggd2lsbCBjb250YWluIGRvd25sb2FkZWQgaW1hZ2UuXG4gICAgICogQG1lbWJlciB7SW1hZ2V9IGltYWdlXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uSW1hZ2VKb2IjXG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IG51bGw7XG59XG5cbkltYWdlSm9iLnByb3RvdHlwZSA9IHtcbiAgICBlcnJvck1zZzogbnVsbCxcbiAgICBzdGFydDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgaWYgKCB0aGlzLmNyb3NzT3JpZ2luUG9saWN5ICE9PSBmYWxzZSApIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmNyb3NzT3JpZ2luUG9saWN5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgX3RoaXMuZmluaXNoKCB0cnVlICk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW1hZ2Uub25hYm9ydCA9IHRoaXMuaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfdGhpcy5lcnJvck1zZyA9IFwiSW1hZ2UgbG9hZCBhYm9ydGVkXCI7XG4gICAgICAgICAgICBfdGhpcy5maW5pc2goIGZhbHNlICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5qb2JJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgX3RoaXMuZXJyb3JNc2cgPSBcIkltYWdlIGxvYWQgZXhjZWVkZWQgdGltZW91dFwiO1xuICAgICAgICAgICAgX3RoaXMuZmluaXNoKCBmYWxzZSApO1xuICAgICAgICB9LCB0aGlzLnRpbWVvdXQpO1xuXG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gdGhpcy5zcmM7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oIHN1Y2Nlc3NmdWwgKSB7XG4gICAgICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gdGhpcy5pbWFnZS5vbmVycm9yID0gdGhpcy5pbWFnZS5vbmFib3J0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFzdWNjZXNzZnVsKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdGhpcy5qb2JJZCApIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoIHRoaXMuam9iSWQgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2soIHRoaXMgKTtcbiAgICB9XG5cbn07XG5cbi8qKlxuICogQGNsYXNzIEltYWdlTG9hZGVyXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGNsYXNzZGVzYyBIYW5kbGVzIGRvd25sb2FkaW5nIG9mIGEgc2V0IG9mIGltYWdlcyB1c2luZyBhc3luY2hyb25vdXMgcXVldWUgcGF0dGVybi5cbiAqIFlvdSBnZW5lcmFsbHkgd29uJ3QgaGF2ZSB0byBpbnRlcmFjdCB3aXRoIHRoZSBJbWFnZUxvYWRlciBkaXJlY3RseS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBJbWFnZUxvYWRlci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5qb2JMaW1pdF0gLSBUaGUgbnVtYmVyIG9mIGNvbmN1cnJlbnQgaW1hZ2UgcmVxdWVzdHMuIFNlZSBpbWFnZUxvYWRlckxpbWl0IGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9IGZvciBkZXRhaWxzLlxuICovXG4kLkltYWdlTG9hZGVyID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cbiAgICAkLmV4dGVuZCggdHJ1ZSwgdGhpcywge1xuICAgICAgICBqb2JMaW1pdDogICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmltYWdlTG9hZGVyTGltaXQsXG4gICAgICAgIGpvYlF1ZXVlOiAgICAgICBbXSxcbiAgICAgICAgam9ic0luUHJvZ3Jlc3M6IDBcbiAgICB9LCBvcHRpb25zICk7XG5cbn07XG5cbi8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5JbWFnZUxvYWRlci5wcm90b3R5cGUgKi9cbiQuSW1hZ2VMb2FkZXIucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIHVubG9hZGVkIGltYWdlIHRvIHRoZSBsb2FkZXIgcXVldWUuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgLSBVUkwgb2YgaW1hZ2UgdG8gZG93bmxvYWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNyb3NzT3JpZ2luUG9saWN5IC0gQ09SUyBwb2xpY3kgdG8gdXNlIGZvciBkb3dubG9hZHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIENhbGxlZCBvbmNlIGltYWdlIGhhcyBiZWVuIGRvd25sb2FkZWQuXG4gICAgICovXG4gICAgYWRkSm9iOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGNvbXBsZXRlID0gZnVuY3Rpb24oIGpvYiApIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUpvYiggX3RoaXMsIGpvYiwgb3B0aW9ucy5jYWxsYmFjayApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGpvYk9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgc3JjOiBvcHRpb25zLnNyYyxcbiAgICAgICAgICAgICAgICBjcm9zc09yaWdpblBvbGljeTogb3B0aW9ucy5jcm9zc09yaWdpblBvbGljeSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY29tcGxldGUsXG4gICAgICAgICAgICAgICAgYWJvcnQ6IG9wdGlvbnMuYWJvcnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXdKb2IgPSBuZXcgSW1hZ2VKb2IoIGpvYk9wdGlvbnMgKTtcblxuICAgICAgICBpZiAoICF0aGlzLmpvYkxpbWl0IHx8IHRoaXMuam9ic0luUHJvZ3Jlc3MgPCB0aGlzLmpvYkxpbWl0ICkge1xuICAgICAgICAgICAgbmV3Sm9iLnN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLmpvYnNJblByb2dyZXNzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmpvYlF1ZXVlLnB1c2goIG5ld0pvYiApO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFueSB1bnN0YXJ0ZWQgaW1hZ2UgbG9hZGluZyBqb2JzIGZyb20gdGhlIHF1ZXVlLlxuICAgICAqIEBtZXRob2RcbiAgICAgKi9cbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5qb2JRdWV1ZS5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIHZhciBqb2IgPSB0aGlzLmpvYlF1ZXVlW2ldO1xuICAgICAgICAgICAgaWYgKCB0eXBlb2Ygam9iLmFib3J0ID09PSBcImZ1bmN0aW9uXCIgKSB7XG4gICAgICAgICAgICAgICAgam9iLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmpvYlF1ZXVlID0gW107XG4gICAgfVxufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgSW1hZ2VKb2Igb25jZSBjb21wbGV0ZWQuXG4gKiBAbWV0aG9kXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGxvYWRlciAtIEltYWdlTG9hZGVyIHVzZWQgdG8gc3RhcnQgam9iLlxuICogQHBhcmFtIGpvYiAtIFRoZSBJbWFnZUpvYiB0aGF0IGhhcyBjb21wbGV0ZWQuXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBDYWxsZWQgb25jZSBjbGVhbnVwIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBjb21wbGV0ZUpvYiggbG9hZGVyLCBqb2IsIGNhbGxiYWNrICkge1xuICAgIHZhciBuZXh0Sm9iO1xuXG4gICAgbG9hZGVyLmpvYnNJblByb2dyZXNzLS07XG5cbiAgICBpZiAoICghbG9hZGVyLmpvYkxpbWl0IHx8IGxvYWRlci5qb2JzSW5Qcm9ncmVzcyA8IGxvYWRlci5qb2JMaW1pdCkgJiYgbG9hZGVyLmpvYlF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmV4dEpvYiA9IGxvYWRlci5qb2JRdWV1ZS5zaGlmdCgpO1xuICAgICAgICBuZXh0Sm9iLnN0YXJ0KCk7XG4gICAgICAgIGxvYWRlci5qb2JzSW5Qcm9ncmVzcysrO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKCBqb2IuaW1hZ2UsIGpvYi5lcnJvck1zZyApO1xufVxuXG59KCBPcGVuU2VhZHJhZ29uICkpO1xuXG4vKlxuICogT3BlblNlYWRyYWdvbiAtIFRpbGVcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIFRpbGVcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgVGhlIHpvb20gbGV2ZWwgdGhpcyB0aWxlIGJlbG9uZ3MgdG8uXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgdmVjdG9yIGNvbXBvbmVudCAneCcuXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgdmVjdG9yIGNvbXBvbmVudCAneScuXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGJvdW5kcyBXaGVyZSB0aGlzIHRpbGUgZml0cywgaW4gbm9ybWFsaXplZFxuICogICAgICBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXhpc3RzIElzIHRoaXMgdGlsZSBhIHBhcnQgb2YgYSBzcGFyc2UgaW1hZ2U/ICggQWxzbyBoYXNcbiAqICAgICAgdGhpcyB0aWxlIGZhaWxlZCB0byBsb2FkPyApXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgb2YgdGhpcyB0aWxlJ3MgaW1hZ2UuXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dDJEIFRoZSBjb250ZXh0MkQgb2YgdGhpcyB0aWxlIGlmIGl0XG4gKiBpcyBwcm92aWRlZCBkaXJlY3RseSBieSB0aGUgdGlsZSBzb3VyY2UuXG4gKi9cbiQuVGlsZSA9IGZ1bmN0aW9uKGxldmVsLCB4LCB5LCBib3VuZHMsIGV4aXN0cywgdXJsLCBjb250ZXh0MkQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgem9vbSBsZXZlbCB0aGlzIHRpbGUgYmVsb25ncyB0by5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGxldmVsXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLmxldmVsICAgPSBsZXZlbDtcbiAgICAvKipcbiAgICAgKiBUaGUgdmVjdG9yIGNvbXBvbmVudCAneCcuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSB4XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLnggICAgICAgPSB4O1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZWN0b3IgY29tcG9uZW50ICd5Jy5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHlcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMueSAgICAgICA9IHk7XG4gICAgLyoqXG4gICAgICogV2hlcmUgdGhpcyB0aWxlIGZpdHMsIGluIG5vcm1hbGl6ZWQgY29vcmRpbmF0ZXNcbiAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLlJlY3R9IGJvdW5kc1xuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5ib3VuZHMgID0gYm91bmRzO1xuICAgIC8qKlxuICAgICAqIElzIHRoaXMgdGlsZSBhIHBhcnQgb2YgYSBzcGFyc2UgaW1hZ2U/IEFsc28gaGFzIHRoaXMgdGlsZSBmYWlsZWQgdG8gbG9hZD9cbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBleGlzdHNcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMuZXhpc3RzICA9IGV4aXN0cztcbiAgICAvKipcbiAgICAgKiBUaGUgVVJMIG9mIHRoaXMgdGlsZSdzIGltYWdlLlxuICAgICAqIEBtZW1iZXIge1N0cmluZ30gdXJsXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLnVybCAgICAgPSB1cmw7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRleHQyRCBvZiB0aGlzIHRpbGUgaWYgaXQgaXMgcHJvdmlkZWQgZGlyZWN0bHkgYnkgdGhlIHRpbGUgc291cmNlLlxuICAgICAqIEBtZW1iZXIge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dDJEXG4gICAgICogQG1lbWJlck9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRleHQyRCA9IGNvbnRleHQyRDtcbiAgICAvKipcbiAgICAgKiBJcyB0aGlzIHRpbGUgbG9hZGVkP1xuICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGxvYWRlZFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5sb2FkZWQgID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSXMgdGhpcyB0aWxlIGxvYWRpbmc/XG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbG9hZGluZ1xuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSFRNTCBkaXYgZWxlbWVudCBmb3IgdGhpcyB0aWxlXG4gICAgICogQG1lbWJlciB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5lbGVtZW50ICAgID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBUaGUgSFRNTCBpbWcgZWxlbWVudCBmb3IgdGhpcyB0aWxlLlxuICAgICAqIEBtZW1iZXIge0VsZW1lbnR9IGltZ0VsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMuaW1nRWxlbWVudCA9IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhlIEltYWdlIG9iamVjdCBmb3IgdGhpcyB0aWxlLlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gaW1hZ2VcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMuaW1hZ2UgICAgICA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYWxpYXMgb2YgdGhpcy5lbGVtZW50LnN0eWxlLlxuICAgICAqIEBtZW1iZXIge1N0cmluZ30gc3R5bGVcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMuc3R5bGUgICAgICA9IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhpcyB0aWxlJ3MgcG9zaXRpb24gb24gc2NyZWVuLCBpbiBwaXhlbHMuXG4gICAgICogQG1lbWJlciB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9zaXRpb25cbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gICA9IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhpcyB0aWxlJ3Mgc2l6ZSBvbiBzY3JlZW4sIGluIHBpeGVscy5cbiAgICAgKiBAbWVtYmVyIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBzaXplXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLnNpemUgICAgICAgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCB0aW1lIG9mIHRoaXMgdGlsZSdzIGJsZW5kaW5nLlxuICAgICAqIEBtZW1iZXIge051bWJlcn0gYmxlbmRTdGFydFxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5ibGVuZFN0YXJ0ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBvcGFjaXR5IHRoaXMgdGlsZSBzaG91bGQgYmUuXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBvcGFjaXR5XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLm9wYWNpdHkgICAgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSBkaXN0YW5jZSBvZiB0aGlzIHRpbGUgdG8gdGhlIHZpZXdwb3J0IGNlbnRlci5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGRpc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVGlsZSNcbiAgICAgKi9cbiAgICB0aGlzLmRpc3RhbmNlICAgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSB2aXNpYmlsaXR5IHNjb3JlIG9mIHRoaXMgdGlsZS5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHZpc2liaWxpdHlcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5UaWxlI1xuICAgICAqL1xuICAgIHRoaXMudmlzaWJpbGl0eSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgdGlsZSBpcyBjdXJyZW50bHkgYmVpbmcgZHJhd24uXG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYmVpbmdEcmF3blxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5iZWluZ0RyYXduICAgICA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFRpbWVzdGFtcCB0aGUgdGlsZSB3YXMgbGFzdCB0b3VjaGVkLlxuICAgICAqIEBtZW1iZXIge051bWJlcn0gbGFzdFRvdWNoVGltZVxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlRpbGUjXG4gICAgICovXG4gICAgdGhpcy5sYXN0VG91Y2hUaW1lICA9IDA7XG59O1xuXG4vKiogQGxlbmRzIE9wZW5TZWFkcmFnb24uVGlsZS5wcm90b3R5cGUgKi9cbiQuVGlsZS5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHRpbGVzIGxldmVsIGFuZCAoeCx5KVxuICAgICAqIGNvbXBvbmVudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxldmVsICsgXCIvXCIgKyB0aGlzLnggKyBcIl9cIiArIHRoaXMueTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9oYXNUcmFuc3BhcmVuY3lDaGFubmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5jb250ZXh0MkQgfHwgdGhpcy51cmwubWF0Y2goJy5wbmcnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgdGlsZSBpbiBhbiBodG1sIGNvbnRhaW5lci5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRhaW5lclxuICAgICAqL1xuICAgIGRyYXdIVE1MOiBmdW5jdGlvbiggY29udGFpbmVyICkge1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGVJbWFnZVJlY29yZCkge1xuICAgICAgICAgICAgJC5jb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgJ1tUaWxlLmRyYXdIVE1MXSBhdHRlbXB0aW5nIHRvIGRyYXcgdGlsZSAlcyB3aGVuIGl0XFwncyBub3QgY2FjaGVkJyxcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhdGhpcy5sb2FkZWQgKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBcIkF0dGVtcHRpbmcgdG8gZHJhdyB0aWxlICVzIHdoZW4gaXQncyBub3QgeWV0IGxvYWRlZC5cIixcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvL0VYUEVSSU1FTlRBTCAtIHRyeWluZyB0byBmaWd1cmUgb3V0IGhvdyB0byBzY2FsZSB0aGUgY29udGFpbmVyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgY29udGVudCBkdXJpbmcgYW5pbWF0aW9uIG9mIHRoZSBjb250YWluZXIgc2l6ZS5cblxuICAgICAgICBpZiAoICF0aGlzLmVsZW1lbnQgKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCBcImRpdlwiICk7XG4gICAgICAgICAgICB0aGlzLmltZ0VsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHRoaXMuY2FjaGVJbWFnZVJlY29yZC5nZXRJbWFnZSgpLmNsb25lTm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5pbWdFbGVtZW50LnN0eWxlLm1zSW50ZXJwb2xhdGlvbk1vZGUgPSBcIm5lYXJlc3QtbmVpZ2hib3JcIjtcbiAgICAgICAgICAgIHRoaXMuaW1nRWxlbWVudC5zdHlsZS53aWR0aCAgICAgICAgICAgICAgID0gXCIxMDAlXCI7XG4gICAgICAgICAgICB0aGlzLmltZ0VsZW1lbnQuc3R5bGUuaGVpZ2h0ICAgICAgICAgICAgICA9IFwiMTAwJVwiO1xuXG4gICAgICAgICAgICB0aGlzLnN0eWxlICAgICAgICAgICAgICAgICAgICAgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnBvc2l0aW9uICAgICAgICAgICAgPSBcImFic29sdXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPSBjb250YWluZXIgKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAgICAgICB9XG4gICAgICAgIGlmICggdGhpcy5pbWdFbGVtZW50LnBhcmVudE5vZGUgIT0gdGhpcy5lbGVtZW50ICkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmltZ0VsZW1lbnQgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3R5bGUudG9wICAgICA9IHRoaXMucG9zaXRpb24ueSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5zdHlsZS5sZWZ0ICAgID0gdGhpcy5wb3NpdGlvbi54ICsgXCJweFwiO1xuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCAgPSB0aGlzLnNpemUueSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCAgID0gdGhpcy5zaXplLnggKyBcInB4XCI7XG5cbiAgICAgICAgJC5zZXRFbGVtZW50T3BhY2l0eSggdGhpcy5lbGVtZW50LCB0aGlzLm9wYWNpdHkgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgdGlsZSBpbiBhIGNhbnZhcy1iYXNlZCBjb250ZXh0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Q2FudmFzfSBjb250ZXh0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhd2luZ0hhbmRsZXIgLSBNZXRob2QgZm9yIGZpcmluZyB0aGUgZHJhd2luZyBldmVudC5cbiAgICAgKiBkcmF3aW5nSGFuZGxlcih7Y29udGV4dCwgdGlsZSwgcmVuZGVyZWR9KVxuICAgICAqIHdoZXJlIDxjb2RlPnJlbmRlcmVkPC9jb2RlPiBpcyB0aGUgY29udGV4dCB3aXRoIHRoZSBwcmUtZHJhd24gaW1hZ2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZT0xXSAtIEFwcGx5IGEgc2NhbGUgdG8gcG9zaXRpb24gYW5kIHNpemVcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IFt0cmFuc2xhdGVdIC0gQSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAgICAgKi9cbiAgICBkcmF3Q2FudmFzOiBmdW5jdGlvbiggY29udGV4dCwgZHJhd2luZ0hhbmRsZXIsIHNjYWxlLCB0cmFuc2xhdGUgKSB7XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50aW1lcygkLnBpeGVsRGVuc2l0eVJhdGlvKSxcbiAgICAgICAgICAgIHNpemUgICAgID0gdGhpcy5zaXplLnRpbWVzKCQucGl4ZWxEZW5zaXR5UmF0aW8pLFxuICAgICAgICAgICAgcmVuZGVyZWQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQyRCAmJiAhdGhpcy5jYWNoZUltYWdlUmVjb3JkKSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnW1RpbGUuZHJhd0NhbnZhc10gYXR0ZW1wdGluZyB0byBkcmF3IHRpbGUgJXMgd2hlbiBpdFxcJ3Mgbm90IGNhY2hlZCcsXG4gICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcmVkID0gdGhpcy5jb250ZXh0MkQgfHwgdGhpcy5jYWNoZUltYWdlUmVjb3JkLmdldFJlbmRlcmVkQ29udGV4dCgpO1xuXG4gICAgICAgIGlmICggIXRoaXMubG9hZGVkIHx8ICFyZW5kZXJlZCApe1xuICAgICAgICAgICAgJC5jb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgXCJBdHRlbXB0aW5nIHRvIGRyYXcgdGlsZSAlcyB3aGVuIGl0J3Mgbm90IHlldCBsb2FkZWQuXCIsXG4gICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gdGhpcy5vcGFjaXR5O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc2NhbGUgPT09ICdudW1iZXInICYmIHNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICAvLyBkcmF3IHRpbGUgYXQgYSBkaWZmZXJlbnQgc2NhbGVcbiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24udGltZXMoc2NhbGUpO1xuICAgICAgICAgICAgc2l6ZSA9IHNpemUudGltZXMoc2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zbGF0ZSBpbnN0YW5jZW9mICQuUG9pbnQpIHtcbiAgICAgICAgICAgIC8vIHNoaWZ0IHRpbGUgcG9zaXRpb24gc2xpZ2h0bHlcbiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24ucGx1cyh0cmFuc2xhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB3ZSBhcmUgc3VwcG9zZWQgdG8gYmUgcmVuZGVyaW5nIGZ1bGx5IG9wYXF1ZSByZWN0YW5nbGUsXG4gICAgICAgIC8vaWUgaXRzIGRvbmUgZmFkaW5nIG9yIGZhZGluZyBpcyB0dXJuZWQgb2ZmLCBhbmQgaWYgd2UgYXJlIGRyYXdpbmdcbiAgICAgICAgLy9hbiBpbWFnZSB3aXRoIGFuIGFscGhhIGNoYW5uZWwsIHRoZW4gdGhlIG9ubHkgd2F5XG4gICAgICAgIC8vdG8gYXZvaWQgc2VlaW5nIHRoZSB0aWxlIHVuZGVybmVhdGggaXMgdG8gY2xlYXIgdGhlIHJlY3RhbmdsZVxuICAgICAgICBpZiAoY29udGV4dC5nbG9iYWxBbHBoYSA9PT0gMSAmJiB0aGlzLl9oYXNUcmFuc3BhcmVuY3lDaGFubmVsKCkpIHtcbiAgICAgICAgICAgIC8vY2xlYXJpbmcgb25seSB0aGUgaW5zaWRlIG9mIHRoZSByZWN0YW5nbGUgb2NjdXBpZWRcbiAgICAgICAgICAgIC8vYnkgdGhlIHBuZyBwcmV2ZW50cyBlZGdlIGZsaWtlcmluZ1xuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueCArIDEsXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueSArIDEsXG4gICAgICAgICAgICAgICAgc2l6ZS54IC0gMixcbiAgICAgICAgICAgICAgICBzaXplLnkgLSAyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBnaXZlcyB0aGUgYXBwbGljYXRpb24gYSBjaGFuY2UgdG8gbWFrZSBpbWFnZSBtYW5pcHVsYXRpb25cbiAgICAgICAgLy8gY2hhbmdlcyBhcyB3ZSBhcmUgcmVuZGVyaW5nIHRoZSBpbWFnZVxuICAgICAgICBkcmF3aW5nSGFuZGxlcih7Y29udGV4dDogY29udGV4dCwgdGlsZTogdGhpcywgcmVuZGVyZWQ6IHJlbmRlcmVkfSk7XG5cbiAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICByZW5kZXJlZC5jYW52YXMsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIHJlbmRlcmVkLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIHJlbmRlcmVkLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICBwb3NpdGlvbi54LFxuICAgICAgICAgICAgcG9zaXRpb24ueSxcbiAgICAgICAgICAgIHNpemUueCxcbiAgICAgICAgICAgIHNpemUueVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJhdGlvIGJldHdlZW4gY3VycmVudCBhbmQgb3JpZ2luYWwgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtGbG9hdH1cbiAgICAgKi9cbiAgICBnZXRTY2FsZUZvckVkZ2VTbW9vdGhpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29udGV4dDtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVJbWFnZVJlY29yZCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMuY2FjaGVJbWFnZVJlY29yZC5nZXRSZW5kZXJlZENvbnRleHQoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRleHQyRCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMuY29udGV4dDJEO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5jb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgJ1tUaWxlLmRyYXdDYW52YXNdIGF0dGVtcHRpbmcgdG8gZ2V0IHRpbGUgc2NhbGUgJXMgd2hlbiB0aWxlXFwncyBub3QgY2FjaGVkJyxcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY2FudmFzLndpZHRoIC8gKHRoaXMuc2l6ZS54ICogJC5waXhlbERlbnNpdHlSYXRpbyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHRyYW5zbGF0aW9uIHZlY3RvciB0aGF0IHdoZW4gYXBwbGllZCB0byB0aGUgdGlsZSBwb3NpdGlvbiBwcm9kdWNlcyBpbnRlZ2VyIGNvb3JkaW5hdGVzLlxuICAgICAqIE5lZWRlZCB0byBhdm9pZCBzd2ltbWluZyBhbmQgdHdpdGNoaW5nLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGU9MV0gLSBTY2FsZSB0byBiZSBhcHBsaWVkIHRvIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgZ2V0VHJhbnNsYXRpb25Gb3JFZGdlU21vb3RoaW5nOiBmdW5jdGlvbihzY2FsZSwgY2FudmFzU2l6ZSwgc2tldGNoQ2FudmFzU2l6ZSkge1xuICAgICAgICAvLyBUaGUgdHJhbnNsYXRpb24gdmVjdG9yIG11c3QgaGF2ZSBwb3NpdGl2ZSB2YWx1ZXMsIG90aGVyd2lzZSB0aGUgaW1hZ2UgZ29lcyBhIGJpdCBvZmZcbiAgICAgICAgLy8gdGhlIHNrZXRjaCBjYW52YXMgdG8gdGhlIHRvcCBhbmQgbGVmdCBhbmQgd2UgbXVzdCB1c2UgbmVnYXRpdmUgY29vcmRpbmF0ZXMgdG8gcmVwYWludCBpdFxuICAgICAgICAvLyB0byB0aGUgbWFpbiBjYW52YXMuIEluIHRoYXQgY2FzZSwgc29tZSBicm93c2VycyB0aHJvdzpcbiAgICAgICAgLy8gSU5ERVhfU0laRV9FUlI6IERPTSBFeGNlcHRpb24gMTogSW5kZXggb3Igc2l6ZSB3YXMgbmVnYXRpdmUsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgYWxsb3dlZCB2YWx1ZS5cbiAgICAgICAgdmFyIHggPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwoKHNrZXRjaENhbnZhc1NpemUueCAtIGNhbnZhc1NpemUueCkgLyAyKSk7XG4gICAgICAgIHZhciB5ID0gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKChza2V0Y2hDYW52YXNTaXplLnkgLSBjYW52YXNTaXplLnkpIC8gMikpO1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoeCwgeSkubWludXMoXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLnRpbWVzKCQucGl4ZWxEZW5zaXR5UmF0aW8pXG4gICAgICAgICAgICAgICAgLnRpbWVzKHNjYWxlIHx8IDEpXG4gICAgICAgICAgICAgICAgLmFwcGx5KGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHggJSAxO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGlsZSBmcm9tIGl0cyBjb250YWluZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgdW5sb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLmltZ0VsZW1lbnQgJiYgdGhpcy5pbWdFbGVtZW50LnBhcmVudE5vZGUgKSB7XG4gICAgICAgICAgICB0aGlzLmltZ0VsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5pbWdFbGVtZW50ICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCB0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5lbGVtZW50ICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnQgICAgPSBudWxsO1xuICAgICAgICB0aGlzLmltZ0VsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmxvYWRlZCAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2FkaW5nICAgID0gZmFsc2U7XG4gICAgfVxufTtcblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBPdmVybGF5XG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbigkKSB7XG5cbiAgICAvKipcbiAgICAgKiBBbiBlbnVtZXJhdGlvbiBvZiBwb3NpdGlvbnMgdGhhdCBhbiBvdmVybGF5IG1heSBiZSBhc3NpZ25lZCByZWxhdGl2ZSB0b1xuICAgICAqIHRoZSB2aWV3cG9ydC5cbiAgICAgKiBJdCBpcyBpZGVudGljYWwgdG8gT3BlblNlYWRyYWdvbi5QbGFjZW1lbnQgYnV0IGlzIGtlcHQgZm9yIGJhY2t3YXJkXG4gICAgICogY29tcGF0aWJpbGl0eS5cbiAgICAgKiBAbWVtYmVyIE92ZXJsYXlQbGFjZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBDRU5URVJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gVE9QX0xFRlRcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gVE9QXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFRPUF9SSUdIVFxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBSSUdIVFxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBCT1RUT01fUklHSFRcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gQk9UVE9NXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEJPVFRPTV9MRUZUXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IExFRlRcbiAgICAgKi9cbiAgICAkLk92ZXJsYXlQbGFjZW1lbnQgPSAkLlBsYWNlbWVudDtcblxuICAgIC8qKlxuICAgICAqIEFuIGVudW1lcmF0aW9uIG9mIHBvc3NpYmxlIHdheXMgdG8gaGFuZGxlIG92ZXJsYXlzIHJvdGF0aW9uXG4gICAgICogQG1lbWJlciBPdmVybGF5Um90YXRpb25Nb2RlXG4gICAgICogQG1lbWJlck9mIE9wZW5TZWFkcmFnb25cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE5PX1JPVEFUSU9OIFRoZSBvdmVybGF5IGlnbm9yZSB0aGUgdmlld3BvcnQgcm90YXRpb24uXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEVYQUNUIFRoZSBvdmVybGF5IHVzZSBDU1MgMyB0cmFuc2Zvcm1zIHRvIHJvdGF0ZSB3aXRoXG4gICAgICogdGhlIHZpZXdwb3J0LiBJZiB0aGUgb3ZlcmxheSBjb250YWlucyB0ZXh0LCBpdCB3aWxsIGdldCByb3RhdGVkIGFzIHdlbGwuXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEJPVU5ESU5HX0JPWCBUaGUgb3ZlcmxheSBhZGp1c3RzIGZvciByb3RhdGlvbiBieVxuICAgICAqIHRha2luZyB0aGUgc2l6ZSBvZiB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSByb3RhdGVkIGJvdW5kcy5cbiAgICAgKiBPbmx5IHZhbGlkIGZvciBvdmVybGF5cyB3aXRoIFJlY3QgbG9jYXRpb24gYW5kIHNjYWxhYmxlIGluIGJvdGggZGlyZWN0aW9ucy5cbiAgICAgKi9cbiAgICAkLk92ZXJsYXlSb3RhdGlvbk1vZGUgPSAkLmZyZWV6ZU9iamVjdCh7XG4gICAgICAgIE5PX1JPVEFUSU9OOiAxLFxuICAgICAgICBFWEFDVDogMixcbiAgICAgICAgQk9VTkRJTkdfQk9YOiAzXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgT3ZlcmxheVxuICAgICAqIEBjbGFzc2Rlc2MgUHJvdmlkZXMgYSB3YXkgdG8gZmxvYXQgYW4gSFRNTCBlbGVtZW50IG9uIHRvcCBvZiB0aGUgdmlld2VyIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBvcHRpb25zLmVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR8T3BlblNlYWRyYWdvbi5SZWN0fSBvcHRpb25zLmxvY2F0aW9uIC0gVGhlXG4gICAgICogbG9jYXRpb24gb2YgdGhlIG92ZXJsYXkgb24gdGhlIGltYWdlLiBJZiBhIHtAbGluayBPcGVuU2VhZHJhZ29uLlBvaW50fVxuICAgICAqIGlzIHNwZWNpZmllZCwgdGhlIG92ZXJsYXkgd2lsbCBiZSBsb2NhdGVkIGF0IHRoaXMgbG9jYXRpb24gd2l0aCByZXNwZWN0XG4gICAgICogdG8gdGhlIHBsYWNlbWVudCBvcHRpb24uIElmIGEge0BsaW5rIE9wZW5TZWFkcmFnb24uUmVjdH0gaXMgc3BlY2lmaWVkLFxuICAgICAqIHRoZSBvdmVybGF5IHdpbGwgYmUgcGxhY2VkIGF0IHRoaXMgbG9jYXRpb24gd2l0aCB0aGUgY29ycmVzcG9uZGluZyB3aWR0aFxuICAgICAqIGFuZCBoZWlnaHQgYW5kIHBsYWNlbWVudCBUT1BfTEVGVC5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBbb3B0aW9ucy5wbGFjZW1lbnQ9T3BlblNlYWRyYWdvbi5QbGFjZW1lbnQuVE9QX0xFRlRdXG4gICAgICogRGVmaW5lcyB3aGF0IHBhcnQgb2YgdGhlIG92ZXJsYXkgc2hvdWxkIGJlIGF0IHRoZSBzcGVjaWZpZWQgb3B0aW9ucy5sb2NhdGlvblxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5PdmVybGF5Lk9uRHJhd0NhbGxiYWNrfSBbb3B0aW9ucy5vbkRyYXddXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jaGVja1Jlc2l6ZT10cnVlXSBTZXQgdG8gZmFsc2UgdG8gYXZvaWQgdG9cbiAgICAgKiBjaGVjayB0aGUgc2l6ZSBvZiB0aGUgb3ZlcmxheSBldmVyeXRpbWUgaXQgaXMgZHJhd24gaW4gdGhlIGRpcmVjdGlvbnNcbiAgICAgKiB3aGljaCBhcmUgbm90IHNjYWxlZC4gSXQgd2lsbCBpbXByb3ZlIHBlcmZvcm1hbmNlcyBidXQgd2lsbCBjYXVzZSBhXG4gICAgICogbWlzYWxpZ25tZW50IGlmIHRoZSBvdmVybGF5IHNpemUgY2hhbmdlcy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMud2lkdGhdIFRoZSB3aWR0aCBvZiB0aGUgb3ZlcmxheSBpbiB2aWV3cG9ydFxuICAgICAqIGNvb3JkaW5hdGVzLiBJZiBzcGVjaWZpZWQsIHRoZSB3aWR0aCBvZiB0aGUgb3ZlcmxheSB3aWxsIGJlIGFkanVzdGVkIHdoZW5cbiAgICAgKiB0aGUgem9vbSBjaGFuZ2VzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIFRoZSBoZWlnaHQgb2YgdGhlIG92ZXJsYXkgaW4gdmlld3BvcnRcbiAgICAgKiBjb29yZGluYXRlcy4gSWYgc3BlY2lmaWVkLCB0aGUgaGVpZ2h0IG9mIHRoZSBvdmVybGF5IHdpbGwgYmUgYWRqdXN0ZWQgd2hlblxuICAgICAqIHRoZSB6b29tIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yb3RhdGlvbk1vZGU9T3BlblNlYWRyYWdvbi5PdmVybGF5Um90YXRpb25Nb2RlLkVYQUNUXVxuICAgICAqIEhvdyB0byBoYW5kbGUgdGhlIHJvdGF0aW9uIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICAkLk92ZXJsYXkgPSBmdW5jdGlvbihlbGVtZW50LCBsb2NhdGlvbiwgcGxhY2VtZW50KSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9uRHJhdyBjYWxsYmFjayBzaWduYXR1cmUgdXNlZCBieSB7QGxpbmsgT3BlblNlYWRyYWdvbi5PdmVybGF5fS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNhbGxiYWNrIE9uRHJhd0NhbGxiYWNrXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLk92ZXJsYXlcbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHNpemVcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBvcHRpb25zO1xuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc3R5bGUgPSBvcHRpb25zLmVsZW1lbnQuc3R5bGU7XG4gICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5PdmVybGF5LnByb3RvdHlwZSAqL1xuICAgICQuT3ZlcmxheS5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBfaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb247XG4gICAgICAgICAgICB0aGlzLnBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50ID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgICQuUGxhY2VtZW50LlRPUF9MRUZUIDogb3B0aW9ucy5wbGFjZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLm9uRHJhdyA9IG9wdGlvbnMub25EcmF3O1xuICAgICAgICAgICAgdGhpcy5jaGVja1Jlc2l6ZSA9IG9wdGlvbnMuY2hlY2tSZXNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICAgICAgdHJ1ZSA6IG9wdGlvbnMuY2hlY2tSZXNpemU7XG5cbiAgICAgICAgICAgIC8vIFdoZW4gdGhpcy53aWR0aCBpcyBub3QgbnVsbCwgdGhlIG92ZXJsYXkgZ2V0IHNjYWxlZCBob3Jpem9udGFsbHlcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBvcHRpb25zLndpZHRoID09PSB1bmRlZmluZWQgPyBudWxsIDogb3B0aW9ucy53aWR0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0aGlzLmhlaWdodCBpcyBub3QgbnVsbCwgdGhlIG92ZXJsYXkgZ2V0IHNjYWxlZCB2ZXJ0aWNhbGx5XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ID09PSB1bmRlZmluZWQgPyBudWxsIDogb3B0aW9ucy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIHRoaXMucm90YXRpb25Nb2RlID0gb3B0aW9ucy5yb3RhdGlvbk1vZGUgfHwgJC5PdmVybGF5Um90YXRpb25Nb2RlLkVYQUNUO1xuXG4gICAgICAgICAgICAvLyBIYXZpbmcgYSByZWN0IGFzIGxvY2F0aW9uIGlzIGEgc3ludGFjdGljIHN1Z2FyXG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhdGlvbiBpbnN0YW5jZW9mICQuUmVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmxvY2F0aW9uLndpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5sb2NhdGlvbi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IHRoaXMubG9jYXRpb24uZ2V0VG9wTGVmdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50ID0gJC5QbGFjZW1lbnQuVE9QX0xFRlQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlcHJlY2F0ZWQgcHJvcGVydGllcyBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAgICAgICAgdGhpcy5zY2FsZXMgPSB0aGlzLndpZHRoICE9PSBudWxsICYmIHRoaXMuaGVpZ2h0ICE9PSBudWxsO1xuICAgICAgICAgICAgdGhpcy5ib3VuZHMgPSBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24ueCwgdGhpcy5sb2NhdGlvbi55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5sb2NhdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gYWRqdXN0IHRoZSBwb3NpdGlvbiBvZiBhbiBvdmVybGF5XG4gICAgICAgICAqIGRlcGVuZGluZyBvbiBpdCBzaXplIGFuZCBwbGFjZW1lbnQuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvc2l0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gc2l6ZVxuICAgICAgICAgKi9cbiAgICAgICAgYWRqdXN0OiBmdW5jdGlvbihwb3NpdGlvbiwgc2l6ZSkge1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAkLlBsYWNlbWVudC5wcm9wZXJ0aWVzW3RoaXMucGxhY2VtZW50XTtcbiAgICAgICAgICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmlzSG9yaXpvbnRhbGx5Q2VudGVyZWQpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54IC09IHNpemUueCAvIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMuaXNSaWdodCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnggLT0gc2l6ZS54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaXNWZXJ0aWNhbGx5Q2VudGVyZWQpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55IC09IHNpemUueSAvIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMuaXNCb3R0b20pIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55IC09IHNpemUueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZTtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvL3RoaXMgc2hvdWxkIGFsbG93IHVzIHRvIHByZXNlcnZlIG92ZXJsYXlzIHdoZW4gcmVxdWlyZWQgYmV0d2VlblxuICAgICAgICAgICAgICAgIC8vcGFnZXNcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5wcmV2RWxlbWVudFBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAvL2VsZW1lbnQucHJldkVsZW1lbnRQYXJlbnQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAvLyAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICBlbGVtZW50LnByZXZOZXh0U2libGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgb25EcmF3IGNhbGxiYWNrXG4gICAgICAgICAgICB0aGlzLm9uRHJhdyA9IG51bGw7XG5cbiAgICAgICAgICAgIHN0eWxlLnRvcCA9IFwiXCI7XG4gICAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCJcIjtcbiAgICAgICAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJcIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdHlsZS53aWR0aCA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdHlsZS5oZWlnaHQgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpblByb3AgPSAkLmdldENzc1Byb3BlcnR5V2l0aFZlbmRvclByZWZpeChcbiAgICAgICAgICAgICAgICAndHJhbnNmb3JtT3JpZ2luJyk7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtUHJvcCA9ICQuZ2V0Q3NzUHJvcGVydHlXaXRoVmVuZG9yUHJlZml4KFxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1PcmlnaW5Qcm9wICYmIHRyYW5zZm9ybVByb3ApIHtcbiAgICAgICAgICAgICAgICBzdHlsZVt0cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgc3R5bGVbdHJhbnNmb3JtUHJvcF0gPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXJcbiAgICAgICAgICovXG4gICAgICAgIGRyYXdIVE1MOiBmdW5jdGlvbihjb250YWluZXIsIHZpZXdwb3J0KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIC8vc2F2ZSB0aGUgc291cmNlIHBhcmVudCBmb3IgbGF0ZXIgaWYgd2UgbmVlZCBpdFxuICAgICAgICAgICAgICAgIGVsZW1lbnQucHJldkVsZW1lbnRQYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5wcmV2TmV4dFNpYmxpbmcgPSBlbGVtZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2l6ZSBpcyB1c2VkIGJ5IG92ZXJsYXlzIHdoaWNoIGRvbid0IGdldCBzY2FsZWQgaW4gYXRcbiAgICAgICAgICAgICAgICAvLyBsZWFzdCBvbmUgZGlyZWN0aW9uIHdoZW4gdGhpcy5jaGVja1Jlc2l6ZSBpcyBzZXQgdG8gZmFsc2UuXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplID0gJC5nZXRFbGVtZW50U2l6ZShlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQW5kU2l6ZSA9IHRoaXMuX2dldE92ZXJsYXlQb3NpdGlvbkFuZFNpemUodmlld3BvcnQpO1xuXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3NpdGlvbkFuZFNpemUucG9zaXRpb247XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZSA9IHBvc2l0aW9uQW5kU2l6ZS5zaXplO1xuICAgICAgICAgICAgdmFyIHJvdGF0ZSA9IHBvc2l0aW9uQW5kU2l6ZS5yb3RhdGU7XG5cbiAgICAgICAgICAgIC8vIGNhbGwgdGhlIG9uRHJhdyBjYWxsYmFjayBpZiBpdCBleGlzdHMgdG8gYWxsb3cgb25lIHRvIG92ZXJ3cml0ZVxuICAgICAgICAgICAgLy8gdGhlIGRyYXdpbmcvcG9zaXRpb25pbmcvc2l6aW5nIG9mIHRoZSBvdmVybGF5XG4gICAgICAgICAgICBpZiAodGhpcy5vbkRyYXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhdyhwb3NpdGlvbiwgc2l6ZSwgdGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICAgICAgICAgICAgICBzdHlsZS5sZWZ0ID0gcG9zaXRpb24ueCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBzdHlsZS50b3AgPSBwb3NpdGlvbi55ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndpZHRoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLndpZHRoID0gc2l6ZS54ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gc2l6ZS55ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtT3JpZ2luUHJvcCA9ICQuZ2V0Q3NzUHJvcGVydHlXaXRoVmVuZG9yUHJlZml4KFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtT3JpZ2luJyk7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVByb3AgPSAkLmdldENzc1Byb3BlcnR5V2l0aFZlbmRvclByZWZpeChcbiAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybScpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1PcmlnaW5Qcm9wICYmIHRyYW5zZm9ybVByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1PcmlnaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlW3RyYW5zZm9ybVByb3BdID0gXCJyb3RhdGUoXCIgKyByb3RhdGUgKyBcImRlZylcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlW3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlW3RyYW5zZm9ybVByb3BdID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByaXZhdGVcbiAgICAgICAgX2dldE92ZXJsYXlQb3NpdGlvbkFuZFNpemU6IGZ1bmN0aW9uKHZpZXdwb3J0KSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB2aWV3cG9ydC5waXhlbEZyb21Qb2ludCh0aGlzLmxvY2F0aW9uLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5fZ2V0U2l6ZUluUGl4ZWxzKHZpZXdwb3J0KTtcbiAgICAgICAgICAgIHRoaXMuYWRqdXN0KHBvc2l0aW9uLCBzaXplKTtcblxuICAgICAgICAgICAgdmFyIHJvdGF0ZSA9IDA7XG4gICAgICAgICAgICBpZiAodmlld3BvcnQuZGVncmVlcyAmJlxuICAgICAgICAgICAgICAgIHRoaXMucm90YXRpb25Nb2RlICE9PSAkLk92ZXJsYXlSb3RhdGlvbk1vZGUuTk9fUk9UQVRJT04pIHtcbiAgICAgICAgICAgICAgICAvLyBCT1VORElOR19CT1ggaXMgb25seSB2YWxpZCBpZiBib3RoIGRpcmVjdGlvbnMgZ2V0IHNjYWxlZC5cbiAgICAgICAgICAgICAgICAvLyBHZXQgcmVwbGFjZWQgYnkgRVhBQ1Qgb3RoZXJ3aXNlLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvdGF0aW9uTW9kZSA9PT0gJC5PdmVybGF5Um90YXRpb25Nb2RlLkJPVU5ESU5HX0JPWCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoICE9PSBudWxsICYmIHRoaXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gbmV3ICQuUmVjdChwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBzaXplLngsIHNpemUueSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ0JveCA9IHRoaXMuX2dldEJvdW5kaW5nQm94KHJlY3QsIHZpZXdwb3J0LmRlZ3JlZXMpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IGJvdW5kaW5nQm94LmdldFRvcExlZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IGJvdW5kaW5nQm94LmdldFNpemUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb3RhdGUgPSB2aWV3cG9ydC5kZWdyZWVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgICAgICByb3RhdGU6IHJvdGF0ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcml2YXRlXG4gICAgICAgIF9nZXRTaXplSW5QaXhlbHM6IGZ1bmN0aW9uKHZpZXdwb3J0KSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnNpemUueDtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnNpemUueTtcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoICE9PSBudWxsIHx8IHRoaXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlZFNpemUgPSB2aWV3cG9ydC5kZWx0YVBpeGVsc0Zyb21Qb2ludHNOb1JvdGF0ZShcbiAgICAgICAgICAgICAgICAgICAgbmV3ICQuUG9pbnQodGhpcy53aWR0aCB8fCAwLCB0aGlzLmhlaWdodCB8fCAwKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzY2FsZWRTaXplLng7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBzY2FsZWRTaXplLnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tSZXNpemUgJiZcbiAgICAgICAgICAgICAgICAodGhpcy53aWR0aCA9PT0gbnVsbCB8fCB0aGlzLmhlaWdodCA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWx0U2l6ZSA9IHRoaXMuc2l6ZSA9ICQuZ2V0RWxlbWVudFNpemUodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aWR0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGVsdFNpemUueDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGVsdFNpemUueTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBfZ2V0Qm91bmRpbmdCb3g6IGZ1bmN0aW9uKHJlY3QsIGRlZ3JlZXMpIHtcbiAgICAgICAgICAgIHZhciByZWZQb2ludCA9IHRoaXMuX2dldFBsYWNlbWVudFBvaW50KHJlY3QpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY3Qucm90YXRlKGRlZ3JlZXMsIHJlZlBvaW50KS5nZXRCb3VuZGluZ0JveCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByaXZhdGVcbiAgICAgICAgX2dldFBsYWNlbWVudFBvaW50OiBmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3ICQuUG9pbnQocmVjdC54LCByZWN0LnkpO1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAkLlBsYWNlbWVudC5wcm9wZXJ0aWVzW3RoaXMucGxhY2VtZW50XTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaXNIb3Jpem9udGFsbHlDZW50ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQueCArPSByZWN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMuaXNSaWdodCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQueCArPSByZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5pc1ZlcnRpY2FsbHlDZW50ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQueSArPSByZWN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzLmlzQm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC55ICs9IHJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBfZ2V0VHJhbnNmb3JtT3JpZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAkLlBsYWNlbWVudC5wcm9wZXJ0aWVzW3RoaXMucGxhY2VtZW50XTtcbiAgICAgICAgICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy5pc0xlZnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBcImxlZnRcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydGllcy5pc1JpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gXCJyaWdodFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaXNUb3ApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIgdG9wXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMuaXNCb3R0b20pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIgYm90dG9tXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGFuZ2VzIHRoZSBvdmVybGF5IHNldHRpbmdzLlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fE9wZW5TZWFkcmFnb24uUmVjdHxPYmplY3R9IGxvY2F0aW9uXG4gICAgICAgICAqIElmIGFuIG9iamVjdCBpcyBzcGVjaWZpZWQsIHRoZSBvcHRpb25zIGFyZSB0aGUgc2FtZSB0aGFuIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBleGNlcHQgZm9yIHRoZSBlbGVtZW50IHdoaWNoIGNhbiBub3QgYmUgY2hhbmdlZC5cbiAgICAgICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBsYWNlbWVudH0gcG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24obG9jYXRpb24sIHBsYWNlbWVudCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmlzUGxhaW5PYmplY3QobG9jYXRpb24pID8gbG9jYXRpb24gOiB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5faW5pdCh7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IG9wdGlvbnMubG9jYXRpb24gfHwgdGhpcy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IG9wdGlvbnMucGxhY2VtZW50ICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBsYWNlbWVudCA6IHRoaXMucGxhY2VtZW50LFxuICAgICAgICAgICAgICAgIG9uRHJhdzogb3B0aW9ucy5vbkRyYXcgfHwgdGhpcy5vbkRyYXcsXG4gICAgICAgICAgICAgICAgY2hlY2tSZXNpemU6IG9wdGlvbnMuY2hlY2tSZXNpemUgfHwgdGhpcy5jaGVja1Jlc2l6ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy53aWR0aCA6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5oZWlnaHQgOiB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgICAgICByb3RhdGlvbk1vZGU6IG9wdGlvbnMucm90YXRpb25Nb2RlIHx8IHRoaXMucm90YXRpb25Nb2RlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBib3VuZHMgb2YgdGhlIG92ZXJsYXkgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gdmlld3BvcnQgdGhlIHZpZXdwb3J0XG4gICAgICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlJlY3R9IG92ZXJsYXkgYm91bmRzXG4gICAgICAgICAqL1xuICAgICAgICBnZXRCb3VuZHM6IGZ1bmN0aW9uKHZpZXdwb3J0KSB7XG4gICAgICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICdBIHZpZXdwb3J0IG11c3Qgbm93IGJlIHBhc3NlZCB0byBPdmVybGF5LmdldEJvdW5kcy4nKTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAod2lkdGggPT09IG51bGwgfHwgaGVpZ2h0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSB2aWV3cG9ydC5kZWx0YVBvaW50c0Zyb21QaXhlbHNOb1JvdGF0ZSh0aGlzLnNpemUsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHNpemUueDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBzaXplLnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gdGhpcy5sb2NhdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgdGhpcy5hZGp1c3QobG9jYXRpb24sIG5ldyAkLlBvaW50KHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGp1c3RCb3VuZHNGb3JSb3RhdGlvbihcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCwgbmV3ICQuUmVjdChsb2NhdGlvbi54LCBsb2NhdGlvbi55LCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBfYWRqdXN0Qm91bmRzRm9yUm90YXRpb246IGZ1bmN0aW9uKHZpZXdwb3J0LCBib3VuZHMpIHtcbiAgICAgICAgICAgIGlmICghdmlld3BvcnQgfHxcbiAgICAgICAgICAgICAgICB2aWV3cG9ydC5kZWdyZWVzID09PSAwIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbk1vZGUgPT09ICQuT3ZlcmxheVJvdGF0aW9uTW9kZS5FWEFDVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBib3VuZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yb3RhdGlvbk1vZGUgPT09ICQuT3ZlcmxheVJvdGF0aW9uTW9kZS5CT1VORElOR19CT1gpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvdmVybGF5IG5vdCBmdWxseSBzY2FsYWJsZSwgQk9VTkRJTkdfQk9YIGZhbGxzIGJhY2sgdG8gRVhBQ1RcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aWR0aCA9PT0gbnVsbCB8fCB0aGlzLmhlaWdodCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJdCBpcyBlYXNpZXIgdG8ganVzdCBjb21wdXRlIHRoZSBwb3NpdGlvbiBhbmQgc2l6ZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbkFuZFNpemUgPSB0aGlzLl9nZXRPdmVybGF5UG9zaXRpb25BbmRTaXplKHZpZXdwb3J0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlld3BvcnQudmlld2VyRWxlbWVudFRvVmlld3BvcnRSZWN0YW5nbGUobmV3ICQuUmVjdChcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BbmRTaXplLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQW5kU2l6ZS5wb3NpdGlvbi55LFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkFuZFNpemUuc2l6ZS54LFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkFuZFNpemUuc2l6ZS55KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5PX1JPVEFUSU9OIGNhc2VcbiAgICAgICAgICAgIHJldHVybiBib3VuZHMucm90YXRlKC12aWV3cG9ydC5kZWdyZWVzLFxuICAgICAgICAgICAgICAgIHRoaXMuX2dldFBsYWNlbWVudFBvaW50KGJvdW5kcykpO1xuICAgICAgICB9XG4gICAgfTtcblxufShPcGVuU2VhZHJhZ29uKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gRHJhd2VyXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIEBjbGFzcyBEcmF3ZXJcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAY2xhc3NkZXNjIEhhbmRsZXMgcmVuZGVyaW5nIG9mIHRpbGVzIGZvciBhbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXJ9LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIERyYXdlci5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IG9wdGlvbnMudmlld2VyIC0gVGhlIFZpZXdlciB0aGF0IG93bnMgdGhpcyBEcmF3ZXIuXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IG9wdGlvbnMudmlld3BvcnQgLSBSZWZlcmVuY2UgdG8gVmlld2VyIHZpZXdwb3J0LlxuICogQHBhcmFtIHtFbGVtZW50fSBvcHRpb25zLmVsZW1lbnQgLSBQYXJlbnQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5kZWJ1Z0dyaWRDb2xvcl0gLSBTZWUgZGVidWdHcmlkQ29sb3IgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30gZm9yIGRldGFpbHMuXG4gKi9cbiQuRHJhd2VyID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cbiAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLnZpZXdlciwgXCJbRHJhd2VyXSBvcHRpb25zLnZpZXdlciBpcyByZXF1aXJlZFwiICk7XG5cbiAgICAvL2JhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIHBvc2l0aW9uYWwgYXJncyB3aGlsZSBwcmVmZXJpbmcgbW9yZVxuICAgIC8vaWRpb21hdGljIGphdmFzY3JpcHQgb3B0aW9ucyBvYmplY3QgYXMgdGhlIG9ubHkgYXJndW1lbnRcbiAgICB2YXIgYXJncyAgPSBhcmd1bWVudHM7XG5cbiAgICBpZiggISQuaXNQbGFpbk9iamVjdCggb3B0aW9ucyApICl7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzb3VyY2U6ICAgICBhcmdzWyAwIF0sIC8vIFJlZmVyZW5jZSB0byBWaWV3ZXIgdGlsZSBzb3VyY2UuXG4gICAgICAgICAgICB2aWV3cG9ydDogICBhcmdzWyAxIF0sIC8vIFJlZmVyZW5jZSB0byBWaWV3ZXIgdmlld3BvcnQuXG4gICAgICAgICAgICBlbGVtZW50OiAgICBhcmdzWyAyIF0gIC8vIFBhcmVudCBlbGVtZW50LlxuICAgICAgICB9O1xuICAgIH1cblxuICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMudmlld3BvcnQsIFwiW0RyYXdlcl0gb3B0aW9ucy52aWV3cG9ydCBpcyByZXF1aXJlZFwiICk7XG4gICAgJC5jb25zb2xlLmFzc2VydCggb3B0aW9ucy5lbGVtZW50LCBcIltEcmF3ZXJdIG9wdGlvbnMuZWxlbWVudCBpcyByZXF1aXJlZFwiICk7XG5cbiAgICBpZiAoIG9wdGlvbnMuc291cmNlICkge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoIFwiW0RyYXdlcl0gb3B0aW9ucy5zb3VyY2UgaXMgbm8gbG9uZ2VyIGFjY2VwdGVkOyB1c2UgVGlsZWRJbWFnZSBpbnN0ZWFkXCIgKTtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdlciA9IG9wdGlvbnMudmlld2VyO1xuICAgIHRoaXMudmlld3BvcnQgPSBvcHRpb25zLnZpZXdwb3J0O1xuICAgIHRoaXMuZGVidWdHcmlkQ29sb3IgPSBvcHRpb25zLmRlYnVnR3JpZENvbG9yIHx8ICQuREVGQVVMVF9TRVRUSU5HUy5kZWJ1Z0dyaWRDb2xvcjtcbiAgICBpZiAob3B0aW9ucy5vcGFjaXR5KSB7XG4gICAgICAgICQuY29uc29sZS5lcnJvciggXCJbRHJhd2VyXSBvcHRpb25zLm9wYWNpdHkgaXMgbm8gbG9uZ2VyIGFjY2VwdGVkOyBzZXQgdGhlIG9wYWNpdHkgb24gdGhlIFRpbGVkSW1hZ2UgaW5zdGVhZFwiICk7XG4gICAgfVxuXG4gICAgdGhpcy51c2VDYW52YXMgID0gJC5zdXBwb3J0c0NhbnZhcyAmJiAoIHRoaXMudmlld2VyID8gdGhpcy52aWV3ZXIudXNlQ2FudmFzIDogdHJ1ZSApO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgZWxlbWVudCBvZiB0aGlzIERyYXdlciBpbnN0YW5jZSwgcGFzc2VkIGluIHdoZW4gdGhlIERyYXdlciB3YXMgY3JlYXRlZC5cbiAgICAgKiBUaGUgcGFyZW50IG9mIHtAbGluayBPcGVuU2VhZHJhZ29uLkRyYXdlciNjYW52YXN9LlxuICAgICAqIEBtZW1iZXIge0VsZW1lbnR9IGNvbnRhaW5lclxuICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLkRyYXdlciNcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRhaW5lciAgPSAkLmdldEVsZW1lbnQoIG9wdGlvbnMuZWxlbWVudCApO1xuICAgIC8qKlxuICAgICAqIEEgJmx0O2NhbnZhcyZndDsgZWxlbWVudCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGVtLCBvdGhlcndpc2UgYSAmbHQ7ZGl2Jmd0OyBlbGVtZW50LlxuICAgICAqIENoaWxkIGVsZW1lbnQgb2Yge0BsaW5rIE9wZW5TZWFkcmFnb24uRHJhd2VyI2NvbnRhaW5lcn0uXG4gICAgICogQG1lbWJlciB7RWxlbWVudH0gY2FudmFzXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uRHJhd2VyI1xuICAgICAqL1xuICAgIHRoaXMuY2FudmFzICAgICA9ICQubWFrZU5ldXRyYWxFbGVtZW50KCB0aGlzLnVzZUNhbnZhcyA/IFwiY2FudmFzXCIgOiBcImRpdlwiICk7XG4gICAgLyoqXG4gICAgICogMmQgZHJhd2luZyBjb250ZXh0IGZvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5EcmF3ZXIjY2FudmFzfSBpZiBpdCdzIGEgJmx0O2NhbnZhcyZndDsgZWxlbWVudCwgb3RoZXJ3aXNlIG51bGwuXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBjb250ZXh0XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uRHJhd2VyI1xuICAgICAqL1xuICAgIHRoaXMuY29udGV4dCAgICA9IHRoaXMudXNlQ2FudmFzID8gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCggXCIyZFwiICkgOiBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU2tldGNoIGNhbnZhcyB1c2VkIHRvIHRlbXBvcmFyaWx5IGRyYXcgdGlsZXMgd2hpY2ggY2Fubm90IGJlIGRyYXduIGRpcmVjdGx5XG4gICAgICogdG8gdGhlIG1haW4gY2FudmFzIGR1ZSB0byBvcGFjaXR5LiBMYXppbHkgaW5pdGlhbGl6ZWQuXG4gICAgICovXG4gICAgdGhpcy5za2V0Y2hDYW52YXMgPSBudWxsO1xuICAgIHRoaXMuc2tldGNoQ29udGV4dCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uRHJhd2VyI1xuICAgICAqIEBkZXByZWNhdGVkIEFsaWFzIGZvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5EcmF3ZXIjY29udGFpbmVyfS5cbiAgICAgKi9cbiAgICB0aGlzLmVsZW1lbnQgICAgPSB0aGlzLmNvbnRhaW5lcjtcblxuICAgIC8vIFdlIGZvcmNlIG91ciBjb250YWluZXIgdG8gbHRyIGJlY2F1c2Ugb3VyIGRyYXdpbmcgbWF0aCBkb2Vzbid0IHdvcmsgaW4gcnRsLlxuICAgIC8vIFRoaXMgaXNzdWUgb25seSBhZmZlY3RzIG91ciBjYW52YXMgcmVuZGVyZXIsIGJ1dCB3ZSBkbyBpdCBhbHdheXMgZm9yIGNvbnNpc3RlbmN5LlxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1lYW5zIG92ZXJsYXlzIHlvdSB3YW50IHRvIGJlIHJ0bCBuZWVkIHRvIGJlIGV4cGxpY2l0bHkgc2V0IHRvIHJ0bC5cbiAgICB0aGlzLmNvbnRhaW5lci5kaXIgPSAnbHRyJztcblxuICAgIC8vIGNoZWNrIGNhbnZhcyBhdmFpbGFibGUgd2lkdGggYW5kIGhlaWdodCwgc2V0IGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0IHN1Y2ggdGhhdCB0aGUgY2FudmFzIGJhY2tpbmcgc3RvcmUgaXMgc2V0IHRvIHRoZSBwcm9wZXIgcGl4ZWwgZGVuc2l0eVxuICAgIGlmICh0aGlzLnVzZUNhbnZhcykge1xuICAgICAgICB2YXIgdmlld3BvcnRTaXplID0gdGhpcy5fY2FsY3VsYXRlQ2FudmFzU2l6ZSgpO1xuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHZpZXdwb3J0U2l6ZS54O1xuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB2aWV3cG9ydFNpemUueTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCAgICAgPSBcIjEwMCVcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgICAgPSBcIjEwMCVcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiAgPSBcImFic29sdXRlXCI7XG4gICAgJC5zZXRFbGVtZW50T3BhY2l0eSggdGhpcy5jYW52YXMsIHRoaXMub3BhY2l0eSwgdHJ1ZSApO1xuXG4gICAgLy8gZXhwbGljaXQgbGVmdC1hbGlnblxuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRleHRBbGlnbiA9IFwibGVmdFwiO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKCB0aGlzLmNhbnZhcyApO1xufTtcblxuLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLkRyYXdlci5wcm90b3R5cGUgKi9cbiQuRHJhd2VyLnByb3RvdHlwZSA9IHtcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgYWRkT3ZlcmxheTogZnVuY3Rpb24oIGVsZW1lbnQsIGxvY2F0aW9uLCBwbGFjZW1lbnQsIG9uRHJhdyApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiZHJhd2VyLmFkZE92ZXJsYXkgaXMgZGVwcmVjYXRlZC4gVXNlIHZpZXdlci5hZGRPdmVybGF5IGluc3RlYWQuXCIpO1xuICAgICAgICB0aGlzLnZpZXdlci5hZGRPdmVybGF5KCBlbGVtZW50LCBsb2NhdGlvbiwgcGxhY2VtZW50LCBvbkRyYXcgKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICB1cGRhdGVPdmVybGF5OiBmdW5jdGlvbiggZWxlbWVudCwgbG9jYXRpb24sIHBsYWNlbWVudCApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiZHJhd2VyLnVwZGF0ZU92ZXJsYXkgaXMgZGVwcmVjYXRlZC4gVXNlIHZpZXdlci51cGRhdGVPdmVybGF5IGluc3RlYWQuXCIpO1xuICAgICAgICB0aGlzLnZpZXdlci51cGRhdGVPdmVybGF5KCBlbGVtZW50LCBsb2NhdGlvbiwgcGxhY2VtZW50ICk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBkZXByZWNhdGVkXG4gICAgcmVtb3ZlT3ZlcmxheTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgICAgICQuY29uc29sZS5lcnJvcihcImRyYXdlci5yZW1vdmVPdmVybGF5IGlzIGRlcHJlY2F0ZWQuIFVzZSB2aWV3ZXIucmVtb3ZlT3ZlcmxheSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgdGhpcy52aWV3ZXIucmVtb3ZlT3ZlcmxheSggZWxlbWVudCApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGNsZWFyT3ZlcmxheXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoXCJkcmF3ZXIuY2xlYXJPdmVybGF5cyBpcyBkZXByZWNhdGVkLiBVc2Ugdmlld2VyLmNsZWFyT3ZlcmxheXMgaW5zdGVhZC5cIik7XG4gICAgICAgIHRoaXMudmlld2VyLmNsZWFyT3ZlcmxheXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgb3BhY2l0eSBvZiB0aGUgZHJhd2VyLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5XG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5EcmF3ZXJ9IENoYWluYWJsZS5cbiAgICAgKi9cbiAgICBzZXRPcGFjaXR5OiBmdW5jdGlvbiggb3BhY2l0eSApIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiZHJhd2VyLnNldE9wYWNpdHkgaXMgZGVwcmVjYXRlZC4gVXNlIHRpbGVkSW1hZ2Uuc2V0T3BhY2l0eSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgdmFyIHdvcmxkID0gdGhpcy52aWV3ZXIud29ybGQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29ybGQuZ2V0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgd29ybGQuZ2V0SXRlbUF0KCBpICkuc2V0T3BhY2l0eSggb3BhY2l0eSApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG9wYWNpdHkgb2YgdGhlIGRyYXdlci5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldE9wYWNpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoXCJkcmF3ZXIuZ2V0T3BhY2l0eSBpcyBkZXByZWNhdGVkLiBVc2UgdGlsZWRJbWFnZS5nZXRPcGFjaXR5IGluc3RlYWQuXCIpO1xuICAgICAgICB2YXIgd29ybGQgPSB0aGlzLnZpZXdlci53b3JsZDtcbiAgICAgICAgdmFyIG1heE9wYWNpdHkgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmxkLmdldEl0ZW1Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gd29ybGQuZ2V0SXRlbUF0KCBpICkuZ2V0T3BhY2l0eSgpO1xuICAgICAgICAgICAgaWYgKCBvcGFjaXR5ID4gbWF4T3BhY2l0eSApIHtcbiAgICAgICAgICAgICAgICBtYXhPcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4T3BhY2l0eTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIG5lZWRzVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltEcmF3ZXIubmVlZHNVcGRhdGVdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZC4gVXNlIFdvcmxkLm5lZWRzRHJhdyBpbnN0ZWFkLlwiICk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlci53b3JsZC5uZWVkc0RyYXcoKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIG51bVRpbGVzTG9hZGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltEcmF3ZXIubnVtVGlsZXNMb2FkZWRdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZC4gVXNlIFRpbGVDYWNoZS5udW1UaWxlc0xvYWRlZCBpbnN0ZWFkLlwiICk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlci50aWxlQ2FjaGUubnVtVGlsZXNMb2FkZWQoKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltEcmF3ZXIucmVzZXRdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZC4gVXNlIFdvcmxkLnJlc2V0SXRlbXMgaW5zdGVhZC5cIiApO1xuICAgICAgICB0aGlzLnZpZXdlci53b3JsZC5yZXNldEl0ZW1zKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBkZXByZWNhdGVkXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcIltEcmF3ZXIudXBkYXRlXSB0aGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuIFVzZSBEcmF3ZXIuY2xlYXIgYW5kIFdvcmxkLmRyYXcgaW5zdGVhZC5cIiApO1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudmlld2VyLndvcmxkLmRyYXcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgcm90YXRpb24gaXMgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIGNhblJvdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZUNhbnZhcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgZHJhd2VyICh1bmxvYWQgY3VycmVudCBsb2FkZWQgdGlsZXMpXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vZm9yY2UgdW5sb2FkaW5nIG9mIGN1cnJlbnQgY2FudmFzICgxeDEgd2lsbCBiZSBnYyBsYXRlciwgdHJpY2sgbm90IG5lY2Vzc2FyaWx5IG5lZWRlZClcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggID0gMTtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgICAgdGhpcy5za2V0Y2hDYW52YXMgPSBudWxsO1xuICAgICAgICB0aGlzLnNrZXRjaENvbnRleHQgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIERyYXdlciBzbyBpdCdzIHJlYWR5IHRvIGRyYXcgYW5vdGhlciBmcmFtZS5cbiAgICAgKi9cbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGlmICggdGhpcy51c2VDYW52YXMgKSB7XG4gICAgICAgICAgICB2YXIgdmlld3BvcnRTaXplID0gdGhpcy5fY2FsY3VsYXRlQ2FudmFzU2l6ZSgpO1xuICAgICAgICAgICAgaWYoIHRoaXMuY2FudmFzLndpZHRoICE9IHZpZXdwb3J0U2l6ZS54IHx8XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ICE9IHZpZXdwb3J0U2l6ZS55ICkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdmlld3BvcnRTaXplLng7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdmlld3BvcnRTaXplLnk7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnNrZXRjaENhbnZhcyAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNrZXRjaENhbnZhc1NpemUgPSB0aGlzLl9jYWxjdWxhdGVTa2V0Y2hDYW52YXNTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tldGNoQ2FudmFzLndpZHRoID0gc2tldGNoQ2FudmFzU2l6ZS54O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNrZXRjaENhbnZhcy5oZWlnaHQgPSBza2V0Y2hDYW52YXNTaXplLnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfY2xlYXI6IGZ1bmN0aW9uICh1c2VTa2V0Y2gsIGJvdW5kcykge1xuICAgICAgICBpZiAoIXRoaXMudXNlQ2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KHVzZVNrZXRjaCk7XG4gICAgICAgIGlmIChib3VuZHMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KGJvdW5kcy54LCBib3VuZHMueSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2NhbGUgZnJvbSBPcGVuU2VhZHJhZ29uIHZpZXdlciByZWN0YW5nbGUgdG8gZHJhd2VyIHJlY3RhbmdsZVxuICAgICAqIChpZ25vcmluZyByb3RhdGlvbilcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gcmVjdGFuZ2xlIC0gVGhlIHJlY3RhbmdsZSBpbiB2aWV3cG9ydCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlJlY3R9IFJlY3RhbmdsZSBpbiBkcmF3ZXIgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICovXG4gICAgdmlld3BvcnRUb0RyYXdlclJlY3RhbmdsZTogZnVuY3Rpb24ocmVjdGFuZ2xlKSB7XG4gICAgICAgIHZhciB0b3BMZWZ0ID0gdGhpcy52aWV3cG9ydC5waXhlbEZyb21Qb2ludE5vUm90YXRlKHJlY3RhbmdsZS5nZXRUb3BMZWZ0KCksIHRydWUpO1xuICAgICAgICB2YXIgc2l6ZSA9IHRoaXMudmlld3BvcnQuZGVsdGFQaXhlbHNGcm9tUG9pbnRzTm9Sb3RhdGUocmVjdGFuZ2xlLmdldFNpemUoKSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyAkLlJlY3QoXG4gICAgICAgICAgICB0b3BMZWZ0LnggKiAkLnBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgdG9wTGVmdC55ICogJC5waXhlbERlbnNpdHlSYXRpbyxcbiAgICAgICAgICAgIHNpemUueCAgICAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICBzaXplLnkgICAgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIHRoZSBnaXZlbiB0aWxlLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5UaWxlfSB0aWxlIC0gVGhlIHRpbGUgdG8gZHJhdy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmF3aW5nSGFuZGxlciAtIE1ldGhvZCBmb3IgZmlyaW5nIHRoZSBkcmF3aW5nIGV2ZW50IGlmIHVzaW5nIGNhbnZhcy5cbiAgICAgKiBkcmF3aW5nSGFuZGxlcih7Y29udGV4dCwgdGlsZSwgcmVuZGVyZWR9KVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlU2tldGNoIC0gV2hldGhlciB0byB1c2UgdGhlIHNrZXRjaCBjYW52YXMgb3Igbm90LlxuICAgICAqIHdoZXJlIDxjb2RlPnJlbmRlcmVkPC9jb2RlPiBpcyB0aGUgY29udGV4dCB3aXRoIHRoZSBwcmUtZHJhd24gaW1hZ2UuXG4gICAgICogQHBhcmFtIHtGbG9hdH0gW3NjYWxlPTFdIC0gQXBwbHkgYSBzY2FsZSB0byB0aWxlIHBvc2l0aW9uIGFuZCBzaXplLiBEZWZhdWx0cyB0byAxLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gW3RyYW5zbGF0ZV0gQSB0cmFuc2xhdGlvbiB2ZWN0b3IgdG8gb2Zmc2V0IHRpbGUgcG9zaXRpb25cbiAgICAgKi9cbiAgICBkcmF3VGlsZTogZnVuY3Rpb24odGlsZSwgZHJhd2luZ0hhbmRsZXIsIHVzZVNrZXRjaCwgc2NhbGUsIHRyYW5zbGF0ZSkge1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KHRpbGUsICdbRHJhd2VyLmRyYXdUaWxlXSB0aWxlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoZHJhd2luZ0hhbmRsZXIsICdbRHJhd2VyLmRyYXdUaWxlXSBkcmF3aW5nSGFuZGxlciBpcyByZXF1aXJlZCcpO1xuXG4gICAgICAgIGlmICh0aGlzLnVzZUNhbnZhcykge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KHVzZVNrZXRjaCk7XG4gICAgICAgICAgICBzY2FsZSA9IHNjYWxlIHx8IDE7XG4gICAgICAgICAgICB0aWxlLmRyYXdDYW52YXMoY29udGV4dCwgZHJhd2luZ0hhbmRsZXIsIHNjYWxlLCB0cmFuc2xhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlsZS5kcmF3SFRNTCggdGhpcy5jYW52YXMgKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZ2V0Q29udGV4dDogZnVuY3Rpb24oIHVzZVNrZXRjaCApIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGlmICggdXNlU2tldGNoICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2tldGNoQ2FudmFzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2V0Y2hDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImNhbnZhc1wiICk7XG4gICAgICAgICAgICAgICAgdmFyIHNrZXRjaENhbnZhc1NpemUgPSB0aGlzLl9jYWxjdWxhdGVTa2V0Y2hDYW52YXNTaXplKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5za2V0Y2hDYW52YXMud2lkdGggPSBza2V0Y2hDYW52YXNTaXplLng7XG4gICAgICAgICAgICAgICAgdGhpcy5za2V0Y2hDYW52YXMuaGVpZ2h0ID0gc2tldGNoQ2FudmFzU2l6ZS55O1xuICAgICAgICAgICAgICAgIHRoaXMuc2tldGNoQ29udGV4dCA9IHRoaXMuc2tldGNoQ2FudmFzLmdldENvbnRleHQoIFwiMmRcIiApO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdwb3J0IGlzIG5vdCBjdXJyZW50bHkgcm90YXRlZCwgdGhlIHNrZXRjaENhbnZhc1xuICAgICAgICAgICAgICAgIC8vIHdpbGwgaGF2ZSB0aGUgc2FtZSBzaXplIGFzIHRoZSBtYWluIGNhbnZhcy4gSG93ZXZlciwgaWZcbiAgICAgICAgICAgICAgICAvLyB0aGUgdmlld3BvcnQgZ2V0IHJvdGF0ZWQgbGF0ZXIgb24sIHdlIHdpbGwgbmVlZCB0byByZXNpemUgaXQuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld3BvcnQuZ2V0Um90YXRpb24oKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld2VyLmFkZEhhbmRsZXIoJ3JvdGF0ZScsIGZ1bmN0aW9uIHJlc2l6ZVNrZXRjaENhbnZhcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudmlld2VyLnJlbW92ZUhhbmRsZXIoJ3JvdGF0ZScsIHJlc2l6ZVNrZXRjaENhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tldGNoQ2FudmFzU2l6ZSA9IHNlbGYuX2NhbGN1bGF0ZVNrZXRjaENhbnZhc1NpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2tldGNoQ2FudmFzLndpZHRoID0gc2tldGNoQ2FudmFzU2l6ZS54O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5za2V0Y2hDYW52YXMuaGVpZ2h0ID0gc2tldGNoQ2FudmFzU2l6ZS55O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5za2V0Y2hDb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgc2F2ZUNvbnRleHQ6IGZ1bmN0aW9uKCB1c2VTa2V0Y2ggKSB7XG4gICAgICAgIGlmICghdGhpcy51c2VDYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2dldENvbnRleHQoIHVzZVNrZXRjaCApLnNhdmUoKTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIHJlc3RvcmVDb250ZXh0OiBmdW5jdGlvbiggdXNlU2tldGNoICkge1xuICAgICAgICBpZiAoIXRoaXMudXNlQ2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9nZXRDb250ZXh0KCB1c2VTa2V0Y2ggKS5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBzZXRDbGlwOiBmdW5jdGlvbihyZWN0LCB1c2VTa2V0Y2gpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVzZUNhbnZhcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KCB1c2VTa2V0Y2ggKTtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG4gICAgICAgIGNvbnRleHQuY2xpcCgpO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgZHJhd1JlY3RhbmdsZTogZnVuY3Rpb24ocmVjdCwgZmlsbFN0eWxlLCB1c2VTa2V0Y2gpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVzZUNhbnZhcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KCB1c2VTa2V0Y2ggKTtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbFN0eWxlO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBCbGVuZHMgdGhlIHNrZXRjaCBjYW52YXMgaW4gdGhlIG1haW4gY2FudmFzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtGbG9hdH0gb3B0aW9ucy5vcGFjaXR5IFRoZSBvcGFjaXR5IG9mIHRoZSBibGVuZGluZy5cbiAgICAgKiBAcGFyYW0ge0Zsb2F0fSBbb3B0aW9ucy5zY2FsZT0xXSBUaGUgc2NhbGUgYXQgd2hpY2ggdGlsZXMgd2VyZSBkcmF3biBvblxuICAgICAqIHRoZSBza2V0Y2guIERlZmF1bHQgaXMgMS5cbiAgICAgKiBVc2Ugc2NhbGUgdG8gZHJhdyBhdCBhIGxvd2VyIHNjYWxlIGFuZCB0aGVuIGVubGFyZ2Ugb250byB0aGUgbWFpbiBjYW52YXMuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBbb3B0aW9ucy50cmFuc2xhdGVdIEEgdHJhbnNsYXRpb24gdmVjdG9yXG4gICAgICogdGhhdCB3YXMgdXNlZCB0byBkcmF3IHRoZSB0aWxlc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jb21wb3NpdGVPcGVyYXRpb25dIC0gSG93IHRoZSBpbWFnZSBpc1xuICAgICAqIGNvbXBvc2l0ZWQgb250byBvdGhlciBpbWFnZXM7IHNlZSBjb21wb3NpdGVPcGVyYXRpb24gaW5cbiAgICAgKiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfSBmb3IgcG9zc2libGUgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5SZWN0fSBbb3B0aW9ucy5ib3VuZHNdIFRoZSBwYXJ0IG9mIHRoZSBza2V0Y2hcbiAgICAgKiBjYW52YXMgdG8gYmxlbmQgaW4gdGhlIG1haW4gY2FudmFzLiBJZiBzcGVjaWZpZWQsIG9wdGlvbnMuc2NhbGUgYW5kXG4gICAgICogb3B0aW9ucy50cmFuc2xhdGUgZ2V0IGlnbm9yZWQuXG4gICAgICovXG4gICAgYmxlbmRTa2V0Y2g6IGZ1bmN0aW9uKG9wYWNpdHksIHNjYWxlLCB0cmFuc2xhdGUsIGNvbXBvc2l0ZU9wZXJhdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IG9wYWNpdHk7XG4gICAgICAgIGlmICghJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXG4gICAgICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZU9wZXJhdGlvbjogY29tcG9zaXRlT3BlcmF0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy51c2VDYW52YXMgfHwgIXRoaXMuc2tldGNoQ2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3BhY2l0eSA9IG9wdGlvbnMub3BhY2l0eTtcbiAgICAgICAgY29tcG9zaXRlT3BlcmF0aW9uID0gb3B0aW9ucy5jb21wb3NpdGVPcGVyYXRpb247XG4gICAgICAgIHZhciBib3VuZHMgPSBvcHRpb25zLmJvdW5kcztcblxuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xuICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICBpZiAoY29tcG9zaXRlT3BlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gY29tcG9zaXRlT3BlcmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgdGhpcy5za2V0Y2hDYW52YXMsXG4gICAgICAgICAgICAgICAgYm91bmRzLngsXG4gICAgICAgICAgICAgICAgYm91bmRzLnksXG4gICAgICAgICAgICAgICAgYm91bmRzLndpZHRoLFxuICAgICAgICAgICAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgYm91bmRzLngsXG4gICAgICAgICAgICAgICAgYm91bmRzLnksXG4gICAgICAgICAgICAgICAgYm91bmRzLndpZHRoLFxuICAgICAgICAgICAgICAgIGJvdW5kcy5oZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgMTtcbiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IG9wdGlvbnMudHJhbnNsYXRlO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdHJhbnNsYXRlIGluc3RhbmNlb2YgJC5Qb2ludCA/XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlIDogbmV3ICQuUG9pbnQoMCwgMCk7XG5cbiAgICAgICAgICAgIHZhciB3aWR0aEV4dCA9IDA7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0RXh0ID0gMDtcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGhEaWZmID0gdGhpcy5za2V0Y2hDYW52YXMud2lkdGggLSB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0RGlmZiA9IHRoaXMuc2tldGNoQ2FudmFzLmhlaWdodCAtIHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICAgICAgICAgICAgICB3aWR0aEV4dCA9IE1hdGgucm91bmQod2lkdGhEaWZmIC8gMik7XG4gICAgICAgICAgICAgICAgaGVpZ2h0RXh0ID0gTWF0aC5yb3VuZChoZWlnaHREaWZmIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgIHRoaXMuc2tldGNoQ2FudmFzLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnggLSB3aWR0aEV4dCAqIHNjYWxlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgLSBoZWlnaHRFeHQgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKyAyICogd2lkdGhFeHQpICogc2NhbGUsXG4gICAgICAgICAgICAgICAgKHRoaXMuY2FudmFzLmhlaWdodCAgKyAyICogaGVpZ2h0RXh0KSAqIHNjYWxlLFxuICAgICAgICAgICAgICAgIC13aWR0aEV4dCxcbiAgICAgICAgICAgICAgICAtaGVpZ2h0RXh0LFxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICsgMiAqIHdpZHRoRXh0LFxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCArIDIgKiBoZWlnaHRFeHRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIGRyYXdEZWJ1Z0luZm86IGZ1bmN0aW9uKCB0aWxlLCBjb3VudCwgaSApe1xuICAgICAgICBpZiAoICF0aGlzLnVzZUNhbnZhcyApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAyICogJC5waXhlbERlbnNpdHlSYXRpbztcbiAgICAgICAgY29udGV4dC5mb250ID0gJ3NtYWxsLWNhcHMgYm9sZCAnICsgKDEzICogJC5waXhlbERlbnNpdHlSYXRpbykgKyAncHggYXJpYWwnO1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5kZWJ1Z0dyaWRDb2xvcjtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmRlYnVnR3JpZENvbG9yO1xuXG4gICAgICAgIGlmICggdGhpcy52aWV3cG9ydC5kZWdyZWVzICE9PSAwICkge1xuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0Rm9yUm90YXRpb24odGhpcy52aWV3cG9ydC5kZWdyZWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChcbiAgICAgICAgICAgIHRpbGUucG9zaXRpb24ueCAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICB0aWxlLnBvc2l0aW9uLnkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgdGlsZS5zaXplLnggKiAkLnBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgdGlsZS5zaXplLnkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIHRpbGVDZW50ZXJYID0gKHRpbGUucG9zaXRpb24ueCArICh0aWxlLnNpemUueCAvIDIpKSAqICQucGl4ZWxEZW5zaXR5UmF0aW87XG4gICAgICAgIHZhciB0aWxlQ2VudGVyWSA9ICh0aWxlLnBvc2l0aW9uLnkgKyAodGlsZS5zaXplLnkgLyAyKSkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvO1xuXG4gICAgICAgIC8vIFJvdGF0ZSB0aGUgdGV4dCB0aGUgcmlnaHQgd2F5IGFyb3VuZC5cbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoIHRpbGVDZW50ZXJYLCB0aWxlQ2VudGVyWSApO1xuICAgICAgICBjb250ZXh0LnJvdGF0ZSggTWF0aC5QSSAvIDE4MCAqIC10aGlzLnZpZXdwb3J0LmRlZ3JlZXMgKTtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoIC10aWxlQ2VudGVyWCwgLXRpbGVDZW50ZXJZICk7XG5cbiAgICAgICAgaWYoIHRpbGUueCA9PT0gMCAmJiB0aWxlLnkgPT09IDAgKXtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoXG4gICAgICAgICAgICAgICAgXCJab29tOiBcIiArIHRoaXMudmlld3BvcnQuZ2V0Wm9vbSgpLFxuICAgICAgICAgICAgICAgIHRpbGUucG9zaXRpb24ueCAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICAgICAgKHRpbGUucG9zaXRpb24ueSAtIDMwKSAqICQucGl4ZWxEZW5zaXR5UmF0aW9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFxuICAgICAgICAgICAgICAgIFwiUGFuOiBcIiArIHRoaXMudmlld3BvcnQuZ2V0Qm91bmRzKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB0aWxlLnBvc2l0aW9uLnggKiAkLnBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgICAgICh0aWxlLnBvc2l0aW9uLnkgLSAyMCkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXG4gICAgICAgICAgICBcIkxldmVsOiBcIiArIHRpbGUubGV2ZWwsXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi54ICsgMTApICogJC5waXhlbERlbnNpdHlSYXRpbyxcbiAgICAgICAgICAgICh0aWxlLnBvc2l0aW9uLnkgKyAyMCkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXG4gICAgICAgICAgICBcIkNvbHVtbjogXCIgKyB0aWxlLngsXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi54ICsgMTApICogJC5waXhlbERlbnNpdHlSYXRpbyxcbiAgICAgICAgICAgICh0aWxlLnBvc2l0aW9uLnkgKyAzMCkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXG4gICAgICAgICAgICBcIlJvdzogXCIgKyB0aWxlLnksXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi54ICsgMTApICogJC5waXhlbERlbnNpdHlSYXRpbyxcbiAgICAgICAgICAgICh0aWxlLnBvc2l0aW9uLnkgKyA0MCkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXG4gICAgICAgICAgICBcIk9yZGVyOiBcIiArIGkgKyBcIiBvZiBcIiArIGNvdW50LFxuICAgICAgICAgICAgKHRpbGUucG9zaXRpb24ueCArIDEwKSAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi55ICsgNTApICogJC5waXhlbERlbnNpdHlSYXRpb1xuICAgICAgICApO1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFxuICAgICAgICAgICAgXCJTaXplOiBcIiArIHRpbGUuc2l6ZS50b1N0cmluZygpLFxuICAgICAgICAgICAgKHRpbGUucG9zaXRpb24ueCArIDEwKSAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi55ICsgNjApICogJC5waXhlbERlbnNpdHlSYXRpb1xuICAgICAgICApO1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFxuICAgICAgICAgICAgXCJQb3NpdGlvbjogXCIgKyB0aWxlLnBvc2l0aW9uLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAodGlsZS5wb3NpdGlvbi54ICsgMTApICogJC5waXhlbERlbnNpdHlSYXRpbyxcbiAgICAgICAgICAgICh0aWxlLnBvc2l0aW9uLnkgKyA3MCkgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCB0aGlzLnZpZXdwb3J0LmRlZ3JlZXMgIT09IDAgKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXN0b3JlUm90YXRpb25DaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBkZWJ1Z1JlY3Q6IGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgaWYgKCB0aGlzLnVzZUNhbnZhcyApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDIgKiAkLnBpeGVsRGVuc2l0eVJhdGlvO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuZGVidWdHcmlkQ29sb3I7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZGVidWdHcmlkQ29sb3I7XG5cbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChcbiAgICAgICAgICAgICAgICByZWN0LnggKiAkLnBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgICAgIHJlY3QueSAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICAgICAgcmVjdC53aWR0aCAqICQucGl4ZWxEZW5zaXR5UmF0aW8sXG4gICAgICAgICAgICAgICAgcmVjdC5oZWlnaHQgKiAkLnBpeGVsRGVuc2l0eVJhdGlvXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNhbnZhcyBzaXplXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBza2V0Y2ggSWYgc2V0IHRvIHRydWUgcmV0dXJuIHRoZSBzaXplIG9mIHRoZSBza2V0Y2ggY2FudmFzXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBzaXplIG9mIHRoZSBjYW52YXNcbiAgICAgKi9cbiAgICBnZXRDYW52YXNTaXplOiBmdW5jdGlvbihza2V0Y2gpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuX2dldENvbnRleHQoc2tldGNoKS5jYW52YXM7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludChjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX29mZnNldEZvclJvdGF0aW9uOiBmdW5jdGlvbihkZWdyZWVzLCB1c2VTa2V0Y2gpIHtcbiAgICAgICAgdmFyIGN4ID0gdGhpcy5jYW52YXMud2lkdGggLyAyO1xuICAgICAgICB2YXIgY3kgPSB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyO1xuXG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fZ2V0Q29udGV4dCh1c2VTa2V0Y2gpO1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShjeCwgY3kpO1xuICAgICAgICBjb250ZXh0LnJvdGF0ZShNYXRoLlBJIC8gMTgwICogZGVncmVlcyk7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1jeCwgLWN5KTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9yZXN0b3JlUm90YXRpb25DaGFuZ2VzOiBmdW5jdGlvbih1c2VTa2V0Y2gpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KHVzZVNrZXRjaCk7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2NhbGN1bGF0ZUNhbnZhc1NpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGl4ZWxEZW5zaXR5UmF0aW8gPSAkLnBpeGVsRGVuc2l0eVJhdGlvO1xuICAgICAgICB2YXIgdmlld3BvcnRTaXplID0gdGhpcy52aWV3cG9ydC5nZXRDb250YWluZXJTaXplKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB2aWV3cG9ydFNpemUueCAqIHBpeGVsRGVuc2l0eVJhdGlvLFxuICAgICAgICAgICAgeTogdmlld3BvcnRTaXplLnkgKiBwaXhlbERlbnNpdHlSYXRpb1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2NhbGN1bGF0ZVNrZXRjaENhbnZhc1NpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FudmFzU2l6ZSA9IHRoaXMuX2NhbGN1bGF0ZUNhbnZhc1NpemUoKTtcbiAgICAgICAgaWYgKHRoaXMudmlld3BvcnQuZ2V0Um90YXRpb24oKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbnZhc1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIHZpZXdwb3J0IGlzIHJvdGF0ZWQsIHdlIG5lZWQgYSBsYXJnZXIgc2tldGNoIGNhbnZhcyBpbiBvcmRlclxuICAgICAgICAvLyB0byBzdXBwb3J0IGVkZ2Ugc21vb3RoaW5nLlxuICAgICAgICB2YXIgc2tldGNoQ2FudmFzU2l6ZSA9IE1hdGguY2VpbChNYXRoLnNxcnQoXG4gICAgICAgICAgICBjYW52YXNTaXplLnggKiBjYW52YXNTaXplLnggK1xuICAgICAgICAgICAgY2FudmFzU2l6ZS55ICogY2FudmFzU2l6ZS55KSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBza2V0Y2hDYW52YXNTaXplLFxuICAgICAgICAgICAgeTogc2tldGNoQ2FudmFzU2l6ZVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gVmlld3BvcnRcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cblxuLyoqXG4gKiBAY2xhc3MgVmlld3BvcnRcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAY2xhc3NkZXNjIEhhbmRsZXMgY29vcmRpbmF0ZS1yZWxhdGVkIGZ1bmN0aW9uYWxpdHkgKHpvb20sIHBhbiwgcm90YXRpb24sIGV0Yy4pXG4gKiBmb3IgYW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyfS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBWaWV3cG9ydC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5tYXJnaW5zXSAtIFNlZSB2aWV3cG9ydE1hcmdpbnMgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc3ByaW5nU3RpZmZuZXNzXSAtIFNlZSBzcHJpbmdTdGlmZm5lc3MgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuYW5pbWF0aW9uVGltZV0gLSBTZWUgYW5pbWF0aW9uVGltZSBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5taW5ab29tSW1hZ2VSYXRpb10gLSBTZWUgbWluWm9vbUltYWdlUmF0aW8gaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4Wm9vbVBpeGVsUmF0aW9dIC0gU2VlIG1heFpvb21QaXhlbFJhdGlvIGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnZpc2liaWxpdHlSYXRpb10gLSBTZWUgdmlzaWJpbGl0eVJhdGlvIGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy53cmFwSG9yaXpvbnRhbF0gLSBTZWUgd3JhcEhvcml6b250YWwgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndyYXBWZXJ0aWNhbF0gLSBTZWUgd3JhcFZlcnRpY2FsIGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmRlZmF1bHRab29tTGV2ZWxdIC0gU2VlIGRlZmF1bHRab29tTGV2ZWwgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluWm9vbUxldmVsXSAtIFNlZSBtaW5ab29tTGV2ZWwgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4Wm9vbUxldmVsXSAtIFNlZSBtYXhab29tTGV2ZWwgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGVncmVlc10gLSBTZWUgZGVncmVlcyBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaG9tZUZpbGxzVmlld2VyXSAtIFNlZSBob21lRmlsbHNWaWV3ZXIgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKi9cbiQuVmlld3BvcnQgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuICAgIC8vYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3IgcG9zaXRpb25hbCBhcmdzIHdoaWxlIHByZWZlcmluZyBtb3JlXG4gICAgLy9pZGlvbWF0aWMgamF2YXNjcmlwdCBvcHRpb25zIG9iamVjdCBhcyB0aGUgb25seSBhcmd1bWVudFxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIGlmKCAgYXJncy5sZW5ndGggJiYgYXJnc1sgMCBdIGluc3RhbmNlb2YgJC5Qb2ludCApe1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgY29udGFpbmVyU2l6ZTogIGFyZ3NbIDAgXSxcbiAgICAgICAgICAgIGNvbnRlbnRTaXplOiAgICBhcmdzWyAxIF0sXG4gICAgICAgICAgICBjb25maWc6ICAgICAgICAgYXJnc1sgMiBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy9vcHRpb25zLmNvbmZpZyBhbmQgdGhlIGdlbmVyYWwgY29uZmlnIGFyZ3VtZW50IGFyZSBkZXByZWNhdGVkXG4gICAgLy9pbiBmYXZvciBvZiB0aGUgbW9yZSBkaXJlY3Qgc3BlY2lmaWNhdGlvbiBvZiBvcHRpb25hbCBzZXR0aW5nc1xuICAgIC8vYmVpbmcgcGFzc2VkIGRpcmVjdGx5IG9uIHRoZSBvcHRpb25zIG9iamVjdFxuICAgIGlmICggb3B0aW9ucy5jb25maWcgKXtcbiAgICAgICAgJC5leHRlbmQoIHRydWUsIG9wdGlvbnMsIG9wdGlvbnMuY29uZmlnICk7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmNvbmZpZztcbiAgICB9XG5cbiAgICB0aGlzLl9tYXJnaW5zID0gJC5leHRlbmQoe1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBib3R0b206IDBcbiAgICB9LCBvcHRpb25zLm1hcmdpbnMgfHwge30pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubWFyZ2lucztcblxuICAgICQuZXh0ZW5kKCB0cnVlLCB0aGlzLCB7XG5cbiAgICAgICAgLy9yZXF1aXJlZCBzZXR0aW5nc1xuICAgICAgICBjb250YWluZXJTaXplOiAgICAgIG51bGwsXG4gICAgICAgIGNvbnRlbnRTaXplOiAgICAgICAgbnVsbCxcblxuICAgICAgICAvL2ludGVybmFsIHN0YXRlIHByb3BlcnRpZXNcbiAgICAgICAgem9vbVBvaW50OiAgICAgICAgICBudWxsLFxuICAgICAgICB2aWV3ZXI6ICAgICAgICAgICBudWxsLFxuXG4gICAgICAgIC8vY29uZmlndXJhYmxlIG9wdGlvbnNcbiAgICAgICAgc3ByaW5nU3RpZmZuZXNzOiAgICAkLkRFRkFVTFRfU0VUVElOR1Muc3ByaW5nU3RpZmZuZXNzLFxuICAgICAgICBhbmltYXRpb25UaW1lOiAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5hbmltYXRpb25UaW1lLFxuICAgICAgICBtaW5ab29tSW1hZ2VSYXRpbzogICQuREVGQVVMVF9TRVRUSU5HUy5taW5ab29tSW1hZ2VSYXRpbyxcbiAgICAgICAgbWF4Wm9vbVBpeGVsUmF0aW86ICAkLkRFRkFVTFRfU0VUVElOR1MubWF4Wm9vbVBpeGVsUmF0aW8sXG4gICAgICAgIHZpc2liaWxpdHlSYXRpbzogICAgJC5ERUZBVUxUX1NFVFRJTkdTLnZpc2liaWxpdHlSYXRpbyxcbiAgICAgICAgd3JhcEhvcml6b250YWw6ICAgICAkLkRFRkFVTFRfU0VUVElOR1Mud3JhcEhvcml6b250YWwsXG4gICAgICAgIHdyYXBWZXJ0aWNhbDogICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLndyYXBWZXJ0aWNhbCxcbiAgICAgICAgZGVmYXVsdFpvb21MZXZlbDogICAkLkRFRkFVTFRfU0VUVElOR1MuZGVmYXVsdFpvb21MZXZlbCxcbiAgICAgICAgbWluWm9vbUxldmVsOiAgICAgICAkLkRFRkFVTFRfU0VUVElOR1MubWluWm9vbUxldmVsLFxuICAgICAgICBtYXhab29tTGV2ZWw6ICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5tYXhab29tTGV2ZWwsXG4gICAgICAgIGRlZ3JlZXM6ICAgICAgICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmRlZ3JlZXMsXG4gICAgICAgIGhvbWVGaWxsc1ZpZXdlcjogICAgJC5ERUZBVUxUX1NFVFRJTkdTLmhvbWVGaWxsc1ZpZXdlclxuXG4gICAgfSwgb3B0aW9ucyApO1xuXG4gICAgdGhpcy5fdXBkYXRlQ29udGFpbmVySW5uZXJTaXplKCk7XG5cbiAgICB0aGlzLmNlbnRlclNwcmluZ1ggPSBuZXcgJC5TcHJpbmcoe1xuICAgICAgICBpbml0aWFsOiAwLFxuICAgICAgICBzcHJpbmdTdGlmZm5lc3M6IHRoaXMuc3ByaW5nU3RpZmZuZXNzLFxuICAgICAgICBhbmltYXRpb25UaW1lOiAgIHRoaXMuYW5pbWF0aW9uVGltZVxuICAgIH0pO1xuICAgIHRoaXMuY2VudGVyU3ByaW5nWSA9IG5ldyAkLlNwcmluZyh7XG4gICAgICAgIGluaXRpYWw6IDAsXG4gICAgICAgIHNwcmluZ1N0aWZmbmVzczogdGhpcy5zcHJpbmdTdGlmZm5lc3MsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6ICAgdGhpcy5hbmltYXRpb25UaW1lXG4gICAgfSk7XG4gICAgdGhpcy56b29tU3ByaW5nICAgID0gbmV3ICQuU3ByaW5nKHtcbiAgICAgICAgZXhwb25lbnRpYWw6IHRydWUsXG4gICAgICAgIGluaXRpYWw6IDEsXG4gICAgICAgIHNwcmluZ1N0aWZmbmVzczogdGhpcy5zcHJpbmdTdGlmZm5lc3MsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6ICAgdGhpcy5hbmltYXRpb25UaW1lXG4gICAgfSk7XG5cbiAgICB0aGlzLl9vbGRDZW50ZXJYID0gdGhpcy5jZW50ZXJTcHJpbmdYLmN1cnJlbnQudmFsdWU7XG4gICAgdGhpcy5fb2xkQ2VudGVyWSA9IHRoaXMuY2VudGVyU3ByaW5nWS5jdXJyZW50LnZhbHVlO1xuICAgIHRoaXMuX29sZFpvb20gICAgPSB0aGlzLnpvb21TcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgIHRoaXMuX3NldENvbnRlbnRCb3VuZHMobmV3ICQuUmVjdCgwLCAwLCAxLCAxKSwgMSk7XG5cbiAgICB0aGlzLmdvSG9tZSh0cnVlKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xufTtcblxuLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLlZpZXdwb3J0LnByb3RvdHlwZSAqL1xuJC5WaWV3cG9ydC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdmlld3BvcnQncyBob21lIGJvdW5kcyBhbmQgY29uc3RyYWludHMgZm9yIHRoZSBnaXZlbiBjb250ZW50IHNpemUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBjb250ZW50U2l6ZSAtIHNpemUgb2YgdGhlIGNvbnRlbnQgaW4gY29udGVudCB1bml0c1xuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6cmVzZXQtc2l6ZVxuICAgICAqL1xuICAgIHJlc2V0Q29udGVudFNpemU6IGZ1bmN0aW9uKGNvbnRlbnRTaXplKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoY29udGVudFNpemUsIFwiW1ZpZXdwb3J0LnJlc2V0Q29udGVudFNpemVdIGNvbnRlbnRTaXplIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGNvbnRlbnRTaXplIGluc3RhbmNlb2YgJC5Qb2ludCwgXCJbVmlld3BvcnQucmVzZXRDb250ZW50U2l6ZV0gY29udGVudFNpemUgbXVzdCBiZSBhbiBPcGVuU2VhZHJhZ29uLlBvaW50XCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGNvbnRlbnRTaXplLnggPiAwLCBcIltWaWV3cG9ydC5yZXNldENvbnRlbnRTaXplXSBjb250ZW50U2l6ZS54IG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIik7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoY29udGVudFNpemUueSA+IDAsIFwiW1ZpZXdwb3J0LnJlc2V0Q29udGVudFNpemVdIGNvbnRlbnRTaXplLnkgbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKTtcblxuICAgICAgICB0aGlzLl9zZXRDb250ZW50Qm91bmRzKG5ldyAkLlJlY3QoMCwgMCwgMSwgY29udGVudFNpemUueSAvIGNvbnRlbnRTaXplLngpLCBjb250ZW50U2l6ZS54KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBzZXRIb21lQm91bmRzOiBmdW5jdGlvbihib3VuZHMsIGNvbnRlbnRGYWN0b3IpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKFwiW1ZpZXdwb3J0LnNldEhvbWVCb3VuZHNdIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDsgVGhlIGNvbnRlbnQgYm91bmRzIHNob3VsZCBub3QgYmUgc2V0IG1hbnVhbGx5LlwiKTtcbiAgICAgICAgdGhpcy5fc2V0Q29udGVudEJvdW5kcyhib3VuZHMsIGNvbnRlbnRGYWN0b3IpO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgdGhlIHZpZXdwb3J0J3MgY29udGVudCBib3VuZHNcbiAgICAvLyBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gYm91bmRzIC0gdGhlIG5ldyBib3VuZHMgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXNcbiAgICAvLyB3aXRob3V0IHJvdGF0aW9uXG4gICAgLy8gQHBhcmFtIHtOdW1iZXJ9IGNvbnRlbnRGYWN0b3IgLSBob3cgbWFueSBjb250ZW50IHVuaXRzIHBlciB2aWV3cG9ydCB1bml0XG4gICAgLy8gQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50OnJlc2V0LXNpemVcbiAgICAvLyBAcHJpdmF0ZVxuICAgIF9zZXRDb250ZW50Qm91bmRzOiBmdW5jdGlvbihib3VuZHMsIGNvbnRlbnRGYWN0b3IpIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydChib3VuZHMsIFwiW1ZpZXdwb3J0Ll9zZXRDb250ZW50Qm91bmRzXSBib3VuZHMgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoYm91bmRzIGluc3RhbmNlb2YgJC5SZWN0LCBcIltWaWV3cG9ydC5fc2V0Q29udGVudEJvdW5kc10gYm91bmRzIG11c3QgYmUgYW4gT3BlblNlYWRyYWdvbi5SZWN0XCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGJvdW5kcy53aWR0aCA+IDAsIFwiW1ZpZXdwb3J0Ll9zZXRDb250ZW50Qm91bmRzXSBib3VuZHMud2lkdGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKTtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydChib3VuZHMuaGVpZ2h0ID4gMCwgXCJbVmlld3BvcnQuX3NldENvbnRlbnRCb3VuZHNdIGJvdW5kcy5oZWlnaHQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKTtcblxuICAgICAgICB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUgPSBib3VuZHMuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5fY29udGVudFNpemVOb1JvdGF0ZSA9IHRoaXMuX2NvbnRlbnRCb3VuZHNOb1JvdGF0ZS5nZXRTaXplKCkudGltZXMoXG4gICAgICAgICAgICBjb250ZW50RmFjdG9yKTtcblxuICAgICAgICB0aGlzLl9jb250ZW50Qm91bmRzID0gYm91bmRzLnJvdGF0ZSh0aGlzLmRlZ3JlZXMpLmdldEJvdW5kaW5nQm94KCk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRTaXplID0gdGhpcy5fY29udGVudEJvdW5kcy5nZXRTaXplKCkudGltZXMoY29udGVudEZhY3Rvcik7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRBc3BlY3RSYXRpbyA9IHRoaXMuX2NvbnRlbnRTaXplLnggLyB0aGlzLl9jb250ZW50U2l6ZS55O1xuXG4gICAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgdmlld2VyJ3MgY29udGVudCBzaXplIG9yIGhvbWUgYm91bmRzIGFyZSByZXNldFxuICAgICAgICAgICAgICogKHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3cG9ydCNyZXNldENvbnRlbnRTaXplfSkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV2ZW50IHJlc2V0LXNpemVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gY29udGVudFNpemVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5SZWN0fSBjb250ZW50Qm91bmRzIC0gQ29udGVudCBib3VuZHMuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUmVjdH0gaG9tZUJvdW5kcyAtIENvbnRlbnQgYm91bmRzLlxuICAgICAgICAgICAgICogRGVwcmVjYXRlZCB1c2UgY29udGVudEJvdW5kcyBpbnN0ZWFkLlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvbnRlbnRGYWN0b3JcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIucmFpc2VFdmVudCgncmVzZXQtc2l6ZScsIHtcbiAgICAgICAgICAgICAgICBjb250ZW50U2l6ZTogdGhpcy5fY29udGVudFNpemVOb1JvdGF0ZS5jbG9uZSgpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRGYWN0b3I6IGNvbnRlbnRGYWN0b3IsXG4gICAgICAgICAgICAgICAgaG9tZUJvdW5kczogdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLmNsb25lKCksXG4gICAgICAgICAgICAgICAgY29udGVudEJvdW5kczogdGhpcy5fY29udGVudEJvdW5kcy5jbG9uZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBob21lIHpvb20gaW4gXCJ2aWV3cG9ydCB6b29tXCIgdmFsdWUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge051bWJlcn0gVGhlIGhvbWUgem9vbSBpbiBcInZpZXdwb3J0IHpvb21cIi5cbiAgICAgKi9cbiAgICBnZXRIb21lWm9vbTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRab29tTGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRab29tTGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXNwZWN0RmFjdG9yID0gdGhpcy5fY29udGVudEFzcGVjdFJhdGlvIC8gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICB2YXIgb3V0cHV0O1xuICAgICAgICBpZiAodGhpcy5ob21lRmlsbHNWaWV3ZXIpIHsgLy8gZmlsbCB0aGUgdmlld2VyIGFuZCBjbGlwIHRoZSBpbWFnZVxuICAgICAgICAgICAgb3V0cHV0ID0gYXNwZWN0RmFjdG9yID49IDEgPyBhc3BlY3RGYWN0b3IgOiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0ID0gYXNwZWN0RmFjdG9yID49IDEgPyAxIDogYXNwZWN0RmFjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dCAvIHRoaXMuX2NvbnRlbnRCb3VuZHMud2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhvbWUgYm91bmRzIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlJlY3R9IFRoZSBob21lIGJvdW5kcyBpbiB2ZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqL1xuICAgIGdldEhvbWVCb3VuZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRIb21lQm91bmRzTm9Sb3RhdGUoKS5yb3RhdGUoLXRoaXMuZ2V0Um90YXRpb24oKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhvbWUgYm91bmRzIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIFRoaXMgbWV0aG9kIGlnbm9yZXMgdGhlIHZpZXdwb3J0IHJvdGF0aW9uLiBVc2VcbiAgICAgKiB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3cG9ydCNnZXRIb21lQm91bmRzfSB0byB0YWtlIGl0IGludG8gYWNjb3VudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBUaGUgaG9tZSBib3VuZHMgaW4gdmV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBnZXRIb21lQm91bmRzTm9Sb3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2VudGVyID0gdGhpcy5fY29udGVudEJvdW5kcy5nZXRDZW50ZXIoKTtcbiAgICAgICAgdmFyIHdpZHRoICA9IDEuMCAvIHRoaXMuZ2V0SG9tZVpvb20oKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHdpZHRoIC8gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuXG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgY2VudGVyLnggLSAod2lkdGggLyAyLjApLFxuICAgICAgICAgICAgY2VudGVyLnkgLSAoaGVpZ2h0IC8gMi4wKSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW1tZWRpYXRlbHlcbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6aG9tZVxuICAgICAqL1xuICAgIGdvSG9tZTogZnVuY3Rpb24oaW1tZWRpYXRlbHkpIHtcbiAgICAgICAgaWYgKHRoaXMudmlld2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSBcImhvbWVcIiBvcGVyYXRpb24gb2NjdXJzIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjZ29Ib21lfSkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV2ZW50IGhvbWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIucmFpc2VFdmVudCgnaG9tZScsIHtcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGVseTogaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpdEJvdW5kcyh0aGlzLmdldEhvbWVCb3VuZHMoKSwgaW1tZWRpYXRlbHkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cbiAgICBnZXRNaW5ab29tOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhvbWVab29tID0gdGhpcy5nZXRIb21lWm9vbSgpLFxuICAgICAgICAgICAgem9vbSA9IHRoaXMubWluWm9vbUxldmVsID9cbiAgICAgICAgICAgIHRoaXMubWluWm9vbUxldmVsIDpcbiAgICAgICAgICAgICAgICB0aGlzLm1pblpvb21JbWFnZVJhdGlvICogaG9tZVpvb207XG5cbiAgICAgICAgcmV0dXJuIHpvb207XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIGdldE1heFpvb206IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgem9vbSA9IHRoaXMubWF4Wm9vbUxldmVsO1xuICAgICAgICBpZiAoIXpvb20pIHtcbiAgICAgICAgICAgIHpvb20gPSB0aGlzLl9jb250ZW50U2l6ZS54ICogdGhpcy5tYXhab29tUGl4ZWxSYXRpbyAvIHRoaXMuX2NvbnRhaW5lcklubmVyU2l6ZS54O1xuICAgICAgICAgICAgem9vbSAvPSB0aGlzLl9jb250ZW50Qm91bmRzLndpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KCB6b29tLCB0aGlzLmdldEhvbWVab29tKCkgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgZ2V0QXNwZWN0UmF0aW86IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVySW5uZXJTaXplLnggLyB0aGlzLl9jb250YWluZXJJbm5lclNpemUueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9IFRoZSBzaXplIG9mIHRoZSBjb250YWluZXIsIGluIHNjcmVlbiBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBnZXRDb250YWluZXJTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJTaXplLngsXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lclNpemUueVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFyZ2lucyBwdXNoIHRoZSBcImhvbWVcIiByZWdpb24gaW4gZnJvbSB0aGUgc2lkZXMgYnkgdGhlIHNwZWNpZmllZCBhbW91bnRzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFByb3BlcnRpZXMgKE51bWJlcnMsIGluIHNjcmVlbiBjb29yZGluYXRlcyk6IGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbS5cbiAgICAgKi9cbiAgICBnZXRNYXJnaW5zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9tYXJnaW5zKTsgLy8gTWFrZSBhIGNvcHkgc28gd2UgYXJlIG5vdCByZXR1cm5pbmcgb3VyIG9yaWdpbmFsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXJnaW5zIHB1c2ggdGhlIFwiaG9tZVwiIHJlZ2lvbiBpbiBmcm9tIHRoZSBzaWRlcyBieSB0aGUgc3BlY2lmaWVkIGFtb3VudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcmdpbnMgLSBQcm9wZXJ0aWVzIChOdW1iZXJzLCBpbiBzY3JlZW4gY29vcmRpbmF0ZXMpOiBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20uXG4gICAgICovXG4gICAgc2V0TWFyZ2luczogZnVuY3Rpb24obWFyZ2lucykge1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KCQudHlwZShtYXJnaW5zKSA9PT0gJ29iamVjdCcsICdbVmlld3BvcnQuc2V0TWFyZ2luc10gbWFyZ2lucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfSwgbWFyZ2lucyk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQ29udGFpbmVySW5uZXJTaXplKCk7XG4gICAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIuZm9yY2VSZWRyYXcoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBib3VuZHMgb2YgdGhlIHZpc2libGUgYXJlYSBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGN1cnJlbnQgLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uOyBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBUaGUgbG9jYXRpb24geW91IGFyZSB6b29tZWQvcGFubmVkIHRvLCBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBnZXRCb3VuZHM6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qm91bmRzTm9Sb3RhdGUoY3VycmVudCkucm90YXRlKC10aGlzLmdldFJvdGF0aW9uKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBib3VuZHMgb2YgdGhlIHZpc2libGUgYXJlYSBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCBpZ25vcmVzIHRoZSB2aWV3cG9ydCByb3RhdGlvbi4gVXNlXG4gICAgICoge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjZ2V0Qm91bmRzfSB0byB0YWtlIGl0IGludG8gYWNjb3VudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGN1cnJlbnQgLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uOyBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBUaGUgbG9jYXRpb24geW91IGFyZSB6b29tZWQvcGFubmVkIHRvLCBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBnZXRCb3VuZHNOb1JvdGF0ZTogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXIoY3VycmVudCk7XG4gICAgICAgIHZhciB3aWR0aCAgPSAxLjAgLyB0aGlzLmdldFpvb20oY3VycmVudCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSB3aWR0aCAvIHRoaXMuZ2V0QXNwZWN0UmF0aW8oKTtcblxuICAgICAgICByZXR1cm4gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIGNlbnRlci54IC0gKHdpZHRoIC8gMi4wKSxcbiAgICAgICAgICAgIGNlbnRlci55IC0gKGhlaWdodCAvIDIuMCksXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGN1cnJlbnQgLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uOyBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSBUaGUgbG9jYXRpb24geW91IGFyZSB6b29tZWQvcGFubmVkIHRvLFxuICAgICAqIGluY2x1ZGluZyB0aGUgc3BhY2UgdGFrZW4gYnkgbWFyZ2lucywgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gICAgICovXG4gICAgZ2V0Qm91bmRzV2l0aE1hcmdpbnM6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qm91bmRzTm9Sb3RhdGVXaXRoTWFyZ2lucyhjdXJyZW50KS5yb3RhdGUoXG4gICAgICAgICAgICAtdGhpcy5nZXRSb3RhdGlvbigpLCB0aGlzLmdldENlbnRlcihjdXJyZW50KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY3VycmVudCAtIFBhc3MgdHJ1ZSBmb3IgdGhlIGN1cnJlbnQgbG9jYXRpb247IGRlZmF1bHRzIHRvIGZhbHNlICh0YXJnZXQgbG9jYXRpb24pLlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlJlY3R9IFRoZSBsb2NhdGlvbiB5b3UgYXJlIHpvb21lZC9wYW5uZWQgdG8sXG4gICAgICogaW5jbHVkaW5nIHRoZSBzcGFjZSB0YWtlbiBieSBtYXJnaW5zLCBpbiB2aWV3cG9ydCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBnZXRCb3VuZHNOb1JvdGF0ZVdpdGhNYXJnaW5zOiBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSB0aGlzLmdldEJvdW5kc05vUm90YXRlKGN1cnJlbnQpO1xuICAgICAgICB2YXIgZmFjdG9yID0gdGhpcy5fY29udGFpbmVySW5uZXJTaXplLnggKiB0aGlzLmdldFpvb20oY3VycmVudCk7XG4gICAgICAgIGJvdW5kcy54IC09IHRoaXMuX21hcmdpbnMubGVmdCAvIGZhY3RvcjtcbiAgICAgICAgYm91bmRzLnkgLT0gdGhpcy5fbWFyZ2lucy50b3AgLyBmYWN0b3I7XG4gICAgICAgIGJvdW5kcy53aWR0aCArPSAodGhpcy5fbWFyZ2lucy5sZWZ0ICsgdGhpcy5fbWFyZ2lucy5yaWdodCkgLyBmYWN0b3I7XG4gICAgICAgIGJvdW5kcy5oZWlnaHQgKz0gKHRoaXMuX21hcmdpbnMudG9wICsgdGhpcy5fbWFyZ2lucy5ib3R0b20pIC8gZmFjdG9yO1xuICAgICAgICByZXR1cm4gYm91bmRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGN1cnJlbnQgLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uOyBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKi9cbiAgICBnZXRDZW50ZXI6IGZ1bmN0aW9uKCBjdXJyZW50ICkge1xuICAgICAgICB2YXIgY2VudGVyQ3VycmVudCA9IG5ldyAkLlBvaW50KFxuICAgICAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWC5jdXJyZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWS5jdXJyZW50LnZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2VudGVyVGFyZ2V0ID0gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5jZW50ZXJTcHJpbmdYLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGlzLmNlbnRlclNwcmluZ1kudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgb2xkWm9vbVBpeGVsLFxuICAgICAgICAgICAgem9vbSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgbmV3Wm9vbVBpeGVsLFxuICAgICAgICAgICAgZGVsdGFab29tUGl4ZWxzLFxuICAgICAgICAgICAgZGVsdGFab29tUG9pbnRzO1xuXG4gICAgICAgIGlmICggY3VycmVudCApIHtcbiAgICAgICAgICAgIHJldHVybiBjZW50ZXJDdXJyZW50O1xuICAgICAgICB9IGVsc2UgaWYgKCAhdGhpcy56b29tUG9pbnQgKSB7XG4gICAgICAgICAgICByZXR1cm4gY2VudGVyVGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgb2xkWm9vbVBpeGVsID0gdGhpcy5waXhlbEZyb21Qb2ludCh0aGlzLnpvb21Qb2ludCwgdHJ1ZSk7XG5cbiAgICAgICAgem9vbSAgICA9IHRoaXMuZ2V0Wm9vbSgpO1xuICAgICAgICB3aWR0aCAgID0gMS4wIC8gem9vbTtcbiAgICAgICAgaGVpZ2h0ICA9IHdpZHRoIC8gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICBib3VuZHMgID0gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIGNlbnRlckN1cnJlbnQueCAtIHdpZHRoIC8gMi4wLFxuICAgICAgICAgICAgY2VudGVyQ3VycmVudC55IC0gaGVpZ2h0IC8gMi4wLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICBuZXdab29tUGl4ZWwgPSB0aGlzLl9waXhlbEZyb21Qb2ludCh0aGlzLnpvb21Qb2ludCwgYm91bmRzKTtcbiAgICAgICAgZGVsdGFab29tUGl4ZWxzID0gbmV3Wm9vbVBpeGVsLm1pbnVzKCBvbGRab29tUGl4ZWwgKTtcbiAgICAgICAgZGVsdGFab29tUG9pbnRzID0gZGVsdGFab29tUGl4ZWxzLmRpdmlkZSggdGhpcy5fY29udGFpbmVySW5uZXJTaXplLnggKiB6b29tICk7XG5cbiAgICAgICAgcmV0dXJuIGNlbnRlclRhcmdldC5wbHVzKCBkZWx0YVpvb21Qb2ludHMgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjdXJyZW50IC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjsgZGVmYXVsdHMgdG8gZmFsc2UgKHRhcmdldCBsb2NhdGlvbikuXG4gICAgICovXG4gICAgZ2V0Wm9vbTogZnVuY3Rpb24oIGN1cnJlbnQgKSB7XG4gICAgICAgIGlmICggY3VycmVudCApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnpvb21TcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnpvb21TcHJpbmcudGFyZ2V0LnZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfYXBwbHlab29tQ29uc3RyYWludHM6IGZ1bmN0aW9uKHpvb20pIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KFxuICAgICAgICAgICAgTWF0aC5taW4oem9vbSwgdGhpcy5nZXRNYXhab29tKCkpLFxuICAgICAgICAgICAgdGhpcy5nZXRNaW5ab29tKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5SZWN0fSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGltbWVkaWF0ZWx5XG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5SZWN0fSBjb25zdHJhaW5lZCBib3VuZHMuXG4gICAgICovXG4gICAgX2FwcGx5Qm91bmRhcnlDb25zdHJhaW50czogZnVuY3Rpb24oYm91bmRzLCBpbW1lZGlhdGVseSkge1xuICAgICAgICB2YXIgbmV3Qm91bmRzID0gbmV3ICQuUmVjdChcbiAgICAgICAgICAgICAgICBib3VuZHMueCxcbiAgICAgICAgICAgICAgICBib3VuZHMueSxcbiAgICAgICAgICAgICAgICBib3VuZHMud2lkdGgsXG4gICAgICAgICAgICAgICAgYm91bmRzLmhlaWdodCk7XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcEhvcml6b250YWwpIHtcbiAgICAgICAgICAgIC8vZG8gbm90aGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhvcml6b250YWxUaHJlc2hvbGQgPSB0aGlzLnZpc2liaWxpdHlSYXRpbyAqIG5ld0JvdW5kcy53aWR0aDtcbiAgICAgICAgICAgIHZhciBib3VuZHNSaWdodCA9IG5ld0JvdW5kcy54ICsgbmV3Qm91bmRzLndpZHRoO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRSaWdodCA9IHRoaXMuX2NvbnRlbnRCb3VuZHNOb1JvdGF0ZS54ICsgdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLndpZHRoO1xuICAgICAgICAgICAgdmFyIGxlZnREeCA9IHRoaXMuX2NvbnRlbnRCb3VuZHNOb1JvdGF0ZS54IC0gYm91bmRzUmlnaHQgKyBob3Jpem9udGFsVGhyZXNob2xkO1xuICAgICAgICAgICAgdmFyIHJpZ2h0RHggPSBjb250ZW50UmlnaHQgLSBuZXdCb3VuZHMueCAtIGhvcml6b250YWxUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIGlmIChob3Jpem9udGFsVGhyZXNob2xkID4gdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgbmV3Qm91bmRzLnggKz0gKGxlZnREeCArIHJpZ2h0RHgpIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmlnaHREeCA8IDApIHtcbiAgICAgICAgICAgICAgICBuZXdCb3VuZHMueCArPSByaWdodER4O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsZWZ0RHggPiAwKSB7XG4gICAgICAgICAgICAgICAgbmV3Qm91bmRzLnggKz0gbGVmdER4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcFZlcnRpY2FsKSB7XG4gICAgICAgICAgICAvL2RvIG5vdGhpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNhbFRocmVzaG9sZCAgID0gdGhpcy52aXNpYmlsaXR5UmF0aW8gKiBuZXdCb3VuZHMuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGJvdW5kc0JvdHRvbSA9IG5ld0JvdW5kcy55ICsgbmV3Qm91bmRzLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBjb250ZW50Qm90dG9tID0gdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLnkgKyB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIHRvcER5ID0gdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLnkgLSBib3VuZHNCb3R0b20gKyB2ZXJ0aWNhbFRocmVzaG9sZDtcbiAgICAgICAgICAgIHZhciBib3R0b21EeSA9IGNvbnRlbnRCb3R0b20gLSBuZXdCb3VuZHMueSAtIHZlcnRpY2FsVGhyZXNob2xkO1xuXG4gICAgICAgICAgICBpZiAodmVydGljYWxUaHJlc2hvbGQgPiB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbmV3Qm91bmRzLnkgKz0gKHRvcER5ICsgYm90dG9tRHkpIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYm90dG9tRHkgPCAwKSB7XG4gICAgICAgICAgICAgICAgbmV3Qm91bmRzLnkgKz0gYm90dG9tRHk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvcER5ID4gMCkge1xuICAgICAgICAgICAgICAgIG5ld0JvdW5kcy55ICs9IHRvcER5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudmlld2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSB2aWV3cG9ydCBjb25zdHJhaW50cyBhcmUgYXBwbGllZCAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdwb3J0I2FwcGx5Q29uc3RyYWludHN9KS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXZlbnQgY29uc3RyYWluXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoaXMgZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudmlld2VyLnJhaXNlRXZlbnQoICdjb25zdHJhaW4nLCB7XG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlbHk6IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdCb3VuZHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVuZm9yY2VzIHRoZSBtaW5ab29tLCBtYXhab29tIGFuZCB2aXNpYmlsaXR5UmF0aW8gY29uc3RyYWludHMgYnlcbiAgICAgKiB6b29taW5nIGFuZCBwYW5uaW5nIHRvIHRoZSBjbG9zZXN0IGFjY2VwdGFibGUgem9vbSBhbmQgbG9jYXRpb24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpjb25zdHJhaW5cbiAgICAgKi9cbiAgICBhcHBseUNvbnN0cmFpbnRzOiBmdW5jdGlvbihpbW1lZGlhdGVseSkge1xuICAgICAgICB2YXIgYWN0dWFsWm9vbSA9IHRoaXMuZ2V0Wm9vbSgpO1xuICAgICAgICB2YXIgY29uc3RyYWluZWRab29tID0gdGhpcy5fYXBwbHlab29tQ29uc3RyYWludHMoYWN0dWFsWm9vbSk7XG5cbiAgICAgICAgaWYgKGFjdHVhbFpvb20gIT09IGNvbnN0cmFpbmVkWm9vbSkge1xuICAgICAgICAgICAgdGhpcy56b29tVG8oY29uc3RyYWluZWRab29tLCB0aGlzLnpvb21Qb2ludCwgaW1tZWRpYXRlbHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzTm9Sb3RhdGUoKTtcbiAgICAgICAgdmFyIGNvbnN0cmFpbmVkQm91bmRzID0gdGhpcy5fYXBwbHlCb3VuZGFyeUNvbnN0cmFpbnRzKFxuICAgICAgICAgICAgYm91bmRzLCBpbW1lZGlhdGVseSk7XG5cbiAgICAgICAgaWYgKGJvdW5kcy54ICE9PSBjb25zdHJhaW5lZEJvdW5kcy54IHx8XG4gICAgICAgICAgICBib3VuZHMueSAhPT0gY29uc3RyYWluZWRCb3VuZHMueSB8fFxuICAgICAgICAgICAgaW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIHRoaXMuZml0Qm91bmRzKFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbmVkQm91bmRzLnJvdGF0ZSgtdGhpcy5nZXRSb3RhdGlvbigpKSxcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8ge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjYXBwbHlDb25zdHJhaW50c31cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbW1lZGlhdGVseT1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdwb3J0fSBDaGFpbmFibGUuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50OmNvbnN0cmFpblxuICAgICAqL1xuICAgIGVuc3VyZVZpc2libGU6IGZ1bmN0aW9uKGltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q29uc3RyYWludHMoaW1tZWRpYXRlbHkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5SZWN0fSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAoaW1tZWRpYXRlbHk9ZmFsc2UsIGNvbnN0cmFpbnRzPWZhbHNlKVxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IENoYWluYWJsZS5cbiAgICAgKi9cbiAgICBfZml0Qm91bmRzOiBmdW5jdGlvbihib3VuZHMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBpbW1lZGlhdGVseSA9IG9wdGlvbnMuaW1tZWRpYXRlbHkgfHwgZmFsc2U7XG4gICAgICAgIHZhciBjb25zdHJhaW50cyA9IG9wdGlvbnMuY29uc3RyYWludHMgfHwgZmFsc2U7XG5cbiAgICAgICAgdmFyIGFzcGVjdCA9IHRoaXMuZ2V0QXNwZWN0UmF0aW8oKTtcbiAgICAgICAgdmFyIGNlbnRlciA9IGJvdW5kcy5nZXRDZW50ZXIoKTtcblxuICAgICAgICAvLyBDb21wdXRlIHdpZHRoIGFuZCBoZWlnaHQgb2YgYm91bmRpbmcgYm94LlxuICAgICAgICB2YXIgbmV3Qm91bmRzID0gbmV3ICQuUmVjdChcbiAgICAgICAgICAgIGJvdW5kcy54LFxuICAgICAgICAgICAgYm91bmRzLnksXG4gICAgICAgICAgICBib3VuZHMud2lkdGgsXG4gICAgICAgICAgICBib3VuZHMuaGVpZ2h0LFxuICAgICAgICAgICAgYm91bmRzLmRlZ3JlZXMgKyB0aGlzLmdldFJvdGF0aW9uKCkpXG4gICAgICAgICAgICAuZ2V0Qm91bmRpbmdCb3goKTtcblxuICAgICAgICBpZiAobmV3Qm91bmRzLmdldEFzcGVjdFJhdGlvKCkgPj0gYXNwZWN0KSB7XG4gICAgICAgICAgICBuZXdCb3VuZHMuaGVpZ2h0ID0gbmV3Qm91bmRzLndpZHRoIC8gYXNwZWN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3Qm91bmRzLndpZHRoID0gbmV3Qm91bmRzLmhlaWdodCAqIGFzcGVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbXB1dGUgeCBhbmQgeSBmcm9tIHdpZHRoLCBoZWlnaHQgYW5kIGNlbnRlciBwb3NpdGlvblxuICAgICAgICBuZXdCb3VuZHMueCA9IGNlbnRlci54IC0gbmV3Qm91bmRzLndpZHRoIC8gMjtcbiAgICAgICAgbmV3Qm91bmRzLnkgPSBjZW50ZXIueSAtIG5ld0JvdW5kcy5oZWlnaHQgLyAyO1xuICAgICAgICB2YXIgbmV3Wm9vbSA9IDEuMCAvIG5ld0JvdW5kcy53aWR0aDtcblxuICAgICAgICBpZiAoY29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHZhciBuZXdCb3VuZHNBc3BlY3RSYXRpbyA9IG5ld0JvdW5kcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICAgICAgdmFyIG5ld0NvbnN0cmFpbmVkWm9vbSA9IHRoaXMuX2FwcGx5Wm9vbUNvbnN0cmFpbnRzKG5ld1pvb20pO1xuXG4gICAgICAgICAgICBpZiAobmV3Wm9vbSAhPT0gbmV3Q29uc3RyYWluZWRab29tKSB7XG4gICAgICAgICAgICAgICAgbmV3Wm9vbSA9IG5ld0NvbnN0cmFpbmVkWm9vbTtcbiAgICAgICAgICAgICAgICBuZXdCb3VuZHMud2lkdGggPSAxLjAgLyBuZXdab29tO1xuICAgICAgICAgICAgICAgIG5ld0JvdW5kcy54ID0gY2VudGVyLnggLSBuZXdCb3VuZHMud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIG5ld0JvdW5kcy5oZWlnaHQgPSBuZXdCb3VuZHMud2lkdGggLyBuZXdCb3VuZHNBc3BlY3RSYXRpbztcbiAgICAgICAgICAgICAgICBuZXdCb3VuZHMueSA9IGNlbnRlci55IC0gbmV3Qm91bmRzLmhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0JvdW5kcyA9IHRoaXMuX2FwcGx5Qm91bmRhcnlDb25zdHJhaW50cyhuZXdCb3VuZHMsIGltbWVkaWF0ZWx5KTtcbiAgICAgICAgICAgIGNlbnRlciA9IG5ld0JvdW5kcy5nZXRDZW50ZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgdGhpcy5wYW5UbyhjZW50ZXIsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuem9vbVRvKG5ld1pvb20sIG51bGwsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYW5Ubyh0aGlzLmdldENlbnRlcih0cnVlKSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuem9vbVRvKHRoaXMuZ2V0Wm9vbSh0cnVlKSwgbnVsbCwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIG9sZEJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCk7XG4gICAgICAgIHZhciBvbGRab29tICAgPSB0aGlzLmdldFpvb20oKTtcblxuICAgICAgICBpZiAob2xkWm9vbSA9PT0gMCB8fCBNYXRoLmFicyhuZXdab29tIC8gb2xkWm9vbSAtIDEpIDwgMC4wMDAwMDAwMSkge1xuICAgICAgICAgICAgdGhpcy56b29tVG8obmV3Wm9vbSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5UbyhjZW50ZXIsIGltbWVkaWF0ZWx5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0JvdW5kcyA9IG5ld0JvdW5kcy5yb3RhdGUoLXRoaXMuZ2V0Um90YXRpb24oKSk7XG4gICAgICAgIHZhciByZWZlcmVuY2VQb2ludCA9IG5ld0JvdW5kcy5nZXRUb3BMZWZ0KCkudGltZXMobmV3Wm9vbSlcbiAgICAgICAgICAgIC5taW51cyhvbGRCb3VuZHMuZ2V0VG9wTGVmdCgpLnRpbWVzKG9sZFpvb20pKVxuICAgICAgICAgICAgLmRpdmlkZShuZXdab29tIC0gb2xkWm9vbSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuem9vbVRvKG5ld1pvb20sIHJlZmVyZW5jZVBvaW50LCBpbW1lZGlhdGVseSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSB2aWV3cG9ydCB6b29tIGFuZCBwYW4gc28gdGhhdCB0aGUgc3BlY2lmaWVkIGJvdW5kcyB0YWtlXG4gICAgICogYXMgbXVjaCBzcGFjZSBhcyBwb3NzaWJsZSBpbiB0aGUgdmlld3BvcnQuXG4gICAgICogTm90ZTogdGhpcyBtZXRob2QgaWdub3JlcyB0aGUgY29uc3RyYWludHMgKG1pblpvb20sIG1heFpvb20gYW5kXG4gICAgICogdmlzaWJpbGl0eVJhdGlvKS5cbiAgICAgKiBVc2Uge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjZml0Qm91bmRzV2l0aENvbnN0cmFpbnRzfSB0byBlbmZvcmNlXG4gICAgICogdGhlbS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gYm91bmRzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqL1xuICAgIGZpdEJvdW5kczogZnVuY3Rpb24oYm91bmRzLCBpbW1lZGlhdGVseSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZml0Qm91bmRzKGJvdW5kcywge1xuICAgICAgICAgICAgaW1tZWRpYXRlbHk6IGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgY29uc3RyYWludHM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgdmlld3BvcnQgem9vbSBhbmQgcGFuIHNvIHRoYXQgdGhlIHNwZWNpZmllZCBib3VuZHMgdGFrZVxuICAgICAqIGFzIG11Y2ggc3BhY2UgYXMgcG9zc2libGUgaW4gdGhlIHZpZXdwb3J0IHdoaWxlIGVuZm9yY2luZyB0aGUgY29uc3RyYWludHNcbiAgICAgKiAobWluWm9vbSwgbWF4Wm9vbSBhbmQgdmlzaWJpbGl0eVJhdGlvKS5cbiAgICAgKiBOb3RlOiBiZWNhdXNlIHRoaXMgbWV0aG9kIGVuZm9yY2VzIHRoZSBjb25zdHJhaW50cywgcGFydCBvZiB0aGVcbiAgICAgKiBwcm92aWRlZCBib3VuZHMgbWF5IGVuZCB1cCBvdXRzaWRlIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgKiBVc2Uge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjZml0Qm91bmRzfSB0byBpZ25vcmUgdGhlbS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gYm91bmRzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqL1xuICAgIGZpdEJvdW5kc1dpdGhDb25zdHJhaW50czogZnVuY3Rpb24oYm91bmRzLCBpbW1lZGlhdGVseSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZml0Qm91bmRzKGJvdW5kcywge1xuICAgICAgICAgICAgaW1tZWRpYXRlbHk6IGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgY29uc3RyYWludHM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFpvb21zIHNvIHRoZSBpbWFnZSBqdXN0IGZpbGxzIHRoZSB2aWV3ZXIgdmVydGljYWxseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGltbWVkaWF0ZWx5XG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqL1xuICAgIGZpdFZlcnRpY2FsbHk6IGZ1bmN0aW9uKGltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHZhciBib3ggPSBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgdGhpcy5fY29udGVudEJvdW5kcy54ICsgKHRoaXMuX2NvbnRlbnRCb3VuZHMud2lkdGggLyAyKSxcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRCb3VuZHMueSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50Qm91bmRzLmhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpdEJvdW5kcyhib3gsIGltbWVkaWF0ZWx5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWm9vbXMgc28gdGhlIGltYWdlIGp1c3QgZmlsbHMgdGhlIHZpZXdlciBob3Jpem9udGFsbHkuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpbW1lZGlhdGVseVxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IENoYWluYWJsZS5cbiAgICAgKi9cbiAgICBmaXRIb3Jpem9udGFsbHk6IGZ1bmN0aW9uKGltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHZhciBib3ggPSBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgdGhpcy5fY29udGVudEJvdW5kcy54LFxuICAgICAgICAgICAgdGhpcy5fY29udGVudEJvdW5kcy55ICsgKHRoaXMuX2NvbnRlbnRCb3VuZHMuaGVpZ2h0IC8gMiksXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50Qm91bmRzLndpZHRoLFxuICAgICAgICAgICAgMCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpdEJvdW5kcyhib3gsIGltbWVkaWF0ZWx5KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGRlbHRhXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpbW1lZGlhdGVseVxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6cGFuXG4gICAgICovXG4gICAgcGFuQnk6IGZ1bmN0aW9uKCBkZWx0YSwgaW1tZWRpYXRlbHkgKSB7XG4gICAgICAgIHZhciBjZW50ZXIgPSBuZXcgJC5Qb2ludChcbiAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWC50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB0aGlzLmNlbnRlclNwcmluZ1kudGFyZ2V0LnZhbHVlXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhblRvKCBjZW50ZXIucGx1cyggZGVsdGEgKSwgaW1tZWRpYXRlbHkgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBjZW50ZXJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGltbWVkaWF0ZWx5XG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLlZpZXdlci5ldmVudDpwYW5cbiAgICAgKi9cbiAgICBwYW5UbzogZnVuY3Rpb24oIGNlbnRlciwgaW1tZWRpYXRlbHkgKSB7XG4gICAgICAgIGlmICggaW1tZWRpYXRlbHkgKSB7XG4gICAgICAgICAgICB0aGlzLmNlbnRlclNwcmluZ1gucmVzZXRUbyggY2VudGVyLnggKTtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWS5yZXNldFRvKCBjZW50ZXIueSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXJTcHJpbmdYLnNwcmluZ1RvKCBjZW50ZXIueCApO1xuICAgICAgICAgICAgdGhpcy5jZW50ZXJTcHJpbmdZLnNwcmluZ1RvKCBjZW50ZXIueSApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMudmlld2VyICl7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSB2aWV3cG9ydCBpcyBwYW5uZWQgKHNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3cG9ydCNwYW5CeX0gYW5kIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdwb3J0I3BhblRvfSkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV2ZW50IHBhblxuICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGlzIGV2ZW50LlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlBvaW50fSBjZW50ZXJcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIucmFpc2VFdmVudCggJ3BhbicsIHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IGNlbnRlcixcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGVseTogaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uVmlld3BvcnR9IENoYWluYWJsZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5WaWV3ZXIuZXZlbnQ6em9vbVxuICAgICAqL1xuICAgIHpvb21CeTogZnVuY3Rpb24oZmFjdG9yLCByZWZQb2ludCwgaW1tZWRpYXRlbHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuem9vbVRvKFxuICAgICAgICAgICAgdGhpcy56b29tU3ByaW5nLnRhcmdldC52YWx1ZSAqIGZhY3RvciwgcmVmUG9pbnQsIGltbWVkaWF0ZWx5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWm9vbXMgdG8gdGhlIHNwZWNpZmllZCB6b29tIGxldmVsXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHpvb20gVGhlIHpvb20gbGV2ZWwgdG8gem9vbSB0by5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IFtyZWZQb2ludF0gVGhlIHBvaW50IHdoaWNoIHdpbGwgc3RheSBhdFxuICAgICAqIHRoZSBzYW1lIHNjcmVlbiBsb2NhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHZpZXdwb3J0IGNlbnRlci5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbW1lZGlhdGVseT1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdwb3J0fSBDaGFpbmFibGUuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50Onpvb21cbiAgICAgKi9cbiAgICB6b29tVG86IGZ1bmN0aW9uKCB6b29tLCByZWZQb2ludCwgaW1tZWRpYXRlbHkgKSB7XG5cbiAgICAgICAgdGhpcy56b29tUG9pbnQgPSByZWZQb2ludCBpbnN0YW5jZW9mICQuUG9pbnQgJiZcbiAgICAgICAgICAgICFpc05hTihyZWZQb2ludC54KSAmJlxuICAgICAgICAgICAgIWlzTmFOKHJlZlBvaW50LnkpID9cbiAgICAgICAgICAgIHJlZlBvaW50IDpcbiAgICAgICAgICAgIG51bGw7XG5cbiAgICAgICAgaWYgKCBpbW1lZGlhdGVseSApIHtcbiAgICAgICAgICAgIHRoaXMuem9vbVNwcmluZy5yZXNldFRvKCB6b29tICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnpvb21TcHJpbmcuc3ByaW5nVG8oIHpvb20gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCB0aGlzLnZpZXdlciApe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgdmlld3BvcnQgem9vbSBsZXZlbCBjaGFuZ2VzIChzZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjem9vbUJ5fSBhbmQge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld3BvcnQjem9vbVRvfSkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV2ZW50IHpvb21cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB6b29tXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uUG9pbnR9IHJlZlBvaW50XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudmlld2VyLnJhaXNlRXZlbnQoICd6b29tJywge1xuICAgICAgICAgICAgICAgIHpvb206IHpvb20sXG4gICAgICAgICAgICAgICAgcmVmUG9pbnQ6IHJlZlBvaW50LFxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5OiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGlzIHZpZXdwb3J0IHRvIHRoZSBhbmdsZSBzcGVjaWZpZWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5WaWV3cG9ydH0gQ2hhaW5hYmxlLlxuICAgICAqL1xuICAgIHNldFJvdGF0aW9uOiBmdW5jdGlvbihkZWdyZWVzKSB7XG4gICAgICAgIGlmICghdGhpcy52aWV3ZXIgfHwgIXRoaXMudmlld2VyLmRyYXdlci5jYW5Sb3RhdGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBkZWdyZWVzID0gZGVncmVlcyAlIDM2MDtcbiAgICAgICAgaWYgKGRlZ3JlZXMgPCAwKSB7XG4gICAgICAgICAgICBkZWdyZWVzICs9IDM2MDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlZ3JlZXMgPSBkZWdyZWVzO1xuICAgICAgICB0aGlzLl9zZXRDb250ZW50Qm91bmRzKFxuICAgICAgICAgICAgdGhpcy52aWV3ZXIud29ybGQuZ2V0SG9tZUJvdW5kcygpLFxuICAgICAgICAgICAgdGhpcy52aWV3ZXIud29ybGQuZ2V0Q29udGVudEZhY3RvcigpKTtcbiAgICAgICAgdGhpcy52aWV3ZXIuZm9yY2VSZWRyYXcoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gcm90YXRpb24gaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IHJvdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkZWdyZWVzIC0gVGhlIG51bWJlciBvZiBkZWdyZWVzIHRoZSByb3RhdGlvbiB3YXMgc2V0IHRvLlxuICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZpZXdlci5yYWlzZUV2ZW50KCdyb3RhdGUnLCB7XCJkZWdyZWVzXCI6IGRlZ3JlZXN9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcm90YXRpb24gaW4gZGVncmVlcy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBjdXJyZW50IHJvdGF0aW9uIGluIGRlZ3JlZXMuXG4gICAgICovXG4gICAgZ2V0Um90YXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWdyZWVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlZpZXdwb3J0fSBDaGFpbmFibGUuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVmlld2VyLmV2ZW50OnJlc2l6ZVxuICAgICAqL1xuICAgIHJlc2l6ZTogZnVuY3Rpb24oIG5ld0NvbnRhaW5lclNpemUsIG1haW50YWluICkge1xuICAgICAgICB2YXIgb2xkQm91bmRzID0gdGhpcy5nZXRCb3VuZHNOb1JvdGF0ZSgpLFxuICAgICAgICAgICAgbmV3Qm91bmRzID0gb2xkQm91bmRzLFxuICAgICAgICAgICAgd2lkdGhEZWx0YUZhY3RvcjtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lclNpemUueCA9IG5ld0NvbnRhaW5lclNpemUueDtcbiAgICAgICAgdGhpcy5jb250YWluZXJTaXplLnkgPSBuZXdDb250YWluZXJTaXplLnk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQ29udGFpbmVySW5uZXJTaXplKCk7XG5cbiAgICAgICAgaWYgKCBtYWludGFpbiApIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHdpZHRoRGVsdGFGYWN0b3Igd2lsbCBhbHdheXMgYmUgMTsgcHJvYmFibHkgbm90IHdoYXQncyBpbnRlbmRlZFxuICAgICAgICAgICAgd2lkdGhEZWx0YUZhY3RvciA9IG5ld0NvbnRhaW5lclNpemUueCAvIHRoaXMuY29udGFpbmVyU2l6ZS54O1xuICAgICAgICAgICAgbmV3Qm91bmRzLndpZHRoICA9IG9sZEJvdW5kcy53aWR0aCAqIHdpZHRoRGVsdGFGYWN0b3I7XG4gICAgICAgICAgICBuZXdCb3VuZHMuaGVpZ2h0ID0gbmV3Qm91bmRzLndpZHRoIC8gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMudmlld2VyICl7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSB2aWV3ZXIgaXMgcmVzaXplZCAoc2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdwb3J0I3Jlc2l6ZX0pLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCByZXNpemVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5WaWV3ZXJ9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFZpZXdlciB3aGljaCByYWlzZWQgdGhpcyBldmVudC5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gbmV3Q29udGFpbmVyU2l6ZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBtYWludGFpblxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnZpZXdlci5yYWlzZUV2ZW50KCAncmVzaXplJywge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRhaW5lclNpemU6IG5ld0NvbnRhaW5lclNpemUsXG4gICAgICAgICAgICAgICAgbWFpbnRhaW46IG1haW50YWluXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZpdEJvdW5kcyggbmV3Qm91bmRzLCB0cnVlICk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfdXBkYXRlQ29udGFpbmVySW5uZXJTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVySW5uZXJTaXplID0gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICBNYXRoLm1heCgxLCB0aGlzLmNvbnRhaW5lclNpemUueCAtICh0aGlzLl9tYXJnaW5zLmxlZnQgKyB0aGlzLl9tYXJnaW5zLnJpZ2h0KSksXG4gICAgICAgICAgICBNYXRoLm1heCgxLCB0aGlzLmNvbnRhaW5lclNpemUueSAtICh0aGlzLl9tYXJnaW5zLnRvcCArIHRoaXMuX21hcmdpbnMuYm90dG9tKSlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB6b29tIGFuZCBjZW50ZXIgKFggYW5kIFkpIHNwcmluZ3MuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYW55IGNoYW5nZSBoYXMgYmVlbiBtYWRlLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAodGhpcy56b29tUG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBvbGRab29tUGl4ZWwgPSB0aGlzLnBpeGVsRnJvbVBvaW50KHRoaXMuem9vbVBvaW50LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuem9vbVNwcmluZy51cGRhdGUoKTtcbiAgICAgICAgICAgIHZhciBuZXdab29tUGl4ZWwgPSB0aGlzLnBpeGVsRnJvbVBvaW50KHRoaXMuem9vbVBvaW50LCB0cnVlKTtcblxuICAgICAgICAgICAgdmFyIGRlbHRhWm9vbVBpeGVscyA9IG5ld1pvb21QaXhlbC5taW51cyhvbGRab29tUGl4ZWwpO1xuICAgICAgICAgICAgdmFyIGRlbHRhWm9vbVBvaW50cyA9IHRoaXMuZGVsdGFQb2ludHNGcm9tUGl4ZWxzKFxuICAgICAgICAgICAgICAgIGRlbHRhWm9vbVBpeGVscywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWC5zaGlmdEJ5KGRlbHRhWm9vbVBvaW50cy54KTtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWS5zaGlmdEJ5KGRlbHRhWm9vbVBvaW50cy55KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuem9vbVNwcmluZy5pc0F0VGFyZ2V0VmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuem9vbVBvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuem9vbVNwcmluZy51cGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWC51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5jZW50ZXJTcHJpbmdZLnVwZGF0ZSgpO1xuXG4gICAgICAgIHZhciBjaGFuZ2VkID0gdGhpcy5jZW50ZXJTcHJpbmdYLmN1cnJlbnQudmFsdWUgIT09IHRoaXMuX29sZENlbnRlclggfHxcbiAgICAgICAgICAgIHRoaXMuY2VudGVyU3ByaW5nWS5jdXJyZW50LnZhbHVlICE9PSB0aGlzLl9vbGRDZW50ZXJZIHx8XG4gICAgICAgICAgICB0aGlzLnpvb21TcHJpbmcuY3VycmVudC52YWx1ZSAhPT0gdGhpcy5fb2xkWm9vbTtcblxuICAgICAgICB0aGlzLl9vbGRDZW50ZXJYID0gdGhpcy5jZW50ZXJTcHJpbmdYLmN1cnJlbnQudmFsdWU7XG4gICAgICAgIHRoaXMuX29sZENlbnRlclkgPSB0aGlzLmNlbnRlclNwcmluZ1kuY3VycmVudC52YWx1ZTtcbiAgICAgICAgdGhpcy5fb2xkWm9vbSAgICA9IHRoaXMuem9vbVNwcmluZy5jdXJyZW50LnZhbHVlO1xuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgZGVsdGEgKHRyYW5zbGF0aW9uIHZlY3RvcikgZnJvbSB2aWV3cG9ydCBjb29yZGluYXRlcyB0byBwaXhlbHNcbiAgICAgKiBjb29yZGluYXRlcy4gVGhpcyBtZXRob2QgZG9lcyBub3QgdGFrZSByb3RhdGlvbiBpbnRvIGFjY291bnQuXG4gICAgICogQ29uc2lkZXIgdXNpbmcgZGVsdGFQaXhlbHNGcm9tUG9pbnRzIGlmIHlvdSBuZWVkIHRvIGFjY291bnQgZm9yIHJvdGF0aW9uLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZGVsdGFQb2ludHMgLSBUaGUgdHJhbnNsYXRpb24gdmVjdG9yIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY3VycmVudD1mYWxzZV0gLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uO1xuICAgICAqIGRlZmF1bHRzIHRvIGZhbHNlICh0YXJnZXQgbG9jYXRpb24pLlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fVxuICAgICAqL1xuICAgIGRlbHRhUGl4ZWxzRnJvbVBvaW50c05vUm90YXRlOiBmdW5jdGlvbihkZWx0YVBvaW50cywgY3VycmVudCkge1xuICAgICAgICByZXR1cm4gZGVsdGFQb2ludHMudGltZXMoXG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXJJbm5lclNpemUueCAqIHRoaXMuZ2V0Wm9vbShjdXJyZW50KVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgZGVsdGEgKHRyYW5zbGF0aW9uIHZlY3RvcikgZnJvbSB2aWV3cG9ydCBjb29yZGluYXRlcyB0byBwaXhlbHNcbiAgICAgKiBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGRlbHRhUG9pbnRzIC0gVGhlIHRyYW5zbGF0aW9uIHZlY3RvciB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjtcbiAgICAgKiBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICBkZWx0YVBpeGVsc0Zyb21Qb2ludHM6IGZ1bmN0aW9uKGRlbHRhUG9pbnRzLCBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbHRhUGl4ZWxzRnJvbVBvaW50c05vUm90YXRlKFxuICAgICAgICAgICAgZGVsdGFQb2ludHMucm90YXRlKHRoaXMuZ2V0Um90YXRpb24oKSksXG4gICAgICAgICAgICBjdXJyZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIGRlbHRhICh0cmFuc2xhdGlvbiB2ZWN0b3IpIGZyb20gcGl4ZWxzIGNvb3JkaW5hdGVzIHRvIHZpZXdwb3J0XG4gICAgICogY29vcmRpbmF0ZXMuIFRoaXMgbWV0aG9kIGRvZXMgbm90IHRha2Ugcm90YXRpb24gaW50byBhY2NvdW50LlxuICAgICAqIENvbnNpZGVyIHVzaW5nIGRlbHRhUG9pbnRzRnJvbVBpeGVscyBpZiB5b3UgbmVlZCB0byBhY2NvdW50IGZvciByb3RhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IGRlbHRhUGl4ZWxzIC0gVGhlIHRyYW5zbGF0aW9uIHZlY3RvciB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjtcbiAgICAgKiBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICBkZWx0YVBvaW50c0Zyb21QaXhlbHNOb1JvdGF0ZTogZnVuY3Rpb24oZGVsdGFQaXhlbHMsIGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhUGl4ZWxzLmRpdmlkZShcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lcklubmVyU2l6ZS54ICogdGhpcy5nZXRab29tKGN1cnJlbnQpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBkZWx0YSAodHJhbnNsYXRpb24gdmVjdG9yKSBmcm9tIHBpeGVscyBjb29yZGluYXRlcyB0byB2aWV3cG9ydFxuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gZGVsdGFQaXhlbHMgLSBUaGUgdHJhbnNsYXRpb24gdmVjdG9yIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY3VycmVudD1mYWxzZV0gLSBQYXNzIHRydWUgZm9yIHRoZSBjdXJyZW50IGxvY2F0aW9uO1xuICAgICAqIGRlZmF1bHRzIHRvIGZhbHNlICh0YXJnZXQgbG9jYXRpb24pLlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fVxuICAgICAqL1xuICAgIGRlbHRhUG9pbnRzRnJvbVBpeGVsczogZnVuY3Rpb24oZGVsdGFQaXhlbHMsIGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsdGFQb2ludHNGcm9tUGl4ZWxzTm9Sb3RhdGUoZGVsdGFQaXhlbHMsIGN1cnJlbnQpXG4gICAgICAgICAgICAucm90YXRlKC10aGlzLmdldFJvdGF0aW9uKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHZpZXdwb3J0IGNvb3JkaW5hdGVzIHRvIHBpeGVscyBjb29yZGluYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB0YWtlIHJvdGF0aW9uIGludG8gYWNjb3VudC5cbiAgICAgKiBDb25zaWRlciB1c2luZyBwaXhlbEZyb21Qb2ludCBpZiB5b3UgbmVlZCB0byBhY2NvdW50IGZvciByb3RhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50IHRoZSB2aWV3cG9ydCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjtcbiAgICAgKiBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICBwaXhlbEZyb21Qb2ludE5vUm90YXRlOiBmdW5jdGlvbihwb2ludCwgY3VycmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGl4ZWxGcm9tUG9pbnROb1JvdGF0ZShcbiAgICAgICAgICAgIHBvaW50LCB0aGlzLmdldEJvdW5kc05vUm90YXRlKGN1cnJlbnQpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB2aWV3cG9ydCBjb29yZGluYXRlcyB0byBwaXhlbCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBvaW50IHRoZSB2aWV3cG9ydCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjtcbiAgICAgKiBkZWZhdWx0cyB0byBmYWxzZSAodGFyZ2V0IGxvY2F0aW9uKS5cbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICBwaXhlbEZyb21Qb2ludDogZnVuY3Rpb24ocG9pbnQsIGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BpeGVsRnJvbVBvaW50KHBvaW50LCB0aGlzLmdldEJvdW5kc05vUm90YXRlKGN1cnJlbnQpKTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9waXhlbEZyb21Qb2ludE5vUm90YXRlOiBmdW5jdGlvbihwb2ludCwgYm91bmRzKSB7XG4gICAgICAgIHJldHVybiBwb2ludC5taW51cyhcbiAgICAgICAgICAgIGJvdW5kcy5nZXRUb3BMZWZ0KClcbiAgICAgICAgKS50aW1lcyhcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lcklubmVyU2l6ZS54IC8gYm91bmRzLndpZHRoXG4gICAgICAgICkucGx1cyhcbiAgICAgICAgICAgIG5ldyAkLlBvaW50KHRoaXMuX21hcmdpbnMubGVmdCwgdGhpcy5fbWFyZ2lucy50b3ApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfcGl4ZWxGcm9tUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBib3VuZHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BpeGVsRnJvbVBvaW50Tm9Sb3RhdGUoXG4gICAgICAgICAgICBwb2ludC5yb3RhdGUodGhpcy5nZXRSb3RhdGlvbigpLCB0aGlzLmdldENlbnRlcih0cnVlKSksXG4gICAgICAgICAgICBib3VuZHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHRha2Ugcm90YXRpb24gaW50byBhY2NvdW50LlxuICAgICAqIENvbnNpZGVyIHVzaW5nIHBvaW50RnJvbVBpeGVsIGlmIHlvdSBuZWVkIHRvIGFjY291bnQgZm9yIHJvdGF0aW9uLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWwgUGl4ZWwgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjdXJyZW50PWZhbHNlXSAtIFBhc3MgdHJ1ZSBmb3IgdGhlIGN1cnJlbnQgbG9jYXRpb247XG4gICAgICogZGVmYXVsdHMgdG8gZmFsc2UgKHRhcmdldCBsb2NhdGlvbikuXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgcG9pbnRGcm9tUGl4ZWxOb1JvdGF0ZTogZnVuY3Rpb24ocGl4ZWwsIGN1cnJlbnQpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzTm9Sb3RhdGUoY3VycmVudCk7XG4gICAgICAgIHJldHVybiBwaXhlbC5taW51cyhcbiAgICAgICAgICAgIG5ldyAkLlBvaW50KHRoaXMuX21hcmdpbnMubGVmdCwgdGhpcy5fbWFyZ2lucy50b3ApXG4gICAgICAgICkuZGl2aWRlKFxuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVySW5uZXJTaXplLnggLyBib3VuZHMud2lkdGhcbiAgICAgICAgKS5wbHVzKFxuICAgICAgICAgICAgYm91bmRzLmdldFRvcExlZnQoKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWwgUGl4ZWwgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjdXJyZW50PWZhbHNlXSAtIFBhc3MgdHJ1ZSBmb3IgdGhlIGN1cnJlbnQgbG9jYXRpb247XG4gICAgICogZGVmYXVsdHMgdG8gZmFsc2UgKHRhcmdldCBsb2NhdGlvbikuXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgcG9pbnRGcm9tUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsLCBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVBpeGVsTm9Sb3RhdGUocGl4ZWwsIGN1cnJlbnQpLnJvdGF0ZShcbiAgICAgICAgICAgIC10aGlzLmdldFJvdGF0aW9uKCksXG4gICAgICAgICAgICB0aGlzLmdldENlbnRlcih0cnVlKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX3ZpZXdwb3J0VG9JbWFnZURlbHRhOiBmdW5jdGlvbiggdmlld2VyWCwgdmlld2VyWSApIHtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLndpZHRoO1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICB2aWV3ZXJYICogdGhpcy5fY29udGVudFNpemVOb1JvdGF0ZS54IC8gc2NhbGUsXG4gICAgICAgICAgICB2aWV3ZXJZICogdGhpcy5fY29udGVudFNpemVOb1JvdGF0ZS54IC8gc2NhbGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGZyb20gT3BlblNlYWRyYWdvbiB2aWV3ZXIgY29vcmRpbmF0ZSBzeXN0ZW0gdG8gaW1hZ2UgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCBlaXRoZXIgYnkgcGFzc2luZyBYLFkgY29vcmRpbmF0ZXMgb3IgYW5cbiAgICAgKiBPcGVuU2VhZHJhZ29uLlBvaW50XG4gICAgICogTm90ZTogbm90IGFjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2U7IHVzZSBUaWxlZEltYWdlLnZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzIGluc3RlYWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsoT3BlblNlYWRyYWdvbi5Qb2ludHxOdW1iZXIpfSB2aWV3ZXJYIGVpdGhlciBhIHBvaW50IG9yIHRoZSBYXG4gICAgICogY29vcmRpbmF0ZSBpbiB2aWV3cG9ydCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ZpZXdlclldIFkgY29vcmRpbmF0ZSBpbiB2aWV3cG9ydCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBhIHBvaW50IHJlcHJlc2VudGluZyB0aGUgY29vcmRpbmF0ZXMgaW4gdGhlIGltYWdlLlxuICAgICAqL1xuICAgIHZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzOiBmdW5jdGlvbih2aWV3ZXJYLCB2aWV3ZXJZKSB7XG4gICAgICAgIGlmICh2aWV3ZXJYIGluc3RhbmNlb2YgJC5Qb2ludCkge1xuICAgICAgICAgICAgLy90aGV5IHBhc3NlZCBhIHBvaW50IGluc3RlYWQgb2YgaW5kaXZpZHVhbCBjb21wb25lbnRzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlcyh2aWV3ZXJYLngsIHZpZXdlclgueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52aWV3ZXIpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1Db3VudCgpO1xuICAgICAgICAgICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICQuY29uc29sZS5lcnJvcignW1ZpZXdwb3J0LnZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzXSBpcyBub3QgYWNjdXJhdGUgJyArXG4gICAgICAgICAgICAgICAgICAgICd3aXRoIG11bHRpLWltYWdlOyB1c2UgVGlsZWRJbWFnZS52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlcyBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGlzIGJldHRlciB0byB1c2UgVGlsZWRJbWFnZS52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlIGNhbiBub3QgYmUgcmVsaWVkIG9uXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBjbGlwcGluZy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1BdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlcyh2aWV3ZXJYLCB2aWV3ZXJZLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3cG9ydFRvSW1hZ2VEZWx0YShcbiAgICAgICAgICAgIHZpZXdlclggLSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUueCxcbiAgICAgICAgICAgIHZpZXdlclkgLSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUueSk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfaW1hZ2VUb1ZpZXdwb3J0RGVsdGE6IGZ1bmN0aW9uKCBpbWFnZVgsIGltYWdlWSApIHtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlLndpZHRoO1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICBpbWFnZVggLyB0aGlzLl9jb250ZW50U2l6ZU5vUm90YXRlLnggKiBzY2FsZSxcbiAgICAgICAgICAgIGltYWdlWSAvIHRoaXMuX2NvbnRlbnRTaXplTm9Sb3RhdGUueCAqIHNjYWxlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyBmcm9tIGltYWdlIGNvb3JkaW5hdGUgc3lzdGVtIHRvIE9wZW5TZWFkcmFnb24gdmlld2VyIGNvb3JkaW5hdGUgc3lzdGVtXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCBlaXRoZXIgYnkgcGFzc2luZyBYLFkgY29vcmRpbmF0ZXMgb3IgYW5cbiAgICAgKiBPcGVuU2VhZHJhZ29uLlBvaW50XG4gICAgICogTm90ZTogbm90IGFjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2U7IHVzZSBUaWxlZEltYWdlLmltYWdlVG9WaWV3cG9ydENvb3JkaW5hdGVzIGluc3RlYWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsoT3BlblNlYWRyYWdvbi5Qb2ludCB8IE51bWJlcil9IGltYWdlWCB0aGUgcG9pbnQgb3IgdGhlXG4gICAgICogWCBjb29yZGluYXRlIGluIGltYWdlIGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbaW1hZ2VZXSBZIGNvb3JkaW5hdGUgaW4gaW1hZ2UgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHJldHVybiB7T3BlblNlYWRyYWdvbi5Qb2ludH0gYSBwb2ludCByZXByZXNlbnRpbmcgdGhlIGNvb3JkaW5hdGVzIGluIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICBpbWFnZVRvVmlld3BvcnRDb29yZGluYXRlczogZnVuY3Rpb24oaW1hZ2VYLCBpbWFnZVkpIHtcbiAgICAgICAgaWYgKGltYWdlWCBpbnN0YW5jZW9mICQuUG9pbnQpIHtcbiAgICAgICAgICAgIC8vdGhleSBwYXNzZWQgYSBwb2ludCBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgY29tcG9uZW50c1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VUb1ZpZXdwb3J0Q29vcmRpbmF0ZXMoaW1hZ2VYLngsIGltYWdlWC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy52aWV3ZXIud29ybGQuZ2V0SXRlbUNvdW50KCk7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgJC5jb25zb2xlLmVycm9yKCdbVmlld3BvcnQuaW1hZ2VUb1ZpZXdwb3J0Q29vcmRpbmF0ZXNdIGlzIG5vdCBhY2N1cmF0ZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3dpdGggbXVsdGktaW1hZ2U7IHVzZSBUaWxlZEltYWdlLmltYWdlVG9WaWV3cG9ydENvb3JkaW5hdGVzIGluc3RlYWQuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYmV0dGVyIHRvIHVzZSBUaWxlZEltYWdlLnZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUgY2FuIG5vdCBiZSByZWxpZWQgb25cbiAgICAgICAgICAgICAgICAvLyB3aXRoIGNsaXBwaW5nLlxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy52aWV3ZXIud29ybGQuZ2V0SXRlbUF0KDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmltYWdlVG9WaWV3cG9ydENvb3JkaW5hdGVzKGltYWdlWCwgaW1hZ2VZLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb2ludCA9IHRoaXMuX2ltYWdlVG9WaWV3cG9ydERlbHRhKGltYWdlWCwgaW1hZ2VZKTtcbiAgICAgICAgcG9pbnQueCArPSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUueDtcbiAgICAgICAgcG9pbnQueSArPSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUueTtcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGZyb20gYSByZWN0YW5nbGUgd2hpY2ggZGVzY3JpYmVzIGEgcG9ydGlvbiBvZiB0aGUgaW1hZ2UgaW5cbiAgICAgKiBwaXhlbCBjb29yZGluYXRlcyB0byBPcGVuU2VhZHJhZ29uIHZpZXdwb3J0IHJlY3RhbmdsZSBjb29yZGluYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGVpdGhlciBieSBwYXNzaW5nIFgsWSx3aWR0aCxoZWlnaHQgb3IgYW5cbiAgICAgKiBPcGVuU2VhZHJhZ29uLlJlY3RcbiAgICAgKiBOb3RlOiBub3QgYWNjdXJhdGUgd2l0aCBtdWx0aS1pbWFnZTsgdXNlIFRpbGVkSW1hZ2UuaW1hZ2VUb1ZpZXdwb3J0UmVjdGFuZ2xlIGluc3RlYWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsoT3BlblNlYWRyYWdvbi5SZWN0IHwgTnVtYmVyKX0gaW1hZ2VYIHRoZSByZWN0YW5nbGUgb3IgdGhlIFhcbiAgICAgKiBjb29yZGluYXRlIG9mIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZSBpbiBpbWFnZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2ltYWdlWV0gdGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBpbiBpbWFnZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3BpeGVsV2lkdGhdIHRoZSB3aWR0aCBpbiBwaXhlbCBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcGl4ZWxIZWlnaHRdIHRoZSBoZWlnaHQgaW4gcGl4ZWwgb2YgdGhlIHJlY3RhbmdsZS5cbiAgICAgKi9cbiAgICBpbWFnZVRvVmlld3BvcnRSZWN0YW5nbGU6IGZ1bmN0aW9uKGltYWdlWCwgaW1hZ2VZLCBwaXhlbFdpZHRoLCBwaXhlbEhlaWdodCkge1xuICAgICAgICB2YXIgcmVjdCA9IGltYWdlWDtcbiAgICAgICAgaWYgKCEocmVjdCBpbnN0YW5jZW9mICQuUmVjdCkpIHtcbiAgICAgICAgICAgIC8vdGhleSBwYXNzZWQgaW5kaXZpZHVhbCBjb21wb25lbnRzIGluc3RlYWQgb2YgYSByZWN0YW5nbGVcbiAgICAgICAgICAgIHJlY3QgPSBuZXcgJC5SZWN0KGltYWdlWCwgaW1hZ2VZLCBwaXhlbFdpZHRoLCBwaXhlbEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52aWV3ZXIpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1Db3VudCgpO1xuICAgICAgICAgICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICQuY29uc29sZS5lcnJvcignW1ZpZXdwb3J0LmltYWdlVG9WaWV3cG9ydFJlY3RhbmdsZV0gaXMgbm90IGFjY3VyYXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAnd2l0aCBtdWx0aS1pbWFnZTsgdXNlIFRpbGVkSW1hZ2UuaW1hZ2VUb1ZpZXdwb3J0UmVjdGFuZ2xlIGluc3RlYWQuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYmV0dGVyIHRvIHVzZSBUaWxlZEltYWdlLmltYWdlVG9WaWV3cG9ydFJlY3RhbmdsZVxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlIGNhbiBub3QgYmUgcmVsaWVkIG9uXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBjbGlwcGluZy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1BdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pbWFnZVRvVmlld3BvcnRSZWN0YW5nbGUoXG4gICAgICAgICAgICAgICAgICAgIGltYWdlWCwgaW1hZ2VZLCBwaXhlbFdpZHRoLCBwaXhlbEhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29vcmRBID0gdGhpcy5pbWFnZVRvVmlld3BvcnRDb29yZGluYXRlcyhyZWN0LngsIHJlY3QueSk7XG4gICAgICAgIHZhciBjb29yZEIgPSB0aGlzLl9pbWFnZVRvVmlld3BvcnREZWx0YShyZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgY29vcmRBLngsXG4gICAgICAgICAgICBjb29yZEEueSxcbiAgICAgICAgICAgIGNvb3JkQi54LFxuICAgICAgICAgICAgY29vcmRCLnksXG4gICAgICAgICAgICByZWN0LmRlZ3JlZXNcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyBmcm9tIGEgcmVjdGFuZ2xlIHdoaWNoIGRlc2NyaWJlcyBhIHBvcnRpb24gb2ZcbiAgICAgKiB0aGUgdmlld3BvcnQgaW4gcG9pbnQgY29vcmRpbmF0ZXMgdG8gaW1hZ2UgcmVjdGFuZ2xlIGNvb3JkaW5hdGVzLlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgZWl0aGVyIGJ5IHBhc3NpbmcgWCxZLHdpZHRoLGhlaWdodCBvciBhblxuICAgICAqIE9wZW5TZWFkcmFnb24uUmVjdFxuICAgICAqIE5vdGU6IG5vdCBhY2N1cmF0ZSB3aXRoIG11bHRpLWltYWdlOyB1c2UgVGlsZWRJbWFnZS52aWV3cG9ydFRvSW1hZ2VSZWN0YW5nbGUgaW5zdGVhZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyhPcGVuU2VhZHJhZ29uLlJlY3QgfCBOdW1iZXIpfSB2aWV3ZXJYIGVpdGhlciBhIHJlY3RhbmdsZSBvclxuICAgICAqIHRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlIGluIHZpZXdwb3J0XG4gICAgICogY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt2aWV3ZXJZXSB0aGUgWSBjb29yZGluYXRlIG9mIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIGluIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcG9pbnRXaWR0aF0gdGhlIHdpZHRoIG9mIHRoZSByZWN0YW5nbGUgaW4gdmlld3BvcnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwb2ludEhlaWdodF0gdGhlIGhlaWdodCBvZiB0aGUgcmVjdGFuZ2xlIGluIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqL1xuICAgIHZpZXdwb3J0VG9JbWFnZVJlY3RhbmdsZTogZnVuY3Rpb24odmlld2VyWCwgdmlld2VyWSwgcG9pbnRXaWR0aCwgcG9pbnRIZWlnaHQpIHtcbiAgICAgICAgdmFyIHJlY3QgPSB2aWV3ZXJYO1xuICAgICAgICBpZiAoIShyZWN0IGluc3RhbmNlb2YgJC5SZWN0KSkge1xuICAgICAgICAgICAgLy90aGV5IHBhc3NlZCBpbmRpdmlkdWFsIGNvbXBvbmVudHMgaW5zdGVhZCBvZiBhIHJlY3RhbmdsZVxuICAgICAgICAgICAgcmVjdCA9IG5ldyAkLlJlY3Qodmlld2VyWCwgdmlld2VyWSwgcG9pbnRXaWR0aCwgcG9pbnRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudmlld2VyKSB7XG4gICAgICAgICAgICB2YXIgY291bnQgPSB0aGlzLnZpZXdlci53b3JsZC5nZXRJdGVtQ291bnQoKTtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAkLmNvbnNvbGUuZXJyb3IoJ1tWaWV3cG9ydC52aWV3cG9ydFRvSW1hZ2VSZWN0YW5nbGVdIGlzIG5vdCBhY2N1cmF0ZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3dpdGggbXVsdGktaW1hZ2U7IHVzZSBUaWxlZEltYWdlLnZpZXdwb3J0VG9JbWFnZVJlY3RhbmdsZSBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGlzIGJldHRlciB0byB1c2UgVGlsZWRJbWFnZS52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlIGNhbiBub3QgYmUgcmVsaWVkIG9uXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBjbGlwcGluZy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1BdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS52aWV3cG9ydFRvSW1hZ2VSZWN0YW5nbGUoXG4gICAgICAgICAgICAgICAgICAgIHZpZXdlclgsIHZpZXdlclksIHBvaW50V2lkdGgsIHBvaW50SGVpZ2h0LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb29yZEEgPSB0aGlzLnZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzKHJlY3QueCwgcmVjdC55KTtcbiAgICAgICAgdmFyIGNvb3JkQiA9IHRoaXMuX3ZpZXdwb3J0VG9JbWFnZURlbHRhKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG5ldyAkLlJlY3QoXG4gICAgICAgICAgICBjb29yZEEueCxcbiAgICAgICAgICAgIGNvb3JkQS55LFxuICAgICAgICAgICAgY29vcmRCLngsXG4gICAgICAgICAgICBjb29yZEIueSxcbiAgICAgICAgICAgIHJlY3QuZGVncmVlc1xuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB2aWV3ZXIgZWxlbWVudCB0byBpbWFnZVxuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIE5vdGU6IG5vdCBhY2N1cmF0ZSB3aXRoIG11bHRpLWltYWdlLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWxcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICB2aWV3ZXJFbGVtZW50VG9JbWFnZUNvb3JkaW5hdGVzOiBmdW5jdGlvbiggcGl4ZWwgKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHRoaXMucG9pbnRGcm9tUGl4ZWwoIHBpeGVsLCB0cnVlICk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdwb3J0VG9JbWFnZUNvb3JkaW5hdGVzKCBwb2ludCApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSBpbWFnZSB0b1xuICAgICAqIHZpZXdlciBlbGVtZW50IGNvb3JkaW5hdGVzLlxuICAgICAqIE5vdGU6IG5vdCBhY2N1cmF0ZSB3aXRoIG11bHRpLWltYWdlLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWxcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICBpbWFnZVRvVmlld2VyRWxlbWVudENvb3JkaW5hdGVzOiBmdW5jdGlvbiggcGl4ZWwgKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHRoaXMuaW1hZ2VUb1ZpZXdwb3J0Q29vcmRpbmF0ZXMoIHBpeGVsICk7XG4gICAgICAgIHJldHVybiB0aGlzLnBpeGVsRnJvbVBvaW50KCBwb2ludCwgdHJ1ZSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cgdG8gaW1hZ2UgY29vcmRpbmF0ZXMuXG4gICAgICogTm90ZTogbm90IGFjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2UuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwaXhlbFxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fVxuICAgICAqL1xuICAgIHdpbmRvd1RvSW1hZ2VDb29yZGluYXRlczogZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCh0aGlzLnZpZXdlcixcbiAgICAgICAgICAgIFwiW1ZpZXdwb3J0LndpbmRvd1RvSW1hZ2VDb29yZGluYXRlc10gdGhlIHZpZXdwb3J0IG11c3QgaGF2ZSBhIHZpZXdlci5cIik7XG4gICAgICAgIHZhciB2aWV3ZXJDb29yZGluYXRlcyA9IHBpeGVsLm1pbnVzKFxuICAgICAgICAgICAgICAgICQuZ2V0RWxlbWVudFBvc2l0aW9uKHRoaXMudmlld2VyLmVsZW1lbnQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld2VyRWxlbWVudFRvSW1hZ2VDb29yZGluYXRlcyh2aWV3ZXJDb29yZGluYXRlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgaW1hZ2UgY29vcmRpbmF0ZXMgdG8gcGl4ZWwgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIHdpbmRvdy5cbiAgICAgKiBOb3RlOiBub3QgYWNjdXJhdGUgd2l0aCBtdWx0aS1pbWFnZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBpeGVsXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgaW1hZ2VUb1dpbmRvd0Nvb3JkaW5hdGVzOiBmdW5jdGlvbihwaXhlbCkge1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KHRoaXMudmlld2VyLFxuICAgICAgICAgICAgXCJbVmlld3BvcnQuaW1hZ2VUb1dpbmRvd0Nvb3JkaW5hdGVzXSB0aGUgdmlld3BvcnQgbXVzdCBoYXZlIGEgdmlld2VyLlwiKTtcbiAgICAgICAgdmFyIHZpZXdlckNvb3JkaW5hdGVzID0gdGhpcy5pbWFnZVRvVmlld2VyRWxlbWVudENvb3JkaW5hdGVzKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIHZpZXdlckNvb3JkaW5hdGVzLnBsdXMoXG4gICAgICAgICAgICAgICAgJC5nZXRFbGVtZW50UG9zaXRpb24odGhpcy52aWV3ZXIuZWxlbWVudCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB2aWV3ZXIgZWxlbWVudCB0byB2aWV3cG9ydFxuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWxcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICB2aWV3ZXJFbGVtZW50VG9WaWV3cG9ydENvb3JkaW5hdGVzOiBmdW5jdGlvbiggcGl4ZWwgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVBpeGVsKCBwaXhlbCwgdHJ1ZSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHZpZXdwb3J0IGNvb3JkaW5hdGVzIHRvIHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZVxuICAgICAqIHZpZXdlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcG9pbnRcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICB2aWV3cG9ydFRvVmlld2VyRWxlbWVudENvb3JkaW5hdGVzOiBmdW5jdGlvbiggcG9pbnQgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBpeGVsRnJvbVBvaW50KCBwb2ludCwgdHJ1ZSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgcmVjdGFuZ2xlIGluIHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB2aWV3ZXIgZWxlbWVudFxuICAgICAqIHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5SZWN0fSByZWN0YW5nbGUgdGhlIHJlY3RhbmdsZSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUmVjdH0gdGhlIGNvbnZlcnRlZCByZWN0YW5nbGVcbiAgICAgKi9cbiAgICB2aWV3ZXJFbGVtZW50VG9WaWV3cG9ydFJlY3RhbmdsZTogZnVuY3Rpb24ocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiAkLlJlY3QuZnJvbVN1bW1pdHMoXG4gICAgICAgICAgICB0aGlzLnBvaW50RnJvbVBpeGVsKHJlY3RhbmdsZS5nZXRUb3BMZWZ0KCksIHRydWUpLFxuICAgICAgICAgICAgdGhpcy5wb2ludEZyb21QaXhlbChyZWN0YW5nbGUuZ2V0VG9wUmlnaHQoKSwgdHJ1ZSksXG4gICAgICAgICAgICB0aGlzLnBvaW50RnJvbVBpeGVsKHJlY3RhbmdsZS5nZXRCb3R0b21MZWZ0KCksIHRydWUpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSByZWN0YW5nbGUgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMgdG8gcGl4ZWwgY29vcmRpbmF0ZXMgcmVsYXRpdmVcbiAgICAgKiB0byB0aGUgdmlld2VyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlJlY3R9IHJlY3RhbmdsZSB0aGUgcmVjdGFuZ2xlIHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5SZWN0fSB0aGUgY29udmVydGVkIHJlY3RhbmdsZVxuICAgICAqL1xuICAgIHZpZXdwb3J0VG9WaWV3ZXJFbGVtZW50UmVjdGFuZ2xlOiBmdW5jdGlvbihyZWN0YW5nbGUpIHtcbiAgICAgICAgcmV0dXJuICQuUmVjdC5mcm9tU3VtbWl0cyhcbiAgICAgICAgICAgIHRoaXMucGl4ZWxGcm9tUG9pbnQocmVjdGFuZ2xlLmdldFRvcExlZnQoKSwgdHJ1ZSksXG4gICAgICAgICAgICB0aGlzLnBpeGVsRnJvbVBvaW50KHJlY3RhbmdsZS5nZXRUb3BSaWdodCgpLCB0cnVlKSxcbiAgICAgICAgICAgIHRoaXMucGl4ZWxGcm9tUG9pbnQocmVjdGFuZ2xlLmdldEJvdHRvbUxlZnQoKSwgdHJ1ZSlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwaXhlbCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgd2luZG93IHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWxcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICB3aW5kb3dUb1ZpZXdwb3J0Q29vcmRpbmF0ZXM6IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQodGhpcy52aWV3ZXIsXG4gICAgICAgICAgICBcIltWaWV3cG9ydC53aW5kb3dUb1ZpZXdwb3J0Q29vcmRpbmF0ZXNdIHRoZSB2aWV3cG9ydCBtdXN0IGhhdmUgYSB2aWV3ZXIuXCIpO1xuICAgICAgICB2YXIgdmlld2VyQ29vcmRpbmF0ZXMgPSBwaXhlbC5taW51cyhcbiAgICAgICAgICAgICAgICAkLmdldEVsZW1lbnRQb3NpdGlvbih0aGlzLnZpZXdlci5lbGVtZW50KSk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlckVsZW1lbnRUb1ZpZXdwb3J0Q29vcmRpbmF0ZXModmlld2VyQ29vcmRpbmF0ZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHZpZXdwb3J0IGNvb3JkaW5hdGVzIHRvIHBpeGVsIGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb2ludFxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fVxuICAgICAqL1xuICAgIHZpZXdwb3J0VG9XaW5kb3dDb29yZGluYXRlczogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCh0aGlzLnZpZXdlcixcbiAgICAgICAgICAgIFwiW1ZpZXdwb3J0LnZpZXdwb3J0VG9XaW5kb3dDb29yZGluYXRlc10gdGhlIHZpZXdwb3J0IG11c3QgaGF2ZSBhIHZpZXdlci5cIik7XG4gICAgICAgIHZhciB2aWV3ZXJDb29yZGluYXRlcyA9IHRoaXMudmlld3BvcnRUb1ZpZXdlckVsZW1lbnRDb29yZGluYXRlcyhwb2ludCk7XG4gICAgICAgIHJldHVybiB2aWV3ZXJDb29yZGluYXRlcy5wbHVzKFxuICAgICAgICAgICAgICAgICQuZ2V0RWxlbWVudFBvc2l0aW9uKHRoaXMudmlld2VyLmVsZW1lbnQpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIHZpZXdwb3J0IHpvb20gdG8gYW4gaW1hZ2Ugem9vbS5cbiAgICAgKiBJbWFnZSB6b29tOiByYXRpbyBvZiB0aGUgb3JpZ2luYWwgaW1hZ2Ugc2l6ZSB0byBkaXNwbGF5ZWQgaW1hZ2Ugc2l6ZS5cbiAgICAgKiAxIG1lYW5zIG9yaWdpbmFsIGltYWdlIHNpemUsIDAuNSBoYWxmIHNpemUuLi5cbiAgICAgKiBWaWV3cG9ydCB6b29tOiByYXRpbyBvZiB0aGUgZGlzcGxheWVkIGltYWdlJ3Mgd2lkdGggdG8gdmlld3BvcnQncyB3aWR0aC5cbiAgICAgKiAxIG1lYW5zIGlkZW50aWNhbCB3aWR0aCwgMiBtZWFucyBpbWFnZSdzIHdpZHRoIGlzIHR3aWNlIHRoZSB2aWV3cG9ydCdzIHdpZHRoLi4uXG4gICAgICogTm90ZTogbm90IGFjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2UuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZpZXdwb3J0Wm9vbSBUaGUgdmlld3BvcnQgem9vbVxuICAgICAqIHRhcmdldCB6b29tLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGltYWdlWm9vbSBUaGUgaW1hZ2Ugem9vbVxuICAgICAqL1xuICAgIHZpZXdwb3J0VG9JbWFnZVpvb206IGZ1bmN0aW9uKHZpZXdwb3J0Wm9vbSkge1xuICAgICAgICBpZiAodGhpcy52aWV3ZXIpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1Db3VudCgpO1xuICAgICAgICAgICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICQuY29uc29sZS5lcnJvcignW1ZpZXdwb3J0LnZpZXdwb3J0VG9JbWFnZVpvb21dIGlzIG5vdCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2UuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYmV0dGVyIHRvIHVzZSBUaWxlZEltYWdlLnZpZXdwb3J0VG9JbWFnZVpvb21cbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHRoaXMuX2NvbnRlbnRCb3VuZHNOb1JvdGF0ZSBjYW4gbm90IGJlIHJlbGllZCBvblxuICAgICAgICAgICAgICAgIC8vIHdpdGggY2xpcHBpbmcuXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnZpZXdlci53b3JsZC5nZXRJdGVtQXQoMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udmlld3BvcnRUb0ltYWdlWm9vbSh2aWV3cG9ydFpvb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGltYWdlV2lkdGggPSB0aGlzLl9jb250ZW50U2l6ZU5vUm90YXRlLng7XG4gICAgICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuX2NvbnRhaW5lcklubmVyU2l6ZS54O1xuICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLl9jb250ZW50Qm91bmRzTm9Sb3RhdGUud2lkdGg7XG4gICAgICAgIHZhciB2aWV3cG9ydFRvSW1hZ2Vab29tUmF0aW8gPSAoY29udGFpbmVyV2lkdGggLyBpbWFnZVdpZHRoKSAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdmlld3BvcnRab29tICogdmlld3BvcnRUb0ltYWdlWm9vbVJhdGlvO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFuIGltYWdlIHpvb20gdG8gYSB2aWV3cG9ydCB6b29tLlxuICAgICAqIEltYWdlIHpvb206IHJhdGlvIG9mIHRoZSBvcmlnaW5hbCBpbWFnZSBzaXplIHRvIGRpc3BsYXllZCBpbWFnZSBzaXplLlxuICAgICAqIDEgbWVhbnMgb3JpZ2luYWwgaW1hZ2Ugc2l6ZSwgMC41IGhhbGYgc2l6ZS4uLlxuICAgICAqIFZpZXdwb3J0IHpvb206IHJhdGlvIG9mIHRoZSBkaXNwbGF5ZWQgaW1hZ2UncyB3aWR0aCB0byB2aWV3cG9ydCdzIHdpZHRoLlxuICAgICAqIDEgbWVhbnMgaWRlbnRpY2FsIHdpZHRoLCAyIG1lYW5zIGltYWdlJ3Mgd2lkdGggaXMgdHdpY2UgdGhlIHZpZXdwb3J0J3Mgd2lkdGguLi5cbiAgICAgKiBOb3RlOiBub3QgYWNjdXJhdGUgd2l0aCBtdWx0aS1pbWFnZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW1hZ2Vab29tIFRoZSBpbWFnZSB6b29tXG4gICAgICogdGFyZ2V0IHpvb20uXG4gICAgICogQHJldHVybnMge051bWJlcn0gdmlld3BvcnRab29tIFRoZSB2aWV3cG9ydCB6b29tXG4gICAgICovXG4gICAgaW1hZ2VUb1ZpZXdwb3J0Wm9vbTogZnVuY3Rpb24oaW1hZ2Vab29tKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy52aWV3ZXIud29ybGQuZ2V0SXRlbUNvdW50KCk7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgJC5jb25zb2xlLmVycm9yKCdbVmlld3BvcnQuaW1hZ2VUb1ZpZXdwb3J0Wm9vbV0gaXMgbm90IGFjY3VyYXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAnd2l0aCBtdWx0aS1pbWFnZS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCBpcyBiZXR0ZXIgdG8gdXNlIFRpbGVkSW1hZ2UuaW1hZ2VUb1ZpZXdwb3J0Wm9vbVxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcy5fY29udGVudEJvdW5kc05vUm90YXRlIGNhbiBub3QgYmUgcmVsaWVkIG9uXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBjbGlwcGluZy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1BdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pbWFnZVRvVmlld3BvcnRab29tKGltYWdlWm9vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW1hZ2VXaWR0aCA9IHRoaXMuX2NvbnRlbnRTaXplTm9Sb3RhdGUueDtcbiAgICAgICAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5fY29udGFpbmVySW5uZXJTaXplLng7XG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMuX2NvbnRlbnRCb3VuZHNOb1JvdGF0ZS53aWR0aDtcbiAgICAgICAgdmFyIHZpZXdwb3J0VG9JbWFnZVpvb21SYXRpbyA9IChpbWFnZVdpZHRoIC8gY29udGFpbmVyV2lkdGgpIC8gc2NhbGU7XG4gICAgICAgIHJldHVybiBpbWFnZVpvb20gKiB2aWV3cG9ydFRvSW1hZ2Vab29tUmF0aW87XG4gICAgfVxufTtcblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLypcbiAqIE9wZW5TZWFkcmFnb24gLSBUaWxlZEltYWdlXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vKipcbiAqIFlvdSBzaG91bGRuJ3QgaGF2ZSB0byBjcmVhdGUgYSBUaWxlZEltYWdlIGRpcmVjdGx5OyB1c2Uge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyI29wZW59XG4gKiBvciB7QGxpbmsgT3BlblNlYWRyYWdvbi5WaWV3ZXIjYWRkVGlsZWRJbWFnZX0gaW5zdGVhZC5cbiAqIEBjbGFzcyBUaWxlZEltYWdlXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGV4dGVuZHMgT3BlblNlYWRyYWdvbi5FdmVudFNvdXJjZVxuICogQGNsYXNzZGVzYyBIYW5kbGVzIHJlbmRlcmluZyBvZiB0aWxlcyBmb3IgYW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uVmlld2VyfS5cbiAqIEEgbmV3IGluc3RhbmNlIGlzIGNyZWF0ZWQgZm9yIGVhY2ggVGlsZVNvdXJjZSBvcGVuZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gZm9yIHRoaXMgVGlsZWRJbWFnZS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5UaWxlU291cmNlfSBvcHRpb25zLnNvdXJjZSAtIFRoZSBUaWxlU291cmNlIHRoYXQgZGVmaW5lcyB0aGlzIFRpbGVkSW1hZ2UuXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVmlld2VyfSBvcHRpb25zLnZpZXdlciAtIFRoZSBWaWV3ZXIgdGhhdCBvd25zIHRoaXMgVGlsZWRJbWFnZS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5UaWxlQ2FjaGV9IG9wdGlvbnMudGlsZUNhY2hlIC0gVGhlIFRpbGVDYWNoZSBmb3IgdGhpcyBUaWxlZEltYWdlIHRvIHVzZS5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5EcmF3ZXJ9IG9wdGlvbnMuZHJhd2VyIC0gVGhlIERyYXdlciBmb3IgdGhpcyBUaWxlZEltYWdlIHRvIGRyYXcgb250by5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5JbWFnZUxvYWRlcn0gb3B0aW9ucy5pbWFnZUxvYWRlciAtIFRoZSBJbWFnZUxvYWRlciBmb3IgdGhpcyBUaWxlZEltYWdlIHRvIHVzZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy54PTBdIC0gTGVmdCBwb3NpdGlvbiwgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMueT0wXSAtIFRvcCBwb3NpdGlvbiwgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMud2lkdGg9MV0gLSBXaWR0aCwgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaGVpZ2h0XSAtIEhlaWdodCwgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdH0gW29wdGlvbnMuZml0Qm91bmRzXSBUaGUgYm91bmRzIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzXG4gKiB0byBmaXQgdGhlIGltYWdlIGludG8uIElmIHNwZWNpZmllZCwgeCwgeSwgd2lkdGggYW5kIGhlaWdodCBnZXQgaWdub3JlZC5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5QbGFjZW1lbnR9IFtvcHRpb25zLmZpdEJvdW5kc1BsYWNlbWVudD1PcGVuU2VhZHJhZ29uLlBsYWNlbWVudC5DRU5URVJdXG4gKiBIb3cgdG8gYW5jaG9yIHRoZSBpbWFnZSBpbiB0aGUgYm91bmRzIGlmIG9wdGlvbnMuZml0Qm91bmRzIGlzIHNldC5cbiAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5SZWN0fSBbb3B0aW9ucy5jbGlwXSAtIEFuIGFyZWEsIGluIGltYWdlIHBpeGVscywgdG8gY2xpcCB0b1xuICogKHBvcnRpb25zIG9mIHRoZSBpbWFnZSBvdXRzaWRlIG9mIHRoaXMgYXJlYSB3aWxsIG5vdCBiZSB2aXNpYmxlKS4gT25seSB3b3JrcyBvblxuICogYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRoZSBIVE1MNSBjYW52YXMuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc3ByaW5nU3RpZmZuZXNzXSAtIFNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYW5pbWF0aW9uVGltZV0gLSBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluWm9vbUltYWdlUmF0aW9dIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy53cmFwSG9yaXpvbnRhbF0gLSBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndyYXBWZXJ0aWNhbF0gLSBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmltbWVkaWF0ZVJlbmRlcl0gLSBTZWUge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuYmxlbmRUaW1lXSAtIFNlZSB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWx3YXlzQmxlbmRdIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1pblBpeGVsUmF0aW9dIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnNtb290aFRpbGVFZGdlc01pblpvb21dIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pT1NEZXZpY2VdIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm9wYWNpdHk9MV0gLSBPcGFjaXR5IHRoZSB0aWxlZCBpbWFnZSBzaG91bGQgYmUgZHJhd24gYXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuY29tcG9zaXRlT3BlcmF0aW9uXSAtIEhvdyB0aGUgaW1hZ2UgaXMgY29tcG9zaXRlZCBvbnRvIG90aGVyIGltYWdlczsgc2VlIGNvbXBvc2l0ZU9wZXJhdGlvbiBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfSBmb3IgcG9zc2libGUgdmFsdWVzLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWJ1Z01vZGVdIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtTdHJpbmd8Q2FudmFzR3JhZGllbnR8Q2FudmFzUGF0dGVybnxGdW5jdGlvbn0gW29wdGlvbnMucGxhY2Vob2xkZXJGaWxsU3R5bGVdIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICogQHBhcmFtIHtTdHJpbmd8Qm9vbGVhbn0gW29wdGlvbnMuY3Jvc3NPcmlnaW5Qb2xpY3ldIC0gU2VlIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICovXG4kLlRpbGVkSW1hZ2UgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJC5jb25zb2xlLmFzc2VydCggb3B0aW9ucy50aWxlQ2FjaGUsIFwiW1RpbGVkSW1hZ2VdIG9wdGlvbnMudGlsZUNhY2hlIGlzIHJlcXVpcmVkXCIgKTtcbiAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLmRyYXdlciwgXCJbVGlsZWRJbWFnZV0gb3B0aW9ucy5kcmF3ZXIgaXMgcmVxdWlyZWRcIiApO1xuICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMudmlld2VyLCBcIltUaWxlZEltYWdlXSBvcHRpb25zLnZpZXdlciBpcyByZXF1aXJlZFwiICk7XG4gICAgJC5jb25zb2xlLmFzc2VydCggb3B0aW9ucy5pbWFnZUxvYWRlciwgXCJbVGlsZWRJbWFnZV0gb3B0aW9ucy5pbWFnZUxvYWRlciBpcyByZXF1aXJlZFwiICk7XG4gICAgJC5jb25zb2xlLmFzc2VydCggb3B0aW9ucy5zb3VyY2UsIFwiW1RpbGVkSW1hZ2VdIG9wdGlvbnMuc291cmNlIGlzIHJlcXVpcmVkXCIgKTtcbiAgICAkLmNvbnNvbGUuYXNzZXJ0KCFvcHRpb25zLmNsaXAgfHwgb3B0aW9ucy5jbGlwIGluc3RhbmNlb2YgJC5SZWN0LFxuICAgICAgICBcIltUaWxlZEltYWdlXSBvcHRpb25zLmNsaXAgbXVzdCBiZSBhbiBPcGVuU2VhZHJhZ29uLlJlY3QgaWYgcHJlc2VudFwiKTtcblxuICAgICQuRXZlbnRTb3VyY2UuY2FsbCggdGhpcyApO1xuXG4gICAgdGhpcy5fdGlsZUNhY2hlID0gb3B0aW9ucy50aWxlQ2FjaGU7XG4gICAgZGVsZXRlIG9wdGlvbnMudGlsZUNhY2hlO1xuXG4gICAgdGhpcy5fZHJhd2VyID0gb3B0aW9ucy5kcmF3ZXI7XG4gICAgZGVsZXRlIG9wdGlvbnMuZHJhd2VyO1xuXG4gICAgdGhpcy5faW1hZ2VMb2FkZXIgPSBvcHRpb25zLmltYWdlTG9hZGVyO1xuICAgIGRlbGV0ZSBvcHRpb25zLmltYWdlTG9hZGVyO1xuXG4gICAgaWYgKG9wdGlvbnMuY2xpcCBpbnN0YW5jZW9mICQuUmVjdCkge1xuICAgICAgICB0aGlzLl9jbGlwID0gb3B0aW9ucy5jbGlwLmNsb25lKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdGlvbnMuY2xpcDtcblxuICAgIHZhciB4ID0gb3B0aW9ucy54IHx8IDA7XG4gICAgZGVsZXRlIG9wdGlvbnMueDtcbiAgICB2YXIgeSA9IG9wdGlvbnMueSB8fCAwO1xuICAgIGRlbGV0ZSBvcHRpb25zLnk7XG5cbiAgICAvLyBSYXRpbyBvZiB6b29tYWJsZSBpbWFnZSBoZWlnaHQgdG8gd2lkdGguXG4gICAgdGhpcy5ub3JtSGVpZ2h0ID0gb3B0aW9ucy5zb3VyY2UuZGltZW5zaW9ucy55IC8gb3B0aW9ucy5zb3VyY2UuZGltZW5zaW9ucy54O1xuICAgIHRoaXMuY29udGVudEFzcGVjdFggPSBvcHRpb25zLnNvdXJjZS5kaW1lbnNpb25zLnggLyBvcHRpb25zLnNvdXJjZS5kaW1lbnNpb25zLnk7XG5cbiAgICB2YXIgc2NhbGUgPSAxO1xuICAgIGlmICggb3B0aW9ucy53aWR0aCApIHtcbiAgICAgICAgc2NhbGUgPSBvcHRpb25zLndpZHRoO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy53aWR0aDtcblxuICAgICAgICBpZiAoIG9wdGlvbnMuaGVpZ2h0ICkge1xuICAgICAgICAgICAgJC5jb25zb2xlLmVycm9yKCBcInNwZWNpZnlpbmcgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IHRvIGEgdGlsZWRJbWFnZSBpcyBub3Qgc3VwcG9ydGVkXCIgKTtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIG9wdGlvbnMuaGVpZ2h0ICkge1xuICAgICAgICBzY2FsZSA9IG9wdGlvbnMuaGVpZ2h0IC8gdGhpcy5ub3JtSGVpZ2h0O1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIGZpdEJvdW5kcyA9IG9wdGlvbnMuZml0Qm91bmRzO1xuICAgIGRlbGV0ZSBvcHRpb25zLmZpdEJvdW5kcztcbiAgICB2YXIgZml0Qm91bmRzUGxhY2VtZW50ID0gb3B0aW9ucy5maXRCb3VuZHNQbGFjZW1lbnQgfHwgT3BlblNlYWRyYWdvbi5QbGFjZW1lbnQuQ0VOVEVSO1xuICAgIGRlbGV0ZSBvcHRpb25zLmZpdEJvdW5kc1BsYWNlbWVudDtcblxuICAgICQuZXh0ZW5kKCB0cnVlLCB0aGlzLCB7XG5cbiAgICAgICAgLy9pbnRlcm5hbCBzdGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZpZXdlcjogICAgICAgICBudWxsLFxuICAgICAgICB0aWxlc01hdHJpeDogICAge30sICAgIC8vIEEgJzNkJyBkaWN0aW9uYXJ5IFtsZXZlbF1beF1beV0gLS0+IFRpbGUuXG4gICAgICAgIGNvdmVyYWdlOiAgICAgICB7fSwgICAgLy8gQSAnM2QnIGRpY3Rpb25hcnkgW2xldmVsXVt4XVt5XSAtLT4gQm9vbGVhbi5cbiAgICAgICAgbGFzdERyYXduOiAgICAgIFtdLCAgICAvLyBBbiB1bm9yZGVyZWQgbGlzdCBvZiBUaWxlcyBkcmF3biBsYXN0IGZyYW1lLlxuICAgICAgICBsYXN0UmVzZXRUaW1lOiAgMCwgICAgIC8vIExhc3QgdGltZSBmb3Igd2hpY2ggdGhlIHRpbGVkSW1hZ2Ugd2FzIHJlc2V0LlxuICAgICAgICBfbWlkRHJhdzogICAgICAgZmFsc2UsIC8vIElzIHRoZSB0aWxlZEltYWdlIGN1cnJlbnRseSB1cGRhdGluZyB0aGUgdmlld3BvcnQ/XG4gICAgICAgIF9uZWVkc0RyYXc6ICAgICB0cnVlLCAgLy8gRG9lcyB0aGUgdGlsZWRJbWFnZSBuZWVkIHRvIHVwZGF0ZSB0aGUgdmlld3BvcnQgYWdhaW4/XG4gICAgICAgIF9oYXNPcGFxdWVUaWxlOiBmYWxzZSwgIC8vIERvIHdlIGhhdmUgZXZlbiBvbmUgZnVsbHkgb3BhcXVlIHRpbGU/XG4gICAgICAgIC8vY29uZmlndXJhYmxlIHNldHRpbmdzXG4gICAgICAgIHNwcmluZ1N0aWZmbmVzczogICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5zcHJpbmdTdGlmZm5lc3MsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6ICAgICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5hbmltYXRpb25UaW1lLFxuICAgICAgICBtaW5ab29tSW1hZ2VSYXRpbzogICAgICAkLkRFRkFVTFRfU0VUVElOR1MubWluWm9vbUltYWdlUmF0aW8sXG4gICAgICAgIHdyYXBIb3Jpem9udGFsOiAgICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy53cmFwSG9yaXpvbnRhbCxcbiAgICAgICAgd3JhcFZlcnRpY2FsOiAgICAgICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLndyYXBWZXJ0aWNhbCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiAgICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgYmxlbmRUaW1lOiAgICAgICAgICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmJsZW5kVGltZSxcbiAgICAgICAgYWx3YXlzQmxlbmQ6ICAgICAgICAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmFsd2F5c0JsZW5kLFxuICAgICAgICBtaW5QaXhlbFJhdGlvOiAgICAgICAgICAkLkRFRkFVTFRfU0VUVElOR1MubWluUGl4ZWxSYXRpbyxcbiAgICAgICAgc21vb3RoVGlsZUVkZ2VzTWluWm9vbTogJC5ERUZBVUxUX1NFVFRJTkdTLnNtb290aFRpbGVFZGdlc01pblpvb20sXG4gICAgICAgIGlPU0RldmljZTogICAgICAgICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5pT1NEZXZpY2UsXG4gICAgICAgIGRlYnVnTW9kZTogICAgICAgICAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5kZWJ1Z01vZGUsXG4gICAgICAgIGNyb3NzT3JpZ2luUG9saWN5OiAgICAgICQuREVGQVVMVF9TRVRUSU5HUy5jcm9zc09yaWdpblBvbGljeSxcbiAgICAgICAgcGxhY2Vob2xkZXJGaWxsU3R5bGU6ICAgJC5ERUZBVUxUX1NFVFRJTkdTLnBsYWNlaG9sZGVyRmlsbFN0eWxlLFxuICAgICAgICBvcGFjaXR5OiAgICAgICAgICAgICAgICAkLkRFRkFVTFRfU0VUVElOR1Mub3BhY2l0eSxcbiAgICAgICAgY29tcG9zaXRlT3BlcmF0aW9uOiAgICAgJC5ERUZBVUxUX1NFVFRJTkdTLmNvbXBvc2l0ZU9wZXJhdGlvblxuXG4gICAgfSwgb3B0aW9ucyApO1xuXG4gICAgdGhpcy5feFNwcmluZyA9IG5ldyAkLlNwcmluZyh7XG4gICAgICAgIGluaXRpYWw6IHgsXG4gICAgICAgIHNwcmluZ1N0aWZmbmVzczogdGhpcy5zcHJpbmdTdGlmZm5lc3MsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6IHRoaXMuYW5pbWF0aW9uVGltZVxuICAgIH0pO1xuXG4gICAgdGhpcy5feVNwcmluZyA9IG5ldyAkLlNwcmluZyh7XG4gICAgICAgIGluaXRpYWw6IHksXG4gICAgICAgIHNwcmluZ1N0aWZmbmVzczogdGhpcy5zcHJpbmdTdGlmZm5lc3MsXG4gICAgICAgIGFuaW1hdGlvblRpbWU6IHRoaXMuYW5pbWF0aW9uVGltZVxuICAgIH0pO1xuXG4gICAgdGhpcy5fc2NhbGVTcHJpbmcgPSBuZXcgJC5TcHJpbmcoe1xuICAgICAgICBpbml0aWFsOiBzY2FsZSxcbiAgICAgICAgc3ByaW5nU3RpZmZuZXNzOiB0aGlzLnNwcmluZ1N0aWZmbmVzcyxcbiAgICAgICAgYW5pbWF0aW9uVGltZTogdGhpcy5hbmltYXRpb25UaW1lXG4gICAgfSk7XG5cbiAgICB0aGlzLl91cGRhdGVGb3JTY2FsZSgpO1xuXG4gICAgaWYgKGZpdEJvdW5kcykge1xuICAgICAgICB0aGlzLmZpdEJvdW5kcyhmaXRCb3VuZHMsIGZpdEJvdW5kc1BsYWNlbWVudCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gV2UgbmVlZCBhIGNhbGxiYWNrIHRvIGdpdmUgaW1hZ2UgbWFuaXB1bGF0aW9uIGEgY2hhbmNlIHRvIGhhcHBlblxuICAgIHRoaXMuX2RyYXdpbmdIYW5kbGVyID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIGp1c3QgYmVmb3JlIHRoZSB0aWxlIGlzIGRyYXduIGdpdmluZyB0aGUgYXBwbGljYXRpb24gYSBjaGFuY2UgdG8gYWx0ZXIgdGhlIGltYWdlLlxuICAgICAgICpcbiAgICAgICAqIE5PVEU6IFRoaXMgZXZlbnQgaXMgb25seSBmaXJlZCB3aGVuIHRoZSBkcmF3ZXIgaXMgdXNpbmcgYSAmbHQ7Y2FudmFzJmd0Oy5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgdGlsZS1kcmF3aW5nXG4gICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5UaWxlfSB0aWxlIC0gVGhlIFRpbGUgYmVpbmcgZHJhd24uXG4gICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gdGlsZWRJbWFnZSAtIFdoaWNoIFRpbGVkSW1hZ2UgaXMgYmVpbmcgZHJhd24uXG4gICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZX0gY29udGV4dCAtIFRoZSBIVE1MIGNhbnZhcyBjb250ZXh0IGJlaW5nIGRyYXduIGludG8uXG4gICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZX0gcmVuZGVyZWQgLSBUaGUgSFRNTCBjYW52YXMgY29udGV4dCBjb250YWluaW5nIHRoZSB0aWxlIGltYWdlcnkuXG4gICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgICAgX3RoaXMudmlld2VyLnJhaXNlRXZlbnQoJ3RpbGUtZHJhd2luZycsICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIHRpbGVkSW1hZ2U6IF90aGlzXG4gICAgICAgIH0sIGFyZ3MpKTtcbiAgICB9O1xufTtcblxuJC5leHRlbmQoJC5UaWxlZEltYWdlLnByb3RvdHlwZSwgJC5FdmVudFNvdXJjZS5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlLnByb3RvdHlwZSAqL3tcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gV2hldGhlciB0aGUgVGlsZWRJbWFnZSBuZWVkcyB0byBiZSBkcmF3bi5cbiAgICAgKi9cbiAgICBuZWVkc0RyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmVlZHNEcmF3O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHRpbGVzIGFuZCB0cmlnZ2VycyBhbiB1cGRhdGUgb24gdGhlIG5leHQgY2FsbCB0b1xuICAgICAqIHtAbGluayBPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2UjdXBkYXRlfS5cbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3RpbGVDYWNoZS5jbGVhclRpbGVzRm9yKHRoaXMpO1xuICAgICAgICB0aGlzLmxhc3RSZXNldFRpbWUgPSAkLm5vdygpO1xuICAgICAgICB0aGlzLl9uZWVkc0RyYXcgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBUaWxlZEltYWdlJ3MgYm91bmRzLCBhbmltYXRpbmcgaWYgbmVlZGVkLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBUaWxlZEltYWdlIGFuaW1hdGVkLlxuICAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRYID0gdGhpcy5feFNwcmluZy5jdXJyZW50LnZhbHVlO1xuICAgICAgICB2YXIgb2xkWSA9IHRoaXMuX3lTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICAgICAgdmFyIG9sZFNjYWxlID0gdGhpcy5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgICAgICB0aGlzLl94U3ByaW5nLnVwZGF0ZSgpO1xuICAgICAgICB0aGlzLl95U3ByaW5nLnVwZGF0ZSgpO1xuICAgICAgICB0aGlzLl9zY2FsZVNwcmluZy51cGRhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5feFNwcmluZy5jdXJyZW50LnZhbHVlICE9PSBvbGRYIHx8IHRoaXMuX3lTcHJpbmcuY3VycmVudC52YWx1ZSAhPT0gb2xkWSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWUgIT09IG9sZFNjYWxlKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVGb3JTY2FsZSgpO1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNEcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyB0aGUgVGlsZWRJbWFnZSB0byBpdHMgRHJhd2VyLlxuICAgICAqL1xuICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9taWREcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHVwZGF0ZVZpZXdwb3J0KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fbWlkRHJhdyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIFRpbGVkSW1hZ2UgKHVubG9hZCBjdXJyZW50IGxvYWRlZCB0aWxlcykuXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUmVjdH0gVGhpcyBUaWxlZEltYWdlJ3MgYm91bmRzIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbjsgZmFsc2UgZm9yIHRhcmdldCBsb2NhdGlvbi5cbiAgICAgKi9cbiAgICBnZXRCb3VuZHM6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgJC5SZWN0KCB0aGlzLl94U3ByaW5nLmN1cnJlbnQudmFsdWUsIHRoaXMuX3lTcHJpbmcuY3VycmVudC52YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JsZFdpZHRoQ3VycmVudCwgdGhpcy5fd29ybGRIZWlnaHRDdXJyZW50ICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3ICQuUmVjdCggdGhpcy5feFNwcmluZy50YXJnZXQudmFsdWUsIHRoaXMuX3lTcHJpbmcudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgdGhpcy5fd29ybGRXaWR0aFRhcmdldCwgdGhpcy5fd29ybGRIZWlnaHRUYXJnZXQgKTtcbiAgICB9LFxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGdldFdvcmxkQm91bmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJC5jb25zb2xlLmVycm9yKCdbVGlsZWRJbWFnZS5nZXRXb3JsZEJvdW5kc10gaXMgZGVwcmVjYXRlZDsgdXNlIFRpbGVkSW1hZ2UuZ2V0Qm91bmRzIGluc3RlYWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qm91bmRzKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYm91bmRzIG9mIHRoZSBkaXNwbGF5ZWQgcGFydCBvZiB0aGUgdGlsZWQgaW1hZ2UuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY3VycmVudD1mYWxzZV0gUGFzcyB0cnVlIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbixcbiAgICAgKiBmYWxzZSBmb3IgdGhlIHRhcmdldCBsb2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7JC5SZWN0fSBUaGUgY2xpcHBlZCBib3VuZHMgaW4gdmlld3BvcnQgY29vcmRpbmF0ZXMuXG4gICAgICovXG4gICAgZ2V0Q2xpcHBlZEJvdW5kczogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICB2YXIgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoY3VycmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9jbGlwKSB7XG4gICAgICAgICAgICB2YXIgcmF0aW8gPSB0aGlzLl93b3JsZFdpZHRoQ3VycmVudCAvIHRoaXMuc291cmNlLmRpbWVuc2lvbnMueDtcbiAgICAgICAgICAgIHZhciBjbGlwID0gdGhpcy5fY2xpcC50aW1lcyhyYXRpbyk7XG4gICAgICAgICAgICBib3VuZHMgPSBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgICAgIGJvdW5kcy54ICsgY2xpcC54LFxuICAgICAgICAgICAgICAgIGJvdW5kcy55ICsgY2xpcC55LFxuICAgICAgICAgICAgICAgIGNsaXAud2lkdGgsXG4gICAgICAgICAgICAgICAgY2xpcC5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBUaGlzIFRpbGVkSW1hZ2UncyBjb250ZW50IHNpemUsIGluIG9yaWdpbmFsIHBpeGVscy5cbiAgICAgKi9cbiAgICBnZXRDb250ZW50U2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCh0aGlzLnNvdXJjZS5kaW1lbnNpb25zLngsIHRoaXMuc291cmNlLmRpbWVuc2lvbnMueSk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfdmlld3BvcnRUb0ltYWdlRGVsdGE6IGZ1bmN0aW9uKCB2aWV3ZXJYLCB2aWV3ZXJZLCBjdXJyZW50ICkge1xuICAgICAgICB2YXIgc2NhbGUgPSAoY3VycmVudCA/IHRoaXMuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWUgOiB0aGlzLl9zY2FsZVNwcmluZy50YXJnZXQudmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3ICQuUG9pbnQodmlld2VyWCAqICh0aGlzLnNvdXJjZS5kaW1lbnNpb25zLnggLyBzY2FsZSksXG4gICAgICAgICAgICB2aWV3ZXJZICogKCh0aGlzLnNvdXJjZS5kaW1lbnNpb25zLnkgKiB0aGlzLmNvbnRlbnRBc3BlY3RYKSAvIHNjYWxlKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgZnJvbSBPcGVuU2VhZHJhZ29uIHZpZXdlciBjb29yZGluYXRlIHN5c3RlbSB0byBpbWFnZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGVpdGhlciBieSBwYXNzaW5nIFgsWSBjb29yZGluYXRlcyBvciBhbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5Qb2ludH0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8T3BlblNlYWRyYWdvbi5Qb2ludH0gdmlld2VyWCAtIFRoZSBYIGNvb3JkaW5hdGUgb3IgcG9pbnQgaW4gdmlld3BvcnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt2aWV3ZXJZXSAtIFRoZSBZIGNvb3JkaW5hdGUgaW4gdmlld3BvcnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY3VycmVudD1mYWxzZV0gLSBQYXNzIHRydWUgdG8gdXNlIHRoZSBjdXJyZW50IGxvY2F0aW9uOyBmYWxzZSBmb3IgdGFyZ2V0IGxvY2F0aW9uLlxuICAgICAqIEByZXR1cm4ge09wZW5TZWFkcmFnb24uUG9pbnR9IEEgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBjb29yZGluYXRlcyBpbiB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgdmlld3BvcnRUb0ltYWdlQ29vcmRpbmF0ZXM6IGZ1bmN0aW9uKCB2aWV3ZXJYLCB2aWV3ZXJZLCBjdXJyZW50ICkge1xuICAgICAgICBpZiAodmlld2VyWCBpbnN0YW5jZW9mICQuUG9pbnQpIHtcbiAgICAgICAgICAgIC8vdGhleSBwYXNzZWQgYSBwb2ludCBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgY29tcG9uZW50c1xuICAgICAgICAgICAgY3VycmVudCA9IHZpZXdlclk7XG4gICAgICAgICAgICB2aWV3ZXJZID0gdmlld2VyWC55O1xuICAgICAgICAgICAgdmlld2VyWCA9IHZpZXdlclgueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlld3BvcnRUb0ltYWdlRGVsdGEodmlld2VyWCAtIHRoaXMuX3hTcHJpbmcuY3VycmVudC52YWx1ZSxcbiAgICAgICAgICAgICAgICB2aWV3ZXJZIC0gdGhpcy5feVNwcmluZy5jdXJyZW50LnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3cG9ydFRvSW1hZ2VEZWx0YSh2aWV3ZXJYIC0gdGhpcy5feFNwcmluZy50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB2aWV3ZXJZIC0gdGhpcy5feVNwcmluZy50YXJnZXQudmFsdWUpO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2ltYWdlVG9WaWV3cG9ydERlbHRhOiBmdW5jdGlvbiggaW1hZ2VYLCBpbWFnZVksIGN1cnJlbnQgKSB7XG4gICAgICAgIHZhciBzY2FsZSA9IChjdXJyZW50ID8gdGhpcy5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZSA6IHRoaXMuX3NjYWxlU3ByaW5nLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgJC5Qb2ludCgoaW1hZ2VYIC8gdGhpcy5zb3VyY2UuZGltZW5zaW9ucy54KSAqIHNjYWxlLFxuICAgICAgICAgICAgKGltYWdlWSAvIHRoaXMuc291cmNlLmRpbWVuc2lvbnMueSAvIHRoaXMuY29udGVudEFzcGVjdFgpICogc2NhbGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGZyb20gaW1hZ2UgY29vcmRpbmF0ZSBzeXN0ZW0gdG8gT3BlblNlYWRyYWdvbiB2aWV3ZXIgY29vcmRpbmF0ZSBzeXN0ZW1cbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGVpdGhlciBieSBwYXNzaW5nIFgsWSBjb29yZGluYXRlcyBvciBhbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5Qb2ludH0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8T3BlblNlYWRyYWdvbi5Qb2ludH0gaW1hZ2VYIC0gVGhlIFggY29vcmRpbmF0ZSBvciBwb2ludCBpbiBpbWFnZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2ltYWdlWV0gLSBUaGUgWSBjb29yZGluYXRlIGluIGltYWdlIGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIHRvIHVzZSB0aGUgY3VycmVudCBsb2NhdGlvbjsgZmFsc2UgZm9yIHRhcmdldCBsb2NhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBBIHBvaW50IHJlcHJlc2VudGluZyB0aGUgY29vcmRpbmF0ZXMgaW4gdGhlIHZpZXdwb3J0LlxuICAgICAqL1xuICAgIGltYWdlVG9WaWV3cG9ydENvb3JkaW5hdGVzOiBmdW5jdGlvbiggaW1hZ2VYLCBpbWFnZVksIGN1cnJlbnQgKSB7XG4gICAgICAgIGlmIChpbWFnZVggaW5zdGFuY2VvZiAkLlBvaW50KSB7XG4gICAgICAgICAgICAvL3RoZXkgcGFzc2VkIGEgcG9pbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsIGNvbXBvbmVudHNcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpbWFnZVk7XG4gICAgICAgICAgICBpbWFnZVkgPSBpbWFnZVgueTtcbiAgICAgICAgICAgIGltYWdlWCA9IGltYWdlWC54O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5faW1hZ2VUb1ZpZXdwb3J0RGVsdGEoaW1hZ2VYLCBpbWFnZVkpO1xuICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgcG9pbnQueCArPSB0aGlzLl94U3ByaW5nLmN1cnJlbnQudmFsdWU7XG4gICAgICAgICAgICBwb2ludC55ICs9IHRoaXMuX3lTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvaW50LnggKz0gdGhpcy5feFNwcmluZy50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBwb2ludC55ICs9IHRoaXMuX3lTcHJpbmcudGFyZ2V0LnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGZyb20gYSByZWN0YW5nbGUgd2hpY2ggZGVzY3JpYmVzIGEgcG9ydGlvbiBvZiB0aGUgaW1hZ2UgaW5cbiAgICAgKiBwaXhlbCBjb29yZGluYXRlcyB0byBPcGVuU2VhZHJhZ29uIHZpZXdwb3J0IHJlY3RhbmdsZSBjb29yZGluYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGVpdGhlciBieSBwYXNzaW5nIFgsWSx3aWR0aCxoZWlnaHQgb3IgYW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uUmVjdH0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8T3BlblNlYWRyYWdvbi5SZWN0fSBpbWFnZVggLSBUaGUgbGVmdCBjb29yZGluYXRlIG9yIHJlY3RhbmdsZSBpbiBpbWFnZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2ltYWdlWV0gLSBUaGUgdG9wIGNvb3JkaW5hdGUgaW4gaW1hZ2UgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwaXhlbFdpZHRoXSAtIFRoZSB3aWR0aCBpbiBwaXhlbCBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcGl4ZWxIZWlnaHRdIC0gVGhlIGhlaWdodCBpbiBwaXhlbCBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIHRvIHVzZSB0aGUgY3VycmVudCBsb2NhdGlvbjsgZmFsc2UgZm9yIHRhcmdldCBsb2NhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlJlY3R9IEEgcmVjdCByZXByZXNlbnRpbmcgdGhlIGNvb3JkaW5hdGVzIGluIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICBpbWFnZVRvVmlld3BvcnRSZWN0YW5nbGU6IGZ1bmN0aW9uKCBpbWFnZVgsIGltYWdlWSwgcGl4ZWxXaWR0aCwgcGl4ZWxIZWlnaHQsIGN1cnJlbnQgKSB7XG4gICAgICAgIHZhciByZWN0ID0gaW1hZ2VYO1xuICAgICAgICBpZiAocmVjdCBpbnN0YW5jZW9mICQuUmVjdCkge1xuICAgICAgICAgICAgLy90aGV5IHBhc3NlZCBhIHJlY3QgaW5zdGVhZCBvZiBpbmRpdmlkdWFsIGNvbXBvbmVudHNcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpbWFnZVk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWN0ID0gbmV3ICQuUmVjdChpbWFnZVgsIGltYWdlWSwgcGl4ZWxXaWR0aCwgcGl4ZWxIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvb3JkQSA9IHRoaXMuaW1hZ2VUb1ZpZXdwb3J0Q29vcmRpbmF0ZXMocmVjdC5nZXRUb3BMZWZ0KCksIGN1cnJlbnQpO1xuICAgICAgICB2YXIgY29vcmRCID0gdGhpcy5faW1hZ2VUb1ZpZXdwb3J0RGVsdGEocmVjdC53aWR0aCwgcmVjdC5oZWlnaHQsIGN1cnJlbnQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgY29vcmRBLngsXG4gICAgICAgICAgICBjb29yZEEueSxcbiAgICAgICAgICAgIGNvb3JkQi54LFxuICAgICAgICAgICAgY29vcmRCLnksXG4gICAgICAgICAgICByZWN0LmRlZ3JlZXNcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyBmcm9tIGEgcmVjdGFuZ2xlIHdoaWNoIGRlc2NyaWJlcyBhIHBvcnRpb24gb2ZcbiAgICAgKiB0aGUgdmlld3BvcnQgaW4gcG9pbnQgY29vcmRpbmF0ZXMgdG8gaW1hZ2UgcmVjdGFuZ2xlIGNvb3JkaW5hdGVzLlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgZWl0aGVyIGJ5IHBhc3NpbmcgWCxZLHdpZHRoLGhlaWdodCBvciBhbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5SZWN0fS5cbiAgICAgKiBAcGFyYW0ge051bWJlcnxPcGVuU2VhZHJhZ29uLlJlY3R9IHZpZXdlclggLSBUaGUgbGVmdCBjb29yZGluYXRlIG9yIHJlY3RhbmdsZSBpbiB2aWV3cG9ydCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ZpZXdlclldIC0gVGhlIHRvcCBjb29yZGluYXRlIGluIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcG9pbnRXaWR0aF0gLSBUaGUgd2lkdGggaW4gdmlld3BvcnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwb2ludEhlaWdodF0gLSBUaGUgaGVpZ2h0IGluIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2N1cnJlbnQ9ZmFsc2VdIC0gUGFzcyB0cnVlIHRvIHVzZSB0aGUgY3VycmVudCBsb2NhdGlvbjsgZmFsc2UgZm9yIHRhcmdldCBsb2NhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtPcGVuU2VhZHJhZ29uLlJlY3R9IEEgcmVjdCByZXByZXNlbnRpbmcgdGhlIGNvb3JkaW5hdGVzIGluIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICB2aWV3cG9ydFRvSW1hZ2VSZWN0YW5nbGU6IGZ1bmN0aW9uKCB2aWV3ZXJYLCB2aWV3ZXJZLCBwb2ludFdpZHRoLCBwb2ludEhlaWdodCwgY3VycmVudCApIHtcbiAgICAgICAgdmFyIHJlY3QgPSB2aWV3ZXJYO1xuICAgICAgICBpZiAodmlld2VyWCBpbnN0YW5jZW9mICQuUmVjdCkge1xuICAgICAgICAgICAgLy90aGV5IHBhc3NlZCBhIHJlY3QgaW5zdGVhZCBvZiBpbmRpdmlkdWFsIGNvbXBvbmVudHNcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2aWV3ZXJZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjdCA9IG5ldyAkLlJlY3Qodmlld2VyWCwgdmlld2VyWSwgcG9pbnRXaWR0aCwgcG9pbnRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvb3JkQSA9IHRoaXMudmlld3BvcnRUb0ltYWdlQ29vcmRpbmF0ZXMocmVjdC5nZXRUb3BMZWZ0KCksIGN1cnJlbnQpO1xuICAgICAgICB2YXIgY29vcmRCID0gdGhpcy5fdmlld3BvcnRUb0ltYWdlRGVsdGEocmVjdC53aWR0aCwgcmVjdC5oZWlnaHQsIGN1cnJlbnQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgJC5SZWN0KFxuICAgICAgICAgICAgY29vcmRBLngsXG4gICAgICAgICAgICBjb29yZEEueSxcbiAgICAgICAgICAgIGNvb3JkQi54LFxuICAgICAgICAgICAgY29vcmRCLnksXG4gICAgICAgICAgICByZWN0LmRlZ3JlZXNcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwaXhlbCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgdmlld2VyIGVsZW1lbnQgdG8gaW1hZ2VcbiAgICAgKiBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBpeGVsXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgdmlld2VyRWxlbWVudFRvSW1hZ2VDb29yZGluYXRlczogZnVuY3Rpb24oIHBpeGVsICkge1xuICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKCBwaXhlbCwgdHJ1ZSApO1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3cG9ydFRvSW1hZ2VDb29yZGluYXRlcyggcG9pbnQgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwaXhlbCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgaW1hZ2UgdG9cbiAgICAgKiB2aWV3ZXIgZWxlbWVudCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBpeGVsXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgaW1hZ2VUb1ZpZXdlckVsZW1lbnRDb29yZGluYXRlczogZnVuY3Rpb24oIHBpeGVsICkge1xuICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLmltYWdlVG9WaWV3cG9ydENvb3JkaW5hdGVzKCBwaXhlbCApO1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3cG9ydC5waXhlbEZyb21Qb2ludCggcG9pbnQsIHRydWUgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwaXhlbCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgd2luZG93IHRvIGltYWdlIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5Qb2ludH0gcGl4ZWxcbiAgICAgKiBAcmV0dXJucyB7T3BlblNlYWRyYWdvbi5Qb2ludH1cbiAgICAgKi9cbiAgICB3aW5kb3dUb0ltYWdlQ29vcmRpbmF0ZXM6IGZ1bmN0aW9uKCBwaXhlbCApIHtcbiAgICAgICAgdmFyIHZpZXdlckNvb3JkaW5hdGVzID0gcGl4ZWwubWludXMoXG4gICAgICAgICAgICAgICAgT3BlblNlYWRyYWdvbi5nZXRFbGVtZW50UG9zaXRpb24oIHRoaXMudmlld2VyLmVsZW1lbnQgKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlckVsZW1lbnRUb0ltYWdlQ29vcmRpbmF0ZXMoIHZpZXdlckNvb3JkaW5hdGVzICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgaW1hZ2UgY29vcmRpbmF0ZXMgdG8gcGl4ZWwgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIHdpbmRvdy5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUG9pbnR9IHBpeGVsXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uUG9pbnR9XG4gICAgICovXG4gICAgaW1hZ2VUb1dpbmRvd0Nvb3JkaW5hdGVzOiBmdW5jdGlvbiggcGl4ZWwgKSB7XG4gICAgICAgIHZhciB2aWV3ZXJDb29yZGluYXRlcyA9IHRoaXMuaW1hZ2VUb1ZpZXdlckVsZW1lbnRDb29yZGluYXRlcyggcGl4ZWwgKTtcbiAgICAgICAgcmV0dXJuIHZpZXdlckNvb3JkaW5hdGVzLnBsdXMoXG4gICAgICAgICAgICAgICAgT3BlblNlYWRyYWdvbi5nZXRFbGVtZW50UG9zaXRpb24oIHRoaXMudmlld2VyLmVsZW1lbnQgKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSB2aWV3cG9ydCB6b29tIHRvIGFuIGltYWdlIHpvb20uXG4gICAgICogSW1hZ2Ugem9vbTogcmF0aW8gb2YgdGhlIG9yaWdpbmFsIGltYWdlIHNpemUgdG8gZGlzcGxheWVkIGltYWdlIHNpemUuXG4gICAgICogMSBtZWFucyBvcmlnaW5hbCBpbWFnZSBzaXplLCAwLjUgaGFsZiBzaXplLi4uXG4gICAgICogVmlld3BvcnQgem9vbTogcmF0aW8gb2YgdGhlIGRpc3BsYXllZCBpbWFnZSdzIHdpZHRoIHRvIHZpZXdwb3J0J3Mgd2lkdGguXG4gICAgICogMSBtZWFucyBpZGVudGljYWwgd2lkdGgsIDIgbWVhbnMgaW1hZ2UncyB3aWR0aCBpcyB0d2ljZSB0aGUgdmlld3BvcnQncyB3aWR0aC4uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2aWV3cG9ydFpvb20gVGhlIHZpZXdwb3J0IHpvb21cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBpbWFnZVpvb20gVGhlIGltYWdlIHpvb21cbiAgICAgKi9cbiAgICB2aWV3cG9ydFRvSW1hZ2Vab29tOiBmdW5jdGlvbiggdmlld3BvcnRab29tICkge1xuICAgICAgICB2YXIgcmF0aW8gPSB0aGlzLl9zY2FsZVNwcmluZy5jdXJyZW50LnZhbHVlICpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0Ll9jb250YWluZXJJbm5lclNpemUueCAvIHRoaXMuc291cmNlLmRpbWVuc2lvbnMueDtcbiAgICAgICAgcmV0dXJuIHJhdGlvICogdmlld3BvcnRab29tIDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbiBpbWFnZSB6b29tIHRvIGEgdmlld3BvcnQgem9vbS5cbiAgICAgKiBJbWFnZSB6b29tOiByYXRpbyBvZiB0aGUgb3JpZ2luYWwgaW1hZ2Ugc2l6ZSB0byBkaXNwbGF5ZWQgaW1hZ2Ugc2l6ZS5cbiAgICAgKiAxIG1lYW5zIG9yaWdpbmFsIGltYWdlIHNpemUsIDAuNSBoYWxmIHNpemUuLi5cbiAgICAgKiBWaWV3cG9ydCB6b29tOiByYXRpbyBvZiB0aGUgZGlzcGxheWVkIGltYWdlJ3Mgd2lkdGggdG8gdmlld3BvcnQncyB3aWR0aC5cbiAgICAgKiAxIG1lYW5zIGlkZW50aWNhbCB3aWR0aCwgMiBtZWFucyBpbWFnZSdzIHdpZHRoIGlzIHR3aWNlIHRoZSB2aWV3cG9ydCdzIHdpZHRoLi4uXG4gICAgICogTm90ZTogbm90IGFjY3VyYXRlIHdpdGggbXVsdGktaW1hZ2UuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGltYWdlWm9vbSBUaGUgaW1hZ2Ugem9vbVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHZpZXdwb3J0Wm9vbSBUaGUgdmlld3BvcnQgem9vbVxuICAgICAqL1xuICAgIGltYWdlVG9WaWV3cG9ydFpvb206IGZ1bmN0aW9uKCBpbWFnZVpvb20gKSB7XG4gICAgICAgIHZhciByYXRpbyA9IHRoaXMuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWUgKlxuICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnQuX2NvbnRhaW5lcklubmVyU2l6ZS54IC8gdGhpcy5zb3VyY2UuZGltZW5zaW9ucy54O1xuICAgICAgICByZXR1cm4gaW1hZ2Vab29tIC8gcmF0aW87XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFRpbGVkSW1hZ2UncyBwb3NpdGlvbiBpbiB0aGUgd29ybGQuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlBvaW50fSBwb3NpdGlvbiAtIFRoZSBuZXcgcG9zaXRpb24sIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0byB0aGUgbmV3IHBvc2l0aW9uIG9yIHNuYXAgaW1tZWRpYXRlbHkuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uVGlsZWRJbWFnZS5ldmVudDpib3VuZHMtY2hhbmdlXG4gICAgICovXG4gICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uKHBvc2l0aW9uLCBpbW1lZGlhdGVseSkge1xuICAgICAgICB2YXIgc2FtZVRhcmdldCA9ICh0aGlzLl94U3ByaW5nLnRhcmdldC52YWx1ZSA9PT0gcG9zaXRpb24ueCAmJlxuICAgICAgICAgICAgdGhpcy5feVNwcmluZy50YXJnZXQudmFsdWUgPT09IHBvc2l0aW9uLnkpO1xuXG4gICAgICAgIGlmIChpbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgaWYgKHNhbWVUYXJnZXQgJiYgdGhpcy5feFNwcmluZy5jdXJyZW50LnZhbHVlID09PSBwb3NpdGlvbi54ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3lTcHJpbmcuY3VycmVudC52YWx1ZSA9PT0gcG9zaXRpb24ueSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5feFNwcmluZy5yZXNldFRvKHBvc2l0aW9uLngpO1xuICAgICAgICAgICAgdGhpcy5feVNwcmluZy5yZXNldFRvKHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNEcmF3ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzYW1lVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl94U3ByaW5nLnNwcmluZ1RvKHBvc2l0aW9uLngpO1xuICAgICAgICAgICAgdGhpcy5feVNwcmluZy5zcHJpbmdUbyhwb3NpdGlvbi55KTtcbiAgICAgICAgICAgIHRoaXMuX25lZWRzRHJhdyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNhbWVUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhaXNlQm91bmRzQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVGlsZWRJbWFnZSdzIHdpZHRoIGluIHRoZSB3b3JsZCwgYWRqdXN0aW5nIHRoZSBoZWlnaHQgdG8gbWF0Y2ggYmFzZWQgb24gYXNwZWN0IHJhdGlvLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCAtIFRoZSBuZXcgd2lkdGgsIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0byB0aGUgbmV3IHNpemUgb3Igc25hcCBpbW1lZGlhdGVseS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlLmV2ZW50OmJvdW5kcy1jaGFuZ2VcbiAgICAgKi9cbiAgICBzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgsIGltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHRoaXMuX3NldFNjYWxlKHdpZHRoLCBpbW1lZGlhdGVseSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFRpbGVkSW1hZ2UncyBoZWlnaHQgaW4gdGhlIHdvcmxkLCBhZGp1c3RpbmcgdGhlIHdpZHRoIHRvIG1hdGNoIGJhc2VkIG9uIGFzcGVjdCByYXRpby5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQsIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0byB0aGUgbmV3IHNpemUgb3Igc25hcCBpbW1lZGlhdGVseS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlLmV2ZW50OmJvdW5kcy1jaGFuZ2VcbiAgICAgKi9cbiAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCwgaW1tZWRpYXRlbHkpIHtcbiAgICAgICAgdGhpcy5fc2V0U2NhbGUoaGVpZ2h0IC8gdGhpcy5ub3JtSGVpZ2h0LCBpbW1lZGlhdGVseSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBvc2l0aW9ucyBhbmQgc2NhbGVzIHRoZSBUaWxlZEltYWdlIHRvIGZpdCBpbiB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAgICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBmaXJlcyBPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2UuZXZlbnQ6Ym91bmRzLWNoYW5nZVxuICAgICAqIHR3aWNlXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlJlY3R9IGJvdW5kcyBUaGUgYm91bmRzIHRvIGZpdCB0aGUgaW1hZ2UgaW50by5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUGxhY2VtZW50fSBbYW5jaG9yPU9wZW5TZWFkcmFnb24uUGxhY2VtZW50LkNFTlRFUl1cbiAgICAgKiBIb3cgdG8gYW5jaG9yIHRoZSBpbWFnZSBpbiB0aGUgYm91bmRzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSBXaGV0aGVyIHRvIGFuaW1hdGUgdG8gdGhlIG5ldyBzaXplXG4gICAgICogb3Igc25hcCBpbW1lZGlhdGVseS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlLmV2ZW50OmJvdW5kcy1jaGFuZ2VcbiAgICAgKi9cbiAgICBmaXRCb3VuZHM6IGZ1bmN0aW9uKGJvdW5kcywgYW5jaG9yLCBpbW1lZGlhdGVseSkge1xuICAgICAgICBhbmNob3IgPSBhbmNob3IgfHwgJC5QbGFjZW1lbnQuQ0VOVEVSO1xuICAgICAgICB2YXIgYW5jaG9yUHJvcGVydGllcyA9ICQuUGxhY2VtZW50LnByb3BlcnRpZXNbYW5jaG9yXTtcbiAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gdGhpcy5jb250ZW50QXNwZWN0WDtcbiAgICAgICAgdmFyIHhPZmZzZXQgPSAwO1xuICAgICAgICB2YXIgeU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBkaXNwbGF5ZWRXaWR0aFJhdGlvID0gMTtcbiAgICAgICAgdmFyIGRpc3BsYXllZEhlaWdodFJhdGlvID0gMTtcbiAgICAgICAgaWYgKHRoaXMuX2NsaXApIHtcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvID0gdGhpcy5fY2xpcC5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICAgICAgZGlzcGxheWVkV2lkdGhSYXRpbyA9IHRoaXMuX2NsaXAud2lkdGggLyB0aGlzLnNvdXJjZS5kaW1lbnNpb25zLng7XG4gICAgICAgICAgICBkaXNwbGF5ZWRIZWlnaHRSYXRpbyA9IHRoaXMuX2NsaXAuaGVpZ2h0IC8gdGhpcy5zb3VyY2UuZGltZW5zaW9ucy55O1xuICAgICAgICAgICAgaWYgKGJvdW5kcy5nZXRBc3BlY3RSYXRpbygpID4gYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgICAgICB4T2Zmc2V0ID0gdGhpcy5fY2xpcC54IC8gdGhpcy5fY2xpcC5oZWlnaHQgKiBib3VuZHMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHlPZmZzZXQgPSB0aGlzLl9jbGlwLnkgLyB0aGlzLl9jbGlwLmhlaWdodCAqIGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhPZmZzZXQgPSB0aGlzLl9jbGlwLnggLyB0aGlzLl9jbGlwLndpZHRoICogYm91bmRzLndpZHRoO1xuICAgICAgICAgICAgICAgIHlPZmZzZXQgPSB0aGlzLl9jbGlwLnkgLyB0aGlzLl9jbGlwLndpZHRoICogYm91bmRzLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvdW5kcy5nZXRBc3BlY3RSYXRpbygpID4gYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgaGF2ZSBtYXJnaW5zIG9uIHRoZSBYIGF4aXNcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBib3VuZHMuaGVpZ2h0IC8gZGlzcGxheWVkSGVpZ2h0UmF0aW87XG4gICAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IDA7XG4gICAgICAgICAgICBpZiAoYW5jaG9yUHJvcGVydGllcy5pc0hvcml6b250YWxseUNlbnRlcmVkKSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IChib3VuZHMud2lkdGggLSBib3VuZHMuaGVpZ2h0ICogYXNwZWN0UmF0aW8pIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5jaG9yUHJvcGVydGllcy5pc1JpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IGJvdW5kcy53aWR0aCAtIGJvdW5kcy5oZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgbmV3ICQuUG9pbnQoYm91bmRzLnggLSB4T2Zmc2V0ICsgbWFyZ2luTGVmdCwgYm91bmRzLnkgLSB5T2Zmc2V0KSxcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSk7XG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodChoZWlnaHQsIGltbWVkaWF0ZWx5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgaGF2ZSBtYXJnaW5zIG9uIHRoZSBZIGF4aXNcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGJvdW5kcy53aWR0aCAvIGRpc3BsYXllZFdpZHRoUmF0aW87XG4gICAgICAgICAgICB2YXIgbWFyZ2luVG9wID0gMDtcbiAgICAgICAgICAgIGlmIChhbmNob3JQcm9wZXJ0aWVzLmlzVmVydGljYWxseUNlbnRlcmVkKSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wID0gKGJvdW5kcy5oZWlnaHQgLSBib3VuZHMud2lkdGggLyBhc3BlY3RSYXRpbykgLyAyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbmNob3JQcm9wZXJ0aWVzLmlzQm90dG9tKSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wID0gYm91bmRzLmhlaWdodCAtIGJvdW5kcy53aWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbihcbiAgICAgICAgICAgICAgICBuZXcgJC5Qb2ludChib3VuZHMueCAtIHhPZmZzZXQsIGJvdW5kcy55IC0geU9mZnNldCArIG1hcmdpblRvcCksXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkpO1xuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh3aWR0aCwgaW1tZWRpYXRlbHkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlJlY3R8bnVsbH0gVGhlIFRpbGVkSW1hZ2UncyBjdXJyZW50IGNsaXAgcmVjdGFuZ2xlLFxuICAgICAqIGluIGltYWdlIHBpeGVscywgb3IgbnVsbCBpZiBub25lLlxuICAgICAqL1xuICAgIGdldENsaXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xpcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXAuY2xvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uUmVjdHxudWxsfSBuZXdDbGlwIC0gQW4gYXJlYSwgaW4gaW1hZ2UgcGl4ZWxzLCB0byBjbGlwIHRvXG4gICAgICogKHBvcnRpb25zIG9mIHRoZSBpbWFnZSBvdXRzaWRlIG9mIHRoaXMgYXJlYSB3aWxsIG5vdCBiZSB2aXNpYmxlKS4gT25seSB3b3JrcyBvblxuICAgICAqIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0aGUgSFRNTDUgY2FudmFzLlxuICAgICAqL1xuICAgIHNldENsaXA6IGZ1bmN0aW9uKG5ld0NsaXApIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCghbmV3Q2xpcCB8fCBuZXdDbGlwIGluc3RhbmNlb2YgJC5SZWN0LFxuICAgICAgICAgICAgXCJbVGlsZWRJbWFnZS5zZXRDbGlwXSBuZXdDbGlwIG11c3QgYmUgYW4gT3BlblNlYWRyYWdvbi5SZWN0IG9yIG51bGxcIik7XG5cbiAgICAgICAgaWYgKG5ld0NsaXAgaW5zdGFuY2VvZiAkLlJlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsaXAgPSBuZXdDbGlwLmNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jbGlwID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX25lZWRzRHJhdyA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBUaWxlZEltYWdlJ3MgY3VycmVudCBvcGFjaXR5LlxuICAgICAqL1xuICAgIGdldE9wYWNpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGFjaXR5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3BhY2l0eSBPcGFjaXR5IHRoZSB0aWxlZCBpbWFnZSBzaG91bGQgYmUgZHJhd24gYXQuXG4gICAgICovXG4gICAgc2V0T3BhY2l0eTogZnVuY3Rpb24ob3BhY2l0eSkge1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSBvcGFjaXR5O1xuICAgICAgICB0aGlzLl9uZWVkc0RyYXcgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVGlsZWRJbWFnZSdzIGN1cnJlbnQgY29tcG9zaXRlT3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGdldENvbXBvc2l0ZU9wZXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvc2l0ZU9wZXJhdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbXBvc2l0ZU9wZXJhdGlvbiB0aGUgdGlsZWQgaW1hZ2Ugc2hvdWxkIGJlIGRyYXduIHdpdGggdGhpcyBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24uXG4gICAgICovXG4gICAgc2V0Q29tcG9zaXRlT3BlcmF0aW9uOiBmdW5jdGlvbihjb21wb3NpdGVPcGVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5jb21wb3NpdGVPcGVyYXRpb24gPSBjb21wb3NpdGVPcGVyYXRpb247XG4gICAgICAgIHRoaXMuX25lZWRzRHJhdyA9IHRydWU7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfc2V0U2NhbGU6IGZ1bmN0aW9uKHNjYWxlLCBpbW1lZGlhdGVseSkge1xuICAgICAgICB2YXIgc2FtZVRhcmdldCA9ICh0aGlzLl9zY2FsZVNwcmluZy50YXJnZXQudmFsdWUgPT09IHNjYWxlKTtcbiAgICAgICAgaWYgKGltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICBpZiAoc2FtZVRhcmdldCAmJiB0aGlzLl9zY2FsZVNwcmluZy5jdXJyZW50LnZhbHVlID09PSBzY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc2NhbGVTcHJpbmcucmVzZXRUbyhzY2FsZSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVGb3JTY2FsZSgpO1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNEcmF3ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzYW1lVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9zY2FsZVNwcmluZy5zcHJpbmdUbyhzY2FsZSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVGb3JTY2FsZSgpO1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNEcmF3ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2FtZVRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fcmFpc2VCb3VuZHNDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX3VwZGF0ZUZvclNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fd29ybGRXaWR0aFRhcmdldCA9IHRoaXMuX3NjYWxlU3ByaW5nLnRhcmdldC52YWx1ZTtcbiAgICAgICAgdGhpcy5fd29ybGRIZWlnaHRUYXJnZXQgPSB0aGlzLm5vcm1IZWlnaHQgKiB0aGlzLl9zY2FsZVNwcmluZy50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuX3dvcmxkV2lkdGhDdXJyZW50ID0gdGhpcy5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICAgICAgdGhpcy5fd29ybGRIZWlnaHRDdXJyZW50ID0gdGhpcy5ub3JtSGVpZ2h0ICogdGhpcy5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIF9yYWlzZUJvdW5kc0NoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgVGlsZWRJbWFnZSdzIGJvdW5kcyBhcmUgY2hhbmdlZC5cbiAgICAgICAgICogTm90ZSB0aGF0IHRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIG9ubHkgd2hlbiB0aGUgYW5pbWF0aW9uIHRhcmdldCBpcyBjaGFuZ2VkO1xuICAgICAgICAgKiBub3QgZm9yIGV2ZXJ5IGZyYW1lIG9mIGFuaW1hdGlvbi5cbiAgICAgICAgICogQGV2ZW50IGJvdW5kcy1jaGFuZ2VcbiAgICAgICAgICogQG1lbWJlck9mIE9wZW5TZWFkcmFnb24uVGlsZWRJbWFnZVxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uV29ybGR9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFRpbGVkSW1hZ2Ugd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCdib3VuZHMtY2hhbmdlJyk7XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfaXNCb3R0b21JdGVtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld2VyLndvcmxkLmdldEl0ZW1BdCgwKSA9PT0gdGhpcztcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGlubmVyXG4gKiBQcmV0dHkgbXVjaCBldmVyeSBvdGhlciBsaW5lIGluIHRoaXMgbmVlZHMgdG8gYmUgZG9jdW1lbnRlZCBzbyBpdCdzIGNsZWFyXG4gKiBob3cgZWFjaCBwaWVjZSBvZiB0aGlzIHJvdXRpbmUgY29udHJpYnV0ZXMgdG8gdGhlIGRyYXdpbmcgcHJvY2Vzcy4gIFRoYXQnc1xuICogd2h5IHRoZXJlIGFyZSBzbyBtYW55IFRPRE8ncyBpbnNpZGUgdGhpcyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlVmlld3BvcnQoIHRpbGVkSW1hZ2UgKSB7XG5cbiAgICB0aWxlZEltYWdlLl9uZWVkc0RyYXcgPSBmYWxzZTtcblxuICAgIHZhciB0aWxlLFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgYmVzdCAgICAgICAgICAgID0gbnVsbCxcbiAgICAgICAgaGF2ZURyYXduICAgICAgID0gZmFsc2UsXG4gICAgICAgIGN1cnJlbnRUaW1lICAgICA9ICQubm93KCksXG4gICAgICAgIHZpZXdwb3J0Qm91bmRzICA9IHRpbGVkSW1hZ2Uudmlld3BvcnQuZ2V0Qm91bmRzV2l0aE1hcmdpbnMoIHRydWUgKSxcbiAgICAgICAgemVyb1JhdGlvQyAgICAgID0gdGlsZWRJbWFnZS52aWV3cG9ydC5kZWx0YVBpeGVsc0Zyb21Qb2ludHNOb1JvdGF0ZShcbiAgICAgICAgICAgIHRpbGVkSW1hZ2Uuc291cmNlLmdldFBpeGVsUmF0aW8oIDAgKSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKS54ICogdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZSxcbiAgICAgICAgbG93ZXN0TGV2ZWwgICAgID0gTWF0aC5tYXgoXG4gICAgICAgICAgICB0aWxlZEltYWdlLnNvdXJjZS5taW5MZXZlbCxcbiAgICAgICAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgTWF0aC5sb2coIHRpbGVkSW1hZ2UubWluWm9vbUltYWdlUmF0aW8gKSAvXG4gICAgICAgICAgICAgICAgTWF0aC5sb2coIDIgKVxuICAgICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBoaWdoZXN0TGV2ZWwgICAgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIE1hdGguYWJzKHRpbGVkSW1hZ2Uuc291cmNlLm1heExldmVsKSxcbiAgICAgICAgICAgIE1hdGguYWJzKE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgTWF0aC5sb2coIHplcm9SYXRpb0MgLyB0aWxlZEltYWdlLm1pblBpeGVsUmF0aW8gKSAvXG4gICAgICAgICAgICAgICAgTWF0aC5sb2coIDIgKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgKSxcbiAgICAgICAgcmVuZGVyUGl4ZWxSYXRpb0MsXG4gICAgICAgIHJlbmRlclBpeGVsUmF0aW9ULFxuICAgICAgICB6ZXJvUmF0aW9ULFxuICAgICAgICBvcHRpbWFsUmF0aW8sXG4gICAgICAgIGxldmVsT3BhY2l0eSxcbiAgICAgICAgbGV2ZWxWaXNpYmlsaXR5O1xuXG4gICAgLy8gUmVzZXQgdGlsZSdzIGludGVybmFsIGRyYXduIHN0YXRlXG4gICAgd2hpbGUgKHRpbGVkSW1hZ2UubGFzdERyYXduLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGlsZSA9IHRpbGVkSW1hZ2UubGFzdERyYXduLnBvcCgpO1xuICAgICAgICB0aWxlLmJlaW5nRHJhd24gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRpbGVkSW1hZ2Uud3JhcEhvcml6b250YWwgJiYgIXRpbGVkSW1hZ2Uud3JhcFZlcnRpY2FsKSB7XG4gICAgICAgIHZhciB0aWxlZEltYWdlQm91bmRzID0gdGlsZWRJbWFnZS5nZXRDbGlwcGVkQm91bmRzKHRydWUpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gdmlld3BvcnRCb3VuZHMuaW50ZXJzZWN0aW9uKHRpbGVkSW1hZ2VCb3VuZHMpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmlld3BvcnRCb3VuZHMgPSBpbnRlcnNlY3Rpb247XG4gICAgfVxuICAgIHZpZXdwb3J0Qm91bmRzID0gdmlld3BvcnRCb3VuZHMuZ2V0Qm91bmRpbmdCb3goKTtcbiAgICB2aWV3cG9ydEJvdW5kcy54IC09IHRpbGVkSW1hZ2UuX3hTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICB2aWV3cG9ydEJvdW5kcy55IC09IHRpbGVkSW1hZ2UuX3lTcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgIHZhciB2aWV3cG9ydFRMID0gdmlld3BvcnRCb3VuZHMuZ2V0VG9wTGVmdCgpO1xuICAgIHZhciB2aWV3cG9ydEJSID0gdmlld3BvcnRCb3VuZHMuZ2V0Qm90dG9tUmlnaHQoKTtcblxuICAgIC8vRG9uJ3QgZHJhdyBpZiBjb21wbGV0ZWx5IG91dHNpZGUgb2YgdGhlIHZpZXdwb3J0XG4gICAgaWYgICggIXRpbGVkSW1hZ2Uud3JhcEhvcml6b250YWwgJiYgKHZpZXdwb3J0QlIueCA8IDAgfHwgdmlld3BvcnRUTC54ID4gdGlsZWRJbWFnZS5fd29ybGRXaWR0aEN1cnJlbnQgKSApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICggIXRpbGVkSW1hZ2Uud3JhcFZlcnRpY2FsICYmICggdmlld3BvcnRCUi55IDwgMCB8fCB2aWV3cG9ydFRMLnkgPiB0aWxlZEltYWdlLl93b3JsZEhlaWdodEN1cnJlbnQgKSApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSB2aWV3cG9ydCByZWN0IC8gYm91bmRzXG4gICAgaWYgKCAhdGlsZWRJbWFnZS53cmFwSG9yaXpvbnRhbCApIHtcbiAgICAgICAgdmlld3BvcnRUTC54ID0gTWF0aC5tYXgoIHZpZXdwb3J0VEwueCwgMCApO1xuICAgICAgICB2aWV3cG9ydEJSLnggPSBNYXRoLm1pbiggdmlld3BvcnRCUi54LCB0aWxlZEltYWdlLl93b3JsZFdpZHRoQ3VycmVudCApO1xuICAgIH1cblxuICAgIGlmICggIXRpbGVkSW1hZ2Uud3JhcFZlcnRpY2FsICkge1xuICAgICAgICB2aWV3cG9ydFRMLnkgPSBNYXRoLm1heCggdmlld3BvcnRUTC55LCAwICk7XG4gICAgICAgIHZpZXdwb3J0QlIueSA9IE1hdGgubWluKCB2aWV3cG9ydEJSLnksIHRpbGVkSW1hZ2UuX3dvcmxkSGVpZ2h0Q3VycmVudCApO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0aW9ucyBmb3IgdGhlIGludGVydmFsIG9mIGxldmVscyB0byBkcmF3XG4gICAgLy8gKGFib3ZlIGluIGluaXRpYWwgdmFyIHN0YXRlbWVudClcbiAgICAvLyBjYW4gcmV0dXJuIGludmFsaWQgaW50ZXJ2YWxzOyBmaXggdGhhdCBoZXJlIGlmIG5lY2Vzc2FyeVxuICAgIGxvd2VzdExldmVsID0gTWF0aC5taW4oIGxvd2VzdExldmVsLCBoaWdoZXN0TGV2ZWwgKTtcblxuICAgIC8vIFVwZGF0ZSBhbnkgbGV2ZWwgdGhhdCB3aWxsIGJlIGRyYXduXG4gICAgdmFyIGRyYXdMZXZlbDsgLy8gRklYTUU6IGRyYXdMZXZlbCBzaG91bGQgaGF2ZSBhIG1vcmUgZXhwbGFuYXRvcnkgbmFtZVxuICAgIGZvciAoIGxldmVsID0gaGlnaGVzdExldmVsOyBsZXZlbCA+PSBsb3dlc3RMZXZlbDsgbGV2ZWwtLSApIHtcbiAgICAgICAgZHJhd0xldmVsID0gZmFsc2U7XG5cbiAgICAgICAgLy9Bdm9pZCBjYWxjdWxhdGlvbnMgZm9yIGRyYXcgaWYgd2UgaGF2ZSBhbHJlYWR5IGRyYXduIHRoaXNcbiAgICAgICAgcmVuZGVyUGl4ZWxSYXRpb0MgPSB0aWxlZEltYWdlLnZpZXdwb3J0LmRlbHRhUGl4ZWxzRnJvbVBvaW50c05vUm90YXRlKFxuICAgICAgICAgICAgdGlsZWRJbWFnZS5zb3VyY2UuZ2V0UGl4ZWxSYXRpbyggbGV2ZWwgKSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKS54ICogdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgICAgICBpZiAoICggIWhhdmVEcmF3biAmJiByZW5kZXJQaXhlbFJhdGlvQyA+PSB0aWxlZEltYWdlLm1pblBpeGVsUmF0aW8gKSB8fFxuICAgICAgICAgICAgICggbGV2ZWwgPT0gbG93ZXN0TGV2ZWwgKSApIHtcbiAgICAgICAgICAgIGRyYXdMZXZlbCA9IHRydWU7XG4gICAgICAgICAgICBoYXZlRHJhd24gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCAhaGF2ZURyYXduICkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL1BlcmZvcm0gY2FsY3VsYXRpb25zIGZvciBkcmF3IGlmIHdlIGhhdmVuJ3QgZHJhd24gdGhpc1xuICAgICAgICByZW5kZXJQaXhlbFJhdGlvVCA9IHRpbGVkSW1hZ2Uudmlld3BvcnQuZGVsdGFQaXhlbHNGcm9tUG9pbnRzTm9Sb3RhdGUoXG4gICAgICAgICAgICB0aWxlZEltYWdlLnNvdXJjZS5nZXRQaXhlbFJhdGlvKCBsZXZlbCApLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKS54ICogdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgICAgICB6ZXJvUmF0aW9UICAgICAgPSB0aWxlZEltYWdlLnZpZXdwb3J0LmRlbHRhUGl4ZWxzRnJvbVBvaW50c05vUm90YXRlKFxuICAgICAgICAgICAgdGlsZWRJbWFnZS5zb3VyY2UuZ2V0UGl4ZWxSYXRpbyhcbiAgICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgdGlsZWRJbWFnZS5zb3VyY2UuZ2V0Q2xvc2VzdExldmVsKCB0aWxlZEltYWdlLnZpZXdwb3J0LmNvbnRhaW5lclNpemUgKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKS54ICogdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcblxuICAgICAgICBvcHRpbWFsUmF0aW8gICAgPSB0aWxlZEltYWdlLmltbWVkaWF0ZVJlbmRlciA/XG4gICAgICAgICAgICAxIDpcbiAgICAgICAgICAgIHplcm9SYXRpb1Q7XG5cbiAgICAgICAgbGV2ZWxPcGFjaXR5ICAgID0gTWF0aC5taW4oIDEsICggcmVuZGVyUGl4ZWxSYXRpb0MgLSAwLjUgKSAvIDAuNSApO1xuXG4gICAgICAgIGxldmVsVmlzaWJpbGl0eSA9IG9wdGltYWxSYXRpbyAvIE1hdGguYWJzKFxuICAgICAgICAgICAgb3B0aW1hbFJhdGlvIC0gcmVuZGVyUGl4ZWxSYXRpb1RcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGxldmVsIGFuZCBrZWVwIHRyYWNrIG9mICdiZXN0JyB0aWxlIHRvIGxvYWRcbiAgICAgICAgYmVzdCA9IHVwZGF0ZUxldmVsKFxuICAgICAgICAgICAgdGlsZWRJbWFnZSxcbiAgICAgICAgICAgIGhhdmVEcmF3bixcbiAgICAgICAgICAgIGRyYXdMZXZlbCxcbiAgICAgICAgICAgIGxldmVsLFxuICAgICAgICAgICAgbGV2ZWxPcGFjaXR5LFxuICAgICAgICAgICAgbGV2ZWxWaXNpYmlsaXR5LFxuICAgICAgICAgICAgdmlld3BvcnRUTCxcbiAgICAgICAgICAgIHZpZXdwb3J0QlIsXG4gICAgICAgICAgICBjdXJyZW50VGltZSxcbiAgICAgICAgICAgIGJlc3RcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBTdG9wIHRoZSBsb29wIGlmIGxvd2VyLXJlcyB0aWxlcyB3b3VsZCBhbGwgYmUgY292ZXJlZCBieVxuICAgICAgICAvLyBhbHJlYWR5IGRyYXduIHRpbGVzXG4gICAgICAgIGlmICggIHByb3ZpZGVzQ292ZXJhZ2UoIHRpbGVkSW1hZ2UuY292ZXJhZ2UsIGxldmVsICkgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIGFjdHVhbCBkcmF3aW5nXG4gICAgZHJhd1RpbGVzKCB0aWxlZEltYWdlLCB0aWxlZEltYWdlLmxhc3REcmF3biApO1xuXG4gICAgLy8gTG9hZCB0aGUgbmV3ICdiZXN0JyB0aWxlXG4gICAgaWYgKGJlc3QgJiYgIWJlc3QuY29udGV4dDJEKSB7XG4gICAgICAgIGxvYWRUaWxlKCB0aWxlZEltYWdlLCBiZXN0LCBjdXJyZW50VGltZSApO1xuICAgIH1cblxufVxuXG5cbmZ1bmN0aW9uIHVwZGF0ZUxldmVsKCB0aWxlZEltYWdlLCBoYXZlRHJhd24sIGRyYXdMZXZlbCwgbGV2ZWwsIGxldmVsT3BhY2l0eSwgbGV2ZWxWaXNpYmlsaXR5LCB2aWV3cG9ydFRMLCB2aWV3cG9ydEJSLCBjdXJyZW50VGltZSwgYmVzdCApe1xuXG4gICAgdmFyIHgsIHksXG4gICAgICAgIHRpbGVUTCxcbiAgICAgICAgdGlsZUJSLFxuICAgICAgICBudW1iZXJPZlRpbGVzLFxuICAgICAgICB2aWV3cG9ydENlbnRlciAgPSB0aWxlZEltYWdlLnZpZXdwb3J0LnBpeGVsRnJvbVBvaW50KCB0aWxlZEltYWdlLnZpZXdwb3J0LmdldENlbnRlcigpICk7XG5cblxuICAgIGlmKCB0aWxlZEltYWdlLnZpZXdlciApe1xuICAgICAgICAvKipcbiAgICAgICAgICogPGVtPi0gTmVlZHMgZG9jdW1lbnRhdGlvbiAtPC9lbT5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IHVwZGF0ZS1sZXZlbFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5UaWxlZEltYWdlfSB0aWxlZEltYWdlIC0gV2hpY2ggVGlsZWRJbWFnZSBpcyBiZWluZyBkcmF3bi5cbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IGhhdmVkcmF3blxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gbGV2ZWxcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IG9wYWNpdHlcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IHZpc2liaWxpdHlcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IHRvcGxlZnRcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IGJvdHRvbXJpZ2h0XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjdXJyZW50dGltZVxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gYmVzdFxuICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aWxlZEltYWdlLnZpZXdlci5yYWlzZUV2ZW50KCAndXBkYXRlLWxldmVsJywge1xuICAgICAgICAgICAgdGlsZWRJbWFnZTogdGlsZWRJbWFnZSxcbiAgICAgICAgICAgIGhhdmVkcmF3bjogaGF2ZURyYXduLFxuICAgICAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgb3BhY2l0eTogbGV2ZWxPcGFjaXR5LFxuICAgICAgICAgICAgdmlzaWJpbGl0eTogbGV2ZWxWaXNpYmlsaXR5LFxuICAgICAgICAgICAgdG9wbGVmdDogdmlld3BvcnRUTCxcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0OiB2aWV3cG9ydEJSLFxuICAgICAgICAgICAgY3VycmVudHRpbWU6IGN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgYmVzdDogYmVzdFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL09LLCBhIG5ldyBkcmF3aW5nIHNvIGRvIHlvdXIgY2FsY3VsYXRpb25zXG4gICAgdGlsZVRMICAgID0gdGlsZWRJbWFnZS5zb3VyY2UuZ2V0VGlsZUF0UG9pbnQoIGxldmVsLCB2aWV3cG9ydFRMLmRpdmlkZSggdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZSApKTtcbiAgICB0aWxlQlIgICAgPSB0aWxlZEltYWdlLnNvdXJjZS5nZXRUaWxlQXRQb2ludCggbGV2ZWwsIHZpZXdwb3J0QlIuZGl2aWRlKCB0aWxlZEltYWdlLl9zY2FsZVNwcmluZy5jdXJyZW50LnZhbHVlICkpO1xuICAgIG51bWJlck9mVGlsZXMgID0gdGlsZWRJbWFnZS5zb3VyY2UuZ2V0TnVtVGlsZXMoIGxldmVsICk7XG5cbiAgICByZXNldENvdmVyYWdlKCB0aWxlZEltYWdlLmNvdmVyYWdlLCBsZXZlbCApO1xuXG4gICAgaWYgKCAhdGlsZWRJbWFnZS53cmFwSG9yaXpvbnRhbCApIHtcbiAgICAgICAgdGlsZUJSLnggPSBNYXRoLm1pbiggdGlsZUJSLngsIG51bWJlck9mVGlsZXMueCAtIDEgKTtcbiAgICB9XG4gICAgaWYgKCAhdGlsZWRJbWFnZS53cmFwVmVydGljYWwgKSB7XG4gICAgICAgIHRpbGVCUi55ID0gTWF0aC5taW4oIHRpbGVCUi55LCBudW1iZXJPZlRpbGVzLnkgLSAxICk7XG4gICAgfVxuXG4gICAgZm9yICggeCA9IHRpbGVUTC54OyB4IDw9IHRpbGVCUi54OyB4KysgKSB7XG4gICAgICAgIGZvciAoIHkgPSB0aWxlVEwueTsgeSA8PSB0aWxlQlIueTsgeSsrICkge1xuXG4gICAgICAgICAgICBiZXN0ID0gdXBkYXRlVGlsZShcbiAgICAgICAgICAgICAgICB0aWxlZEltYWdlLFxuICAgICAgICAgICAgICAgIGRyYXdMZXZlbCxcbiAgICAgICAgICAgICAgICBoYXZlRHJhd24sXG4gICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgICAgICBsZXZlbE9wYWNpdHksXG4gICAgICAgICAgICAgICAgbGV2ZWxWaXNpYmlsaXR5LFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0Q2VudGVyLFxuICAgICAgICAgICAgICAgIG51bWJlck9mVGlsZXMsXG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUsXG4gICAgICAgICAgICAgICAgYmVzdFxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlc3Q7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRpbGUoIHRpbGVkSW1hZ2UsIGRyYXdMZXZlbCwgaGF2ZURyYXduLCB4LCB5LCBsZXZlbCwgbGV2ZWxPcGFjaXR5LCBsZXZlbFZpc2liaWxpdHksIHZpZXdwb3J0Q2VudGVyLCBudW1iZXJPZlRpbGVzLCBjdXJyZW50VGltZSwgYmVzdCl7XG5cbiAgICB2YXIgdGlsZSA9IGdldFRpbGUoXG4gICAgICAgICAgICB4LCB5LFxuICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgICB0aWxlZEltYWdlLnNvdXJjZSxcbiAgICAgICAgICAgIHRpbGVkSW1hZ2UudGlsZXNNYXRyaXgsXG4gICAgICAgICAgICBjdXJyZW50VGltZSxcbiAgICAgICAgICAgIG51bWJlck9mVGlsZXMsXG4gICAgICAgICAgICB0aWxlZEltYWdlLl93b3JsZFdpZHRoQ3VycmVudCxcbiAgICAgICAgICAgIHRpbGVkSW1hZ2UuX3dvcmxkSGVpZ2h0Q3VycmVudFxuICAgICAgICApLFxuICAgICAgICBkcmF3VGlsZSA9IGRyYXdMZXZlbDtcblxuICAgIGlmKCB0aWxlZEltYWdlLnZpZXdlciApe1xuICAgICAgICAvKipcbiAgICAgICAgICogPGVtPi0gTmVlZHMgZG9jdW1lbnRhdGlvbiAtPC9lbT5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IHVwZGF0ZS10aWxlXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBWaWV3ZXIgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2V9IHRpbGVkSW1hZ2UgLSBXaGljaCBUaWxlZEltYWdlIGlzIGJlaW5nIGRyYXduLlxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZX0gdGlsZVxuICAgICAgICAgKiBAcHJvcGVydHkgez9PYmplY3R9IHVzZXJEYXRhIC0gQXJiaXRyYXJ5IHN1YnNjcmliZXItZGVmaW5lZCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aWxlZEltYWdlLnZpZXdlci5yYWlzZUV2ZW50KCAndXBkYXRlLXRpbGUnLCB7XG4gICAgICAgICAgICB0aWxlZEltYWdlOiB0aWxlZEltYWdlLFxuICAgICAgICAgICAgdGlsZTogdGlsZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRDb3ZlcmFnZSggdGlsZWRJbWFnZS5jb3ZlcmFnZSwgbGV2ZWwsIHgsIHksIGZhbHNlICk7XG5cbiAgICBpZiAoICF0aWxlLmV4aXN0cyApIHtcbiAgICAgICAgcmV0dXJuIGJlc3Q7XG4gICAgfVxuXG4gICAgaWYgKCBoYXZlRHJhd24gJiYgIWRyYXdUaWxlICkge1xuICAgICAgICBpZiAoIGlzQ292ZXJlZCggdGlsZWRJbWFnZS5jb3ZlcmFnZSwgbGV2ZWwsIHgsIHkgKSApIHtcbiAgICAgICAgICAgIHNldENvdmVyYWdlKCB0aWxlZEltYWdlLmNvdmVyYWdlLCBsZXZlbCwgeCwgeSwgdHJ1ZSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1RpbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCAhZHJhd1RpbGUgKSB7XG4gICAgICAgIHJldHVybiBiZXN0O1xuICAgIH1cblxuICAgIHBvc2l0aW9uVGlsZShcbiAgICAgICAgdGlsZSxcbiAgICAgICAgdGlsZWRJbWFnZS5zb3VyY2UudGlsZU92ZXJsYXAsXG4gICAgICAgIHRpbGVkSW1hZ2Uudmlld3BvcnQsXG4gICAgICAgIHZpZXdwb3J0Q2VudGVyLFxuICAgICAgICBsZXZlbFZpc2liaWxpdHksXG4gICAgICAgIHRpbGVkSW1hZ2VcbiAgICApO1xuXG4gICAgaWYgKCF0aWxlLmxvYWRlZCkge1xuICAgICAgICBpZiAodGlsZS5jb250ZXh0MkQpIHtcbiAgICAgICAgICAgIHNldFRpbGVMb2FkZWQodGlsZWRJbWFnZSwgdGlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VSZWNvcmQgPSB0aWxlZEltYWdlLl90aWxlQ2FjaGUuZ2V0SW1hZ2VSZWNvcmQodGlsZS51cmwpO1xuICAgICAgICAgICAgaWYgKGltYWdlUmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gaW1hZ2VSZWNvcmQuZ2V0SW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBzZXRUaWxlTG9hZGVkKHRpbGVkSW1hZ2UsIHRpbGUsIGltYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggdGlsZS5sb2FkZWQgKSB7XG4gICAgICAgIHZhciBuZWVkc0RyYXcgPSBibGVuZFRpbGUoXG4gICAgICAgICAgICB0aWxlZEltYWdlLFxuICAgICAgICAgICAgdGlsZSxcbiAgICAgICAgICAgIHgsIHksXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgIGxldmVsT3BhY2l0eSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCBuZWVkc0RyYXcgKSB7XG4gICAgICAgICAgICB0aWxlZEltYWdlLl9uZWVkc0RyYXcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICggdGlsZS5sb2FkaW5nICkge1xuICAgICAgICAvLyB0aGUgdGlsZSBpcyBhbHJlYWR5IGluIHRoZSBkb3dubG9hZCBxdWV1ZVxuICAgICAgICAvLyB0aGFua3Mgam9zaDEwOTMgZm9yIGZpbmFsbHkgdHJhbnNsYXRpbmcgdGhpcyB0eXBvXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmVzdCA9IGNvbXBhcmVUaWxlcyggYmVzdCwgdGlsZSApO1xuICAgIH1cblxuICAgIHJldHVybiBiZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRUaWxlKCB4LCB5LCBsZXZlbCwgdGlsZVNvdXJjZSwgdGlsZXNNYXRyaXgsIHRpbWUsIG51bVRpbGVzLCB3b3JsZFdpZHRoLCB3b3JsZEhlaWdodCApIHtcbiAgICB2YXIgeE1vZCxcbiAgICAgICAgeU1vZCxcbiAgICAgICAgYm91bmRzLFxuICAgICAgICBleGlzdHMsXG4gICAgICAgIHVybCxcbiAgICAgICAgY29udGV4dDJELFxuICAgICAgICB0aWxlO1xuXG4gICAgaWYgKCAhdGlsZXNNYXRyaXhbIGxldmVsIF0gKSB7XG4gICAgICAgIHRpbGVzTWF0cml4WyBsZXZlbCBdID0ge307XG4gICAgfVxuICAgIGlmICggIXRpbGVzTWF0cml4WyBsZXZlbCBdWyB4IF0gKSB7XG4gICAgICAgIHRpbGVzTWF0cml4WyBsZXZlbCBdWyB4IF0gPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoICF0aWxlc01hdHJpeFsgbGV2ZWwgXVsgeCBdWyB5IF0gKSB7XG4gICAgICAgIHhNb2QgICAgPSAoIG51bVRpbGVzLnggKyAoIHggJSBudW1UaWxlcy54ICkgKSAlIG51bVRpbGVzLng7XG4gICAgICAgIHlNb2QgICAgPSAoIG51bVRpbGVzLnkgKyAoIHkgJSBudW1UaWxlcy55ICkgKSAlIG51bVRpbGVzLnk7XG4gICAgICAgIGJvdW5kcyAgPSB0aWxlU291cmNlLmdldFRpbGVCb3VuZHMoIGxldmVsLCB4TW9kLCB5TW9kICk7XG4gICAgICAgIGV4aXN0cyAgPSB0aWxlU291cmNlLnRpbGVFeGlzdHMoIGxldmVsLCB4TW9kLCB5TW9kICk7XG4gICAgICAgIHVybCAgICAgPSB0aWxlU291cmNlLmdldFRpbGVVcmwoIGxldmVsLCB4TW9kLCB5TW9kICk7XG4gICAgICAgIGNvbnRleHQyRCA9IHRpbGVTb3VyY2UuZ2V0Q29udGV4dDJEID9cbiAgICAgICAgICAgIHRpbGVTb3VyY2UuZ2V0Q29udGV4dDJEKGxldmVsLCB4TW9kLCB5TW9kKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBib3VuZHMueCArPSAoIHggLSB4TW9kICkgLyBudW1UaWxlcy54O1xuICAgICAgICBib3VuZHMueSArPSAod29ybGRIZWlnaHQgLyB3b3JsZFdpZHRoKSAqICgoIHkgLSB5TW9kICkgLyBudW1UaWxlcy55KTtcblxuICAgICAgICB0aWxlc01hdHJpeFsgbGV2ZWwgXVsgeCBdWyB5IF0gPSBuZXcgJC5UaWxlKFxuICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICAgIGV4aXN0cyxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGNvbnRleHQyRFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRpbGUgPSB0aWxlc01hdHJpeFsgbGV2ZWwgXVsgeCBdWyB5IF07XG4gICAgdGlsZS5sYXN0VG91Y2hUaW1lID0gdGltZTtcblxuICAgIHJldHVybiB0aWxlO1xufVxuXG5mdW5jdGlvbiBsb2FkVGlsZSggdGlsZWRJbWFnZSwgdGlsZSwgdGltZSApIHtcbiAgICB0aWxlLmxvYWRpbmcgPSB0cnVlO1xuICAgIHRpbGVkSW1hZ2UuX2ltYWdlTG9hZGVyLmFkZEpvYih7XG4gICAgICAgIHNyYzogdGlsZS51cmwsXG4gICAgICAgIGNyb3NzT3JpZ2luUG9saWN5OiB0aWxlZEltYWdlLmNyb3NzT3JpZ2luUG9saWN5LFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oIGltYWdlLCBlcnJvck1zZyApe1xuICAgICAgICAgICAgb25UaWxlTG9hZCggdGlsZWRJbWFnZSwgdGlsZSwgdGltZSwgaW1hZ2UsIGVycm9yTXNnICk7XG4gICAgICAgIH0sXG4gICAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRpbGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uVGlsZUxvYWQoIHRpbGVkSW1hZ2UsIHRpbGUsIHRpbWUsIGltYWdlLCBlcnJvck1zZyApIHtcbiAgICBpZiAoICFpbWFnZSApIHtcbiAgICAgICAgJC5jb25zb2xlLmxvZyggXCJUaWxlICVzIGZhaWxlZCB0byBsb2FkOiAlcyAtIGVycm9yOiAlc1wiLCB0aWxlLCB0aWxlLnVybCwgZXJyb3JNc2cgKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXJlZCB3aGVuIGEgdGlsZSBmYWlscyB0byBsb2FkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgdGlsZS1sb2FkLWZhaWxlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvbi5WaWV3ZXJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGV9IHRpbGUgLSBUaGUgdGlsZSB0aGF0IGZhaWxlZCB0byBsb2FkLlxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gdGlsZWRJbWFnZSAtIFRoZSB0aWxlZCBpbWFnZSB0aGUgdGlsZSBiZWxvbmdzIHRvLlxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyB3aGVuIHRoZSB0aWxlIGxvYWQgYmVnYW4uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aWxlZEltYWdlLnZpZXdlci5yYWlzZUV2ZW50KFwidGlsZS1sb2FkLWZhaWxlZFwiLCB7dGlsZTogdGlsZSwgdGlsZWRJbWFnZTogdGlsZWRJbWFnZSwgdGltZTogdGltZSwgbWVzc2FnZTogZXJyb3JNc2d9KTtcbiAgICAgICAgdGlsZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRpbGUuZXhpc3RzID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIHRpbWUgPCB0aWxlZEltYWdlLmxhc3RSZXNldFRpbWUgKSB7XG4gICAgICAgICQuY29uc29sZS5sb2coIFwiSWdub3JpbmcgdGlsZSAlcyBsb2FkZWQgYmVmb3JlIHJlc2V0OiAlc1wiLCB0aWxlLCB0aWxlLnVybCApO1xuICAgICAgICB0aWxlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmaW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGN1dG9mZiA9IE1hdGguY2VpbCggTWF0aC5sb2coXG4gICAgICAgICAgICB0aWxlZEltYWdlLnNvdXJjZS5nZXRUaWxlV2lkdGgodGlsZS5sZXZlbCkgKSAvIE1hdGgubG9nKCAyICkgKTtcbiAgICAgICAgc2V0VGlsZUxvYWRlZCh0aWxlZEltYWdlLCB0aWxlLCBpbWFnZSwgY3V0b2ZmKTtcbiAgICB9O1xuXG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgbWlkLXVwZGF0ZTsgdGhpcyBjYW4gaGFwcGVuIG9uIElFOCBiZWNhdXNlIGltYWdlIGxvYWQgZXZlbnRzIGZvclxuICAgIC8vIGNhY2hlZCBpbWFnZXMgaGFwcGVuIGltbWVkaWF0ZWx5IHRoZXJlXG4gICAgaWYgKCAhdGlsZWRJbWFnZS5fbWlkRHJhdyApIHtcbiAgICAgICAgZmluaXNoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2FpdCB1bnRpbCBhZnRlciB0aGUgdXBkYXRlLCBpbiBjYXNlIGNhY2hpbmcgdW5sb2FkcyBhbnkgdGlsZXNcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoIGZpbmlzaCwgMSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRUaWxlTG9hZGVkKHRpbGVkSW1hZ2UsIHRpbGUsIGltYWdlLCBjdXRvZmYpIHtcbiAgICB2YXIgaW5jcmVtZW50ID0gMDtcblxuICAgIGZ1bmN0aW9uIGdldENvbXBsZXRpb25DYWxsYmFjaygpIHtcbiAgICAgICAgaW5jcmVtZW50Kys7XG4gICAgICAgIHJldHVybiBjb21wbGV0aW9uQ2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGlvbkNhbGxiYWNrKCkge1xuICAgICAgICBpbmNyZW1lbnQtLTtcbiAgICAgICAgaWYgKGluY3JlbWVudCA9PT0gMCkge1xuICAgICAgICAgICAgdGlsZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aWxlLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXRpbGUuY29udGV4dDJEKSB7XG4gICAgICAgICAgICAgICAgdGlsZWRJbWFnZS5fdGlsZUNhY2hlLmNhY2hlVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiBpbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgdGlsZTogdGlsZSxcbiAgICAgICAgICAgICAgICAgICAgY3V0b2ZmOiBjdXRvZmYsXG4gICAgICAgICAgICAgICAgICAgIHRpbGVkSW1hZ2U6IHRpbGVkSW1hZ2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbGVkSW1hZ2UuX25lZWRzRHJhdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIHRpbGUgaGFzIGp1c3QgYmVlbiBsb2FkZWQgaW4gbWVtb3J5LiBUaGF0IG1lYW5zIHRoYXQgdGhlXG4gICAgICogaW1hZ2UgaGFzIGJlZW4gZG93bmxvYWRlZCBhbmQgY2FuIGJlIG1vZGlmaWVkIGJlZm9yZSBiZWluZyBkcmF3biB0byB0aGUgY2FudmFzLlxuICAgICAqXG4gICAgICogQGV2ZW50IHRpbGUtbG9hZGVkXG4gICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge0ltYWdlfSBpbWFnZSAtIFRoZSBpbWFnZSBvZiB0aGUgdGlsZS5cbiAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gdGlsZWRJbWFnZSAtIFRoZSB0aWxlZCBpbWFnZSBvZiB0aGUgbG9hZGVkIHRpbGUuXG4gICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGV9IHRpbGUgLSBUaGUgdGlsZSB3aGljaCBoYXMgYmVlbiBsb2FkZWQuXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0Q29tcGxldGlvbkNhbGxiYWNrIC0gQSBmdW5jdGlvbiBnaXZpbmcgYSBjYWxsYmFjayB0byBjYWxsXG4gICAgICogd2hlbiB0aGUgYXN5bmNocm9ub3VzIHByb2Nlc3Npbmcgb2YgdGhlIGltYWdlIGlzIGRvbmUuIFRoZSBpbWFnZSB3aWxsIGJlXG4gICAgICogbWFya2VkIGFzIGVudGlyZWx5IGxvYWRlZCB3aGVuIHRoZSBjYWxsYmFjayBoYXMgYmVlbiBjYWxsZWQgb25jZSBmb3IgZWFjaFxuICAgICAqIGNhbGwgdG8gZ2V0Q29tcGxldGlvbkNhbGxiYWNrLlxuICAgICAqL1xuICAgIHRpbGVkSW1hZ2Uudmlld2VyLnJhaXNlRXZlbnQoXCJ0aWxlLWxvYWRlZFwiLCB7XG4gICAgICAgIHRpbGU6IHRpbGUsXG4gICAgICAgIHRpbGVkSW1hZ2U6IHRpbGVkSW1hZ2UsXG4gICAgICAgIGltYWdlOiBpbWFnZSxcbiAgICAgICAgZ2V0Q29tcGxldGlvbkNhbGxiYWNrOiBnZXRDb21wbGV0aW9uQ2FsbGJhY2tcbiAgICB9KTtcbiAgICAvLyBJbiBjYXNlIHRoZSBjb21wbGV0aW9uIGNhbGxiYWNrIGlzIG5ldmVyIGNhbGxlZCwgd2UgYXQgbGVhc3QgZm9yY2UgaXQgb25jZS5cbiAgICBnZXRDb21wbGV0aW9uQ2FsbGJhY2soKSgpO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvblRpbGUoIHRpbGUsIG92ZXJsYXAsIHZpZXdwb3J0LCB2aWV3cG9ydENlbnRlciwgbGV2ZWxWaXNpYmlsaXR5LCB0aWxlZEltYWdlICl7XG4gICAgdmFyIGJvdW5kc1RMICAgICA9IHRpbGUuYm91bmRzLmdldFRvcExlZnQoKTtcblxuICAgIGJvdW5kc1RMLnggKj0gdGlsZWRJbWFnZS5fc2NhbGVTcHJpbmcuY3VycmVudC52YWx1ZTtcbiAgICBib3VuZHNUTC55ICo9IHRpbGVkSW1hZ2UuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWU7XG4gICAgYm91bmRzVEwueCArPSB0aWxlZEltYWdlLl94U3ByaW5nLmN1cnJlbnQudmFsdWU7XG4gICAgYm91bmRzVEwueSArPSB0aWxlZEltYWdlLl95U3ByaW5nLmN1cnJlbnQudmFsdWU7XG5cbiAgICB2YXIgYm91bmRzU2l6ZSAgID0gdGlsZS5ib3VuZHMuZ2V0U2l6ZSgpO1xuXG4gICAgYm91bmRzU2l6ZS54ICo9IHRpbGVkSW1hZ2UuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWU7XG4gICAgYm91bmRzU2l6ZS55ICo9IHRpbGVkSW1hZ2UuX3NjYWxlU3ByaW5nLmN1cnJlbnQudmFsdWU7XG5cbiAgICB2YXIgcG9zaXRpb25DICAgID0gdmlld3BvcnQucGl4ZWxGcm9tUG9pbnROb1JvdGF0ZShib3VuZHNUTCwgdHJ1ZSksXG4gICAgICAgIHBvc2l0aW9uVCAgICA9IHZpZXdwb3J0LnBpeGVsRnJvbVBvaW50Tm9Sb3RhdGUoYm91bmRzVEwsIGZhbHNlKSxcbiAgICAgICAgc2l6ZUMgICAgICAgID0gdmlld3BvcnQuZGVsdGFQaXhlbHNGcm9tUG9pbnRzTm9Sb3RhdGUoYm91bmRzU2l6ZSwgdHJ1ZSksXG4gICAgICAgIHNpemVUICAgICAgICA9IHZpZXdwb3J0LmRlbHRhUGl4ZWxzRnJvbVBvaW50c05vUm90YXRlKGJvdW5kc1NpemUsIGZhbHNlKSxcbiAgICAgICAgdGlsZUNlbnRlciAgID0gcG9zaXRpb25ULnBsdXMoIHNpemVULmRpdmlkZSggMiApICksXG4gICAgICAgIHRpbGVEaXN0YW5jZSA9IHZpZXdwb3J0Q2VudGVyLmRpc3RhbmNlVG8oIHRpbGVDZW50ZXIgKTtcblxuICAgIGlmICggIW92ZXJsYXAgKSB7XG4gICAgICAgIHNpemVDID0gc2l6ZUMucGx1cyggbmV3ICQuUG9pbnQoIDEsIDEgKSApO1xuICAgIH1cblxuICAgIHRpbGUucG9zaXRpb24gICA9IHBvc2l0aW9uQztcbiAgICB0aWxlLnNpemUgICAgICAgPSBzaXplQztcbiAgICB0aWxlLmRpc3RhbmNlICAgPSB0aWxlRGlzdGFuY2U7XG4gICAgdGlsZS52aXNpYmlsaXR5ID0gbGV2ZWxWaXNpYmlsaXR5O1xufVxuXG5cbmZ1bmN0aW9uIGJsZW5kVGlsZSggdGlsZWRJbWFnZSwgdGlsZSwgeCwgeSwgbGV2ZWwsIGxldmVsT3BhY2l0eSwgY3VycmVudFRpbWUgKXtcbiAgICB2YXIgYmxlbmRUaW1lTWlsbGlzID0gMTAwMCAqIHRpbGVkSW1hZ2UuYmxlbmRUaW1lLFxuICAgICAgICBkZWx0YVRpbWUsXG4gICAgICAgIG9wYWNpdHk7XG5cbiAgICBpZiAoICF0aWxlLmJsZW5kU3RhcnQgKSB7XG4gICAgICAgIHRpbGUuYmxlbmRTdGFydCA9IGN1cnJlbnRUaW1lO1xuICAgIH1cblxuICAgIGRlbHRhVGltZSAgID0gY3VycmVudFRpbWUgLSB0aWxlLmJsZW5kU3RhcnQ7XG4gICAgb3BhY2l0eSAgICAgPSBibGVuZFRpbWVNaWxsaXMgPyBNYXRoLm1pbiggMSwgZGVsdGFUaW1lIC8gKCBibGVuZFRpbWVNaWxsaXMgKSApIDogMTtcblxuICAgIGlmICggdGlsZWRJbWFnZS5hbHdheXNCbGVuZCApIHtcbiAgICAgICAgb3BhY2l0eSAqPSBsZXZlbE9wYWNpdHk7XG4gICAgfVxuXG4gICAgdGlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcblxuICAgIHRpbGVkSW1hZ2UubGFzdERyYXduLnB1c2goIHRpbGUgKTtcblxuICAgIGlmICggb3BhY2l0eSA9PSAxICkge1xuICAgICAgICBzZXRDb3ZlcmFnZSggdGlsZWRJbWFnZS5jb3ZlcmFnZSwgbGV2ZWwsIHgsIHksIHRydWUgKTtcbiAgICAgICAgdGlsZWRJbWFnZS5faGFzT3BhcXVlVGlsZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICggZGVsdGFUaW1lIDwgYmxlbmRUaW1lTWlsbGlzICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB0aWxlIHByb3ZpZGVzIGNvdmVyYWdlIHRvIGxvd2VyLWxldmVsIHRpbGVzIG9mXG4gKiBsb3dlciByZXNvbHV0aW9uIHJlcHJlc2VudGluZyB0aGUgc2FtZSBjb250ZW50LiBJZiBuZWl0aGVyIHggbm9yIHkgaXNcbiAqIGdpdmVuLCByZXR1cm5zIHRydWUgaWYgdGhlIGVudGlyZSB2aXNpYmxlIGxldmVsIHByb3ZpZGVzIGNvdmVyYWdlLlxuICpcbiAqIE5vdGUgdGhhdCBvdXQtb2YtYm91bmRzIHRpbGVzIHByb3ZpZGUgY292ZXJhZ2UgaW4gdGhpcyBzZW5zZSwgc2luY2VcbiAqIHRoZXJlJ3Mgbm8gY29udGVudCB0aGF0IHRoZXkgd291bGQgbmVlZCB0byBjb3Zlci4gVGlsZXMgYXQgbm9uLWV4aXN0ZW50XG4gKiBsZXZlbHMgdGhhdCBhcmUgd2l0aGluIHRoZSBpbWFnZSBib3VuZHMsIGhvd2V2ZXIsIGRvIG5vdC5cbiAqL1xuZnVuY3Rpb24gcHJvdmlkZXNDb3ZlcmFnZSggY292ZXJhZ2UsIGxldmVsLCB4LCB5ICkge1xuICAgIHZhciByb3dzLFxuICAgICAgICBjb2xzLFxuICAgICAgICBpLCBqO1xuXG4gICAgaWYgKCAhY292ZXJhZ2VbIGxldmVsIF0gKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIHggPT09IHVuZGVmaW5lZCB8fCB5ID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIHJvd3MgPSBjb3ZlcmFnZVsgbGV2ZWwgXTtcbiAgICAgICAgZm9yICggaSBpbiByb3dzICkge1xuICAgICAgICAgICAgaWYgKCByb3dzLmhhc093blByb3BlcnR5KCBpICkgKSB7XG4gICAgICAgICAgICAgICAgY29scyA9IHJvd3NbIGkgXTtcbiAgICAgICAgICAgICAgICBmb3IgKCBqIGluIGNvbHMgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggY29scy5oYXNPd25Qcm9wZXJ0eSggaiApICYmICFjb2xzWyBqIF0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBjb3ZlcmFnZVsgbGV2ZWwgXVsgeF0gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBjb3ZlcmFnZVsgbGV2ZWwgXVsgeCBdWyB5IF0gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBjb3ZlcmFnZVsgbGV2ZWwgXVsgeCBdWyB5IF0gPT09IHRydWVcbiAgICApO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdGlsZSBpcyBjb21wbGV0ZWx5IGNvdmVyZWQgYnkgaGlnaGVyLWxldmVsXG4gKiB0aWxlcyBvZiBoaWdoZXIgcmVzb2x1dGlvbiByZXByZXNlbnRpbmcgdGhlIHNhbWUgY29udGVudC4gSWYgbmVpdGhlciB4XG4gKiBub3IgeSBpcyBnaXZlbiwgcmV0dXJucyB0cnVlIGlmIHRoZSBlbnRpcmUgdmlzaWJsZSBsZXZlbCBpcyBjb3ZlcmVkLlxuICovXG5mdW5jdGlvbiBpc0NvdmVyZWQoIGNvdmVyYWdlLCBsZXZlbCwgeCwgeSApIHtcbiAgICBpZiAoIHggPT09IHVuZGVmaW5lZCB8fCB5ID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlc0NvdmVyYWdlKCBjb3ZlcmFnZSwgbGV2ZWwgKyAxICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICBwcm92aWRlc0NvdmVyYWdlKCBjb3ZlcmFnZSwgbGV2ZWwgKyAxLCAyICogeCwgMiAqIHkgKSAmJlxuICAgICAgICAgICAgIHByb3ZpZGVzQ292ZXJhZ2UoIGNvdmVyYWdlLCBsZXZlbCArIDEsIDIgKiB4LCAyICogeSArIDEgKSAmJlxuICAgICAgICAgICAgIHByb3ZpZGVzQ292ZXJhZ2UoIGNvdmVyYWdlLCBsZXZlbCArIDEsIDIgKiB4ICsgMSwgMiAqIHkgKSAmJlxuICAgICAgICAgICAgIHByb3ZpZGVzQ292ZXJhZ2UoIGNvdmVyYWdlLCBsZXZlbCArIDEsIDIgKiB4ICsgMSwgMiAqIHkgKyAxIClcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBpbm5lclxuICogU2V0cyB3aGV0aGVyIHRoZSBnaXZlbiB0aWxlIHByb3ZpZGVzIGNvdmVyYWdlIG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gc2V0Q292ZXJhZ2UoIGNvdmVyYWdlLCBsZXZlbCwgeCwgeSwgY292ZXJzICkge1xuICAgIGlmICggIWNvdmVyYWdlWyBsZXZlbCBdICkge1xuICAgICAgICAkLmNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiU2V0dGluZyBjb3ZlcmFnZSBmb3IgYSB0aWxlIGJlZm9yZSBpdHMgbGV2ZWwncyBjb3ZlcmFnZSBoYXMgYmVlbiByZXNldDogJXNcIixcbiAgICAgICAgICAgIGxldmVsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoICFjb3ZlcmFnZVsgbGV2ZWwgXVsgeCBdICkge1xuICAgICAgICBjb3ZlcmFnZVsgbGV2ZWwgXVsgeCBdID0ge307XG4gICAgfVxuXG4gICAgY292ZXJhZ2VbIGxldmVsIF1bIHggXVsgeSBdID0gY292ZXJzO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIFJlc2V0cyBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGdpdmVuIGxldmVsLiBUaGlzIHNob3VsZCBiZSBjYWxsZWRcbiAqIGFmdGVyIGV2ZXJ5IGRyYXcgcm91dGluZS4gTm90ZSB0aGF0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZHJhd1xuICogcm91dGluZSwgY292ZXJhZ2UgZm9yIGV2ZXJ5IHZpc2libGUgdGlsZSBzaG91bGQgYmUgZXhwbGljaXRseSBzZXQuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0Q292ZXJhZ2UoIGNvdmVyYWdlLCBsZXZlbCApIHtcbiAgICBjb3ZlcmFnZVsgbGV2ZWwgXSA9IHt9O1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAaW5uZXJcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgJ2xhc3QgYmVzdCcgdGlsZSBmb3IgdGhlIGFyZWEgaXMgYmV0dGVyIHRoYW4gdGhlXG4gKiB0aWxlIGluIHF1ZXN0aW9uLlxuICovXG5mdW5jdGlvbiBjb21wYXJlVGlsZXMoIHByZXZpb3VzQmVzdCwgdGlsZSApIHtcbiAgICBpZiAoICFwcmV2aW91c0Jlc3QgKSB7XG4gICAgICAgIHJldHVybiB0aWxlO1xuICAgIH1cblxuICAgIGlmICggdGlsZS52aXNpYmlsaXR5ID4gcHJldmlvdXNCZXN0LnZpc2liaWxpdHkgKSB7XG4gICAgICAgIHJldHVybiB0aWxlO1xuICAgIH0gZWxzZSBpZiAoIHRpbGUudmlzaWJpbGl0eSA9PSBwcmV2aW91c0Jlc3QudmlzaWJpbGl0eSApIHtcbiAgICAgICAgaWYgKCB0aWxlLmRpc3RhbmNlIDwgcHJldmlvdXNCZXN0LmRpc3RhbmNlICkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJldmlvdXNCZXN0O1xufVxuXG5mdW5jdGlvbiBkcmF3VGlsZXMoIHRpbGVkSW1hZ2UsIGxhc3REcmF3biApIHtcbiAgICBpZiAobGFzdERyYXduLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aWxlID0gbGFzdERyYXduWzBdO1xuXG4gICAgdmFyIHVzZVNrZXRjaCA9IHRpbGVkSW1hZ2Uub3BhY2l0eSA8IDEgfHxcbiAgICAgICAgKHRpbGVkSW1hZ2UuY29tcG9zaXRlT3BlcmF0aW9uICYmXG4gICAgICAgICAgICB0aWxlZEltYWdlLmNvbXBvc2l0ZU9wZXJhdGlvbiAhPT0gJ3NvdXJjZS1vdmVyJykgfHxcbiAgICAgICAgKCF0aWxlZEltYWdlLl9pc0JvdHRvbUl0ZW0oKSAmJiB0aWxlLl9oYXNUcmFuc3BhcmVuY3lDaGFubmVsKCkpO1xuXG4gICAgdmFyIHNrZXRjaFNjYWxlO1xuICAgIHZhciBza2V0Y2hUcmFuc2xhdGU7XG5cbiAgICB2YXIgem9vbSA9IHRpbGVkSW1hZ2Uudmlld3BvcnQuZ2V0Wm9vbSh0cnVlKTtcbiAgICB2YXIgaW1hZ2Vab29tID0gdGlsZWRJbWFnZS52aWV3cG9ydFRvSW1hZ2Vab29tKHpvb20pO1xuICAgIGlmIChpbWFnZVpvb20gPiB0aWxlZEltYWdlLnNtb290aFRpbGVFZGdlc01pblpvb20gJiYgIXRpbGVkSW1hZ2UuaU9TRGV2aWNlKSB7XG4gICAgICAgIC8vIFdoZW4gem9vbWVkIGluIGEgbG90ICg+MTAwJSkgdGhlIHRpbGUgZWRnZXMgYXJlIHZpc2libGUuXG4gICAgICAgIC8vIFNvIHdlIGhhdmUgdG8gY29tcG9zaXRlIHRoZW0gYXQgfjEwMCUgYW5kIHNjYWxlIHRoZW0gdXAgdG9nZXRoZXIuXG4gICAgICAgIC8vIE5vdGU6IERpc2FibGVkIG9uIGlPUyBkZXZpY2VzIHBlciBkZWZhdWx0IGFzIGl0IGNhdXNlcyBhIG5hdGl2ZSBjcmFzaFxuICAgICAgICB1c2VTa2V0Y2ggPSB0cnVlO1xuICAgICAgICBza2V0Y2hTY2FsZSA9IHRpbGUuZ2V0U2NhbGVGb3JFZGdlU21vb3RoaW5nKCk7XG4gICAgICAgIHNrZXRjaFRyYW5zbGF0ZSA9IHRpbGUuZ2V0VHJhbnNsYXRpb25Gb3JFZGdlU21vb3RoaW5nKHNrZXRjaFNjYWxlLFxuICAgICAgICAgICAgdGlsZWRJbWFnZS5fZHJhd2VyLmdldENhbnZhc1NpemUoZmFsc2UpLFxuICAgICAgICAgICAgdGlsZWRJbWFnZS5fZHJhd2VyLmdldENhbnZhc1NpemUodHJ1ZSkpO1xuICAgIH1cblxuICAgIHZhciBib3VuZHM7XG4gICAgaWYgKHVzZVNrZXRjaCkge1xuICAgICAgICBpZiAoIXNrZXRjaFNjYWxlKSB7XG4gICAgICAgICAgICAvLyBFeGNlcHQgd2hlbiBlZGdlIHNtb290aGluZywgd2Ugb25seSBjbGVhbiB0aGUgcGFydCBvZiB0aGVcbiAgICAgICAgICAgIC8vIHNrZXRjaCBjYW52YXMgd2UgYXJlIGdvaW5nIHRvIHVzZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgICAgICAgIGJvdW5kcyA9IHRpbGVkSW1hZ2Uudmlld3BvcnQudmlld3BvcnRUb1ZpZXdlckVsZW1lbnRSZWN0YW5nbGUoXG4gICAgICAgICAgICAgICAgdGlsZWRJbWFnZS5nZXRDbGlwcGVkQm91bmRzKHRydWUpKVxuICAgICAgICAgICAgICAgIC5nZXRJbnRlZ2VyQm91bmRpbmdCb3goKVxuICAgICAgICAgICAgICAgIC50aW1lcygkLnBpeGVsRGVuc2l0eVJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuX2NsZWFyKHRydWUsIGJvdW5kcyk7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBzY2FsaW5nLCB3ZSBtdXN0IHJvdGF0ZSBvbmx5IHdoZW4gYmxlbmRpbmcgdGhlIHNrZXRjaCBjYW52YXMgdG8gYXZvaWRcbiAgICAvLyBpbnRlcnBvbGF0aW9uXG4gICAgaWYgKHRpbGVkSW1hZ2Uudmlld3BvcnQuZGVncmVlcyAhPT0gMCAmJiAhc2tldGNoU2NhbGUpIHtcbiAgICAgICAgdGlsZWRJbWFnZS5fZHJhd2VyLl9vZmZzZXRGb3JSb3RhdGlvbih0aWxlZEltYWdlLnZpZXdwb3J0LmRlZ3JlZXMsIHVzZVNrZXRjaCk7XG4gICAgfVxuXG4gICAgdmFyIHVzZWRDbGlwID0gZmFsc2U7XG4gICAgaWYgKCB0aWxlZEltYWdlLl9jbGlwICkge1xuICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuc2F2ZUNvbnRleHQodXNlU2tldGNoKTtcblxuICAgICAgICB2YXIgYm94ID0gdGlsZWRJbWFnZS5pbWFnZVRvVmlld3BvcnRSZWN0YW5nbGUodGlsZWRJbWFnZS5fY2xpcCwgdHJ1ZSk7XG4gICAgICAgIHZhciBjbGlwUmVjdCA9IHRpbGVkSW1hZ2UuX2RyYXdlci52aWV3cG9ydFRvRHJhd2VyUmVjdGFuZ2xlKGJveCk7XG4gICAgICAgIGlmIChza2V0Y2hTY2FsZSkge1xuICAgICAgICAgICAgY2xpcFJlY3QgPSBjbGlwUmVjdC50aW1lcyhza2V0Y2hTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNrZXRjaFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgY2xpcFJlY3QgPSBjbGlwUmVjdC50cmFuc2xhdGUoc2tldGNoVHJhbnNsYXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuc2V0Q2xpcChjbGlwUmVjdCwgdXNlU2tldGNoKTtcblxuICAgICAgICB1c2VkQ2xpcCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCB0aWxlZEltYWdlLnBsYWNlaG9sZGVyRmlsbFN0eWxlICYmIHRpbGVkSW1hZ2UuX2hhc09wYXF1ZVRpbGUgPT09IGZhbHNlICkge1xuICAgICAgICB2YXIgcGxhY2Vob2xkZXJSZWN0ID0gdGlsZWRJbWFnZS5fZHJhd2VyLnZpZXdwb3J0VG9EcmF3ZXJSZWN0YW5nbGUodGlsZWRJbWFnZS5nZXRCb3VuZHModHJ1ZSkpO1xuICAgICAgICBpZiAoc2tldGNoU2NhbGUpIHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyUmVjdCA9IHBsYWNlaG9sZGVyUmVjdC50aW1lcyhza2V0Y2hTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNrZXRjaFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJSZWN0ID0gcGxhY2Vob2xkZXJSZWN0LnRyYW5zbGF0ZShza2V0Y2hUcmFuc2xhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbGxTdHlsZSA9IG51bGw7XG4gICAgICAgIGlmICggdHlwZW9mIHRpbGVkSW1hZ2UucGxhY2Vob2xkZXJGaWxsU3R5bGUgPT09IFwiZnVuY3Rpb25cIiApIHtcbiAgICAgICAgICAgIGZpbGxTdHlsZSA9IHRpbGVkSW1hZ2UucGxhY2Vob2xkZXJGaWxsU3R5bGUodGlsZWRJbWFnZSwgdGlsZWRJbWFnZS5fZHJhd2VyLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmlsbFN0eWxlID0gdGlsZWRJbWFnZS5wbGFjZWhvbGRlckZpbGxTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbGVkSW1hZ2UuX2RyYXdlci5kcmF3UmVjdGFuZ2xlKHBsYWNlaG9sZGVyUmVjdCwgZmlsbFN0eWxlLCB1c2VTa2V0Y2gpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBsYXN0RHJhd24ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGlsZSA9IGxhc3REcmF3blsgaSBdO1xuICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuZHJhd1RpbGUoIHRpbGUsIHRpbGVkSW1hZ2UuX2RyYXdpbmdIYW5kbGVyLCB1c2VTa2V0Y2gsIHNrZXRjaFNjYWxlLCBza2V0Y2hUcmFuc2xhdGUgKTtcbiAgICAgICAgdGlsZS5iZWluZ0RyYXduID0gdHJ1ZTtcblxuICAgICAgICBpZiggdGlsZWRJbWFnZS52aWV3ZXIgKXtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogPGVtPi0gTmVlZHMgZG9jdW1lbnRhdGlvbiAtPC9lbT5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXZlbnQgdGlsZS1kcmF3blxuICAgICAgICAgICAgICogQG1lbWJlcm9mIE9wZW5TZWFkcmFnb24uVmlld2VyXG4gICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlZpZXdlcn0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgVmlld2VyIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gdGlsZWRJbWFnZSAtIFdoaWNoIFRpbGVkSW1hZ2UgaXMgYmVpbmcgZHJhd24uXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZX0gdGlsZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aWxlZEltYWdlLnZpZXdlci5yYWlzZUV2ZW50KCAndGlsZS1kcmF3bicsIHtcbiAgICAgICAgICAgICAgICB0aWxlZEltYWdlOiB0aWxlZEltYWdlLFxuICAgICAgICAgICAgICAgIHRpbGU6IHRpbGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCB1c2VkQ2xpcCApIHtcbiAgICAgICAgdGlsZWRJbWFnZS5fZHJhd2VyLnJlc3RvcmVDb250ZXh0KCB1c2VTa2V0Y2ggKTtcbiAgICB9XG5cbiAgICBpZiAodGlsZWRJbWFnZS52aWV3cG9ydC5kZWdyZWVzICE9PSAwICYmICFza2V0Y2hTY2FsZSkge1xuICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuX3Jlc3RvcmVSb3RhdGlvbkNoYW5nZXModXNlU2tldGNoKTtcbiAgICB9XG5cbiAgICBpZiAodXNlU2tldGNoKSB7XG4gICAgICAgIHZhciBvZmZzZXRGb3JSb3RhdGlvbiA9IHRpbGVkSW1hZ2Uudmlld3BvcnQuZGVncmVlcyAhPT0gMCAmJiBza2V0Y2hTY2FsZTtcbiAgICAgICAgaWYgKG9mZnNldEZvclJvdGF0aW9uKSB7XG4gICAgICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuX29mZnNldEZvclJvdGF0aW9uKHRpbGVkSW1hZ2Uudmlld3BvcnQuZGVncmVlcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRpbGVkSW1hZ2UuX2RyYXdlci5ibGVuZFNrZXRjaCh7XG4gICAgICAgICAgICBvcGFjaXR5OiB0aWxlZEltYWdlLm9wYWNpdHksXG4gICAgICAgICAgICBzY2FsZTogc2tldGNoU2NhbGUsXG4gICAgICAgICAgICB0cmFuc2xhdGU6IHNrZXRjaFRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGNvbXBvc2l0ZU9wZXJhdGlvbjogdGlsZWRJbWFnZS5jb21wb3NpdGVPcGVyYXRpb24sXG4gICAgICAgICAgICBib3VuZHM6IGJvdW5kc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9mZnNldEZvclJvdGF0aW9uKSB7XG4gICAgICAgICAgICB0aWxlZEltYWdlLl9kcmF3ZXIuX3Jlc3RvcmVSb3RhdGlvbkNoYW5nZXMoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdEZWJ1Z0luZm8oIHRpbGVkSW1hZ2UsIGxhc3REcmF3biApO1xufVxuXG5mdW5jdGlvbiBkcmF3RGVidWdJbmZvKCB0aWxlZEltYWdlLCBsYXN0RHJhd24gKSB7XG4gICAgaWYoIHRpbGVkSW1hZ2UuZGVidWdNb2RlICkge1xuICAgICAgICBmb3IgKCB2YXIgaSA9IGxhc3REcmF3bi5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcbiAgICAgICAgICAgIHZhciB0aWxlID0gbGFzdERyYXduWyBpIF07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRpbGVkSW1hZ2UuX2RyYXdlci5kcmF3RGVidWdJbmZvKCB0aWxlLCBsYXN0RHJhd24ubGVuZ3RoLCBpICk7XG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAkLmNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gVGlsZUNhY2hlXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA5IENvZGVQbGV4IEZvdW5kYXRpb25cbiAqIENvcHlyaWdodCAoQykgMjAxMC0yMDEzIE9wZW5TZWFkcmFnb24gY29udHJpYnV0b3JzXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIENvZGVQbGV4IEZvdW5kYXRpb24gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbihmdW5jdGlvbiggJCApe1xuXG4vLyBwcml2YXRlIGNsYXNzXG52YXIgVGlsZVJlY29yZCA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMgaXMgcmVxdWlyZWRcIiApO1xuICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMudGlsZSwgXCJbVGlsZUNhY2hlLmNhY2hlVGlsZV0gb3B0aW9ucy50aWxlIGlzIHJlcXVpcmVkXCIgKTtcbiAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLnRpbGVkSW1hZ2UsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMudGlsZWRJbWFnZSBpcyByZXF1aXJlZFwiICk7XG4gICAgdGhpcy50aWxlID0gb3B0aW9ucy50aWxlO1xuICAgIHRoaXMudGlsZWRJbWFnZSA9IG9wdGlvbnMudGlsZWRJbWFnZTtcbn07XG5cbi8vIHByaXZhdGUgY2xhc3NcbnZhciBJbWFnZVJlY29yZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLCBcIltJbWFnZVJlY29yZF0gb3B0aW9ucyBpcyByZXF1aXJlZFwiICk7XG4gICAgJC5jb25zb2xlLmFzc2VydCggb3B0aW9ucy5pbWFnZSwgXCJbSW1hZ2VSZWNvcmRdIG9wdGlvbnMuaW1hZ2UgaXMgcmVxdWlyZWRcIiApO1xuICAgIHRoaXMuX2ltYWdlID0gb3B0aW9ucy5pbWFnZTtcbiAgICB0aGlzLl90aWxlcyA9IFtdO1xufTtcblxuSW1hZ2VSZWNvcmQucHJvdG90eXBlID0ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9pbWFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RpbGVzID0gbnVsbDtcbiAgICB9LFxuXG4gICAgZ2V0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2U7XG4gICAgfSxcblxuICAgIGdldFJlbmRlcmVkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVuZGVyZWRDb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuX2ltYWdlLndpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuX2ltYWdlLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRDb250ZXh0LmRyYXdJbWFnZSggdGhpcy5faW1hZ2UsIDAsIDAgKTtcbiAgICAgICAgICAgIC8vc2luY2Ugd2UgYXJlIGNhY2hpbmcgdGhlIHByZXJlbmRlcmVkIGltYWdlIG9uIGEgY2FudmFzXG4gICAgICAgICAgICAvL2FsbG93IHRoZSBpbWFnZSB0byBub3QgYmUgaGVsZCBpbiBtZW1vcnlcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRDb250ZXh0O1xuICAgIH0sXG5cbiAgICBzZXRSZW5kZXJlZENvbnRleHQ6IGZ1bmN0aW9uKHJlbmRlcmVkQ29udGV4dCkge1xuICAgICAgICAkLmNvbnNvbGUuZXJyb3IoXCJJbWFnZVJlY29yZC5zZXRSZW5kZXJlZENvbnRleHQgaXMgZGVwcmVjYXRlZC4gXCIgK1xuICAgICAgICAgICAgICAgIFwiVGhlIHJlbmRlcmVkIGNvbnRleHQgc2hvdWxkIGJlIGNyZWF0ZWQgYnkgdGhlIEltYWdlUmVjb3JkIFwiICtcbiAgICAgICAgICAgICAgICBcIml0c2VsZiB3aGVuIGNhbGxpbmcgSW1hZ2VSZWNvcmQuZ2V0UmVuZGVyZWRDb250ZXh0LlwiKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb250ZXh0ID0gcmVuZGVyZWRDb250ZXh0O1xuICAgIH0sXG5cbiAgICBhZGRUaWxlOiBmdW5jdGlvbih0aWxlKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQodGlsZSwgJ1tJbWFnZVJlY29yZC5hZGRUaWxlXSB0aWxlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIHRoaXMuX3RpbGVzLnB1c2godGlsZSk7XG4gICAgfSxcblxuICAgIHJlbW92ZVRpbGU6IGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90aWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbGVzW2ldID09PSB0aWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGlsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICQuY29uc29sZS53YXJuKCdbSW1hZ2VSZWNvcmQucmVtb3ZlVGlsZV0gdHJ5aW5nIHRvIHJlbW92ZSB1bmtub3duIHRpbGUnLCB0aWxlKTtcbiAgICB9LFxuXG4gICAgZ2V0VGlsZUNvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzLmxlbmd0aDtcbiAgICB9XG59O1xuXG4vKipcbiAqIEBjbGFzcyBUaWxlQ2FjaGVcbiAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uXG4gKiBAY2xhc3NkZXNjIFN0b3JlcyBhbGwgdGhlIHRpbGVzIGRpc3BsYXllZCBpbiBhIHtAbGluayBPcGVuU2VhZHJhZ29uLlZpZXdlcn0uXG4gKiBZb3UgZ2VuZXJhbGx5IHdvbid0IGhhdmUgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgVGlsZUNhY2hlIGRpcmVjdGx5LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIGZvciB0aGlzIFRpbGVDYWNoZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhJbWFnZUNhY2hlQ291bnRdIC0gU2VlIG1heEltYWdlQ2FjaGVDb3VudCBpblxuICoge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30gZm9yIGRldGFpbHMuXG4gKi9cbiQuVGlsZUNhY2hlID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLl9tYXhJbWFnZUNhY2hlQ291bnQgPSBvcHRpb25zLm1heEltYWdlQ2FjaGVDb3VudCB8fCAkLkRFRkFVTFRfU0VUVElOR1MubWF4SW1hZ2VDYWNoZUNvdW50O1xuICAgIHRoaXMuX3RpbGVzTG9hZGVkID0gW107XG4gICAgdGhpcy5faW1hZ2VzTG9hZGVkID0gW107XG4gICAgdGhpcy5faW1hZ2VzTG9hZGVkQ291bnQgPSAwO1xufTtcblxuLyoqIEBsZW5kcyBPcGVuU2VhZHJhZ29uLlRpbGVDYWNoZS5wcm90b3R5cGUgKi9cbiQuVGlsZUNhY2hlLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgdG90YWwgbnVtYmVyIG9mIHRpbGVzIHRoYXQgaGF2ZSBiZWVuIGxvYWRlZCBieVxuICAgICAqIHRoaXMgVGlsZUNhY2hlLlxuICAgICAqL1xuICAgIG51bVRpbGVzTG9hZGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzTG9hZGVkLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FjaGVzIHRoZSBzcGVjaWZpZWQgdGlsZSwgcmVtb3ZpbmcgYW4gb2xkIHRpbGUgaWYgbmVjZXNzYXJ5IHRvIHN0YXkgdW5kZXIgdGhlXG4gICAgICogbWF4SW1hZ2VDYWNoZUNvdW50IHNwZWNpZmllZCBvbiBjb25zdHJ1Y3Rpb24uIE5vdGUgdGhhdCBpZiBtdWx0aXBsZSB0aWxlcyByZWZlcmVuY2VcbiAgICAgKiB0aGUgc2FtZSBpbWFnZSwgdGhlcmUgbWF5IGJlIG1vcmUgdGlsZXMgdGhhbiBtYXhJbWFnZUNhY2hlQ291bnQ7IHRoZSBnb2FsIGlzIHRvIGtlZXBcbiAgICAgKiB0aGUgbnVtYmVyIG9mIGltYWdlcyBiZWxvdyB0aGF0IG51bWJlci4gTm90ZSwgYXMgd2VsbCwgdGhhdCBldmVuIHRoZSBudW1iZXIgb2YgaW1hZ2VzXG4gICAgICogbWF5IHRlbXBvcmFyaWx5IHN1cnBhc3MgdGhhdCBudW1iZXIsIGJ1dCBzaG91bGQgZXZlbnR1YWxseSBjb21lIGJhY2sgZG93biB0byB0aGUgbWF4IHNwZWNpZmllZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRpbGUgaW5mby5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVGlsZX0gb3B0aW9ucy50aWxlIC0gVGhlIHRpbGUgdG8gY2FjaGUuXG4gICAgICogQHBhcmFtIHtJbWFnZX0gb3B0aW9ucy5pbWFnZSAtIFRoZSBpbWFnZSBvZiB0aGUgdGlsZSB0byBjYWNoZS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gb3B0aW9ucy50aWxlZEltYWdlIC0gVGhlIFRpbGVkSW1hZ2UgdGhhdCBvd25zIHRoYXQgdGlsZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY3V0b2ZmPTBdIC0gSWYgYWRkaW5nIHRoaXMgdGlsZSBnb2VzIG92ZXIgdGhlIGNhY2hlIG1heCBjb3VudCwgdGhpc1xuICAgICAqIGZ1bmN0aW9uIHdpbGwgcmVsZWFzZSBhbiBvbGQgdGlsZS4gVGhlIGN1dG9mZiBvcHRpb24gc3BlY2lmaWVzIGEgdGlsZSBsZXZlbCBhdCBvciBiZWxvdyB3aGljaFxuICAgICAqIHRpbGVzIHdpbGwgbm90IGJlIHJlbGVhc2VkLlxuICAgICAqL1xuICAgIGNhY2hlVGlsZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMgaXMgcmVxdWlyZWRcIiApO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLnRpbGUsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMudGlsZSBpcyByZXF1aXJlZFwiICk7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMudGlsZS51cmwsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMudGlsZS51cmwgaXMgcmVxdWlyZWRcIiApO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KCBvcHRpb25zLnRpbGVkSW1hZ2UsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMudGlsZWRJbWFnZSBpcyByZXF1aXJlZFwiICk7XG5cbiAgICAgICAgdmFyIGN1dG9mZiA9IG9wdGlvbnMuY3V0b2ZmIHx8IDA7XG4gICAgICAgIHZhciBpbnNlcnRpb25JbmRleCA9IHRoaXMuX3RpbGVzTG9hZGVkLmxlbmd0aDtcblxuICAgICAgICB2YXIgaW1hZ2VSZWNvcmQgPSB0aGlzLl9pbWFnZXNMb2FkZWRbb3B0aW9ucy50aWxlLnVybF07XG4gICAgICAgIGlmICghaW1hZ2VSZWNvcmQpIHtcbiAgICAgICAgICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMuaW1hZ2UsIFwiW1RpbGVDYWNoZS5jYWNoZVRpbGVdIG9wdGlvbnMuaW1hZ2UgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIGFuIEltYWdlUmVjb3JkXCIgKTtcbiAgICAgICAgICAgIGltYWdlUmVjb3JkID0gdGhpcy5faW1hZ2VzTG9hZGVkW29wdGlvbnMudGlsZS51cmxdID0gbmV3IEltYWdlUmVjb3JkKHtcbiAgICAgICAgICAgICAgICBpbWFnZTogb3B0aW9ucy5pbWFnZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2ltYWdlc0xvYWRlZENvdW50Kys7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZVJlY29yZC5hZGRUaWxlKG9wdGlvbnMudGlsZSk7XG4gICAgICAgIG9wdGlvbnMudGlsZS5jYWNoZUltYWdlUmVjb3JkID0gaW1hZ2VSZWNvcmQ7XG5cbiAgICAgICAgLy8gTm90ZSB0aGF0IGp1c3QgYmVjYXVzZSB3ZSdyZSB1bmxvYWRpbmcgYSB0aWxlIGRvZXNuJ3QgbmVjZXNzYXJpbHkgbWVhblxuICAgICAgICAvLyB3ZSdyZSB1bmxvYWRpbmcgYW4gaW1hZ2UuIFdpdGggcmVwZWF0ZWQgY2FsbHMgaXQgc2hvdWxkIHNvcnQgaXRzZWxmIG91dCwgdGhvdWdoLlxuICAgICAgICBpZiAoIHRoaXMuX2ltYWdlc0xvYWRlZENvdW50ID4gdGhpcy5fbWF4SW1hZ2VDYWNoZUNvdW50ICkge1xuICAgICAgICAgICAgdmFyIHdvcnN0VGlsZSAgICAgICA9IG51bGw7XG4gICAgICAgICAgICB2YXIgd29yc3RUaWxlSW5kZXggID0gLTE7XG4gICAgICAgICAgICB2YXIgd29yc3RUaWxlUmVjb3JkID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBwcmV2VGlsZSwgd29yc3RUaW1lLCB3b3JzdExldmVsLCBwcmV2VGltZSwgcHJldkxldmVsLCBwcmV2VGlsZVJlY29yZDtcblxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0aGlzLl90aWxlc0xvYWRlZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcbiAgICAgICAgICAgICAgICBwcmV2VGlsZVJlY29yZCA9IHRoaXMuX3RpbGVzTG9hZGVkWyBpIF07XG4gICAgICAgICAgICAgICAgcHJldlRpbGUgPSBwcmV2VGlsZVJlY29yZC50aWxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2VGlsZS5sZXZlbCA8PSBjdXRvZmYgfHwgcHJldlRpbGUuYmVpbmdEcmF3biApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggIXdvcnN0VGlsZSApIHtcbiAgICAgICAgICAgICAgICAgICAgd29yc3RUaWxlICAgICAgID0gcHJldlRpbGU7XG4gICAgICAgICAgICAgICAgICAgIHdvcnN0VGlsZUluZGV4ICA9IGk7XG4gICAgICAgICAgICAgICAgICAgIHdvcnN0VGlsZVJlY29yZCA9IHByZXZUaWxlUmVjb3JkO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcmV2VGltZSAgICA9IHByZXZUaWxlLmxhc3RUb3VjaFRpbWU7XG4gICAgICAgICAgICAgICAgd29yc3RUaW1lICAgPSB3b3JzdFRpbGUubGFzdFRvdWNoVGltZTtcbiAgICAgICAgICAgICAgICBwcmV2TGV2ZWwgICA9IHByZXZUaWxlLmxldmVsO1xuICAgICAgICAgICAgICAgIHdvcnN0TGV2ZWwgID0gd29yc3RUaWxlLmxldmVsO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2VGltZSA8IHdvcnN0VGltZSB8fFxuICAgICAgICAgICAgICAgICAgICggcHJldlRpbWUgPT0gd29yc3RUaW1lICYmIHByZXZMZXZlbCA+IHdvcnN0TGV2ZWwgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgd29yc3RUaWxlICAgICAgID0gcHJldlRpbGU7XG4gICAgICAgICAgICAgICAgICAgIHdvcnN0VGlsZUluZGV4ICA9IGk7XG4gICAgICAgICAgICAgICAgICAgIHdvcnN0VGlsZVJlY29yZCA9IHByZXZUaWxlUmVjb3JkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB3b3JzdFRpbGUgJiYgd29yc3RUaWxlSW5kZXggPj0gMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91bmxvYWRUaWxlKHdvcnN0VGlsZVJlY29yZCk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uSW5kZXggPSB3b3JzdFRpbGVJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RpbGVzTG9hZGVkWyBpbnNlcnRpb25JbmRleCBdID0gbmV3IFRpbGVSZWNvcmQoe1xuICAgICAgICAgICAgdGlsZTogb3B0aW9ucy50aWxlLFxuICAgICAgICAgICAgdGlsZWRJbWFnZTogb3B0aW9ucy50aWxlZEltYWdlXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHRpbGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIHRpbGVkSW1hZ2UuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2V9IHRpbGVkSW1hZ2VcbiAgICAgKi9cbiAgICBjbGVhclRpbGVzRm9yOiBmdW5jdGlvbiggdGlsZWRJbWFnZSApIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCh0aWxlZEltYWdlLCAnW1RpbGVDYWNoZS5jbGVhclRpbGVzRm9yXSB0aWxlZEltYWdlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIHZhciB0aWxlUmVjb3JkO1xuICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLl90aWxlc0xvYWRlZC5sZW5ndGg7ICsraSApIHtcbiAgICAgICAgICAgIHRpbGVSZWNvcmQgPSB0aGlzLl90aWxlc0xvYWRlZFsgaSBdO1xuICAgICAgICAgICAgaWYgKCB0aWxlUmVjb3JkLnRpbGVkSW1hZ2UgPT09IHRpbGVkSW1hZ2UgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5sb2FkVGlsZSh0aWxlUmVjb3JkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90aWxlc0xvYWRlZC5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZVxuICAgIGdldEltYWdlUmVjb3JkOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCh1cmwsICdbVGlsZUNhY2hlLmdldEltYWdlUmVjb3JkXSB1cmwgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlc0xvYWRlZFt1cmxdO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX3VubG9hZFRpbGU6IGZ1bmN0aW9uKHRpbGVSZWNvcmQpIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydCh0aWxlUmVjb3JkLCAnW1RpbGVDYWNoZS5fdW5sb2FkVGlsZV0gdGlsZVJlY29yZCBpcyByZXF1aXJlZCcpO1xuICAgICAgICB2YXIgdGlsZSA9IHRpbGVSZWNvcmQudGlsZTtcbiAgICAgICAgdmFyIHRpbGVkSW1hZ2UgPSB0aWxlUmVjb3JkLnRpbGVkSW1hZ2U7XG5cbiAgICAgICAgdGlsZS51bmxvYWQoKTtcbiAgICAgICAgdGlsZS5jYWNoZUltYWdlUmVjb3JkID0gbnVsbDtcblxuICAgICAgICB2YXIgaW1hZ2VSZWNvcmQgPSB0aGlzLl9pbWFnZXNMb2FkZWRbdGlsZS51cmxdO1xuICAgICAgICBpbWFnZVJlY29yZC5yZW1vdmVUaWxlKHRpbGUpO1xuICAgICAgICBpZiAoIWltYWdlUmVjb3JkLmdldFRpbGVDb3VudCgpKSB7XG4gICAgICAgICAgICBpbWFnZVJlY29yZC5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faW1hZ2VzTG9hZGVkW3RpbGUudXJsXTtcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlc0xvYWRlZENvdW50LS07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlcmVkIHdoZW4gYSB0aWxlIGhhcyBqdXN0IGJlZW4gdW5sb2FkZWQgZnJvbSBtZW1vcnkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCB0aWxlLXVubG9hZGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBPcGVuU2VhZHJhZ29uLlZpZXdlclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gdGlsZWRJbWFnZSAtIFRoZSB0aWxlZCBpbWFnZSBvZiB0aGUgdW5sb2FkZWQgdGlsZS5cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGV9IHRpbGUgLSBUaGUgdGlsZSB3aGljaCBoYXMgYmVlbiB1bmxvYWRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRpbGVkSW1hZ2Uudmlld2VyLnJhaXNlRXZlbnQoXCJ0aWxlLXVubG9hZGVkXCIsIHtcbiAgICAgICAgICAgIHRpbGU6IHRpbGUsXG4gICAgICAgICAgICB0aWxlZEltYWdlOiB0aWxlZEltYWdlXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbn0oIE9wZW5TZWFkcmFnb24gKSk7XG5cbi8qXG4gKiBPcGVuU2VhZHJhZ29uIC0gV29ybGRcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDkgQ29kZVBsZXggRm91bmRhdGlvblxuICogQ29weXJpZ2h0IChDKSAyMDEwLTIwMTMgT3BlblNlYWRyYWdvbiBjb250cmlidXRvcnNcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgQ29kZVBsZXggRm91bmRhdGlvbiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICogUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAqIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbi8qKlxuICogQGNsYXNzIFdvcmxkXG4gKiBAbWVtYmVyb2YgT3BlblNlYWRyYWdvblxuICogQGV4dGVuZHMgT3BlblNlYWRyYWdvbi5FdmVudFNvdXJjZVxuICogQGNsYXNzZGVzYyBLZWVwcyB0cmFjayBvZiBhbGwgb2YgdGhlIHRpbGVkIGltYWdlcyBpbiB0aGUgc2NlbmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFdvcmxkIG9wdGlvbnMuXG4gKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVmlld2VyfSBvcHRpb25zLnZpZXdlciAtIFRoZSBWaWV3ZXIgdGhhdCBvd25zIHRoaXMgV29ybGQuXG4gKiovXG4kLldvcmxkID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQuY29uc29sZS5hc3NlcnQoIG9wdGlvbnMudmlld2VyLCBcIltXb3JsZF0gb3B0aW9ucy52aWV3ZXIgaXMgcmVxdWlyZWRcIiApO1xuXG4gICAgJC5FdmVudFNvdXJjZS5jYWxsKCB0aGlzICk7XG5cbiAgICB0aGlzLnZpZXdlciA9IG9wdGlvbnMudmlld2VyO1xuICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgdGhpcy5fbmVlZHNEcmF3ID0gZmFsc2U7XG4gICAgdGhpcy5fYXV0b1JlZmlndXJlU2l6ZXMgPSB0cnVlO1xuICAgIHRoaXMuX25lZWRzU2l6ZXNGaWd1cmVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGVsZWdhdGVkRmlndXJlU2l6ZXMgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMuX2F1dG9SZWZpZ3VyZVNpemVzKSB7XG4gICAgICAgICAgICBfdGhpcy5fZmlndXJlU2l6ZXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLl9uZWVkc1NpemVzRmlndXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fZmlndXJlU2l6ZXMoKTtcbn07XG5cbiQuZXh0ZW5kKCAkLldvcmxkLnByb3RvdHlwZSwgJC5FdmVudFNvdXJjZS5wcm90b3R5cGUsIC8qKiBAbGVuZHMgT3BlblNlYWRyYWdvbi5Xb3JsZC5wcm90b3R5cGUgKi97XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBzcGVjaWZpZWQgaXRlbS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gaXRlbSAtIFRoZSBpdGVtIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaW5kZXhdIC0gSW5kZXggZm9yIHRoZSBpdGVtLiBJZiBub3Qgc3BlY2lmaWVkLCBnb2VzIGF0IHRoZSB0b3AuXG4gICAgICogQGZpcmVzIE9wZW5TZWFkcmFnb24uV29ybGQuZXZlbnQ6YWRkLWl0ZW1cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5Xb3JsZC5ldmVudDptZXRyaWNzLWNoYW5nZVxuICAgICAqL1xuICAgIGFkZEl0ZW06IGZ1bmN0aW9uKCBpdGVtLCBvcHRpb25zICkge1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGl0ZW0sIFwiW1dvcmxkLmFkZEl0ZW1dIGl0ZW0gaXMgcmVxdWlyZWRcIik7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoaXRlbSBpbnN0YW5jZW9mICQuVGlsZWRJbWFnZSwgXCJbV29ybGQuYWRkSXRlbV0gb25seSBUaWxlZEltYWdlcyBzdXBwb3J0ZWQgYXQgdGhpcyB0aW1lXCIpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5pbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0aGlzLl9pdGVtcy5sZW5ndGgsIG9wdGlvbnMuaW5kZXgpKTtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYXV0b1JlZmlndXJlU2l6ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpZ3VyZVNpemVzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZWVkc1NpemVzRmlndXJlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9uZWVkc0RyYXcgPSB0cnVlO1xuXG4gICAgICAgIGl0ZW0uYWRkSGFuZGxlcignYm91bmRzLWNoYW5nZScsIHRoaXMuX2RlbGVnYXRlZEZpZ3VyZVNpemVzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFpc2VkIHdoZW4gYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgV29ybGQuXG4gICAgICAgICAqIEBldmVudCBhZGQtaXRlbVxuICAgICAgICAgKiBAbWVtYmVyT2YgT3BlblNlYWRyYWdvbi5Xb3JsZFxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVmlld2VyfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBXb3JsZCB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gaXRlbSAtIFRoZSBpdGVtIHRoYXQgaGFzIGJlZW4gYWRkZWQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ2FkZC1pdGVtJywge1xuICAgICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICB9ICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaXRlbSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIFRoZSBpdGVtJ3MgaW5kZXguXG4gICAgICogQHJldHVybnMge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gVGhlIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICAgKi9cbiAgICBnZXRJdGVtQXQ6IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgICAgICAgJC5jb25zb2xlLmFzc2VydChpbmRleCAhPT0gdW5kZWZpbmVkLCBcIltXb3JsZC5nZXRJdGVtQXRdIGluZGV4IGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbIGluZGV4IF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIGl0ZW0gb3IgLTEgaWYgbm90IHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2V9IGl0ZW0gLSBUaGUgaXRlbS5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gb3IgLTEgaWYgbm90IHByZXNlbnQuXG4gICAgICovXG4gICAgZ2V0SW5kZXhPZkl0ZW06IGZ1bmN0aW9uKCBpdGVtICkge1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGl0ZW0sIFwiW1dvcmxkLmdldEluZGV4T2ZJdGVtXSBpdGVtIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICByZXR1cm4gJC5pbmRleE9mKCB0aGlzLl9pdGVtcywgaXRlbSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGl0ZW1zIHVzZWQuXG4gICAgICovXG4gICAgZ2V0SXRlbUNvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBpbmRleCBvZiBhIGl0ZW0gc28gdGhhdCBpdCBhcHBlYXJzIG92ZXIgb3IgdW5kZXIgb3RoZXJzLlxuICAgICAqIEBwYXJhbSB7T3BlblNlYWRyYWdvbi5UaWxlZEltYWdlfSBpdGVtIC0gVGhlIGl0ZW0gdG8gbW92ZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBUaGUgbmV3IGluZGV4LlxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLldvcmxkLmV2ZW50Oml0ZW0taW5kZXgtY2hhbmdlXG4gICAgICovXG4gICAgc2V0SXRlbUluZGV4OiBmdW5jdGlvbiggaXRlbSwgaW5kZXggKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoaXRlbSwgXCJbV29ybGQuc2V0SXRlbUluZGV4XSBpdGVtIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAkLmNvbnNvbGUuYXNzZXJ0KGluZGV4ICE9PSB1bmRlZmluZWQsIFwiW1dvcmxkLnNldEl0ZW1JbmRleF0gaW5kZXggaXMgcmVxdWlyZWRcIik7XG5cbiAgICAgICAgdmFyIG9sZEluZGV4ID0gdGhpcy5nZXRJbmRleE9mSXRlbSggaXRlbSApO1xuXG4gICAgICAgIGlmICggaW5kZXggPj0gdGhpcy5faXRlbXMubGVuZ3RoICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkluZGV4IGJpZ2dlciB0aGFuIG51bWJlciBvZiBsYXllcnMuXCIgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggaW5kZXggPT09IG9sZEluZGV4IHx8IG9sZEluZGV4ID09PSAtMSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2l0ZW1zLnNwbGljZSggb2xkSW5kZXgsIDEgKTtcbiAgICAgICAgdGhpcy5faXRlbXMuc3BsaWNlKCBpbmRleCwgMCwgaXRlbSApO1xuICAgICAgICB0aGlzLl9uZWVkc0RyYXcgPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiB0aGUgb3JkZXIgb2YgdGhlIGluZGV4ZXMgaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50IGl0ZW0taW5kZXgtY2hhbmdlXG4gICAgICAgICAqIEBtZW1iZXJPZiBPcGVuU2VhZHJhZ29uLldvcmxkXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5Xb3JsZH0gZXZlbnRTb3VyY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgV29ybGQgd2hpY2ggcmFpc2VkIHRoZSBldmVudC5cbiAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2V9IGl0ZW0gLSBUaGUgaXRlbSB3aG9zZSBpbmRleCBoYXNcbiAgICAgICAgICogYmVlbiBjaGFuZ2VkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwcmV2aW91c0luZGV4IC0gVGhlIHByZXZpb3VzIGluZGV4IG9mIHRoZSBpdGVtXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBuZXdJbmRleCAtIFRoZSBuZXcgaW5kZXggb2YgdGhlIGl0ZW1cbiAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYWlzZUV2ZW50KCAnaXRlbS1pbmRleC1jaGFuZ2UnLCB7XG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgICAgcHJldmlvdXNJbmRleDogb2xkSW5kZXgsXG4gICAgICAgICAgICBuZXdJbmRleDogaW5kZXhcbiAgICAgICAgfSApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gaXRlbS5cbiAgICAgKiBAcGFyYW0ge09wZW5TZWFkcmFnb24uVGlsZWRJbWFnZX0gaXRlbSAtIFRoZSBpdGVtIHRvIHJlbW92ZS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5Xb3JsZC5ldmVudDpyZW1vdmUtaXRlbVxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLldvcmxkLmV2ZW50Om1ldHJpY3MtY2hhbmdlXG4gICAgICovXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICAgICQuY29uc29sZS5hc3NlcnQoaXRlbSwgXCJbV29ybGQucmVtb3ZlSXRlbV0gaXRlbSBpcyByZXF1aXJlZFwiKTtcblxuICAgICAgICB2YXIgaW5kZXggPSAkLmluZGV4T2YodGhpcy5faXRlbXMsIGl0ZW0gKTtcbiAgICAgICAgaWYgKCBpbmRleCA9PT0gLTEgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtLnJlbW92ZUhhbmRsZXIoJ2JvdW5kcy1jaGFuZ2UnLCB0aGlzLl9kZWxlZ2F0ZWRGaWd1cmVTaXplcyk7XG4gICAgICAgIGl0ZW0uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9pdGVtcy5zcGxpY2UoIGluZGV4LCAxICk7XG4gICAgICAgIHRoaXMuX2ZpZ3VyZVNpemVzKCk7XG4gICAgICAgIHRoaXMuX25lZWRzRHJhdyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JhaXNlUmVtb3ZlSXRlbShpdGVtKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBpdGVtcy5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5Xb3JsZC5ldmVudDpyZW1vdmUtaXRlbVxuICAgICAqIEBmaXJlcyBPcGVuU2VhZHJhZ29uLldvcmxkLmV2ZW50Om1ldHJpY3MtY2hhbmdlXG4gICAgICovXG4gICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgYW55IHBlbmRpbmcgaW1hZ2VzIGFyZSBjYW5jZWxlZCBzbyB0aGUgd29ybGQgaXRlbXMgZG9uJ3QgZ2V0IG1lc3NlZCB1cFxuICAgICAgICB0aGlzLnZpZXdlci5fY2FuY2VsUGVuZGluZ0ltYWdlcygpO1xuICAgICAgICB2YXIgaXRlbTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaXRlbSA9IHRoaXMuX2l0ZW1zW2ldO1xuICAgICAgICAgICAgaXRlbS5yZW1vdmVIYW5kbGVyKCdib3VuZHMtY2hhbmdlJywgdGhpcy5fZGVsZWdhdGVkRmlndXJlU2l6ZXMpO1xuICAgICAgICAgICAgaXRlbS5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVtb3ZlZEl0ZW1zID0gdGhpcy5faXRlbXM7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgICAgIHRoaXMuX2ZpZ3VyZVNpemVzKCk7XG4gICAgICAgIHRoaXMuX25lZWRzRHJhdyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlbW92ZWRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaXRlbSA9IHJlbW92ZWRJdGVtc1tpXTtcbiAgICAgICAgICAgIHRoaXMuX3JhaXNlUmVtb3ZlSXRlbShpdGVtKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHRpbGVzIGFuZCB0cmlnZ2VycyB1cGRhdGVzIGZvciBhbGwgaXRlbXMuXG4gICAgICovXG4gICAgcmVzZXRJdGVtczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuX2l0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgdGhpcy5faXRlbXNbaV0ucmVzZXQoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIChpLmUuIGFuaW1hdGVzIGJvdW5kcyBvZikgYWxsIGl0ZW1zLlxuICAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLl9pdGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIGFuaW1hdGVkID0gdGhpcy5faXRlbXNbaV0udXBkYXRlKCkgfHwgYW5pbWF0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW5pbWF0ZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGFsbCBpdGVtcy5cbiAgICAgKi9cbiAgICBkcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5faXRlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtc1tpXS5kcmF3KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9uZWVkc0RyYXcgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgYW55IGl0ZW1zIG5lZWQgdXBkYXRpbmcuXG4gICAgICovXG4gICAgbmVlZHNEcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5faXRlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuX2l0ZW1zW2ldLm5lZWRzRHJhdygpICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9uZWVkc0RyYXc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPcGVuU2VhZHJhZ29uLlJlY3R9IFRoZSBzbWFsbGVzdCByZWN0YW5nbGUgdGhhdCBlbmNsb3NlcyBhbGwgaXRlbXMsIGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzLlxuICAgICAqL1xuICAgIGdldEhvbWVCb3VuZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faG9tZUJvdW5kcy5jbG9uZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUbyBmYWNpbGl0YXRlIHpvb20gY29uc3RyYWludHMsIHdlIGtlZXAgdHJhY2sgb2YgdGhlIHBpeGVsIGRlbnNpdHkgb2YgdGhlXG4gICAgICogZGVuc2VzdCBpdGVtIGluIHRoZSBXb3JsZCAoaS5lLiB0aGUgaXRlbSB3aG9zZSBjb250ZW50IHNpemUgdG8gdmlld3BvcnQgc2l6ZVxuICAgICAqIHJhdGlvIGlzIHRoZSBoaWdoZXN0KSBhbmQgc2F2ZSBpdCBhcyB0aGlzIFwiY29udGVudCBmYWN0b3JcIi5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNvbnRlbnQgdW5pdHMgcGVyIHZpZXdwb3J0IHVuaXQuXG4gICAgICovXG4gICAgZ2V0Q29udGVudEZhY3RvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50RmFjdG9yO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgc2V0dGluZyB0aGlzIGZsYWcgdG8gZmFsc2UgYWxsb3dzIHRoZSBib3VuZHMtY2hhbmdlIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBvbiB0aWxlZEltYWdlcyB0byBza2lwIGNhbGN1bGF0aW9ucyBvbiB0aGUgd29ybGQgYm91bmRzLiBJZiBhIGxvdCBvZiBpbWFnZXMgYXJlIGdvaW5nIHRvIGJlIHBvc2l0aW9uZWQgaW5cbiAgICAgKiByYXBpZCBzdWNjZXNzaW9uLCB0aGlzIGlzIGEgZ29vZCBpZGVhLiBXaGVuIGZpbmlzaGVkLCBzZXRBdXRvUmVmaWd1cmVTaXplcyBzaG91bGQgYmUgY2FsbGVkIHdpdGggdHJ1ZVxuICAgICAqIG9yIHRoZSBzeXN0ZW0gbWF5IGJlaGF2ZSBvZGRseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIHdoaWNoIHRvIHNldCB0aGUgZmxhZy5cbiAgICAgKi9cbiAgICBzZXRBdXRvUmVmaWd1cmVTaXplczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXV0b1JlZmlndXJlU2l6ZXMgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYgdGhpcy5fbmVlZHNTaXplc0ZpZ3VyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpZ3VyZVNpemVzKCk7XG4gICAgICAgICAgICB0aGlzLl9uZWVkc1NpemVzRmlndXJlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFycmFuZ2VzIGFsbCBvZiB0aGUgVGlsZWRJbWFnZXMgd2l0aCB0aGUgc3BlY2lmaWVkIHNldHRpbmdzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3BlY2lmaWVzIGhvdyB0byBhcnJhbmdlLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW1tZWRpYXRlbHk9ZmFsc2VdIC0gV2hldGhlciB0byBhbmltYXRlIHRvIHRoZSBuZXcgYXJyYW5nZW1lbnQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmxheW91dF0gLSBTZWUgY29sbGVjdGlvbkxheW91dCBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucm93c10gLSBTZWUgY29sbGVjdGlvblJvd3MgaW4ge0BsaW5rIE9wZW5TZWFkcmFnb24uT3B0aW9uc30uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvbHVtbnNdIC0gU2VlIGNvbGxlY3Rpb25Db2x1bW5zIGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50aWxlU2l6ZV0gLSBTZWUgY29sbGVjdGlvblRpbGVTaXplIGluIHtAbGluayBPcGVuU2VhZHJhZ29uLk9wdGlvbnN9LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50aWxlTWFyZ2luXSAtIFNlZSBjb2xsZWN0aW9uVGlsZU1hcmdpbiBpbiB7QGxpbmsgT3BlblNlYWRyYWdvbi5PcHRpb25zfS5cbiAgICAgKiBAZmlyZXMgT3BlblNlYWRyYWdvbi5Xb3JsZC5ldmVudDptZXRyaWNzLWNoYW5nZVxuICAgICAqL1xuICAgIGFycmFuZ2U6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBpbW1lZGlhdGVseSA9IG9wdGlvbnMuaW1tZWRpYXRlbHkgfHwgZmFsc2U7XG4gICAgICAgIHZhciBsYXlvdXQgPSBvcHRpb25zLmxheW91dCB8fCAkLkRFRkFVTFRfU0VUVElOR1MuY29sbGVjdGlvbkxheW91dDtcbiAgICAgICAgdmFyIHJvd3MgPSBvcHRpb25zLnJvd3MgfHwgJC5ERUZBVUxUX1NFVFRJTkdTLmNvbGxlY3Rpb25Sb3dzO1xuICAgICAgICB2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucyB8fCAkLkRFRkFVTFRfU0VUVElOR1MuY29sbGVjdGlvbkNvbHVtbnM7XG4gICAgICAgIHZhciB0aWxlU2l6ZSA9IG9wdGlvbnMudGlsZVNpemUgfHwgJC5ERUZBVUxUX1NFVFRJTkdTLmNvbGxlY3Rpb25UaWxlU2l6ZTtcbiAgICAgICAgdmFyIHRpbGVNYXJnaW4gPSBvcHRpb25zLnRpbGVNYXJnaW4gfHwgJC5ERUZBVUxUX1NFVFRJTkdTLmNvbGxlY3Rpb25UaWxlTWFyZ2luO1xuICAgICAgICB2YXIgaW5jcmVtZW50ID0gdGlsZVNpemUgKyB0aWxlTWFyZ2luO1xuICAgICAgICB2YXIgd3JhcDtcbiAgICAgICAgaWYgKCFvcHRpb25zLnJvd3MgJiYgY29sdW1ucykge1xuICAgICAgICAgICAgd3JhcCA9IGNvbHVtbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwID0gTWF0aC5jZWlsKHRoaXMuX2l0ZW1zLmxlbmd0aCAvIHJvd3MpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gMDtcbiAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICB2YXIgaXRlbSwgYm94LCB3aWR0aCwgaGVpZ2h0LCBwb3NpdGlvbjtcblxuICAgICAgICB0aGlzLnNldEF1dG9SZWZpZ3VyZVNpemVzKGZhbHNlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgJiYgKGkgJSB3cmFwKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgICAgICAgICB5ICs9IGluY3JlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBpbmNyZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbSA9IHRoaXMuX2l0ZW1zW2ldO1xuICAgICAgICAgICAgYm94ID0gaXRlbS5nZXRCb3VuZHMoKTtcbiAgICAgICAgICAgIGlmIChib3gud2lkdGggPiBib3guaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aWxlU2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aWxlU2l6ZSAqIChib3gud2lkdGggLyBib3guaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGggKiAoYm94LmhlaWdodCAvIGJveC53aWR0aCk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IG5ldyAkLlBvaW50KHggKyAoKHRpbGVTaXplIC0gd2lkdGgpIC8gMiksXG4gICAgICAgICAgICAgICAgeSArICgodGlsZVNpemUgLSBoZWlnaHQpIC8gMikpO1xuXG4gICAgICAgICAgICBpdGVtLnNldFBvc2l0aW9uKHBvc2l0aW9uLCBpbW1lZGlhdGVseSk7XG4gICAgICAgICAgICBpdGVtLnNldFdpZHRoKHdpZHRoLCBpbW1lZGlhdGVseSk7XG5cbiAgICAgICAgICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgICAgIHggKz0gaW5jcmVtZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB5ICs9IGluY3JlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEF1dG9SZWZpZ3VyZVNpemVzKHRydWUpO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlXG4gICAgX2ZpZ3VyZVNpemVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9sZEhvbWVCb3VuZHMgPSB0aGlzLl9ob21lQm91bmRzID8gdGhpcy5faG9tZUJvdW5kcy5jbG9uZSgpIDogbnVsbDtcbiAgICAgICAgdmFyIG9sZENvbnRlbnRTaXplID0gdGhpcy5fY29udGVudFNpemUgPyB0aGlzLl9jb250ZW50U2l6ZS5jbG9uZSgpIDogbnVsbDtcbiAgICAgICAgdmFyIG9sZENvbnRlbnRGYWN0b3IgPSB0aGlzLl9jb250ZW50RmFjdG9yIHx8IDA7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvbWVCb3VuZHMgPSBuZXcgJC5SZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgdGhpcy5fY29udGVudFNpemUgPSBuZXcgJC5Qb2ludCgxLCAxKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRGYWN0b3IgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9pdGVtc1swXTtcbiAgICAgICAgICAgIHZhciBib3VuZHMgPSBpdGVtLmdldEJvdW5kcygpO1xuICAgICAgICAgICAgdGhpcy5fY29udGVudEZhY3RvciA9IGl0ZW0uZ2V0Q29udGVudFNpemUoKS54IC8gYm91bmRzLndpZHRoO1xuICAgICAgICAgICAgdmFyIGNsaXBwZWRCb3VuZHMgPSBpdGVtLmdldENsaXBwZWRCb3VuZHMoKTtcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gY2xpcHBlZEJvdW5kcy54O1xuICAgICAgICAgICAgdmFyIHRvcCA9IGNsaXBwZWRCb3VuZHMueTtcbiAgICAgICAgICAgIHZhciByaWdodCA9IGNsaXBwZWRCb3VuZHMueCArIGNsaXBwZWRCb3VuZHMud2lkdGg7XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gY2xpcHBlZEJvdW5kcy55ICsgY2xpcHBlZEJvdW5kcy5oZWlnaHQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuX2l0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IHRoaXMuX2l0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGJvdW5kcyA9IGl0ZW0uZ2V0Qm91bmRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGVudEZhY3RvciA9IE1hdGgubWF4KHRoaXMuX2NvbnRlbnRGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZ2V0Q29udGVudFNpemUoKS54IC8gYm91bmRzLndpZHRoKTtcbiAgICAgICAgICAgICAgICBjbGlwcGVkQm91bmRzID0gaXRlbS5nZXRDbGlwcGVkQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWluKGxlZnQsIGNsaXBwZWRCb3VuZHMueCk7XG4gICAgICAgICAgICAgICAgdG9wID0gTWF0aC5taW4odG9wLCBjbGlwcGVkQm91bmRzLnkpO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gTWF0aC5tYXgocmlnaHQsIGNsaXBwZWRCb3VuZHMueCArIGNsaXBwZWRCb3VuZHMud2lkdGgpO1xuICAgICAgICAgICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KGJvdHRvbSwgY2xpcHBlZEJvdW5kcy55ICsgY2xpcHBlZEJvdW5kcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9ob21lQm91bmRzID0gbmV3ICQuUmVjdChsZWZ0LCB0b3AsIHJpZ2h0IC0gbGVmdCwgYm90dG9tIC0gdG9wKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRTaXplID0gbmV3ICQuUG9pbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5faG9tZUJvdW5kcy53aWR0aCAqIHRoaXMuX2NvbnRlbnRGYWN0b3IsXG4gICAgICAgICAgICAgICAgdGhpcy5faG9tZUJvdW5kcy5oZWlnaHQgKiB0aGlzLl9jb250ZW50RmFjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50RmFjdG9yICE9PSBvbGRDb250ZW50RmFjdG9yIHx8XG4gICAgICAgICAgICAhdGhpcy5faG9tZUJvdW5kcy5lcXVhbHMob2xkSG9tZUJvdW5kcykgfHxcbiAgICAgICAgICAgICF0aGlzLl9jb250ZW50U2l6ZS5lcXVhbHMob2xkQ29udGVudFNpemUpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhaXNlZCB3aGVuIHRoZSBob21lIGJvdW5kcyBvciBjb250ZW50IGZhY3RvciBjaGFuZ2UuXG4gICAgICAgICAgICAgKiBAZXZlbnQgbWV0cmljcy1jaGFuZ2VcbiAgICAgICAgICAgICAqIEBtZW1iZXJPZiBPcGVuU2VhZHJhZ29uLldvcmxkXG4gICAgICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtPcGVuU2VhZHJhZ29uLldvcmxkfSBldmVudFNvdXJjZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBXb3JsZCB3aGljaCByYWlzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHs/T2JqZWN0fSB1c2VyRGF0YSAtIEFyYml0cmFyeSBzdWJzY3JpYmVyLWRlZmluZWQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnJhaXNlRXZlbnQoJ21ldHJpY3MtY2hhbmdlJywge30pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIHByaXZhdGVcbiAgICBfcmFpc2VSZW1vdmVJdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYWlzZWQgd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQuXG4gICAgICAgICAqIEBldmVudCByZW1vdmUtaXRlbVxuICAgICAgICAgKiBAbWVtYmVyT2YgT3BlblNlYWRyYWdvbi5Xb3JsZFxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge09wZW5TZWFkcmFnb24uV29ybGR9IGV2ZW50U291cmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIFdvcmxkIHdoaWNoIHJhaXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T3BlblNlYWRyYWdvbi5UaWxlZEltYWdlfSBpdGVtIC0gVGhlIGl0ZW0ncyB1bmRlcmx5aW5nIGl0ZW0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7P09iamVjdH0gdXNlckRhdGEgLSBBcmJpdHJhcnkgc3Vic2NyaWJlci1kZWZpbmVkIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFpc2VFdmVudCggJ3JlbW92ZS1pdGVtJywgeyBpdGVtOiBpdGVtIH0gKTtcbiAgICB9XG59KTtcblxufSggT3BlblNlYWRyYWdvbiApKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbnNlYWRyYWdvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vb3BlbnNlYWRyYWdvbi9idWlsZC9vcGVuc2VhZHJhZ29uL29wZW5zZWFkcmFnb24uanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.3.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---\x3e ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (false) {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (false) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (false) {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (false) {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && \"production\" !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (false) {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (false\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (false) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (false\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^\x3c!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('--\x3e');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/\x3c!--([\\s\\S]*?)--\x3e/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      \"production\" !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (false\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && warn$3(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\n    false\n  ) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, warn$3)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, warn$3)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (false) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}}\"\n}\n\nfunction genForScopedSlot (key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el)) +\n    '})'\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return genElement(el$1)\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\nfunction makeFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompiler (baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile (\n    template,\n    options\n  ) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(\n          Object.create(baseOptions.directives),\n          options.directives\n        );\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (false) {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled\n  }\n\n  function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (false) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (functionCompileCache[key] = res)\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(51)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_uuid_v4__ = __webpack_require__(188);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_uuid_v4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_uuid_v4__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_errors__ = __webpack_require__(8);\n\n\n\n\n\n\n/**\n * Represents a Web Annotation.\n *\n * See https://www.w3.org/TR/annotation-model/\n *\n * Note that as the viewer is not currently responsible for storing the\n * annotations the id is generated as a random UUID. This can later be\n * updated by the client should they decide to send the data to their own\n * annotation server.\n * @param {String} motivation\n *   A motivation from the following section of the spec.\n *   https://www.w3.org/TR/annotation-model/#motivation-and-purpose\n * @param {Object} imgInfo\n *   The IIIF image info.\n * @param {Object} creator\n *   The Annotation creator.\n * @param {Object} generator\n *   The Annotation generator.\n */\n\nvar Annotation = function () {\n  function Annotation(_ref) {\n    var _ref$motivation = _ref.motivation,\n        motivation = _ref$motivation === undefined ? __WEBPACK_IMPORTED_MODULE_4__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$motivation,\n        _ref$imgInfo = _ref.imgInfo,\n        imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_4__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$imgInfo,\n        _ref$creator = _ref.creator,\n        creator = _ref$creator === undefined ? null : _ref$creator,\n        _ref$generator = _ref.generator,\n        generator = _ref$generator === undefined ? null : _ref$generator;\n\n    __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, Annotation);\n\n    this['@context'] = ['http://www.w3.org/ns/anno.jsonld', imgInfo['context'] || imgInfo['@context']];\n    this['id'] = __WEBPACK_IMPORTED_MODULE_3_uuid_v4___default()();\n    this.type = 'Annotation';\n    this.motivation = motivation;\n    this.created = new Date().toISOString();\n    this.target = {\n      id: imgInfo['id'] || imgInfo['@id'],\n      width: imgInfo.width,\n      height: imgInfo.height,\n      type: 'Image',\n      format: 'image/jpeg'\n    };\n    if (creator) {\n      this._setMultiItem(this, 'creator', creator);\n    }\n    if (generator) {\n      this._setMultiItem(this, 'generator', generator);\n    }\n    this.created = new Date().toISOString();\n    this.generated = new Date().toISOString();\n  }\n\n  /**\n   * Update the modified time and add creator and generator.\n   * @param {Object} creator\n   *   The Annotation creator.\n   * @param {Object} generator\n   *   The Annotation generator.\n   */\n\n\n  __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(Annotation, [{\n    key: 'modify',\n    value: function modify(_ref2) {\n      var _ref2$creator = _ref2.creator,\n          creator = _ref2$creator === undefined ? null : _ref2$creator,\n          _ref2$generator = _ref2.generator,\n          generator = _ref2$generator === undefined ? null : _ref2$generator;\n\n      this.modified = new Date().toISOString();\n      if (creator) {\n        this._setMultiItem(this, 'creator', creator);\n      }\n      if (generator) {\n        this._setMultiItem(this, 'generator', generator);\n      }\n    }\n\n    /**\n     * Set or update an item where more than one value is allowed.\n     * @param {*} root\n     *   The root attribute for which key should be set to value.\n     * @param {String} key\n     *   The attribute of root for which to add value.\n     * @param {*} value\n     *   The value to be set for key.\n     */\n\n  }, {\n    key: '_setMultiItem',\n    value: function _setMultiItem(root, key, value) {\n      if (root[key] === undefined) {\n        // Set the item if none exists\n        root[key] = value;\n      } else if (root[key].id && value.id && root[key].id === value.id) {\n        // Update the item if IDs exist and match\n        root[key] = value;\n      } else if (Array.isArray(root[key])) {\n        // Add unique items to an array (and update any with the same ID)\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(root[key]), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.id && value.id && item.id === value.id) {\n              root[key][root[key].indexOf(item)] = value;\n              return;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        root[key].push(value);\n      } else {\n        // Create new array if both items are unique\n        root[key] = [root[key], value];\n      }\n      this.modified = new Date().toISOString();\n    }\n\n    /**\n     * Add a tag to the Body and set the fragement selector, if provided.\n     * @param {String} value\n     *   A plain text value.\n     * @param {Object} imgInfo\n     *   The IIIF image info.\n     * @param {*} fragmentURI\n     *   The IIIF image region.\n     */\n\n  }, {\n    key: 'addTag',\n    value: function addTag(value, imgInfo) {\n      var fragmentURI = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (fragmentURI) {\n        this.target.selector = {\n          type: 'FragmentSelector',\n          value: fragmentURI,\n          conformsTo: imgInfo.protocol\n        };\n      }\n\n      this._setMultiItem(this, 'body', {\n        type: 'TextualBody',\n        purpose: 'tagging',\n        value: value\n      });\n    }\n\n    /**\n     * Add a description to the Body.\n     * @param {String} value\n     *   A plain text value.\n     * @param {*} fragmentURI\n     *   The IIIF image region.\n     */\n\n  }, {\n    key: 'addDescription',\n    value: function addDescription(value) {\n      this._setMultiItem(this, 'body', {\n        type: 'TextualBody',\n        purpose: 'describing',\n        value: value,\n        format: 'text/plain'\n      });\n    }\n\n    /**\n     * Add a classification to the Body\n     * @param {String} value\n     *   The value of the resource.\n     */\n\n  }, {\n    key: 'addClassification',\n    value: function addClassification(value) {\n      this._setMultiItem(this, 'body', {\n        type: 'SpecificResource',\n        purpose: 'classifying',\n        value: value\n      });\n    }\n\n    /**\n     * Add a comment to the Body\n     * @param {String} value\n     *   The value of the resource.\n     */\n\n  }, {\n    key: 'addComment',\n    value: function addComment(value) {\n      this._setMultiItem(this, 'body', {\n        type: 'TextualBody',\n        value: value,\n        purpose: 'commenting',\n        format: 'text/plain'\n      });\n    }\n  }]);\n\n  return Annotation;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Annotation);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_errors__ = __webpack_require__(8);\n\n\n\n/**\n * Build an IIIF image URI.\n * Default parameters should be available at all compliance levels\n * (see http://iiif.io/api/image/2.1/compliance)\n * @param {Object} opts\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (_ref) {\n  var _ref$imgInfo = _ref.imgInfo,\n      imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_errors__[\"a\" /* default */].throwIfMissing() : _ref$imgInfo,\n      _ref$region = _ref.region,\n      region = _ref$region === undefined ? 'full' : _ref$region,\n      _ref$size = _ref.size,\n      size = _ref$size === undefined ? 'full' : _ref$size,\n      _ref$rotation = _ref.rotation,\n      rotation = _ref$rotation === undefined ? 0 : _ref$rotation,\n      _ref$quality = _ref.quality,\n      quality = _ref$quality === undefined ? 'default' : _ref$quality,\n      _ref$format = _ref.format,\n      format = _ref$format === undefined ? 'jpg' : _ref$format;\n\n  var source = imgInfo['@id'];\n  var regStr = (typeof region === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(region)) === 'object' ? region.x + ',' + region.y + ',' + region.width + ',' + region.height : region;\n\n  return source + '/' + regStr + '/' + size + '/' + rotation + '/' + quality + '.' + format;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ2V0SW1hZ2VVcmkuanM/NTQwYyJdLCJuYW1lcyI6WyJpbWdJbmZvIiwiZXJyb3JzIiwidGhyb3dJZk1pc3NpbmciLCJyZWdpb24iLCJzaXplIiwicm90YXRpb24iLCJxdWFsaXR5IiwiZm9ybWF0Iiwic291cmNlIiwicmVnU3RyIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOzs7Ozs7QUFNQSx5REFBZSxnQkFPWjtBQUFBLDBCQU5EQSxPQU1DO0FBQUEsTUFOREEsT0FNQyxnQ0FOUyw4REFBQUMsQ0FBT0MsY0FBUCxFQU1UO0FBQUEseUJBTERDLE1BS0M7QUFBQSxNQUxEQSxNQUtDLCtCQUxRLE1BS1I7QUFBQSx1QkFKREMsSUFJQztBQUFBLE1BSkRBLElBSUMsNkJBSk0sTUFJTjtBQUFBLDJCQUhEQyxRQUdDO0FBQUEsTUFIREEsUUFHQyxpQ0FIVSxDQUdWO0FBQUEsMEJBRkRDLE9BRUM7QUFBQSxNQUZEQSxPQUVDLGdDQUZTLFNBRVQ7QUFBQSx5QkFEREMsTUFDQztBQUFBLE1BRERBLE1BQ0MsK0JBRFEsS0FDUjs7QUFDRCxNQUFNQyxTQUFTUixRQUFRLEtBQVIsQ0FBZjtBQUNBLE1BQU1TLFNBQVMsUUFBT04sTUFBUCxzR0FBT0EsTUFBUCxPQUFrQixRQUFsQixHQUNSQSxPQUFPTyxDQURDLFNBQ0lQLE9BQU9RLENBRFgsU0FDZ0JSLE9BQU9TLEtBRHZCLFNBQ2dDVCxPQUFPVSxNQUR2QyxHQUVYVixNQUZKOztBQUlBLFNBQVVLLE1BQVYsU0FBb0JDLE1BQXBCLFNBQThCTCxJQUE5QixTQUFzQ0MsUUFBdEMsU0FBa0RDLE9BQWxELFNBQTZEQyxNQUE3RDtBQUNELEMiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXJyb3JzIGZyb20gJ0AvdXRpbHMvZXJyb3JzJ1xuXG4vKipcbiAqIEJ1aWxkIGFuIElJSUYgaW1hZ2UgVVJJLlxuICogRGVmYXVsdCBwYXJhbWV0ZXJzIHNob3VsZCBiZSBhdmFpbGFibGUgYXQgYWxsIGNvbXBsaWFuY2UgbGV2ZWxzXG4gKiAoc2VlIGh0dHA6Ly9paWlmLmlvL2FwaS9pbWFnZS8yLjEvY29tcGxpYW5jZSlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh7XG4gIGltZ0luZm8gPSBlcnJvcnMudGhyb3dJZk1pc3NpbmcoKSxcbiAgcmVnaW9uID0gJ2Z1bGwnLFxuICBzaXplID0gJ2Z1bGwnLFxuICByb3RhdGlvbiA9IDAsXG4gIHF1YWxpdHkgPSAnZGVmYXVsdCcsXG4gIGZvcm1hdCA9ICdqcGcnXG59KSB7XG4gIGNvbnN0IHNvdXJjZSA9IGltZ0luZm9bJ0BpZCddXG4gIGNvbnN0IHJlZ1N0ciA9IHR5cGVvZiByZWdpb24gPT09ICdvYmplY3QnXG4gICAgPyBgJHtyZWdpb24ueH0sJHtyZWdpb24ueX0sJHtyZWdpb24ud2lkdGh9LCR7cmVnaW9uLmhlaWdodH1gXG4gICAgOiByZWdpb25cblxuICByZXR1cm4gYCR7c291cmNlfS8ke3JlZ1N0cn0vJHtzaXplfS8ke3JvdGF0aW9ufS8ke3F1YWxpdHl9LiR7Zm9ybWF0fWBcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9nZXRJbWFnZVVyaS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(118), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcz80NTc0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(121), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcz9iMjY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(110);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ("value" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz8xZGZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3RjtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = __webpack_require__(112);\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = __webpack_require__(109);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __webpack_require__(21);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcz8wNTc4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\n\nvar _typeof2 = __webpack_require__(21);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzP2FhZDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/NDhlYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval('// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError("Can\'t call method on  " + it);\n  return it;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzPzQ1ZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzPzc1OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("module.exports = true;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzPzJjODAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = __webpack_require__(14)\n  , dPs         = __webpack_require__(138)\n  , enumBugKeys = __webpack_require__(36)\n  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(55)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(131).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzP2Q4Y2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZFBzICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXtcbiAgdmFyIHJlc3VsdDtcbiAgaWYoTyAhPT0gbnVsbCl7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("exports.f = {}.propertyIsEnumerable;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzP2QwZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var def = __webpack_require__(12).f\n  , has = __webpack_require__(11)\n  , TAG = __webpack_require__(7)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz9jOTQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtFQUFrRSwrQkFBK0I7QUFDakciLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var shared = __webpack_require__(42)('keys')\n  , uid    = __webpack_require__(24);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzJhNmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(6)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2I2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0EsdUNBQXVDO0FBQ3ZDIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2Y2NWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(35);\nmodule.exports = function(it){\n  return Object(defined(it));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/YjVjMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(19);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NDlhNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var global         = __webpack_require__(6)\n  , core           = __webpack_require__(4)\n  , LIBRARY        = __webpack_require__(37)\n  , wksExt         = __webpack_require__(47)\n  , defineProperty = __webpack_require__(12).f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzP2I2ZTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHNCQUFzQjtBQUNoRixnRkFBZ0Ysc0JBQXNCO0FBQ3RHIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("exports.f = __webpack_require__(7);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzPzZlZTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanNcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"check-circle":{"width":1536,"height":1792,"paths":[{"d":"M1284 734q0-28-18-46l-91-90q-19-19-45-19t-45 19l-408 407-226-226q-19-19-45-19t-45 19l-91 90q-18 18-18 46 0 27 18 45l362 362q19 19 45 19 27 0 46-19l543-543q18-18 18-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZWNrLWNpcmNsZS5qcz84NmZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsZ0JBQWdCLHFDQUFxQywrVEFBK1QsR0FBRyIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiY2hlY2stY2lyY2xlXCI6e1wid2lkdGhcIjoxNTM2LFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xMjg0IDczNHEwLTI4LTE4LTQ2bC05MS05MHEtMTktMTktNDUtMTl0LTQ1IDE5bC00MDggNDA3LTIyNi0yMjZxLTE5LTE5LTQ1LTE5dC00NSAxOWwtOTEgOTBxLTE4IDE4LTE4IDQ2IDAgMjcgMTggNDVsMzYyIDM2MnExOSAxOSA0NSAxOSAyNyAwIDQ2LTE5bDU0My01NDNxMTgtMTggMTgtNDV6TTE1MzYgODk2cTAgMjA5LTEwMyAzODUuNXQtMjc5LjUgMjc5LjUtMzg1LjUgMTAzLTM4NS41LTEwMy0yNzkuNS0yNzkuNS0xMDMtMzg1LjUgMTAzLTM4NS41IDI3OS41LTI3OS41IDM4NS41LTEwMyAzODUuNSAxMDMgMjc5LjUgMjc5LjUgMTAzIDM4NS41elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9jaGVjay1jaXJjbGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(234)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(96),\n  /* template */\n  __webpack_require__(220),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/NzAwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHlCQUFvTDtBQUNwTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2NiYzVlYmNcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01vZGFsLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTW9kYWwudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi03Y2JjNWViY1xcXCJ9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Nb2RhbC52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL01vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(239)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(99),\n  /* template */\n  __webpack_require__(225),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-f54ae8d2",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZT8wZWFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EseUJBQXNMO0FBQ3RMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1mNTRhZThkMlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Db250cm9sQnV0dG9uLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ29udHJvbEJ1dHRvbi52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWY1NGFlOGQyXFxcIn0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0NvbnRyb2xCdXR0b24udnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtZjU0YWU4ZDJcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(174).polyfill();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VzNi1vYmplY3QtYXNzaWduL2F1dG8uanM/YzJkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9pbmRleCcpLnBvbHlmaWxsKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW9iamVjdC1hc3NpZ24vYXV0by5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("// This file can be required in Browserify and Node.js for automatic polyfill\n// To use it:  require('es6-promise/auto');\n\nmodule.exports = __webpack_require__(175).polyfill();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VzNi1wcm9taXNlL2F1dG8uanM/Y2Y5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBjYW4gYmUgcmVxdWlyZWQgaW4gQnJvd3NlcmlmeSBhbmQgTm9kZS5qcyBmb3IgYXV0b21hdGljIHBvbHlmaWxsXG4vLyBUbyB1c2UgaXQ6ICByZXF1aXJlKCdlczYtcHJvbWlzZS9hdXRvJyk7XG4ndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJykucG9seWZpbGwoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtcHJvbWlzZS9hdXRvLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// optional / simple context binding\nvar aFunction = __webpack_require__(126);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/Y2UwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(19)\n  , document = __webpack_require__(6).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzP2FiNDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("module.exports = !__webpack_require__(10) && !__webpack_require__(18)(function(){\n  return Object.defineProperty(__webpack_require__(55)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz9iZDFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EscUVBQXNFLGdCQUFnQixVQUFVLEdBQUc7QUFDbkcsQ0FBQyIsImZpbGUiOiI1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\nvar LIBRARY        = __webpack_require__(37)\n  , $export        = __webpack_require__(15)\n  , redefine       = __webpack_require__(64)\n  , hide           = __webpack_require__(16)\n  , has            = __webpack_require__(11)\n  , Iterators      = __webpack_require__(22)\n  , $iterCreate    = __webpack_require__(134)\n  , setToStringTag = __webpack_require__(40)\n  , getPrototypeOf = __webpack_require__(61)\n  , ITERATOR       = __webpack_require__(7)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz85YTk0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsYUFBYTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvQ0FBb0M7QUFDNUUsNENBQTRDLG9DQUFvQztBQUNoRixLQUFLLDJCQUEyQixvQ0FBb0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTtBQUNBLGlDQUFpQywyQkFBMkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwiZmlsZSI6IjU3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var pIE            = __webpack_require__(39)\n  , createDesc     = __webpack_require__(23)\n  , toIObject      = __webpack_require__(13)\n  , toPrimitive    = __webpack_require__(45)\n  , has            = __webpack_require__(11)\n  , IE8_DOM_DEFINE = __webpack_require__(56)\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(10) ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz9kN2Q4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFVBQVU7QUFDYjtBQUNBIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKXtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKGhhcyhPLCBQKSlyZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = __webpack_require__(62)\n  , hiddenKeys = __webpack_require__(36).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz8xZTA3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("exports.f = Object.getOwnPropertySymbols;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz9hNWZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = __webpack_require__(11)\n  , toObject    = __webpack_require__(44)\n  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzP2Q0N2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjYxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var has          = __webpack_require__(11)\n  , toIObject    = __webpack_require__(13)\n  , arrayIndexOf = __webpack_require__(128)(false)\n  , IE_PROTO     = __webpack_require__(41)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9mY2VhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(15)\n  , core    = __webpack_require__(4)\n  , fails   = __webpack_require__(18);\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzP2EwM2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsbURBQW1ELE9BQU8sRUFBRTtBQUM1RCIsImZpbGUiOiI2My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(16);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcz8xNDU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $at  = __webpack_require__(141)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(57)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanM/ZmUxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsY0FBYztBQUNkO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsVUFBVTtBQUNWLENBQUMiLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("__webpack_require__(146);\nvar global        = __webpack_require__(6)\n  , hide          = __webpack_require__(16)\n  , Iterators     = __webpack_require__(22)\n  , TO_STRING_TAG = __webpack_require__(7)('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanM/YmYwZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdHQUF3RyxPQUFPO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"chevron-left":{"width":1280,"height":1792,"paths":[{"d":"M1171 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tbGVmdC5qcz84MGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsZ0JBQWdCLHFDQUFxQyxtS0FBbUssR0FBRyIsImZpbGUiOiI2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiY2hldnJvbi1sZWZ0XCI6e1wid2lkdGhcIjoxMjgwLFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xMTcxIDMwMWwtNTMxIDUzMSA1MzEgNTMxcTE5IDE5IDE5IDQ1dC0xOSA0NWwtMTY2IDE2NnEtMTkgMTktNDUgMTl0LTQ1LTE5bC03NDItNzQycS0xOS0xOS0xOS00NXQxOS00NWw3NDItNzQycTE5LTE5IDQ1LTE5dDQ1IDE5bDE2NiAxNjZxMTkgMTkgMTkgNDV0LTE5IDQ1elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9jaGV2cm9uLWxlZnQuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"chevron-right":{"width":1280,"height":1792,"paths":[{"d":"M1107 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tcmlnaHQuanM/MmQ4YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLHVFQUFlLGlCQUFpQixxQ0FBcUMsa0tBQWtLLEdBQUciLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImNoZXZyb24tcmlnaHRcIjp7XCJ3aWR0aFwiOjEyODAsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTExMDcgODc3bC03NDIgNzQycS0xOSAxOS00NSAxOXQtNDUtMTlsLTE2Ni0xNjZxLTE5LTE5LTE5LTQ1dDE5LTQ1bDUzMS01MzEtNTMxLTUzMXEtMTktMTktMTktNDV0MTktNDVsMTY2LTE2NnExOS0xOSA0NS0xOXQ0NSAxOWw3NDIgNzQycTE5IDE5IDE5IDQ1dC0xOSA0NXpcIn1dfX0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWF3ZXNvbWUvaWNvbnMvY2hldnJvbi1yaWdodC5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"expand":{"width":1536,"height":1792,"paths":[{"d":"M755 1056q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23zM1536 192v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2V4cGFuZC5qcz85N2U4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsVUFBVSxxQ0FBcUMscVZBQXFWLEdBQUciLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImV4cGFuZFwiOntcIndpZHRoXCI6MTUzNixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNNzU1IDEwNTZxMCAxMy0xMCAyM2wtMzMyIDMzMiAxNDQgMTQ0cTE5IDE5IDE5IDQ1dC0xOSA0NS00NSAxOWgtNDQ4cS0yNiAwLTQ1LTE5dC0xOS00NXYtNDQ4cTAtMjYgMTktNDV0NDUtMTkgNDUgMTlsMTQ0IDE0NCAzMzItMzMycTEwLTEwIDIzLTEwdDIzIDEwbDExNCAxMTRxMTAgMTAgMTAgMjN6TTE1MzYgMTkydjQ0OHEwIDI2LTE5IDQ1dC00NSAxOS00NS0xOWwtMTQ0LTE0NC0zMzIgMzMycS0xMCAxMC0yMyAxMHQtMjMtMTBsLTExNC0xMTRxLTEwLTEwLTEwLTIzdDEwLTIzbDMzMi0zMzItMTQ0LTE0NHEtMTktMTktMTktNDV0MTktNDUgNDUtMTloNDQ4cTI2IDAgNDUgMTl0MTkgNDV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2V4cGFuZC5qc1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"info-circle":{"width":1536,"height":1792,"paths":[{"d":"M1024 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zM896 480v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2luZm8tY2lyY2xlLmpzPzQ4M2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxlQUFlLHFDQUFxQyxzWkFBc1osR0FBRyIsImZpbGUiOiI3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiaW5mby1jaXJjbGVcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTEwMjQgMTM3NnYtMTYwcTAtMTQtOS0yM3QtMjMtOWgtOTZ2LTUxMnEwLTE0LTktMjN0LTIzLTloLTMyMHEtMTQgMC0yMyA5dC05IDIzdjE2MHEwIDE0IDkgMjN0MjMgOWg5NnYzMjBoLTk2cS0xNCAwLTIzIDl0LTkgMjN2MTYwcTAgMTQgOSAyM3QyMyA5aDQ0OHExNCAwIDIzLTl0OS0yM3pNODk2IDQ4MHYtMTYwcTAtMTQtOS0yM3QtMjMtOWgtMTkycS0xNCAwLTIzIDl0LTkgMjN2MTYwcTAgMTQgOSAyM3QyMyA5aDE5MnExNCAwIDIzLTl0OS0yM3pNMTUzNiA4OTZxMCAyMDktMTAzIDM4NS41dC0yNzkuNSAyNzkuNS0zODUuNSAxMDMtMzg1LjUtMTAzLTI3OS41LTI3OS41LTEwMy0zODUuNSAxMDMtMzg1LjUgMjc5LjUtMjc5LjUgMzg1LjUtMTAzIDM4NS41IDEwMyAyNzkuNSAyNzkuNSAxMDMgMzg1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2luZm8tY2lyY2xlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"list":{"width":1792,"height":1792,"paths":[{"d":"M256 1312v192q0 13-9.5 22.5t-22.5 9.5h-192q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h192q13 0 22.5 9.5t9.5 22.5zM256 928v192q0 13-9.5 22.5t-22.5 9.5h-192q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h192q13 0 22.5 9.5t9.5 22.5zM256 544v192q0 13-9.5 22.5t-22.5 9.5h-192q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h192q13 0 22.5 9.5t9.5 22.5zM1792 1312v192q0 13-9.5 22.5t-22.5 9.5h-1344q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1344q13 0 22.5 9.5t9.5 22.5zM256 160v192q0 13-9.5 22.5t-22.5 9.5h-192q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h192q13 0 22.5 9.5t9.5 22.5zM1792 928v192q0 13-9.5 22.5t-22.5 9.5h-1344q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1344q13 0 22.5 9.5t9.5 22.5zM1792 544v192q0 13-9.5 22.5t-22.5 9.5h-1344q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1344q13 0 22.5 9.5t9.5 22.5zM1792 160v192q0 13-9.5 22.5t-22.5 9.5h-1344q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1344q13 0 22.5 9.5t9.5 22.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2xpc3QuanM/MTQxNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLHVFQUFlLFFBQVEscUNBQXFDLHErQkFBcStCLEdBQUciLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImxpc3RcIjp7XCJ3aWR0aFwiOjE3OTIsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTI1NiAxMzEydjE5MnEwIDEzLTkuNSAyMi41dC0yMi41IDkuNWgtMTkycS0xMyAwLTIyLjUtOS41dC05LjUtMjIuNXYtMTkycTAtMTMgOS41LTIyLjV0MjIuNS05LjVoMTkycTEzIDAgMjIuNSA5LjV0OS41IDIyLjV6TTI1NiA5Mjh2MTkycTAgMTMtOS41IDIyLjV0LTIyLjUgOS41aC0xOTJxLTEzIDAtMjIuNS05LjV0LTkuNS0yMi41di0xOTJxMC0xMyA5LjUtMjIuNXQyMi41LTkuNWgxOTJxMTMgMCAyMi41IDkuNXQ5LjUgMjIuNXpNMjU2IDU0NHYxOTJxMCAxMy05LjUgMjIuNXQtMjIuNSA5LjVoLTE5MnEtMTMgMC0yMi41LTkuNXQtOS41LTIyLjV2LTE5MnEwLTEzIDkuNS0yMi41dDIyLjUtOS41aDE5MnExMyAwIDIyLjUgOS41dDkuNSAyMi41ek0xNzkyIDEzMTJ2MTkycTAgMTMtOS41IDIyLjV0LTIyLjUgOS41aC0xMzQ0cS0xMyAwLTIyLjUtOS41dC05LjUtMjIuNXYtMTkycTAtMTMgOS41LTIyLjV0MjIuNS05LjVoMTM0NHExMyAwIDIyLjUgOS41dDkuNSAyMi41ek0yNTYgMTYwdjE5MnEwIDEzLTkuNSAyMi41dC0yMi41IDkuNWgtMTkycS0xMyAwLTIyLjUtOS41dC05LjUtMjIuNXYtMTkycTAtMTMgOS41LTIyLjV0MjIuNS05LjVoMTkycTEzIDAgMjIuNSA5LjV0OS41IDIyLjV6TTE3OTIgOTI4djE5MnEwIDEzLTkuNSAyMi41dC0yMi41IDkuNWgtMTM0NHEtMTMgMC0yMi41LTkuNXQtOS41LTIyLjV2LTE5MnEwLTEzIDkuNS0yMi41dDIyLjUtOS41aDEzNDRxMTMgMCAyMi41IDkuNXQ5LjUgMjIuNXpNMTc5MiA1NDR2MTkycTAgMTMtOS41IDIyLjV0LTIyLjUgOS41aC0xMzQ0cS0xMyAwLTIyLjUtOS41dC05LjUtMjIuNXYtMTkycTAtMTMgOS41LTIyLjV0MjIuNS05LjVoMTM0NHExMyAwIDIyLjUgOS41dDkuNSAyMi41ek0xNzkyIDE2MHYxOTJxMCAxMy05LjUgMjIuNXQtMjIuNSA5LjVoLTEzNDRxLTEzIDAtMjIuNS05LjV0LTkuNS0yMi41di0xOTJxMC0xMyA5LjUtMjIuNXQyMi41LTkuNWgxMzQ0cTEzIDAgMjIuNSA5LjV0OS41IDIyLjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2xpc3QuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"minus-circle":{"width":1536,"height":1792,"paths":[{"d":"M1216 960v-128q0-26-19-45t-45-19h-768q-26 0-45 19t-19 45v128q0 26 19 45t45 19h768q26 0 45-19t19-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL21pbnVzLWNpcmNsZS5qcz9kNjQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsZ0JBQWdCLHFDQUFxQywyUEFBMlAsR0FBRyIsImZpbGUiOiI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wibWludXMtY2lyY2xlXCI6e1wid2lkdGhcIjoxNTM2LFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xMjE2IDk2MHYtMTI4cTAtMjYtMTktNDV0LTQ1LTE5aC03NjhxLTI2IDAtNDUgMTl0LTE5IDQ1djEyOHEwIDI2IDE5IDQ1dDQ1IDE5aDc2OHEyNiAwIDQ1LTE5dDE5LTQ1ek0xNTM2IDg5NnEwIDIwOS0xMDMgMzg1LjV0LTI3OS41IDI3OS41LTM4NS41IDEwMy0zODUuNS0xMDMtMjc5LjUtMjc5LjUtMTAzLTM4NS41IDEwMy0zODUuNSAyNzkuNS0yNzkuNSAzODUuNS0xMDMgMzg1LjUgMTAzIDI3OS41IDI3OS41IDEwMyAzODUuNXpcIn1dfX0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWF3ZXNvbWUvaWNvbnMvbWludXMtY2lyY2xlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"pencil":{"width":1536,"height":1792,"paths":[{"d":"M363 1536l91-91-235-235-91 91v107h128v128h107zM886 608q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zM832 416l416 416-832 832h-416v-416zM1515 512q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3BlbmNpbC5qcz8wYjgzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsVUFBVSxxQ0FBcUMsd1FBQXdRLEdBQUciLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcInBlbmNpbFwiOntcIndpZHRoXCI6MTUzNixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNMzYzIDE1MzZsOTEtOTEtMjM1LTIzNS05MSA5MXYxMDdoMTI4djEyOGgxMDd6TTg4NiA2MDhxMC0yMi0yMi0yMi0xMCAwLTE3IDdsLTU0MiA1NDJxLTcgNy03IDE3IDAgMjIgMjIgMjIgMTAgMCAxNy03bDU0Mi01NDJxNy03IDctMTd6TTgzMiA0MTZsNDE2IDQxNi04MzIgODMyaC00MTZ2LTQxNnpNMTUxNSA1MTJxMCA1My0zNyA5MGwtMTY2IDE2Ni00MTYtNDE2IDE2Ni0xNjVxMzYtMzggOTAtMzggNTMgMCA5MSAzOGwyMzUgMjM0cTM3IDM5IDM3IDkxelwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9wZW5jaWwuanNcbi8vIG1vZHVsZSBpZCA9IDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"plus-circle":{"width":1536,"height":1792,"paths":[{"d":"M1216 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3BsdXMtY2lyY2xlLmpzPzEyN2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxlQUFlLHFDQUFxQyxzV0FBc1csR0FBRyIsImZpbGUiOiI3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wicGx1cy1jaXJjbGVcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTEyMTYgOTYwdi0xMjhxMC0yNi0xOS00NXQtNDUtMTloLTI1NnYtMjU2cTAtMjYtMTktNDV0LTQ1LTE5aC0xMjhxLTI2IDAtNDUgMTl0LTE5IDQ1djI1NmgtMjU2cS0yNiAwLTQ1IDE5dC0xOSA0NXYxMjhxMCAyNiAxOSA0NXQ0NSAxOWgyNTZ2MjU2cTAgMjYgMTkgNDV0NDUgMTloMTI4cTI2IDAgNDUtMTl0MTktNDV2LTI1NmgyNTZxMjYgMCA0NS0xOXQxOS00NXpNMTUzNiA4OTZxMCAyMDktMTAzIDM4NS41dC0yNzkuNSAyNzkuNS0zODUuNSAxMDMtMzg1LjUtMTAzLTI3OS41LTI3OS41LTEwMy0zODUuNSAxMDMtMzg1LjUgMjc5LjUtMjc5LjUgMzg1LjUtMTAzIDM4NS41IDEwMyAyNzkuNSAyNzkuNSAxMDMgMzg1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3BsdXMtY2lyY2xlLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"question-circle":{"width":1536,"height":1792,"paths":[{"d":"M896 1376v-192q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v192q0 14 9 23t23 9h192q14 0 23-9t9-23zM1152 704q0-88-55.5-163t-138.5-116-170-41q-243 0-371 213-15 24 8 42l132 100q7 6 19 6 16 0 25-12 53-68 86-92 34-24 86-24 48 0 85.5 26t37.5 59q0 38-20 61t-68 45q-63 28-115.5 86.5t-52.5 125.5v36q0 14 9 23t23 9h192q14 0 23-9t9-23q0-19 21.5-49.5t54.5-49.5q32-18 49-28.5t46-35 44.5-48 28-60.5 12.5-81zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3F1ZXN0aW9uLWNpcmNsZS5qcz9jOGM3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsbUJBQW1CLHFDQUFxQywwaEJBQTBoQixHQUFHIiwiZmlsZSI6Ijc1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9JY29uLnZ1ZSdcblxuSWNvbi5yZWdpc3Rlcih7XCJxdWVzdGlvbi1jaXJjbGVcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTg5NiAxMzc2di0xOTJxMC0xNC05LTIzdC0yMy05aC0xOTJxLTE0IDAtMjMgOXQtOSAyM3YxOTJxMCAxNCA5IDIzdDIzIDloMTkycTE0IDAgMjMtOXQ5LTIzek0xMTUyIDcwNHEwLTg4LTU1LjUtMTYzdC0xMzguNS0xMTYtMTcwLTQxcS0yNDMgMC0zNzEgMjEzLTE1IDI0IDggNDJsMTMyIDEwMHE3IDYgMTkgNiAxNiAwIDI1LTEyIDUzLTY4IDg2LTkyIDM0LTI0IDg2LTI0IDQ4IDAgODUuNSAyNnQzNy41IDU5cTAgMzgtMjAgNjF0LTY4IDQ1cS02MyAyOC0xMTUuNSA4Ni41dC01Mi41IDEyNS41djM2cTAgMTQgOSAyM3QyMyA5aDE5MnExNCAwIDIzLTl0OS0yM3EwLTE5IDIxLjUtNDkuNXQ1NC41LTQ5LjVxMzItMTggNDktMjguNXQ0Ni0zNSA0NC41LTQ4IDI4LTYwLjUgMTIuNS04MXpNMTUzNiA4OTZxMCAyMDktMTAzIDM4NS41dC0yNzkuNSAyNzkuNS0zODUuNSAxMDMtMzg1LjUtMTAzLTI3OS41LTI3OS41LTEwMy0zODUuNSAxMDMtMzg1LjUgMjc5LjUtMjc5LjUgMzg1LjUtMTAzIDM4NS41IDEwMyAyNzkuNSAyNzkuNSAxMDMgMzg1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3F1ZXN0aW9uLWNpcmNsZS5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"refresh":{"width":1536,"height":1792,"paths":[{"d":"M1511 1056q0 5-1 7-64 268-268 434.5t-478 166.5q-146 0-282.5-55t-243.5-157l-129 129q-19 19-45 19t-45-19-19-45v-448q0-26 19-45t45-19h448q26 0 45 19t19 45-19 45l-137 137q71 66 161 102t187 36q134 0 250-65t186-179q11-17 53-117 8-23 30-23h192q13 0 22.5 9.5t9.5 22.5zM1536 256v448q0 26-19 45t-45 19h-448q-26 0-45-19t-19-45 19-45l138-138q-148-137-349-137-134 0-250 65t-186 179q-11 17-53 117-8 23-30 23h-199q-13 0-22.5-9.5t-9.5-22.5v-7q65-268 270-434.5t480-166.5q146 0 284 55.5t245 156.5l130-129q19-19 45-19t45 19 19 45z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3JlZnJlc2guanM/ODNjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLHVFQUFlLFdBQVcscUNBQXFDLHNnQkFBc2dCLEdBQUciLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcInJlZnJlc2hcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTE1MTEgMTA1NnEwIDUtMSA3LTY0IDI2OC0yNjggNDM0LjV0LTQ3OCAxNjYuNXEtMTQ2IDAtMjgyLjUtNTV0LTI0My41LTE1N2wtMTI5IDEyOXEtMTkgMTktNDUgMTl0LTQ1LTE5LTE5LTQ1di00NDhxMC0yNiAxOS00NXQ0NS0xOWg0NDhxMjYgMCA0NSAxOXQxOSA0NS0xOSA0NWwtMTM3IDEzN3E3MSA2NiAxNjEgMTAydDE4NyAzNnExMzQgMCAyNTAtNjV0MTg2LTE3OXExMS0xNyA1My0xMTcgOC0yMyAzMC0yM2gxOTJxMTMgMCAyMi41IDkuNXQ5LjUgMjIuNXpNMTUzNiAyNTZ2NDQ4cTAgMjYtMTkgNDV0LTQ1IDE5aC00NDhxLTI2IDAtNDUtMTl0LTE5LTQ1IDE5LTQ1bDEzOC0xMzhxLTE0OC0xMzctMzQ5LTEzNy0xMzQgMC0yNTAgNjV0LTE4NiAxNzlxLTExIDE3LTUzIDExNy04IDIzLTMwIDIzaC0xOTlxLTEzIDAtMjIuNS05LjV0LTkuNS0yMi41di03cTY1LTI2OCAyNzAtNDM0LjV0NDgwLTE2Ni41cTE0NiAwIDI4NCA1NS41dDI0NSAxNTYuNWwxMzAtMTI5cTE5LTE5IDQ1LTE5dDQ1IDE5IDE5IDQ1elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9yZWZyZXNoLmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"thumbs-up":{"width":1664,"height":1792,"paths":[{"d":"M256 1344q0-26-19-45t-45-19q-27 0-45.5 19t-18.5 45q0 27 18.5 45.5t45.5 18.5q26 0 45-18.5t19-45.5zM416 832v640q0 26-19 45t-45 19h-288q-26 0-45-19t-19-45v-640q0-26 19-45t45-19h288q26 0 45 19t19 45zM1600 832q0 86-55 149 15 44 15 76 3 76-43 137 17 56 0 117-15 57-54 94 9 112-49 181-64 76-197 78h-36-76-17q-66 0-144-15.5t-121.5-29-120.5-39.5q-123-43-158-44-26-1-45-19.5t-19-44.5v-641q0-25 18-43.5t43-20.5q24-2 76-59t101-121q68-87 101-120 18-18 31-48t17.5-48.5 13.5-60.5q7-39 12.5-61t19.5-52 34-50q19-19 45-19 46 0 82.5 10.5t60 26 40 40.5 24 45 12 50 5 45 0.5 39q0 38-9.5 76t-19 60-27.5 56q-3 6-10 18t-11 22-8 24h277q78 0 135 57t57 135z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3RodW1icy11cC5qcz84YWI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsYUFBYSxxQ0FBcUMsNm5CQUE2bkIsR0FBRyIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1widGh1bWJzLXVwXCI6e1wid2lkdGhcIjoxNjY0LFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0yNTYgMTM0NHEwLTI2LTE5LTQ1dC00NS0xOXEtMjcgMC00NS41IDE5dC0xOC41IDQ1cTAgMjcgMTguNSA0NS41dDQ1LjUgMTguNXEyNiAwIDQ1LTE4LjV0MTktNDUuNXpNNDE2IDgzMnY2NDBxMCAyNi0xOSA0NXQtNDUgMTloLTI4OHEtMjYgMC00NS0xOXQtMTktNDV2LTY0MHEwLTI2IDE5LTQ1dDQ1LTE5aDI4OHEyNiAwIDQ1IDE5dDE5IDQ1ek0xNjAwIDgzMnEwIDg2LTU1IDE0OSAxNSA0NCAxNSA3NiAzIDc2LTQzIDEzNyAxNyA1NiAwIDExNy0xNSA1Ny01NCA5NCA5IDExMi00OSAxODEtNjQgNzYtMTk3IDc4aC0zNi03Ni0xN3EtNjYgMC0xNDQtMTUuNXQtMTIxLjUtMjktMTIwLjUtMzkuNXEtMTIzLTQzLTE1OC00NC0yNi0xLTQ1LTE5LjV0LTE5LTQ0LjV2LTY0MXEwLTI1IDE4LTQzLjV0NDMtMjAuNXEyNC0yIDc2LTU5dDEwMS0xMjFxNjgtODcgMTAxLTEyMCAxOC0xOCAzMS00OHQxNy41LTQ4LjUgMTMuNS02MC41cTctMzkgMTIuNS02MXQxOS41LTUyIDM0LTUwcTE5LTE5IDQ1LTE5IDQ2IDAgODIuNSAxMC41dDYwIDI2IDQwIDQwLjUgMjQgNDUgMTIgNTAgNSA0NSAwLjUgMzlxMCAzOC05LjUgNzZ0LTE5IDYwLTI3LjUgNTZxLTMgNi0xMCAxOHQtMTEgMjItOCAyNGgyNzdxNzggMCAxMzUgNTd0NTcgMTM1elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy90aHVtYnMtdXAuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"times-circle":{"width":1536,"height":1792,"paths":[{"d":"M1149 1122q0-26-19-45l-181-181 181-181q19-19 19-45 0-27-19-46l-90-90q-19-19-46-19-26 0-45 19l-181 181-181-181q-19-19-45-19-27 0-46 19l-90 90q-19 19-19 46 0 26 19 45l181 181-181 181q-19 19-19 45 0 27 19 46l90 90q19 19 46 19 26 0 45-19l181-181 181 181q19 19 45 19 27 0 46-19l90-90q19-19 19-46zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3RpbWVzLWNpcmNsZS5qcz8yNmM4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsZ0JBQWdCLHFDQUFxQywyYkFBMmIsR0FBRyIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1widGltZXMtY2lyY2xlXCI6e1wid2lkdGhcIjoxNTM2LFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xMTQ5IDExMjJxMC0yNi0xOS00NWwtMTgxLTE4MSAxODEtMTgxcTE5LTE5IDE5LTQ1IDAtMjctMTktNDZsLTkwLTkwcS0xOS0xOS00Ni0xOS0yNiAwLTQ1IDE5bC0xODEgMTgxLTE4MS0xODFxLTE5LTE5LTQ1LTE5LTI3IDAtNDYgMTlsLTkwIDkwcS0xOSAxOS0xOSA0NiAwIDI2IDE5IDQ1bDE4MSAxODEtMTgxIDE4MXEtMTkgMTktMTkgNDUgMCAyNyAxOSA0Nmw5MCA5MHExOSAxOSA0NiAxOSAyNiAwIDQ1LTE5bDE4MS0xODEgMTgxIDE4MXExOSAxOSA0NSAxOSAyNyAwIDQ2LTE5bDkwLTkwcTE5LTE5IDE5LTQ2ek0xNTM2IDg5NnEwIDIwOS0xMDMgMzg1LjV0LTI3OS41IDI3OS41LTM4NS41IDEwMy0zODUuNS0xMDMtMjc5LjUtMjc5LjUtMTAzLTM4NS41IDEwMy0zODUuNSAyNzkuNS0yNzkuNSAzODUuNS0xMDMgMzg1LjUgMTAzIDI3OS41IDI3OS41IDEwMyAzODUuNXpcIn1dfX0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWF3ZXNvbWUvaWNvbnMvdGltZXMtY2lyY2xlLmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_whatwg_fetch__ = __webpack_require__(243);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_whatwg_fetch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_whatwg_fetch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_es6_promise_auto__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_es6_promise_auto___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_es6_promise_auto__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_es6_object_assign_auto__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_es6_object_assign_auto___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_es6_object_assign_auto__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Viewer_vue__ = __webpack_require__(202);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Viewer_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__components_Viewer_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_normalize_css__ = __webpack_require__(182);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_normalize_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_normalize_css__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  install: function install(Vue) {\n    if (this.installed) {\n      return;\n    }\n    this.installed = true;\n    Vue.component('libcrowds-viewer', __WEBPACK_IMPORTED_MODULE_3__components_Viewer_vue___default.a);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbImluc3RhbGwiLCJWdWUiLCJpbnN0YWxsZWQiLCJjb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5REFBZTtBQUNiQSxTQURhLG1CQUNKQyxHQURJLEVBQ0M7QUFDWixRQUFJLEtBQUtDLFNBQVQsRUFBb0I7QUFDbEI7QUFDRDtBQUNELFNBQUtBLFNBQUwsR0FBaUIsSUFBakI7QUFDQUQsUUFBSUUsU0FBSixDQUFjLGtCQUFkLEVBQWtDLDhEQUFsQztBQUNEO0FBUFksQ0FBZiIsImZpbGUiOiI3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnd2hhdHdnLWZldGNoJ1xuaW1wb3J0ICdlczYtcHJvbWlzZS9hdXRvJ1xuaW1wb3J0ICdlczYtb2JqZWN0LWFzc2lnbi9hdXRvJ1xuXG5pbXBvcnQgVmlld2VyIGZyb20gJy4vY29tcG9uZW50cy9WaWV3ZXIudnVlJ1xuaW1wb3J0ICdub3JtYWxpemUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluc3RhbGwgKFZ1ZSkge1xuICAgIGlmICh0aGlzLmluc3RhbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuaW5zdGFsbGVkID0gdHJ1ZVxuICAgIFZ1ZS5jb21wb25lbnQoJ2xpYmNyb3dkcy12aWV3ZXInLCBWaWV3ZXIpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tYWluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(230)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(94),\n  /* template */\n  __webpack_require__(215),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9BcHAudnVlP2VmMWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBb0w7QUFDcEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTM4YjNiNjQ3XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zOGIzYjY0N1xcXCJ9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BcHAudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kZW1vL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval('module.exports = [\n\t{\n\t\t"tag": "title",\n\t\t"classification": "http://purl.org/dc/terms/title",\n\t\t"mode": "select",\n\t\t"objective": "Tag all of the titles",\n\t\t"guidance": "Draw a box around each title, including any subtitles",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000005/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json"\n\t},\n\t{\n\t\t"tag": "actor",\n\t\t"mode": "select",\n\t\t"objective": "Tag the actors",\n\t\t"guidance": "Draw a box around each actor associated with the highlighted performance",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000005/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589092.0x000002/manifest.json",\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 291,\n\t\t\t\t"y": 1498,\n\t\t\t\t"width": 1737,\n\t\t\t\t"height": 244\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"tag": "date",\n\t\t"mode": "select",\n\t\t"objective": "Tag the date",\n\t\t"guidance": "Draw a box around the date of the highlighted performance",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000005/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589092.0x000002/manifest.json",\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 291,\n\t\t\t\t"y": 1498,\n\t\t\t\t"width": 1737,\n\t\t\t\t"height": 244\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"tag": "title",\n\t\t"classification": "http://purl.org/dc/terms/title",\n\t\t"mode": "select",\n\t\t"objective": "Tag all of the titles",\n\t\t"guidance": "Draw a box around each title, including any subtitles",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000006/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json"\n\t},\n\t{\n\t\t"tag": "actor",\n\t\t"mode": "select",\n\t\t"objective": "Tag the actors",\n\t\t"guidance": "Draw a box around each actor associated with the highlighted performance",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000006/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589092.0x000002/manifest.json",\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 271,\n\t\t\t\t"y": 1190,\n\t\t\t\t"width": 1753,\n\t\t\t\t"height": 265\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"tag": "date",\n\t\t"mode": "select",\n\t\t"objective": "Tag the date",\n\t\t"guidance": "Draw a box around the date of the highlighted performance",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000006/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589092.0x000002/manifest.json",\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 271,\n\t\t\t\t"y": 1190,\n\t\t\t\t"width": 1753,\n\t\t\t\t"height": 265\n\t\t\t}\n\t\t]\n\t}\n];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9zZWxlY3RUYXNrcy5qc29uPzJmZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gW1xuXHR7XG5cdFx0XCJ0YWdcIjogXCJ0aXRsZVwiLFxuXHRcdFwiY2xhc3NpZmljYXRpb25cIjogXCJodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvdGl0bGVcIixcblx0XHRcIm1vZGVcIjogXCJzZWxlY3RcIixcblx0XHRcIm9iamVjdGl2ZVwiOiBcIlRhZyBhbGwgb2YgdGhlIHRpdGxlc1wiLFxuXHRcdFwiZ3VpZGFuY2VcIjogXCJEcmF3IGEgYm94IGFyb3VuZCBlYWNoIHRpdGxlLCBpbmNsdWRpbmcgYW55IHN1YnRpdGxlc1wiLFxuXHRcdFwiaW1nSW5mb1VyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL2ltYWdlL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU3LjB4MDAwMDA1L2luZm8uanNvblwiLFxuXHRcdFwibWFuaWZlc3RVcmlcIjogXCJodHRwczovL2FwaS5ibC51ay9tZXRhZGF0YS9paWlmL2FyazovODEwNTUvdmRjXzEwMDAyMjU4OTE1OC4weDAwMDAwMi9tYW5pZmVzdC5qc29uXCJcblx0fSxcblx0e1xuXHRcdFwidGFnXCI6IFwiYWN0b3JcIixcblx0XHRcIm1vZGVcIjogXCJzZWxlY3RcIixcblx0XHRcIm9iamVjdGl2ZVwiOiBcIlRhZyB0aGUgYWN0b3JzXCIsXG5cdFx0XCJndWlkYW5jZVwiOiBcIkRyYXcgYSBib3ggYXJvdW5kIGVhY2ggYWN0b3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBoaWdobGlnaHRlZCBwZXJmb3JtYW5jZVwiLFxuXHRcdFwiaW1nSW5mb1VyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL2ltYWdlL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU3LjB4MDAwMDA1L2luZm8uanNvblwiLFxuXHRcdFwibWFuaWZlc3RVcmlcIjogXCJodHRwczovL2FwaS5ibC51ay9tZXRhZGF0YS9paWlmL2FyazovODEwNTUvdmRjXzEwMDAyMjU4OTA5Mi4weDAwMDAwMi9tYW5pZmVzdC5qc29uXCIsXG5cdFx0XCJoaWdobGlnaHRzXCI6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJ4XCI6IDI5MSxcblx0XHRcdFx0XCJ5XCI6IDE0OTgsXG5cdFx0XHRcdFwid2lkdGhcIjogMTczNyxcblx0XHRcdFx0XCJoZWlnaHRcIjogMjQ0XG5cdFx0XHR9XG5cdFx0XVxuXHR9LFxuXHR7XG5cdFx0XCJ0YWdcIjogXCJkYXRlXCIsXG5cdFx0XCJtb2RlXCI6IFwic2VsZWN0XCIsXG5cdFx0XCJvYmplY3RpdmVcIjogXCJUYWcgdGhlIGRhdGVcIixcblx0XHRcImd1aWRhbmNlXCI6IFwiRHJhdyBhIGJveCBhcm91bmQgdGhlIGRhdGUgb2YgdGhlIGhpZ2hsaWdodGVkIHBlcmZvcm1hbmNlXCIsXG5cdFx0XCJpbWdJbmZvVXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvaW1hZ2UvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTcuMHgwMDAwMDUvaW5mby5qc29uXCIsXG5cdFx0XCJtYW5pZmVzdFVyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL21ldGFkYXRhL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MDkyLjB4MDAwMDAyL21hbmlmZXN0Lmpzb25cIixcblx0XHRcImhpZ2hsaWdodHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInhcIjogMjkxLFxuXHRcdFx0XHRcInlcIjogMTQ5OCxcblx0XHRcdFx0XCJ3aWR0aFwiOiAxNzM3LFxuXHRcdFx0XHRcImhlaWdodFwiOiAyNDRcblx0XHRcdH1cblx0XHRdXG5cdH0sXG5cdHtcblx0XHRcInRhZ1wiOiBcInRpdGxlXCIsXG5cdFx0XCJjbGFzc2lmaWNhdGlvblwiOiBcImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy90aXRsZVwiLFxuXHRcdFwibW9kZVwiOiBcInNlbGVjdFwiLFxuXHRcdFwib2JqZWN0aXZlXCI6IFwiVGFnIGFsbCBvZiB0aGUgdGl0bGVzXCIsXG5cdFx0XCJndWlkYW5jZVwiOiBcIkRyYXcgYSBib3ggYXJvdW5kIGVhY2ggdGl0bGUsIGluY2x1ZGluZyBhbnkgc3VidGl0bGVzXCIsXG5cdFx0XCJpbWdJbmZvVXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvaW1hZ2UvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTcuMHgwMDAwMDYvaW5mby5qc29uXCIsXG5cdFx0XCJtYW5pZmVzdFVyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL21ldGFkYXRhL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU4LjB4MDAwMDAyL21hbmlmZXN0Lmpzb25cIlxuXHR9LFxuXHR7XG5cdFx0XCJ0YWdcIjogXCJhY3RvclwiLFxuXHRcdFwibW9kZVwiOiBcInNlbGVjdFwiLFxuXHRcdFwib2JqZWN0aXZlXCI6IFwiVGFnIHRoZSBhY3RvcnNcIixcblx0XHRcImd1aWRhbmNlXCI6IFwiRHJhdyBhIGJveCBhcm91bmQgZWFjaCBhY3RvciBhc3NvY2lhdGVkIHdpdGggdGhlIGhpZ2hsaWdodGVkIHBlcmZvcm1hbmNlXCIsXG5cdFx0XCJpbWdJbmZvVXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvaW1hZ2UvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTcuMHgwMDAwMDYvaW5mby5qc29uXCIsXG5cdFx0XCJtYW5pZmVzdFVyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL21ldGFkYXRhL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MDkyLjB4MDAwMDAyL21hbmlmZXN0Lmpzb25cIixcblx0XHRcImhpZ2hsaWdodHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInhcIjogMjcxLFxuXHRcdFx0XHRcInlcIjogMTE5MCxcblx0XHRcdFx0XCJ3aWR0aFwiOiAxNzUzLFxuXHRcdFx0XHRcImhlaWdodFwiOiAyNjVcblx0XHRcdH1cblx0XHRdXG5cdH0sXG5cdHtcblx0XHRcInRhZ1wiOiBcImRhdGVcIixcblx0XHRcIm1vZGVcIjogXCJzZWxlY3RcIixcblx0XHRcIm9iamVjdGl2ZVwiOiBcIlRhZyB0aGUgZGF0ZVwiLFxuXHRcdFwiZ3VpZGFuY2VcIjogXCJEcmF3IGEgYm94IGFyb3VuZCB0aGUgZGF0ZSBvZiB0aGUgaGlnaGxpZ2h0ZWQgcGVyZm9ybWFuY2VcIixcblx0XHRcImltZ0luZm9VcmlcIjogXCJodHRwczovL2FwaS5ibC51ay9pbWFnZS9paWlmL2FyazovODEwNTUvdmRjXzEwMDAyMjU4OTE1Ny4weDAwMDAwNi9pbmZvLmpzb25cIixcblx0XHRcIm1hbmlmZXN0VXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvbWV0YWRhdGEvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkwOTIuMHgwMDAwMDIvbWFuaWZlc3QuanNvblwiLFxuXHRcdFwiaGlnaGxpZ2h0c1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwieFwiOiAyNzEsXG5cdFx0XHRcdFwieVwiOiAxMTkwLFxuXHRcdFx0XHRcIndpZHRoXCI6IDE3NTMsXG5cdFx0XHRcdFwiaGVpZ2h0XCI6IDI2NVxuXHRcdFx0fVxuXHRcdF1cblx0fVxuXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RlbW8vc3JjL3NlbGVjdFRhc2tzLmpzb25cbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports = [\n\t{\n\t\t"mode": "transcribe",\n\t\t"objective": "Transcribe the required info",\n\t\t"guidance": "Transcribe the title exactly as you see on the page.",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000005/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json",\n\t\t"form": {\n\t\t\t"model": {\n\t\t\t\t"title": null,\n\t\t\t\t"date": null,\n\t\t\t\t"genre": null\n\t\t\t},\n\t\t\t"classification": {\n\t\t\t\t"title": "http://purl.org/dc/terms/title"\n\t\t\t},\n\t\t\t"schema": {\n\t\t\t\t"fields": [\n\t\t\t\t\t{\n\t\t\t\t\t\t"type": "input",\n\t\t\t\t\t\t"inputType": "text",\n\t\t\t\t\t\t"label": "Title",\n\t\t\t\t\t\t"model": "title",\n\t\t\t\t\t\t"placeholder": "Enter the title",\n\t\t\t\t\t\t"required": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 296,\n\t\t\t\t"y": 620,\n\t\t\t\t"width": 1711,\n\t\t\t\t"height": 194\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"mode": "transcribe",\n\t\t"objective": "Transcribe the required info",\n\t\t"guidance": "Transcribe the title exactly as you see on the page.",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000005/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json",\n\t\t"form": {\n\t\t\t"model": {\n\t\t\t\t"title": null,\n\t\t\t\t"date": null,\n\t\t\t\t"genre": null\n\t\t\t},\n\t\t\t"classification": {\n\t\t\t\t"title": "http://purl.org/dc/terms/title"\n\t\t\t},\n\t\t\t"schema": {\n\t\t\t\t"fields": [\n\t\t\t\t\t{\n\t\t\t\t\t\t"type": "input",\n\t\t\t\t\t\t"inputType": "text",\n\t\t\t\t\t\t"label": "Title",\n\t\t\t\t\t\t"model": "title",\n\t\t\t\t\t\t"placeholder": "Enter the title",\n\t\t\t\t\t\t"required": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 303,\n\t\t\t\t"y": 1500,\n\t\t\t\t"width": 1708,\n\t\t\t\t"height": 323\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"mode": "transcribe",\n\t\t"objective": "Transcribe the required info",\n\t\t"guidance": "Transcribe the title exactly as you see on the page.",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000006/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json",\n\t\t"form": {\n\t\t\t"model": {\n\t\t\t\t"title": null,\n\t\t\t\t"date": null,\n\t\t\t\t"genre": null\n\t\t\t},\n\t\t\t"classification": {\n\t\t\t\t"title": "http://purl.org/dc/terms/title"\n\t\t\t},\n\t\t\t"schema": {\n\t\t\t\t"fields": [\n\t\t\t\t\t{\n\t\t\t\t\t\t"type": "input",\n\t\t\t\t\t\t"inputType": "text",\n\t\t\t\t\t\t"label": "Title",\n\t\t\t\t\t\t"model": "title",\n\t\t\t\t\t\t"placeholder": "Enter the title",\n\t\t\t\t\t\t"required": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 271,\n\t\t\t\t"y": 1190,\n\t\t\t\t"width": 1753,\n\t\t\t\t"height": 265\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t"mode": "transcribe",\n\t\t"objective": "Transcribe the required info",\n\t\t"guidance": "Transcribe the title exactly as you see on the page.",\n\t\t"imgInfoUri": "https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589157.0x000006/info.json",\n\t\t"manifestUri": "https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000002/manifest.json",\n\t\t"form": {\n\t\t\t"model": {\n\t\t\t\t"title": null,\n\t\t\t\t"date": null,\n\t\t\t\t"genre": null\n\t\t\t},\n\t\t\t"classification": {\n\t\t\t\t"title": "http://purl.org/dc/terms/title"\n\t\t\t},\n\t\t\t"schema": {\n\t\t\t\t"fields": [\n\t\t\t\t\t{\n\t\t\t\t\t\t"type": "input",\n\t\t\t\t\t\t"inputType": "text",\n\t\t\t\t\t\t"label": "Title",\n\t\t\t\t\t\t"model": "title",\n\t\t\t\t\t\t"placeholder": "Enter the title",\n\t\t\t\t\t\t"required": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t"highlights": [\n\t\t\t{\n\t\t\t\t"x": 258,\n\t\t\t\t"y": 2440,\n\t\t\t\t"width": 1851,\n\t\t\t\t"height": 362\n\t\t\t}\n\t\t]\n\t}\n];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy90cmFuc2NyaWJlVGFza3MuanNvbj81YWI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gW1xuXHR7XG5cdFx0XCJtb2RlXCI6IFwidHJhbnNjcmliZVwiLFxuXHRcdFwib2JqZWN0aXZlXCI6IFwiVHJhbnNjcmliZSB0aGUgcmVxdWlyZWQgaW5mb1wiLFxuXHRcdFwiZ3VpZGFuY2VcIjogXCJUcmFuc2NyaWJlIHRoZSB0aXRsZSBleGFjdGx5IGFzIHlvdSBzZWUgb24gdGhlIHBhZ2UuXCIsXG5cdFx0XCJpbWdJbmZvVXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvaW1hZ2UvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTcuMHgwMDAwMDUvaW5mby5qc29uXCIsXG5cdFx0XCJtYW5pZmVzdFVyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL21ldGFkYXRhL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU4LjB4MDAwMDAyL21hbmlmZXN0Lmpzb25cIixcblx0XHRcImZvcm1cIjoge1xuXHRcdFx0XCJtb2RlbFwiOiB7XG5cdFx0XHRcdFwidGl0bGVcIjogbnVsbCxcblx0XHRcdFx0XCJkYXRlXCI6IG51bGwsXG5cdFx0XHRcdFwiZ2VucmVcIjogbnVsbFxuXHRcdFx0fSxcblx0XHRcdFwiY2xhc3NpZmljYXRpb25cIjoge1xuXHRcdFx0XHRcInRpdGxlXCI6IFwiaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL3RpdGxlXCJcblx0XHRcdH0sXG5cdFx0XHRcInNjaGVtYVwiOiB7XG5cdFx0XHRcdFwiZmllbGRzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInR5cGVcIjogXCJpbnB1dFwiLFxuXHRcdFx0XHRcdFx0XCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG5cdFx0XHRcdFx0XHRcImxhYmVsXCI6IFwiVGl0bGVcIixcblx0XHRcdFx0XHRcdFwibW9kZWxcIjogXCJ0aXRsZVwiLFxuXHRcdFx0XHRcdFx0XCJwbGFjZWhvbGRlclwiOiBcIkVudGVyIHRoZSB0aXRsZVwiLFxuXHRcdFx0XHRcdFx0XCJyZXF1aXJlZFwiOiB0cnVlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImhpZ2hsaWdodHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInhcIjogMjk2LFxuXHRcdFx0XHRcInlcIjogNjIwLFxuXHRcdFx0XHRcIndpZHRoXCI6IDE3MTEsXG5cdFx0XHRcdFwiaGVpZ2h0XCI6IDE5NFxuXHRcdFx0fVxuXHRcdF1cblx0fSxcblx0e1xuXHRcdFwibW9kZVwiOiBcInRyYW5zY3JpYmVcIixcblx0XHRcIm9iamVjdGl2ZVwiOiBcIlRyYW5zY3JpYmUgdGhlIHJlcXVpcmVkIGluZm9cIixcblx0XHRcImd1aWRhbmNlXCI6IFwiVHJhbnNjcmliZSB0aGUgdGl0bGUgZXhhY3RseSBhcyB5b3Ugc2VlIG9uIHRoZSBwYWdlLlwiLFxuXHRcdFwiaW1nSW5mb1VyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL2ltYWdlL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU3LjB4MDAwMDA1L2luZm8uanNvblwiLFxuXHRcdFwibWFuaWZlc3RVcmlcIjogXCJodHRwczovL2FwaS5ibC51ay9tZXRhZGF0YS9paWlmL2FyazovODEwNTUvdmRjXzEwMDAyMjU4OTE1OC4weDAwMDAwMi9tYW5pZmVzdC5qc29uXCIsXG5cdFx0XCJmb3JtXCI6IHtcblx0XHRcdFwibW9kZWxcIjoge1xuXHRcdFx0XHRcInRpdGxlXCI6IG51bGwsXG5cdFx0XHRcdFwiZGF0ZVwiOiBudWxsLFxuXHRcdFx0XHRcImdlbnJlXCI6IG51bGxcblx0XHRcdH0sXG5cdFx0XHRcImNsYXNzaWZpY2F0aW9uXCI6IHtcblx0XHRcdFx0XCJ0aXRsZVwiOiBcImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy90aXRsZVwiXG5cdFx0XHR9LFxuXHRcdFx0XCJzY2hlbWFcIjoge1xuXHRcdFx0XHRcImZpZWxkc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ0eXBlXCI6IFwiaW5wdXRcIixcblx0XHRcdFx0XHRcdFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuXHRcdFx0XHRcdFx0XCJsYWJlbFwiOiBcIlRpdGxlXCIsXG5cdFx0XHRcdFx0XHRcIm1vZGVsXCI6IFwidGl0bGVcIixcblx0XHRcdFx0XHRcdFwicGxhY2Vob2xkZXJcIjogXCJFbnRlciB0aGUgdGl0bGVcIixcblx0XHRcdFx0XHRcdFwicmVxdWlyZWRcIjogdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJoaWdobGlnaHRzXCI6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJ4XCI6IDMwMyxcblx0XHRcdFx0XCJ5XCI6IDE1MDAsXG5cdFx0XHRcdFwid2lkdGhcIjogMTcwOCxcblx0XHRcdFx0XCJoZWlnaHRcIjogMzIzXG5cdFx0XHR9XG5cdFx0XVxuXHR9LFxuXHR7XG5cdFx0XCJtb2RlXCI6IFwidHJhbnNjcmliZVwiLFxuXHRcdFwib2JqZWN0aXZlXCI6IFwiVHJhbnNjcmliZSB0aGUgcmVxdWlyZWQgaW5mb1wiLFxuXHRcdFwiZ3VpZGFuY2VcIjogXCJUcmFuc2NyaWJlIHRoZSB0aXRsZSBleGFjdGx5IGFzIHlvdSBzZWUgb24gdGhlIHBhZ2UuXCIsXG5cdFx0XCJpbWdJbmZvVXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvaW1hZ2UvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTcuMHgwMDAwMDYvaW5mby5qc29uXCIsXG5cdFx0XCJtYW5pZmVzdFVyaVwiOiBcImh0dHBzOi8vYXBpLmJsLnVrL21ldGFkYXRhL2lpaWYvYXJrOi84MTA1NS92ZGNfMTAwMDIyNTg5MTU4LjB4MDAwMDAyL21hbmlmZXN0Lmpzb25cIixcblx0XHRcImZvcm1cIjoge1xuXHRcdFx0XCJtb2RlbFwiOiB7XG5cdFx0XHRcdFwidGl0bGVcIjogbnVsbCxcblx0XHRcdFx0XCJkYXRlXCI6IG51bGwsXG5cdFx0XHRcdFwiZ2VucmVcIjogbnVsbFxuXHRcdFx0fSxcblx0XHRcdFwiY2xhc3NpZmljYXRpb25cIjoge1xuXHRcdFx0XHRcInRpdGxlXCI6IFwiaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL3RpdGxlXCJcblx0XHRcdH0sXG5cdFx0XHRcInNjaGVtYVwiOiB7XG5cdFx0XHRcdFwiZmllbGRzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInR5cGVcIjogXCJpbnB1dFwiLFxuXHRcdFx0XHRcdFx0XCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG5cdFx0XHRcdFx0XHRcImxhYmVsXCI6IFwiVGl0bGVcIixcblx0XHRcdFx0XHRcdFwibW9kZWxcIjogXCJ0aXRsZVwiLFxuXHRcdFx0XHRcdFx0XCJwbGFjZWhvbGRlclwiOiBcIkVudGVyIHRoZSB0aXRsZVwiLFxuXHRcdFx0XHRcdFx0XCJyZXF1aXJlZFwiOiB0cnVlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImhpZ2hsaWdodHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInhcIjogMjcxLFxuXHRcdFx0XHRcInlcIjogMTE5MCxcblx0XHRcdFx0XCJ3aWR0aFwiOiAxNzUzLFxuXHRcdFx0XHRcImhlaWdodFwiOiAyNjVcblx0XHRcdH1cblx0XHRdXG5cdH0sXG5cdHtcblx0XHRcIm1vZGVcIjogXCJ0cmFuc2NyaWJlXCIsXG5cdFx0XCJvYmplY3RpdmVcIjogXCJUcmFuc2NyaWJlIHRoZSByZXF1aXJlZCBpbmZvXCIsXG5cdFx0XCJndWlkYW5jZVwiOiBcIlRyYW5zY3JpYmUgdGhlIHRpdGxlIGV4YWN0bHkgYXMgeW91IHNlZSBvbiB0aGUgcGFnZS5cIixcblx0XHRcImltZ0luZm9VcmlcIjogXCJodHRwczovL2FwaS5ibC51ay9pbWFnZS9paWlmL2FyazovODEwNTUvdmRjXzEwMDAyMjU4OTE1Ny4weDAwMDAwNi9pbmZvLmpzb25cIixcblx0XHRcIm1hbmlmZXN0VXJpXCI6IFwiaHR0cHM6Ly9hcGkuYmwudWsvbWV0YWRhdGEvaWlpZi9hcms6LzgxMDU1L3ZkY18xMDAwMjI1ODkxNTguMHgwMDAwMDIvbWFuaWZlc3QuanNvblwiLFxuXHRcdFwiZm9ybVwiOiB7XG5cdFx0XHRcIm1vZGVsXCI6IHtcblx0XHRcdFx0XCJ0aXRsZVwiOiBudWxsLFxuXHRcdFx0XHRcImRhdGVcIjogbnVsbCxcblx0XHRcdFx0XCJnZW5yZVwiOiBudWxsXG5cdFx0XHR9LFxuXHRcdFx0XCJjbGFzc2lmaWNhdGlvblwiOiB7XG5cdFx0XHRcdFwidGl0bGVcIjogXCJodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvdGl0bGVcIlxuXHRcdFx0fSxcblx0XHRcdFwic2NoZW1hXCI6IHtcblx0XHRcdFx0XCJmaWVsZHNcIjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidHlwZVwiOiBcImlucHV0XCIsXG5cdFx0XHRcdFx0XHRcImlucHV0VHlwZVwiOiBcInRleHRcIixcblx0XHRcdFx0XHRcdFwibGFiZWxcIjogXCJUaXRsZVwiLFxuXHRcdFx0XHRcdFx0XCJtb2RlbFwiOiBcInRpdGxlXCIsXG5cdFx0XHRcdFx0XHRcInBsYWNlaG9sZGVyXCI6IFwiRW50ZXIgdGhlIHRpdGxlXCIsXG5cdFx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaGlnaGxpZ2h0c1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwieFwiOiAyNTgsXG5cdFx0XHRcdFwieVwiOiAyNDQwLFxuXHRcdFx0XHRcIndpZHRoXCI6IDE4NTEsXG5cdFx0XHRcdFwiaGVpZ2h0XCI6IDM2MlxuXHRcdFx0fVxuXHRcdF1cblx0fVxuXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RlbW8vc3JjL3RyYW5zY3JpYmVUYXNrcy5qc29uXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise_auto__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise_auto___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_es6_promise_auto__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_es6_object_assign_auto__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_es6_object_assign_auto___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_es6_object_assign_auto__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_libcrowds_viewer__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__App__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__App___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__App__);\n\n\n\n\n\n\n/* eslint-enable */\n\n\n__WEBPACK_IMPORTED_MODULE_2_vue__["a" /* default */].use(__WEBPACK_IMPORTED_MODULE_3_libcrowds_viewer__["a" /* default */]);\n\n/* eslint-disable no-new */\nnew __WEBPACK_IMPORTED_MODULE_2_vue__["a" /* default */]({\n  el: \'#app\',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_4__App___default.a);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9tYWluLmpzP2IwNGQiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiZWwiLCJyZW5kZXIiLCJoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvREFBQUEsQ0FBSUMsR0FBSixDQUFRLGlFQUFSOztBQUVBO0FBQ0EsSUFBSSxvREFBSixDQUFRO0FBQ05DLE1BQUksTUFERTtBQUVOQyxRQUZNLGtCQUVFQyxDQUZGLEVBRUs7QUFDVCxXQUFPQSxFQUFFLDRDQUFGLENBQVA7QUFDRDtBQUpLLENBQVIiLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2VzNi1wcm9taXNlL2F1dG8nXG5pbXBvcnQgJ2VzNi1vYmplY3QtYXNzaWduL2F1dG8nXG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IExpYmNyb3dkc1ZpZXdlciBmcm9tICdsaWJjcm93ZHMtdmlld2VyJ1xuXG4vKiBlc2xpbnQtZW5hYmxlICovXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xuXG5WdWUudXNlKExpYmNyb3dkc1ZpZXdlcilcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbmV3ICovXG5uZXcgVnVlKHtcbiAgZWw6ICcjYXBwJyxcbiAgcmVuZGVyIChoKSB7XG4gICAgcmV0dXJuIGgoQXBwKVxuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_TranscribeAnnotation__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_SelectAnnotation__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_CommentAnnotation__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_getImageUri__ = __webpack_require__(28);\n\n\n\n\n\n\n\n\n\n/**\n * Represents an annotator responsible for managing all task annotations.\n */\n\nvar Annotator = function () {\n  function Annotator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      creator: null,\n      generator: null\n    },\n        _ref$creator = _ref.creator,\n        creator = _ref$creator === undefined ? null : _ref$creator,\n        _ref$generator = _ref.generator,\n        generator = _ref$generator === undefined ? null : _ref$generator;\n\n    __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, Annotator);\n\n    this.creator = creator;\n    this.generator = generator;\n  }\n\n  /**\n   * Check if a section of an object contains another.\n   * @param {Object} find\n   *   The object to find.\n   * @param {Object} root\n   *   The object to search.\n   */\n\n\n  __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(Annotator, [{\n    key: '_hasMatch',\n    value: function _hasMatch(find, root) {\n      if (root === undefined) {\n        return false;\n      } else if (!Array.isArray(root)) {\n        return root === find;\n      } else {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(root), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(item) === __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(find)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return false;\n      }\n    }\n\n    /**\n     * Check if an annotation contains the given key-value pairs.\n     *\n     * If the key happens to relate to an array within the Annotation a search\n     * will be made within that array.\n     *\n     * Example:\n     * contains({\n     *  id: 123,\n     *  body: {\n     *    purpose: 'tagging',\n     *    value: 'something'\n     *  }\n     * })\n     *\n     * @param {Annotation} annotation\n     *   The annotation.\n     * @param {Object} terms\n     *   Key-value pairs to check.\n     */\n\n  }, {\n    key: '_search',\n    value: function _search(annotation, terms) {\n      for (var key in terms) {\n        if (!this._hasMatch(terms[key], annotation[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Return all instances of TranscribeAnnotation for the task.\n     * @param {Task} task\n     *   The task.\n     */\n\n  }, {\n    key: 'getTranscribeAnnotations',\n    value: function getTranscribeAnnotations(task) {\n      var matched = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(task.annotations), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var anno = _step2.value;\n\n          if (anno instanceof __WEBPACK_IMPORTED_MODULE_4__model_TranscribeAnnotation__[\"a\" /* default */]) {\n            matched.push(anno);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return matched;\n    }\n\n    /**\n     * Return all instances of SelectAnnotation for the task.\n     * @param {Task} task\n     *   The task.\n     */\n\n  }, {\n    key: 'getSelectAnnotations',\n    value: function getSelectAnnotations(task) {\n      var matched = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(task.annotations), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var anno = _step3.value;\n\n          if (anno instanceof __WEBPACK_IMPORTED_MODULE_5__model_SelectAnnotation__[\"a\" /* default */]) {\n            matched.push(anno);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return matched;\n    }\n\n    /**\n     * Return all instances of CommentAnnotation for the task.\n     * @param {Task} task\n     *   The task.\n     */\n\n  }, {\n    key: 'getCommentAnnotation',\n    value: function getCommentAnnotation(task) {\n      var matched = [];\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(task.annotations), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var anno = _step4.value;\n\n          if (anno instanceof __WEBPACK_IMPORTED_MODULE_6__model_CommentAnnotation__[\"a\" /* default */]) {\n            matched.push(anno);\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      if (matched.length > 1) {\n        throw Error('Multiple comment annotations identified');\n      }\n      return matched.length > 0 ? matched[0] : null;\n    }\n\n    /**\n     * Return the annotation for a form field.\n     * @param {Task} task\n     *   The task.\n     * @param {String} key\n     *   The model key.\n     */\n\n  }, {\n    key: '_getFormFieldAnnotation',\n    value: function _getFormFieldAnnotation(task, key) {\n      var allAnnos = this.getTranscribeAnnotations(task);\n      var fieldAnnos = this.filterAnnotations(allAnnos, {\n        body: {\n          type: 'TextualBody',\n          purpose: 'tagging',\n          value: key\n        }\n      });\n      if (fieldAnnos.length > 1) {\n        throw Error('Multiple form field annotations identified');\n      }\n      return fieldAnnos.length > 0 ? fieldAnnos[0] : null;\n    }\n\n    /**\n     * Return an Annotation.\n     * @param {Task} task\n     *   The task.\n     * @param {*} id\n     *   The Annotation ID.\n     */\n\n  }, {\n    key: 'getAnnotation',\n    value: function getAnnotation(task, id) {\n      var filtered = task.annotations.filter(function (anno) {\n        return anno.id === id;\n      });\n      var idx = task.annotations.indexOf(filtered[0]);\n      return idx > -1 ? task.annotations[idx] : null;\n    }\n\n    /**\n     * Add or update an Annotation.\n     * @param {Task} task\n     *   The task.\n     * @param {Annotation} annotation\n     *   The Annotation.\n     */\n\n  }, {\n    key: 'storeAnnotation',\n    value: function storeAnnotation(task, annotation) {\n      var anno = this.getAnnotation(task, annotation.id);\n      if (anno !== null) {\n        anno = annotation;\n      } else {\n        task.annotations.push(annotation);\n      }\n    }\n\n    /**\n     * Delete an Annotation by ID.\n     * @param {Task} task\n     *   The task.\n     * @param {String} id\n     *   The ID of the Annotation to delete.\n     */\n\n  }, {\n    key: 'deleteAnnotation',\n    value: function deleteAnnotation(task, id) {\n      var filteredAnnos = task.annotations.filter(function (anno) {\n        return anno.id !== id;\n      });\n      if (filteredAnnos.length === task.annotations.length) {\n        throw Error('No Annotation exists with that ID');\n      }\n      task.annotations = filteredAnnos;\n    }\n\n    /**\n     * Return Annotations.\n     * @param {Array} annotations\n     *   The task.\n     * @param {Object} terms\n     *   Key-value pairs to check.\n     */\n\n  }, {\n    key: 'filterAnnotations',\n    value: function filterAnnotations(annotations, terms) {\n      var filtered = [];\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(annotations), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var anno = _step5.value;\n\n          if (this._search(anno, terms)) {\n            filtered.push(anno);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return filtered;\n    }\n\n    /**\n     * Create or update a transcription annotation.\n     * @param {Task} task\n     *   The task.\n     * @param {String} key\n     *   The form model key.\n     * @param {String} value\n     *   The transcription value.\n     */\n\n  }, {\n    key: 'storeTranscriptionAnnotation',\n    value: function storeTranscriptionAnnotation(task, key, transcription) {\n      var anno = this._getFormFieldAnnotation(task, key);\n      if (anno === null) {\n        anno = new __WEBPACK_IMPORTED_MODULE_4__model_TranscribeAnnotation__[\"a\" /* default */]({\n          imgInfo: task.imgInfo,\n          transcription: transcription,\n          tag: key,\n          creator: this.creator,\n          generator: this.generator,\n          classification: task.form.classification[key]\n        });\n        this.storeAnnotation(task, anno);\n      } else {\n        // Replace the description\n        anno.body = anno.body.filter(function (item) {\n          return item.purpose !== 'describing';\n        });\n        anno.addDescription(transcription);\n        anno.modify({\n          creator: this.creator,\n          generator: this.generator\n        });\n        this.storeAnnotation(task, anno);\n      }\n      return anno;\n    }\n\n    /**\n     * Create or update a CommentAnnotation.\n     *\n     * There should only be one CommentAnnotation per task.\n     * @param {Task} task\n     *   The task.\n     * @param {String} comment\n     *   The comment text.\n     */\n\n  }, {\n    key: 'storeCommentAnnotation',\n    value: function storeCommentAnnotation(task, comment) {\n      var anno = this.getCommentAnnotation(task);\n      if (anno === null) {\n        anno = new __WEBPACK_IMPORTED_MODULE_6__model_CommentAnnotation__[\"a\" /* default */]({\n          imgInfo: task.imgInfo,\n          comment: comment,\n          creator: this.creator,\n          generator: this.generator\n        });\n        this.storeAnnotation(task, anno);\n      } else {\n        anno.body.value = comment;\n        anno.modify({\n          creator: this.creator,\n          generator: this.generator\n        });\n        this.storeAnnotation(task, anno);\n      }\n    }\n\n    /**\n     * Create a SelectAnnotation.\n     * @param {Task} task\n     *   The task.\n     * @param {Object} rect\n     *   The image rectangle.\n     */\n\n  }, {\n    key: 'createSelectAnnotation',\n    value: function createSelectAnnotation(task, rect) {\n      var imageUri = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_getImageUri__[\"a\" /* default */])({\n        imgInfo: task.imgInfo,\n        region: rect\n      });\n      var anno = new __WEBPACK_IMPORTED_MODULE_5__model_SelectAnnotation__[\"a\" /* default */]({\n        imgInfo: task.imgInfo,\n        tag: task.tag,\n        fragmentUri: imageUri,\n        creator: this.creator,\n        generator: this.generator,\n        classification: task.classification\n      });\n      this.storeAnnotation(task, anno);\n      return anno;\n    }\n  }]);\n\n  return Annotator;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Annotator);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_Annotation__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_errors__ = __webpack_require__(8);\n\n\n\n\n\n\n\n/**\n * Represents a Web Annotation used for comments.\n * @param {Object} imgInfo\n *   The IIIF image info.\n * @param {String} comment\n *   The comment value.\n * @param {Object} creator\n *   The Annotation creator.\n * @param {Object} generator\n *   The Annotation generator.\n */\n\nvar CommentAnnotation = function (_Annotation) {\n  __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default()(CommentAnnotation, _Annotation);\n\n  function CommentAnnotation(_ref) {\n    var _ref$imgInfo = _ref.imgInfo,\n        imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$imgInfo,\n        _ref$comment = _ref.comment,\n        comment = _ref$comment === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$comment,\n        _ref$creator = _ref.creator,\n        creator = _ref$creator === undefined ? null : _ref$creator,\n        _ref$generator = _ref.generator,\n        generator = _ref$generator === undefined ? null : _ref$generator;\n\n    __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, CommentAnnotation);\n\n    var _this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (CommentAnnotation.__proto__ || __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default()(CommentAnnotation)).call(this, {\n      motivation: \'commenting\',\n      imgInfo: imgInfo,\n      creator: creator,\n      generator: generator\n    }));\n\n    _this.addComment(comment);\n    return _this;\n  }\n\n  return CommentAnnotation;\n}(__WEBPACK_IMPORTED_MODULE_4__model_Annotation__["a" /* default */]);\n\n/* harmony default export */ __webpack_exports__["a"] = (CommentAnnotation);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvQ29tbWVudEFubm90YXRpb24uanM/MDIyMSJdLCJuYW1lcyI6WyJDb21tZW50QW5ub3RhdGlvbiIsImltZ0luZm8iLCJlcnJvcnMiLCJ0aHJvd0lmTWlzc2luZyIsImNvbW1lbnQiLCJjcmVhdG9yIiwiZ2VuZXJhdG9yIiwibW90aXZhdGlvbiIsImFkZENvbW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0lBV01BLGlCOzs7QUFDSixtQ0FLRztBQUFBLDRCQUpEQyxPQUlDO0FBQUEsUUFKREEsT0FJQyxnQ0FKUyw4REFBQUMsQ0FBT0MsY0FBUCxFQUlUO0FBQUEsNEJBSERDLE9BR0M7QUFBQSxRQUhEQSxPQUdDLGdDQUhTLDhEQUFBRixDQUFPQyxjQUFQLEVBR1Q7QUFBQSw0QkFGREUsT0FFQztBQUFBLFFBRkRBLE9BRUMsZ0NBRlMsSUFFVDtBQUFBLDhCQUREQyxTQUNDO0FBQUEsUUFEREEsU0FDQyxrQ0FEVyxJQUNYOztBQUFBOztBQUFBLG1RQUNLO0FBQ0pDLGtCQUFZLFlBRFI7QUFFSk4sZUFBU0EsT0FGTDtBQUdKSSxlQUFTQSxPQUhMO0FBSUpDLGlCQUFXQTtBQUpQLEtBREw7O0FBT0QsVUFBS0UsVUFBTCxDQUFnQkosT0FBaEI7QUFQQztBQVFGOzs7RUFkNkIsa0U7O0FBaUJoQyx5REFBZUosaUJBQWYiLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5ub3RhdGlvbiBmcm9tICdAL21vZGVsL0Fubm90YXRpb24nXG5pbXBvcnQgZXJyb3JzIGZyb20gJ0AvdXRpbHMvZXJyb3JzJ1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBXZWIgQW5ub3RhdGlvbiB1c2VkIGZvciBjb21tZW50cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWdJbmZvXG4gKiAgIFRoZSBJSUlGIGltYWdlIGluZm8uXG4gKiBAcGFyYW0ge1N0cmluZ30gY29tbWVudFxuICogICBUaGUgY29tbWVudCB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjcmVhdG9yXG4gKiAgIFRoZSBBbm5vdGF0aW9uIGNyZWF0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gZ2VuZXJhdG9yXG4gKiAgIFRoZSBBbm5vdGF0aW9uIGdlbmVyYXRvci5cbiAqL1xuY2xhc3MgQ29tbWVudEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHtcbiAgY29uc3RydWN0b3IgKHtcbiAgICBpbWdJbmZvID0gZXJyb3JzLnRocm93SWZNaXNzaW5nKCksXG4gICAgY29tbWVudCA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIGNyZWF0b3IgPSBudWxsLFxuICAgIGdlbmVyYXRvciA9IG51bGxcbiAgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIG1vdGl2YXRpb246ICdjb21tZW50aW5nJyxcbiAgICAgIGltZ0luZm86IGltZ0luZm8sXG4gICAgICBjcmVhdG9yOiBjcmVhdG9yLFxuICAgICAgZ2VuZXJhdG9yOiBnZW5lcmF0b3JcbiAgICB9KVxuICAgIHRoaXMuYWRkQ29tbWVudChjb21tZW50KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbW1lbnRBbm5vdGF0aW9uXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kZWwvQ29tbWVudEFubm90YXRpb24uanMiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_errors__ = __webpack_require__(8);\n\n\n\n/**\n * Represents a transcription form.\n */\n\nvar Form = function Form(_ref) {\n  var _ref$model = _ref.model,\n      model = _ref$model === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_errors__["a" /* default */].throwIfMissing() : _ref$model,\n      _ref$schema = _ref.schema,\n      schema = _ref$schema === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_errors__["a" /* default */].throwIfMissing() : _ref$schema,\n      _ref$classification = _ref.classification,\n      classification = _ref$classification === undefined ? {} : _ref$classification,\n      _ref$highlights = _ref.highlights,\n      highlights = _ref$highlights === undefined ? {} : _ref$highlights;\n\n  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Form);\n\n  this.model = model;\n  this.schema = schema;\n  this.classification = classification;\n  this.highlights = highlights;\n  this.formOptions = {\n    validateAfterLoad: true,\n    validateAfterChanged: true\n  };\n  this.errors = [];\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (Form);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvRm9ybS5qcz9lMWJhIl0sIm5hbWVzIjpbIkZvcm0iLCJtb2RlbCIsImVycm9ycyIsInRocm93SWZNaXNzaW5nIiwic2NoZW1hIiwiY2xhc3NpZmljYXRpb24iLCJoaWdobGlnaHRzIiwiZm9ybU9wdGlvbnMiLCJ2YWxpZGF0ZUFmdGVyTG9hZCIsInZhbGlkYXRlQWZ0ZXJDaGFuZ2VkIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUE7Ozs7SUFHTUEsSSxHQUNKLG9CQUtHO0FBQUEsd0JBSkRDLEtBSUM7QUFBQSxNQUpEQSxLQUlDLDhCQUpPLDhEQUFBQyxDQUFPQyxjQUFQLEVBSVA7QUFBQSx5QkFIREMsTUFHQztBQUFBLE1BSERBLE1BR0MsK0JBSFEsOERBQUFGLENBQU9DLGNBQVAsRUFHUjtBQUFBLGlDQUZERSxjQUVDO0FBQUEsTUFGREEsY0FFQyx1Q0FGZ0IsRUFFaEI7QUFBQSw2QkFEREMsVUFDQztBQUFBLE1BRERBLFVBQ0MsbUNBRFksRUFDWjs7QUFBQTs7QUFDRCxPQUFLTCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxPQUFLRyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxPQUFLQyxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBLE9BQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQjtBQUNqQkMsdUJBQW1CLElBREY7QUFFakJDLDBCQUFzQjtBQUZMLEdBQW5CO0FBSUEsT0FBS1AsTUFBTCxHQUFjLEVBQWQ7QUFDRCxDOztBQUdILHlEQUFlRixJQUFmIiwiZmlsZSI6Ijg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVycm9ycyBmcm9tICdAL3V0aWxzL2Vycm9ycydcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdHJhbnNjcmlwdGlvbiBmb3JtLlxuICovXG5jbGFzcyBGb3JtIHtcbiAgY29uc3RydWN0b3IgKHtcbiAgICBtb2RlbCA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIHNjaGVtYSA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIGNsYXNzaWZpY2F0aW9uID0ge30sXG4gICAgaGlnaGxpZ2h0cyA9IHt9XG4gIH0pIHtcbiAgICB0aGlzLm1vZGVsID0gbW9kZWxcbiAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYVxuICAgIHRoaXMuY2xhc3NpZmljYXRpb24gPSBjbGFzc2lmaWNhdGlvblxuICAgIHRoaXMuaGlnaGxpZ2h0cyA9IGhpZ2hsaWdodHNcbiAgICB0aGlzLmZvcm1PcHRpb25zID0ge1xuICAgICAgdmFsaWRhdGVBZnRlckxvYWQ6IHRydWUsXG4gICAgICB2YWxpZGF0ZUFmdGVyQ2hhbmdlZDogdHJ1ZVxuICAgIH1cbiAgICB0aGlzLmVycm9ycyA9IFtdXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZGVsL0Zvcm0uanMiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_Annotation__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_errors__ = __webpack_require__(8);\n\n\n\n\n\n\n\n/**\n * Represents a Web Annotation used for tagging.\n * @param {Object} imgInfo\n *   The IIIF image info.\n * @param {String} tag\n *   Plain text value for the tag.\n * @param {String} fragmentUri\n *   The IIIF image region.\n * @param {Object} creator\n *   The Annotation creator.\n * @param {Object} generator\n *   The Annotation generator.\n * @param {String} classification\n *   A classification.\n */\n\nvar SelectAnnotation = function (_Annotation) {\n  __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default()(SelectAnnotation, _Annotation);\n\n  function SelectAnnotation(_ref) {\n    var _ref$imgInfo = _ref.imgInfo,\n        imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$imgInfo,\n        _ref$tag = _ref.tag,\n        tag = _ref$tag === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$tag,\n        _ref$fragmentUri = _ref.fragmentUri,\n        fragmentUri = _ref$fragmentUri === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$fragmentUri,\n        _ref$creator = _ref.creator,\n        creator = _ref$creator === undefined ? null : _ref$creator,\n        _ref$generator = _ref.generator,\n        generator = _ref$generator === undefined ? null : _ref$generator,\n        _ref$classification = _ref.classification,\n        classification = _ref$classification === undefined ? null : _ref$classification;\n\n    __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, SelectAnnotation);\n\n    var _this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (SelectAnnotation.__proto__ || __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default()(SelectAnnotation)).call(this, {\n      motivation: \'tagging\',\n      imgInfo: imgInfo,\n      creator: creator,\n      generator: generator\n    }));\n\n    _this.addTag(tag, imgInfo, fragmentUri);\n    if (classification) {\n      _this.addClassification(classification);\n    }\n    return _this;\n  }\n\n  return SelectAnnotation;\n}(__WEBPACK_IMPORTED_MODULE_4__model_Annotation__["a" /* default */]);\n\n/* harmony default export */ __webpack_exports__["a"] = (SelectAnnotation);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvU2VsZWN0QW5ub3RhdGlvbi5qcz8wNzcxIl0sIm5hbWVzIjpbIlNlbGVjdEFubm90YXRpb24iLCJpbWdJbmZvIiwiZXJyb3JzIiwidGhyb3dJZk1pc3NpbmciLCJ0YWciLCJmcmFnbWVudFVyaSIsImNyZWF0b3IiLCJnZW5lcmF0b3IiLCJjbGFzc2lmaWNhdGlvbiIsIm1vdGl2YXRpb24iLCJhZGRUYWciLCJhZGRDbGFzc2lmaWNhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7O0lBZU1BLGdCOzs7QUFDSixrQ0FPRztBQUFBLDRCQU5EQyxPQU1DO0FBQUEsUUFOREEsT0FNQyxnQ0FOUyw4REFBQUMsQ0FBT0MsY0FBUCxFQU1UO0FBQUEsd0JBTERDLEdBS0M7QUFBQSxRQUxEQSxHQUtDLDRCQUxLLDhEQUFBRixDQUFPQyxjQUFQLEVBS0w7QUFBQSxnQ0FKREUsV0FJQztBQUFBLFFBSkRBLFdBSUMsb0NBSmEsOERBQUFILENBQU9DLGNBQVAsRUFJYjtBQUFBLDRCQUhERyxPQUdDO0FBQUEsUUFIREEsT0FHQyxnQ0FIUyxJQUdUO0FBQUEsOEJBRkRDLFNBRUM7QUFBQSxRQUZEQSxTQUVDLGtDQUZXLElBRVg7QUFBQSxtQ0FEREMsY0FDQztBQUFBLFFBRERBLGNBQ0MsdUNBRGdCLElBQ2hCOztBQUFBOztBQUFBLGlRQUNLO0FBQ0pDLGtCQUFZLFNBRFI7QUFFSlIsZUFBU0EsT0FGTDtBQUdKSyxlQUFTQSxPQUhMO0FBSUpDLGlCQUFXQTtBQUpQLEtBREw7O0FBT0QsVUFBS0csTUFBTCxDQUFZTixHQUFaLEVBQWlCSCxPQUFqQixFQUEwQkksV0FBMUI7QUFDQSxRQUFJRyxjQUFKLEVBQW9CO0FBQ2xCLFlBQUtHLGlCQUFMLENBQXVCSCxjQUF2QjtBQUNEO0FBVkE7QUFXRjs7O0VBbkI0QixrRTs7QUFzQi9CLHlEQUFlUixnQkFBZiIsImZpbGUiOiI4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbm5vdGF0aW9uIGZyb20gJ0AvbW9kZWwvQW5ub3RhdGlvbidcbmltcG9ydCBlcnJvcnMgZnJvbSAnQC91dGlscy9lcnJvcnMnXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFdlYiBBbm5vdGF0aW9uIHVzZWQgZm9yIHRhZ2dpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gaW1nSW5mb1xuICogICBUaGUgSUlJRiBpbWFnZSBpbmZvLlxuICogQHBhcmFtIHtTdHJpbmd9IHRhZ1xuICogICBQbGFpbiB0ZXh0IHZhbHVlIGZvciB0aGUgdGFnLlxuICogQHBhcmFtIHtTdHJpbmd9IGZyYWdtZW50VXJpXG4gKiAgIFRoZSBJSUlGIGltYWdlIHJlZ2lvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjcmVhdG9yXG4gKiAgIFRoZSBBbm5vdGF0aW9uIGNyZWF0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gZ2VuZXJhdG9yXG4gKiAgIFRoZSBBbm5vdGF0aW9uIGdlbmVyYXRvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc2lmaWNhdGlvblxuICogICBBIGNsYXNzaWZpY2F0aW9uLlxuICovXG5jbGFzcyBTZWxlY3RBbm5vdGF0aW9uIGV4dGVuZHMgQW5ub3RhdGlvbiB7XG4gIGNvbnN0cnVjdG9yICh7XG4gICAgaW1nSW5mbyA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIHRhZyA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIGZyYWdtZW50VXJpID0gZXJyb3JzLnRocm93SWZNaXNzaW5nKCksXG4gICAgY3JlYXRvciA9IG51bGwsXG4gICAgZ2VuZXJhdG9yID0gbnVsbCxcbiAgICBjbGFzc2lmaWNhdGlvbiA9IG51bGxcbiAgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIG1vdGl2YXRpb246ICd0YWdnaW5nJyxcbiAgICAgIGltZ0luZm86IGltZ0luZm8sXG4gICAgICBjcmVhdG9yOiBjcmVhdG9yLFxuICAgICAgZ2VuZXJhdG9yOiBnZW5lcmF0b3JcbiAgICB9KVxuICAgIHRoaXMuYWRkVGFnKHRhZywgaW1nSW5mbywgZnJhZ21lbnRVcmkpXG4gICAgaWYgKGNsYXNzaWZpY2F0aW9uKSB7XG4gICAgICB0aGlzLmFkZENsYXNzaWZpY2F0aW9uKGNsYXNzaWZpY2F0aW9uKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RBbm5vdGF0aW9uXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kZWwvU2VsZWN0QW5ub3RhdGlvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_Annotation__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_errors__ = __webpack_require__(8);\n\n\n\n\n\n\n\n/**\n * Represents a Web Annotation used for transcriptions.\n * @param {Object} imgInfo\n *   The IIIF image info.\n * @param {String} transcription\n *   The transcription.\n * @param {String} tag\n *   The tag value.\n * @param {String} fragmentURI\n *   An IIIF image region.\n * @param {Object} creator\n *   The Annotation creator.\n * @param {Object} generator\n *   The Annotation generator.\n * @param {String} classification\n *   A classification.\n */\n\nvar TranscribeAnnotation = function (_Annotation) {\n  __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default()(TranscribeAnnotation, _Annotation);\n\n  function TranscribeAnnotation(_ref) {\n    var _ref$imgInfo = _ref.imgInfo,\n        imgInfo = _ref$imgInfo === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$imgInfo,\n        _ref$transcription = _ref.transcription,\n        transcription = _ref$transcription === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$transcription,\n        _ref$tag = _ref.tag,\n        tag = _ref$tag === undefined ? __WEBPACK_IMPORTED_MODULE_5__utils_errors__["a" /* default */].throwIfMissing() : _ref$tag,\n        _ref$fragmentURI = _ref.fragmentURI,\n        fragmentURI = _ref$fragmentURI === undefined ? null : _ref$fragmentURI,\n        _ref$creator = _ref.creator,\n        creator = _ref$creator === undefined ? null : _ref$creator,\n        _ref$generator = _ref.generator,\n        generator = _ref$generator === undefined ? null : _ref$generator,\n        _ref$classification = _ref.classification,\n        classification = _ref$classification === undefined ? null : _ref$classification;\n\n    __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, TranscribeAnnotation);\n\n    var _this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (TranscribeAnnotation.__proto__ || __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default()(TranscribeAnnotation)).call(this, {\n      motivation: \'describing\',\n      imgInfo: imgInfo,\n      creator: creator,\n      generator: generator\n    }));\n\n    _this.addDescription(transcription);\n    _this.addTag(tag, fragmentURI);\n    if (classification) {\n      _this.addClassification(classification);\n    }\n    return _this;\n  }\n\n  return TranscribeAnnotation;\n}(__WEBPACK_IMPORTED_MODULE_4__model_Annotation__["a" /* default */]);\n\n/* harmony default export */ __webpack_exports__["a"] = (TranscribeAnnotation);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvVHJhbnNjcmliZUFubm90YXRpb24uanM/MTMwNyJdLCJuYW1lcyI6WyJUcmFuc2NyaWJlQW5ub3RhdGlvbiIsImltZ0luZm8iLCJlcnJvcnMiLCJ0aHJvd0lmTWlzc2luZyIsInRyYW5zY3JpcHRpb24iLCJ0YWciLCJmcmFnbWVudFVSSSIsImNyZWF0b3IiLCJnZW5lcmF0b3IiLCJjbGFzc2lmaWNhdGlvbiIsIm1vdGl2YXRpb24iLCJhZGREZXNjcmlwdGlvbiIsImFkZFRhZyIsImFkZENsYXNzaWZpY2F0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlCTUEsb0I7OztBQUNKLHNDQVFHO0FBQUEsNEJBUERDLE9BT0M7QUFBQSxRQVBEQSxPQU9DLGdDQVBTLDhEQUFBQyxDQUFPQyxjQUFQLEVBT1Q7QUFBQSxrQ0FOREMsYUFNQztBQUFBLFFBTkRBLGFBTUMsc0NBTmUsOERBQUFGLENBQU9DLGNBQVAsRUFNZjtBQUFBLHdCQUxERSxHQUtDO0FBQUEsUUFMREEsR0FLQyw0QkFMSyw4REFBQUgsQ0FBT0MsY0FBUCxFQUtMO0FBQUEsZ0NBSkRHLFdBSUM7QUFBQSxRQUpEQSxXQUlDLG9DQUphLElBSWI7QUFBQSw0QkFIREMsT0FHQztBQUFBLFFBSERBLE9BR0MsZ0NBSFMsSUFHVDtBQUFBLDhCQUZEQyxTQUVDO0FBQUEsUUFGREEsU0FFQyxrQ0FGVyxJQUVYO0FBQUEsbUNBRERDLGNBQ0M7QUFBQSxRQUREQSxjQUNDLHVDQURnQixJQUNoQjs7QUFBQTs7QUFBQSx5UUFDSztBQUNKQyxrQkFBWSxZQURSO0FBRUpULGVBQVNBLE9BRkw7QUFHSk0sZUFBU0EsT0FITDtBQUlKQyxpQkFBV0E7QUFKUCxLQURMOztBQU9ELFVBQUtHLGNBQUwsQ0FBb0JQLGFBQXBCO0FBQ0EsVUFBS1EsTUFBTCxDQUFZUCxHQUFaLEVBQWlCQyxXQUFqQjtBQUNBLFFBQUlHLGNBQUosRUFBb0I7QUFDbEIsWUFBS0ksaUJBQUwsQ0FBdUJKLGNBQXZCO0FBQ0Q7QUFYQTtBQVlGOzs7RUFyQmdDLGtFOztBQXdCbkMseURBQWVULG9CQUFmIiwiZmlsZSI6Ijg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFubm90YXRpb24gZnJvbSAnQC9tb2RlbC9Bbm5vdGF0aW9uJ1xuaW1wb3J0IGVycm9ycyBmcm9tICdAL3V0aWxzL2Vycm9ycydcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgV2ViIEFubm90YXRpb24gdXNlZCBmb3IgdHJhbnNjcmlwdGlvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gaW1nSW5mb1xuICogICBUaGUgSUlJRiBpbWFnZSBpbmZvLlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zY3JpcHRpb25cbiAqICAgVGhlIHRyYW5zY3JpcHRpb24uXG4gKiBAcGFyYW0ge1N0cmluZ30gdGFnXG4gKiAgIFRoZSB0YWcgdmFsdWUuXG4gKiBAcGFyYW0ge1N0cmluZ30gZnJhZ21lbnRVUklcbiAqICAgQW4gSUlJRiBpbWFnZSByZWdpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gY3JlYXRvclxuICogICBUaGUgQW5ub3RhdGlvbiBjcmVhdG9yLlxuICogQHBhcmFtIHtPYmplY3R9IGdlbmVyYXRvclxuICogICBUaGUgQW5ub3RhdGlvbiBnZW5lcmF0b3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NpZmljYXRpb25cbiAqICAgQSBjbGFzc2lmaWNhdGlvbi5cbiAqL1xuY2xhc3MgVHJhbnNjcmliZUFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHtcbiAgY29uc3RydWN0b3IgKHtcbiAgICBpbWdJbmZvID0gZXJyb3JzLnRocm93SWZNaXNzaW5nKCksXG4gICAgdHJhbnNjcmlwdGlvbiA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIHRhZyA9IGVycm9ycy50aHJvd0lmTWlzc2luZygpLFxuICAgIGZyYWdtZW50VVJJID0gbnVsbCxcbiAgICBjcmVhdG9yID0gbnVsbCxcbiAgICBnZW5lcmF0b3IgPSBudWxsLFxuICAgIGNsYXNzaWZpY2F0aW9uID0gbnVsbFxuICB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgbW90aXZhdGlvbjogJ2Rlc2NyaWJpbmcnLFxuICAgICAgaW1nSW5mbzogaW1nSW5mbyxcbiAgICAgIGNyZWF0b3I6IGNyZWF0b3IsXG4gICAgICBnZW5lcmF0b3I6IGdlbmVyYXRvclxuICAgIH0pXG4gICAgdGhpcy5hZGREZXNjcmlwdGlvbih0cmFuc2NyaXB0aW9uKVxuICAgIHRoaXMuYWRkVGFnKHRhZywgZnJhZ21lbnRVUkkpXG4gICAgaWYgKGNsYXNzaWZpY2F0aW9uKSB7XG4gICAgICB0aGlzLmFkZENsYXNzaWZpY2F0aW9uKGNsYXNzaWZpY2F0aW9uKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2NyaWJlQW5ub3RhdGlvblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZGVsL1RyYW5zY3JpYmVBbm5vdGF0aW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\n * Delete an overlay.\n * @param {Object} viewer\n *   The viewer.\n * @param {String} id\n *   The overlay ID.\n */\n/* harmony default export */ __webpack_exports__["a"] = (function (viewer, id) {\n  var query = ".overlay[data-id=\\"" + id + "\\"]";\n  var el = document.querySelector(query);\n  viewer.removeOverlay(el);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZGVsZXRlT3ZlcmxheS5qcz82YTE2Il0sIm5hbWVzIjpbInZpZXdlciIsImlkIiwicXVlcnkiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInJlbW92ZU92ZXJsYXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBT0EseURBQWUsVUFBVUEsTUFBVixFQUFrQkMsRUFBbEIsRUFBc0I7QUFDbkMsTUFBTUMsZ0NBQTZCRCxFQUE3QixRQUFOO0FBQ0EsTUFBTUUsS0FBS0MsU0FBU0MsYUFBVCxDQUF1QkgsS0FBdkIsQ0FBWDtBQUNBRixTQUFPTSxhQUFQLENBQXFCSCxFQUFyQjtBQUNELEMiLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlbGV0ZSBhbiBvdmVybGF5LlxuICogQHBhcmFtIHtPYmplY3R9IHZpZXdlclxuICogICBUaGUgdmlld2VyLlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiAgIFRoZSBvdmVybGF5IElELlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAodmlld2VyLCBpZCkge1xuICBjb25zdCBxdWVyeSA9IGAub3ZlcmxheVtkYXRhLWlkPVwiJHtpZH1cIl1gXG4gIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihxdWVyeSlcbiAgdmlld2VyLnJlbW92ZU92ZXJsYXkoZWwpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvZGVsZXRlT3ZlcmxheS5qcyJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Draw and return an overlay.\n * @param {Object} viewer\n *   The viewer.\n * @param {String} id\n *   An ID for the overlay.\n * @param {Object} rect\n *   Overlay coordinates.\n * @param {String} cls\n *   Additional overlay class.\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (viewer, id, rect) {\n  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n  if (!viewer.addOverlay) {\n    return;\n  }\n  var el = document.createElement('div');\n  el.dataset.id = id;\n  el.classList.add('overlay');\n  el.style.zIndex = '1';\n  if (type === 'selection') {\n    el.style.border = '1px solid rgb(52, 152, 219)';\n    el.style.backgroundColor = 'rgba(52, 152, 219, 0.2)';\n    el.style.boxSizing = 'border-box';\n    el.style.opacity = '.8';\n\n    el.addEventListener('mouseover', function () {\n      el.style.border = '1px solid #4DAF7C';\n      el.style.backgroundColor = 'rgba(77, 175, 124, 0.2)';\n    });\n\n    el.addEventListener('mouseout', function () {\n      el.style.border = '1px solid rgb(52, 152, 219)';\n      el.style.backgroundColor = 'rgba(52, 152, 219, 0.2)';\n    });\n  } else if (type === 'highlight') {\n    el.style.backgroundColor = 'rgba(244, 208, 63, 0.3)';\n  }\n  viewer.addOverlay({ element: el, location: rect });\n  return el;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZHJhd092ZXJsYXkuanM/YzQ0MSJdLCJuYW1lcyI6WyJ2aWV3ZXIiLCJpZCIsInJlY3QiLCJ0eXBlIiwiYWRkT3ZlcmxheSIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGF0YXNldCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwiekluZGV4IiwiYm9yZGVyIiwiYmFja2dyb3VuZENvbG9yIiwiYm94U2l6aW5nIiwib3BhY2l0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwibG9jYXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBLHlEQUFlLFVBQVVBLE1BQVYsRUFBa0JDLEVBQWxCLEVBQXNCQyxJQUF0QixFQUF1QztBQUFBLE1BQVhDLElBQVcsdUVBQUosRUFBSTs7QUFDcEQsTUFBSSxDQUFDSCxPQUFPSSxVQUFaLEVBQXdCO0FBQ3RCO0FBQ0Q7QUFDRCxNQUFNQyxLQUFLQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVg7QUFDQUYsS0FBR0csT0FBSCxDQUFXUCxFQUFYLEdBQWdCQSxFQUFoQjtBQUNBSSxLQUFHSSxTQUFILENBQWFDLEdBQWIsQ0FBaUIsU0FBakI7QUFDQUwsS0FBR00sS0FBSCxDQUFTQyxNQUFULEdBQWtCLEdBQWxCO0FBQ0EsTUFBSVQsU0FBUyxXQUFiLEVBQTBCO0FBQ3hCRSxPQUFHTSxLQUFILENBQVNFLE1BQVQsR0FBa0IsNkJBQWxCO0FBQ0FSLE9BQUdNLEtBQUgsQ0FBU0csZUFBVCxHQUEyQix5QkFBM0I7QUFDQVQsT0FBR00sS0FBSCxDQUFTSSxTQUFULEdBQXFCLFlBQXJCO0FBQ0FWLE9BQUdNLEtBQUgsQ0FBU0ssT0FBVCxHQUFtQixJQUFuQjs7QUFFQVgsT0FBR1ksZ0JBQUgsQ0FBb0IsV0FBcEIsRUFBaUMsWUFBWTtBQUMzQ1osU0FBR00sS0FBSCxDQUFTRSxNQUFULEdBQWtCLG1CQUFsQjtBQUNBUixTQUFHTSxLQUFILENBQVNHLGVBQVQsR0FBMkIseUJBQTNCO0FBQ0QsS0FIRDs7QUFLQVQsT0FBR1ksZ0JBQUgsQ0FBb0IsVUFBcEIsRUFBZ0MsWUFBWTtBQUMxQ1osU0FBR00sS0FBSCxDQUFTRSxNQUFULEdBQWtCLDZCQUFsQjtBQUNBUixTQUFHTSxLQUFILENBQVNHLGVBQVQsR0FBMkIseUJBQTNCO0FBQ0QsS0FIRDtBQUlELEdBZkQsTUFlTyxJQUFJWCxTQUFTLFdBQWIsRUFBMEI7QUFDL0JFLE9BQUdNLEtBQUgsQ0FBU0csZUFBVCxHQUEyQix5QkFBM0I7QUFDRDtBQUNEZCxTQUFPSSxVQUFQLENBQWtCLEVBQUVjLFNBQVNiLEVBQVgsRUFBZWMsVUFBVWpCLElBQXpCLEVBQWxCO0FBQ0EsU0FBT0csRUFBUDtBQUNELEMiLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERyYXcgYW5kIHJldHVybiBhbiBvdmVybGF5LlxuICogQHBhcmFtIHtPYmplY3R9IHZpZXdlclxuICogICBUaGUgdmlld2VyLlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiAgIEFuIElEIGZvciB0aGUgb3ZlcmxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0XG4gKiAgIE92ZXJsYXkgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xzXG4gKiAgIEFkZGl0aW9uYWwgb3ZlcmxheSBjbGFzcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHZpZXdlciwgaWQsIHJlY3QsIHR5cGUgPSAnJykge1xuICBpZiAoIXZpZXdlci5hZGRPdmVybGF5KSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBlbC5kYXRhc2V0LmlkID0gaWRcbiAgZWwuY2xhc3NMaXN0LmFkZCgnb3ZlcmxheScpXG4gIGVsLnN0eWxlLnpJbmRleCA9ICcxJ1xuICBpZiAodHlwZSA9PT0gJ3NlbGVjdGlvbicpIHtcbiAgICBlbC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIHJnYig1MiwgMTUyLCAyMTkpJ1xuICAgIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDUyLCAxNTIsIDIxOSwgMC4yKSdcbiAgICBlbC5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCdcbiAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJy44J1xuXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgZWwuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjNERBRjdDJ1xuICAgICAgZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoNzcsIDE3NSwgMTI0LCAwLjIpJ1xuICAgIH0pXG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgcmdiKDUyLCAxNTIsIDIxOSknXG4gICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSg1MiwgMTUyLCAyMTksIDAuMiknXG4gICAgfSlcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnaGlnaGxpZ2h0Jykge1xuICAgIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDI0NCwgMjA4LCA2MywgMC4zKSdcbiAgfVxuICB2aWV3ZXIuYWRkT3ZlcmxheSh7IGVsZW1lbnQ6IGVsLCBsb2NhdGlvbjogcmVjdCB9KVxuICByZXR1cm4gZWxcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9kcmF3T3ZlcmxheS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openseadragon__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openseadragon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_openseadragon__);\n\n\n/**\n * Return a rectangle object from an IIIF image URI.\n * @param {String} imageUri\n *   The image URI.\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (imageUri) {\n  var uriParts = imageUri.split('/');\n  var regionStr = uriParts[uriParts.length - 4];\n  var regionParts = regionStr.split(',');\n  return new __WEBPACK_IMPORTED_MODULE_0_openseadragon___default.a.Rect(Number(regionParts[0]), Number(regionParts[1]), Number(regionParts[2]), Number(regionParts[3]));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZXh0cmFjdFJlY3RGcm9tSW1hZ2VVcmkuanM/YjA0YyJdLCJuYW1lcyI6WyJpbWFnZVVyaSIsInVyaVBhcnRzIiwic3BsaXQiLCJyZWdpb25TdHIiLCJsZW5ndGgiLCJyZWdpb25QYXJ0cyIsIk9wZW5TZWFkcmFnb24iLCJSZWN0IiwiTnVtYmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOzs7OztBQUtBLHlEQUFlLFVBQVVBLFFBQVYsRUFBb0I7QUFDakMsTUFBTUMsV0FBV0QsU0FBU0UsS0FBVCxDQUFlLEdBQWYsQ0FBakI7QUFDQSxNQUFNQyxZQUFZRixTQUFTQSxTQUFTRyxNQUFULEdBQWtCLENBQTNCLENBQWxCO0FBQ0EsTUFBTUMsY0FBY0YsVUFBVUQsS0FBVixDQUFnQixHQUFoQixDQUFwQjtBQUNBLFNBQU8sSUFBSSxxREFBQUksQ0FBY0MsSUFBbEIsQ0FDTEMsT0FBT0gsWUFBWSxDQUFaLENBQVAsQ0FESyxFQUVMRyxPQUFPSCxZQUFZLENBQVosQ0FBUCxDQUZLLEVBR0xHLE9BQU9ILFlBQVksQ0FBWixDQUFQLENBSEssRUFJTEcsT0FBT0gsWUFBWSxDQUFaLENBQVAsQ0FKSyxDQUFQO0FBTUQsQyIsImZpbGUiOiI5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVuU2VhZHJhZ29uIGZyb20gJ29wZW5zZWFkcmFnb24nXG5cbi8qKlxuICogUmV0dXJuIGEgcmVjdGFuZ2xlIG9iamVjdCBmcm9tIGFuIElJSUYgaW1hZ2UgVVJJLlxuICogQHBhcmFtIHtTdHJpbmd9IGltYWdlVXJpXG4gKiAgIFRoZSBpbWFnZSBVUkkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChpbWFnZVVyaSkge1xuICBjb25zdCB1cmlQYXJ0cyA9IGltYWdlVXJpLnNwbGl0KCcvJylcbiAgY29uc3QgcmVnaW9uU3RyID0gdXJpUGFydHNbdXJpUGFydHMubGVuZ3RoIC0gNF1cbiAgY29uc3QgcmVnaW9uUGFydHMgPSByZWdpb25TdHIuc3BsaXQoJywnKVxuICByZXR1cm4gbmV3IE9wZW5TZWFkcmFnb24uUmVjdChcbiAgICBOdW1iZXIocmVnaW9uUGFydHNbMF0pLFxuICAgIE51bWJlcihyZWdpb25QYXJ0c1sxXSksXG4gICAgTnVtYmVyKHJlZ2lvblBhcnRzWzJdKSxcbiAgICBOdW1iZXIocmVnaW9uUGFydHNbM10pXG4gIClcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9leHRyYWN0UmVjdEZyb21JbWFnZVVyaS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Toggle the focus class on an overlay.\n * @param {String} id\n *   The overlay ID.\n * @param {Boolean} highlight\n *   True to highlight, false otherwise.\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (id, highlight) {\n  var query = '.overlay[data-id=\"' + id + '\"]';\n  var el = document.querySelector(query);\n  if (highlight) {\n    el.style.borderColor = '#4DAF7C';\n    el.style.backgroundColor = 'rgba(77, 175, 124, 0.2)';\n  } else {\n    el.style.borderColor = 'rgb(52, 152, 219)';\n    el.style.backgroundColor = 'rgba(52, 152, 219, 0.2)';\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaGlnaGxpZ2h0T3ZlcmxheS5qcz9mZDYxIl0sIm5hbWVzIjpbImlkIiwiaGlnaGxpZ2h0IiwicXVlcnkiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiYm9yZGVyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBT0EseURBQWUsVUFBVUEsRUFBVixFQUFjQyxTQUFkLEVBQXlCO0FBQ3RDLE1BQU1DLCtCQUE2QkYsRUFBN0IsT0FBTjtBQUNBLE1BQU1HLEtBQUtDLFNBQVNDLGFBQVQsQ0FBdUJILEtBQXZCLENBQVg7QUFDQSxNQUFJRCxTQUFKLEVBQWU7QUFDYkUsT0FBR0csS0FBSCxDQUFTQyxXQUFULEdBQXVCLFNBQXZCO0FBQ0FKLE9BQUdHLEtBQUgsQ0FBU0UsZUFBVCxHQUEyQix5QkFBM0I7QUFDRCxHQUhELE1BR087QUFDTEwsT0FBR0csS0FBSCxDQUFTQyxXQUFULEdBQXVCLG1CQUF2QjtBQUNBSixPQUFHRyxLQUFILENBQVNFLGVBQVQsR0FBMkIseUJBQTNCO0FBQ0Q7QUFDRixDIiwiZmlsZSI6IjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb2dnbGUgdGhlIGZvY3VzIGNsYXNzIG9uIGFuIG92ZXJsYXkuXG4gKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAqICAgVGhlIG92ZXJsYXkgSUQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGhpZ2hsaWdodFxuICogICBUcnVlIHRvIGhpZ2hsaWdodCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoaWQsIGhpZ2hsaWdodCkge1xuICBjb25zdCBxdWVyeSA9IGAub3ZlcmxheVtkYXRhLWlkPVwiJHtpZH1cIl1gXG4gIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihxdWVyeSlcbiAgaWYgKGhpZ2hsaWdodCkge1xuICAgIGVsLnN0eWxlLmJvcmRlckNvbG9yID0gJyM0REFGN0MnXG4gICAgZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoNzcsIDE3NSwgMTI0LCAwLjIpJ1xuICB9IGVsc2Uge1xuICAgIGVsLnN0eWxlLmJvcmRlckNvbG9yID0gJ3JnYig1MiwgMTUyLCAyMTkpJ1xuICAgIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDUyLCAxNTIsIDIxOSwgMC4yKSdcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzL2hpZ2hsaWdodE92ZXJsYXkuanMiXSwic291cmNlUm9vdCI6IiJ9")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\n * Enter fullscreen mode.\n * @param {Object} el\n */\nfunction enterFullscreen(el) {\n  if (el.requestFullscreen) {\n    el.requestFullscreen();\n  } else if (el.mozRequestFullScreen) {\n    el.mozRequestFullScreen();\n  } else if (el.webkitRequestFullscreen) {\n    el.webkitRequestFullscreen();\n  } else if (el.msRequestFullscreen) {\n    el.msRequestFullscreen();\n  }\n}\n\n/**\n * Exit fullscreen mode.\n * @param {Object} el\n */\nfunction exitFullscreen(el) {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n\n/**\n * Toggle fullscreen mode.\n * @param {Object} el\n *   The element to put in fullscreen mode.\n */\n/* harmony default export */ __webpack_exports__["a"] = (function (el) {\n  var isFullScreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n  if (isFullScreen) {\n    exitFullscreen(el);\n    return;\n  }\n  enterFullscreen(el);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdG9nZ2xlRnVsbFNjcmVlbi5qcz9mNWQ1Il0sIm5hbWVzIjpbImVudGVyRnVsbHNjcmVlbiIsImVsIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwiZG9jdW1lbnQiLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxTY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUEsU0FBU0EsZUFBVCxDQUEwQkMsRUFBMUIsRUFBOEI7QUFDNUIsTUFBSUEsR0FBR0MsaUJBQVAsRUFBMEI7QUFDeEJELE9BQUdDLGlCQUFIO0FBQ0QsR0FGRCxNQUVPLElBQUlELEdBQUdFLG9CQUFQLEVBQTZCO0FBQ2xDRixPQUFHRSxvQkFBSDtBQUNELEdBRk0sTUFFQSxJQUFJRixHQUFHRyx1QkFBUCxFQUFnQztBQUNyQ0gsT0FBR0csdUJBQUg7QUFDRCxHQUZNLE1BRUEsSUFBSUgsR0FBR0ksbUJBQVAsRUFBNEI7QUFDakNKLE9BQUdJLG1CQUFIO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBLFNBQVNDLGNBQVQsQ0FBeUJMLEVBQXpCLEVBQTZCO0FBQzNCLE1BQUlNLFNBQVNELGNBQWIsRUFBNkI7QUFDM0JDLGFBQVNELGNBQVQ7QUFDRCxHQUZELE1BRU8sSUFBSUMsU0FBU0MsbUJBQWIsRUFBa0M7QUFDdkNELGFBQVNDLG1CQUFUO0FBQ0QsR0FGTSxNQUVBLElBQUlELFNBQVNFLG9CQUFiLEVBQW1DO0FBQ3hDRixhQUFTRSxvQkFBVDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBS0EseURBQWUsVUFBVVIsRUFBVixFQUFjO0FBQzNCLE1BQU1TLGVBQ0pILFNBQVNJLGlCQUFULElBQ0FKLFNBQVNLLG9CQURULElBRUFMLFNBQVNNLHVCQUhYO0FBS0EsTUFBSUgsWUFBSixFQUFrQjtBQUNoQkosbUJBQWVMLEVBQWY7QUFDQTtBQUNEO0FBQ0RELGtCQUFnQkMsRUFBaEI7QUFDRCxDIiwiZmlsZSI6IjkzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnRlciBmdWxsc2NyZWVuIG1vZGUuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxcbiAqL1xuZnVuY3Rpb24gZW50ZXJGdWxsc2NyZWVuIChlbCkge1xuICBpZiAoZWwucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBlbC5yZXF1ZXN0RnVsbHNjcmVlbigpXG4gIH0gZWxzZSBpZiAoZWwubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICBlbC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpXG4gIH0gZWxzZSBpZiAoZWwud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBlbC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpXG4gIH0gZWxzZSBpZiAoZWwubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsLm1zUmVxdWVzdEZ1bGxzY3JlZW4oKVxuICB9XG59XG5cbi8qKlxuICogRXhpdCBmdWxsc2NyZWVuIG1vZGUuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxcbiAqL1xuZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4gKGVsKSB7XG4gIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKClcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpXG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpXG4gIH1cbn1cblxuLyoqXG4gKiBUb2dnbGUgZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIHtPYmplY3R9IGVsXG4gKiAgIFRoZSBlbGVtZW50IHRvIHB1dCBpbiBmdWxsc2NyZWVuIG1vZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChlbCkge1xuICBjb25zdCBpc0Z1bGxTY3JlZW4gPSAoXG4gICAgZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XG4gIClcbiAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgIGV4aXRGdWxsc2NyZWVuKGVsKVxuICAgIHJldHVyblxuICB9XG4gIGVudGVyRnVsbHNjcmVlbihlbClcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy90b2dnbGVGdWxsU2NyZWVuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_github__ = __webpack_require__(197);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__selectTasks__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__selectTasks___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__selectTasks__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__transcribeTasks__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__transcribeTasks___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__transcribeTasks__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      selectTaskOpts: __WEBPACK_IMPORTED_MODULE_3__selectTasks___default.a,\n      transcribeTaskOpts: __WEBPACK_IMPORTED_MODULE_4__transcribeTasks___default.a,\n      showSelectViewer: false,\n      showTranscribeViewer: false,\n      creator: {\n        id: 'http://example.org/user1',\n        type: 'Person',\n        name: 'My Pseudonym',\n        nickname: 'pseudo'\n      },\n      generator: {\n        id: 'http://example.org/client1',\n        type: 'Software',\n        name: 'Code v2.1',\n        homepage: 'http://example.org/client1/homepage1'\n      },\n      showLike: true,\n      messageBus: new __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]()\n    };\n  },\n\n  computed: {\n    githubUrl: function githubUrl() {\n      return \"https://github.com/libcrowds/libcrowds-viewer\";\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default.a\n  },\n\n  methods: {\n    handleTaskChange: function handleTaskChange(task) {\n      console.log('Task changed', task);\n    },\n    handleCreate: function handleCreate(task, annotation) {\n      console.log('Annotation created', task, annotation);\n    },\n    handleUpdate: function handleUpdate(task, annotation) {\n      console.log('Annotation updated', task, annotation);\n    },\n    handleDelete: function handleDelete(task, annotation) {\n      console.log('Annotation deleted', task, annotation);\n    },\n    handleSubmit: function handleSubmit(task) {\n      console.log('Task submitted', task);\n      this.messageBus.$emit('success', 'Answer saved!');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQXBwLnZ1ZT85MjY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzsrREFFQTt3QkFFQTs7c0JBRUE7MEJBQ0E7d0JBQ0E7NEJBQ0E7O1lBRUE7Y0FDQTtjQUNBO2tCQUVBO0FBTEE7O1lBT0E7Y0FDQTtjQUNBO2tCQUVBO0FBTEE7Z0JBTUE7c0JBRUE7QUFuQkE7QUFxQkE7OztvQ0FFQTs0REFDQTtBQUdBO0FBTEE7OztBQVNBO0FBSEE7OztzREFLQTtrQ0FDQTtBQUNBOzBEQUNBOzhDQUNBO0FBQ0E7MERBQ0E7OENBQ0E7QUFDQTswREFDQTs4Q0FDQTtBQUNBOzhDQUNBO29DQUNBO3VDQUNBO0FBRUE7QUFqQkE7QUFsQ0EiLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJhcHBcIj5cblxuICAgIDwhLS0gRGVtbyBob21lIHBhZ2UgLS0+XG4gICAgPGRpdlxuICAgICAgaWQ9XCJob21lLWNvbnRhaW5lclwiXG4gICAgICB2LWlmPVwiIXNob3dTZWxlY3RWaWV3ZXIgJiYgIXNob3dUcmFuc2NyaWJlVmlld2VyXCI+XG4gICAgICA8aDE+TGliQ3Jvd2RzIFZpZXdlcjwvaDE+XG4gICAgICA8cCBjbGFzcz1cImxlYWRcIj5cbiAgICAgICAgSUlJRi1jb21wYXRpYmxlIGltYWdlIHZpZXdlciBWdWUgY29tcG9uZW50LlxuICAgICAgPC9wPlxuICAgICAgPGRpdiBpZD1cIm1vZGUtYnV0dG9uc1wiPlxuICAgICAgICA8YnV0dG9uIEBjbGljaz1cInNob3dTZWxlY3RWaWV3ZXIgPSB0cnVlXCI+XG4gICAgICAgICAgU2VsZWN0IE1vZGVcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gQGNsaWNrPVwic2hvd1RyYW5zY3JpYmVWaWV3ZXIgPSB0cnVlXCI+XG4gICAgICAgICAgVHJhbnNjcmliZSBNb2RlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8YSA6aHJlZj1cImdpdGh1YlVybFwiIGlkPVwiZG9jLWxpbmtcIj5cbiAgICAgICAgPGljb24gbmFtZT1cImdpdGh1YlwiIHNjYWxlPVwiMS4yXCI+PC9pY29uPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInRleHRcIj5Eb2N1bWVudGF0aW9uIG9uIEdpdEh1Yjwvc3Bhbj5cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gVmlld2VyIHVzZWQgZm9yIHRoZSBzZWxlY3QgdGFza3MgLS0+XG4gICAgPGRpdiBjbGFzcz1cInZpZXdlci1jb250YWluZXJcIiB2LWVsc2UtaWY9XCJzaG93U2VsZWN0Vmlld2VyXCI+XG4gICAgICA8bGliY3Jvd2RzLXZpZXdlclxuICAgICAgICA6ZGlzYWJsZS1jb21wbGV0ZT1cInRydWVcIlxuICAgICAgICA6c2hvdy1saWtlPVwic2hvd0xpa2VcIlxuICAgICAgICA6bWVzc2FnZS1idXM9XCJtZXNzYWdlQnVzXCJcbiAgICAgICAgOnRhc2stb3B0cz1cInNlbGVjdFRhc2tPcHRzXCJcbiAgICAgICAgOmNyZWF0b3I9XCJjcmVhdG9yXCJcbiAgICAgICAgOmdlbmVyYXRvcj1cImdlbmVyYXRvclwiXG4gICAgICAgIEB0YXNrY2hhbmdlPVwiaGFuZGxlVGFza0NoYW5nZVwiXG4gICAgICAgIEBjcmVhdGU9XCJoYW5kbGVDcmVhdGVcIlxuICAgICAgICBAdXBkYXRlPVwiaGFuZGxlVXBkYXRlXCJcbiAgICAgICAgQGRlbGV0ZT1cImhhbmRsZURlbGV0ZVwiXG4gICAgICAgIEBzdWJtaXQ9XCJoYW5kbGVTdWJtaXRcIj5cbiAgICAgIDwvbGliY3Jvd2RzLXZpZXdlcj5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gVmlld2VyIHVzZWQgZm9yIHRoZSB0cmFuc2NyaWJlIHRhc2tzIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJ2aWV3ZXItY29udGFpbmVyXCIgdi1lbHNlLWlmPVwic2hvd1RyYW5zY3JpYmVWaWV3ZXJcIj5cbiAgICAgIDxsaWJjcm93ZHMtdmlld2VyXG4gICAgICAgIDpkaXNhYmxlLWNvbXBsZXRlPVwidHJ1ZVwiXG4gICAgICAgIDpzaG93LWxpa2U9XCJzaG93TGlrZVwiXG4gICAgICAgIDptZXNzYWdlLWJ1cz1cIm1lc3NhZ2VCdXNcIlxuICAgICAgICA6dGFzay1vcHRzPVwidHJhbnNjcmliZVRhc2tPcHRzXCJcbiAgICAgICAgOmNyZWF0b3I9XCJjcmVhdG9yXCJcbiAgICAgICAgOmdlbmVyYXRvcj1cImdlbmVyYXRvclwiXG4gICAgICAgIEB0YXNrY2hhbmdlPVwiaGFuZGxlVGFza0NoYW5nZVwiXG4gICAgICAgIEBjcmVhdGU9XCJoYW5kbGVDcmVhdGVcIlxuICAgICAgICBAdXBkYXRlPVwiaGFuZGxlVXBkYXRlXCJcbiAgICAgICAgQGRlbGV0ZT1cImhhbmRsZURlbGV0ZVwiXG4gICAgICAgIEBzdWJtaXQ9XCJoYW5kbGVTdWJtaXRcIj5cbiAgICAgIDwvbGliY3Jvd2RzLXZpZXdlcj5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBJY29uIGZyb20gJ3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvZ2l0aHViJ1xuaW1wb3J0IHNlbGVjdFRhc2tzIGZyb20gJy4vc2VsZWN0VGFza3MnXG5pbXBvcnQgdHJhbnNjcmliZVRhc2tzIGZyb20gJy4vdHJhbnNjcmliZVRhc2tzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0VGFza09wdHM6IHNlbGVjdFRhc2tzLFxuICAgICAgdHJhbnNjcmliZVRhc2tPcHRzOiB0cmFuc2NyaWJlVGFza3MsXG4gICAgICBzaG93U2VsZWN0Vmlld2VyOiBmYWxzZSxcbiAgICAgIHNob3dUcmFuc2NyaWJlVmlld2VyOiBmYWxzZSxcbiAgICAgIGNyZWF0b3I6IHtcbiAgICAgICAgaWQ6ICdodHRwOi8vZXhhbXBsZS5vcmcvdXNlcjEnLFxuICAgICAgICB0eXBlOiAnUGVyc29uJyxcbiAgICAgICAgbmFtZTogJ015IFBzZXVkb255bScsXG4gICAgICAgIG5pY2tuYW1lOiAncHNldWRvJ1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRvcjoge1xuICAgICAgICBpZDogJ2h0dHA6Ly9leGFtcGxlLm9yZy9jbGllbnQxJyxcbiAgICAgICAgdHlwZTogJ1NvZnR3YXJlJyxcbiAgICAgICAgbmFtZTogJ0NvZGUgdjIuMScsXG4gICAgICAgIGhvbWVwYWdlOiAnaHR0cDovL2V4YW1wbGUub3JnL2NsaWVudDEvaG9tZXBhZ2UxJ1xuICAgICAgfSxcbiAgICAgIHNob3dMaWtlOiB0cnVlLFxuICAgICAgbWVzc2FnZUJ1czogbmV3IFZ1ZSgpXG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2l0aHViVXJsOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuR0lUSFVCX1VSTFxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRzOiB7XG4gICAgSWNvblxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYW5kbGVUYXNrQ2hhbmdlICh0YXNrKSB7XG4gICAgICBjb25zb2xlLmxvZygnVGFzayBjaGFuZ2VkJywgdGFzaylcbiAgICB9LFxuICAgIGhhbmRsZUNyZWF0ZSAodGFzaywgYW5ub3RhdGlvbikge1xuICAgICAgY29uc29sZS5sb2coJ0Fubm90YXRpb24gY3JlYXRlZCcsIHRhc2ssIGFubm90YXRpb24pXG4gICAgfSxcbiAgICBoYW5kbGVVcGRhdGUgKHRhc2ssIGFubm90YXRpb24pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdBbm5vdGF0aW9uIHVwZGF0ZWQnLCB0YXNrLCBhbm5vdGF0aW9uKVxuICAgIH0sXG4gICAgaGFuZGxlRGVsZXRlICh0YXNrLCBhbm5vdGF0aW9uKSB7XG4gICAgICBjb25zb2xlLmxvZygnQW5ub3RhdGlvbiBkZWxldGVkJywgdGFzaywgYW5ub3RhdGlvbilcbiAgICB9LFxuICAgIGhhbmRsZVN1Ym1pdCAodGFzaykge1xuICAgICAgY29uc29sZS5sb2coJ1Rhc2sgc3VibWl0dGVkJywgdGFzaylcbiAgICAgIHRoaXMubWVzc2FnZUJ1cy4kZW1pdCgnc3VjY2VzcycsICdBbnN3ZXIgc2F2ZWQhJylcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiNob21lLWNvbnRhaW5lciB7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBtYXJnaW46IDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGOEY4Rjg7XG4gIGNvbG9yOiAjMUYxRTM4O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICBoMSB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIH1cblxuICBwLmxlYWQge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGNvbG9yOiAjNUY1RjVGO1xuICB9XG5cbiAgYnV0dG9uIHtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYmFja2dyb3VuZDogIzU5QUJFMztcbiAgICBwYWRkaW5nOiAxMnB4IDI2cHg7XG4gICAgbWFyZ2luOiAwLjVyZW07XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuOHB4O1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgICBib3JkZXI6IG5vbmU7XG4gIH1cblxuICAjZG9jLWxpbmsge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiAxZW07XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG4gICAgc3ZnIHtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIH1cblxuICAgIC50ZXh0IHtcbiAgICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcbiAgICAgIGNvbG9yOiAjNUY1RjVGO1xuICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gICAgfVxuICB9XG59XG5cbiNtb2RlLWJ1dHRvbnMge1xuICBkaXNwbGF5OmZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi52aWV3ZXItY29udGFpbmVyIHtcbiAgbWFyZ2luOiAwO1xuICBoZWlnaHQ6IDEwMHZoO1xufVxuXG4ubm90eWYge1xuICByaWdodDogMjgwcHg7XG59XG48L3N0eWxlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBcHAudnVlPzcwNjcyNmM0Il0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(26);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar icons = {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'icon',\n  props: {\n    name: {\n      type: String,\n      validator: function validator(val) {\n        if (val) {\n          if (!(val in icons)) {\n            __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].util.warn('Invalid prop: prop \"icon\" is referring to an unregistered icon \"' + val + '\".' + '\\nPlesase make sure you have imported this icon before using it.', this);\n            return false;\n          }\n          return true;\n        }\n        return null;\n      }\n    },\n    scale: [Number, String],\n    spin: Boolean,\n    inverse: Boolean,\n    flip: {\n      validator: function validator(val) {\n        return val === 'horizontal' || val === 'vertical';\n      }\n    },\n    label: String\n  },\n  data: function data() {\n    return {\n      x: false,\n      y: false,\n      childrenWidth: 0,\n      childrenHeight: 0,\n      outerScale: 1\n    };\n  },\n\n  computed: {\n    normalizedScale: function normalizedScale() {\n      var scale = this.scale;\n      scale = typeof scale === 'undefined' ? 1 : Number(scale);\n      if (isNaN(scale) || scale <= 0) {\n        __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].util.warn('Invalid prop: prop \"scale\" should be a number over 0.', this);\n        return this.outerScale;\n      }\n      return scale * this.outerScale;\n    },\n    clazz: function clazz() {\n      return {\n        'fa-icon': true,\n        'fa-spin': this.spin,\n        'fa-flip-horizontal': this.flip === 'horizontal',\n        'fa-flip-vertical': this.flip === 'vertical',\n        'fa-inverse': this.inverse\n      };\n    },\n    icon: function icon() {\n      if (this.name) {\n        return icons[this.name];\n      }\n      return null;\n    },\n    box: function box() {\n      if (this.icon) {\n        return '0 0 ' + this.icon.width + ' ' + this.icon.height;\n      }\n      return '0 0 ' + this.width + ' ' + this.height;\n    },\n    ratio: function ratio() {\n      if (!this.icon) {\n        return 1;\n      }\n      var _icon = this.icon,\n          width = _icon.width,\n          height = _icon.height;\n\n      return Math.max(width, height) / 16;\n    },\n    width: function width() {\n      return this.childrenWidth || this.icon && this.icon.width / this.ratio * this.normalizedScale || 0;\n    },\n    height: function height() {\n      return this.childrenHeight || this.icon && this.icon.height / this.ratio * this.normalizedScale || 0;\n    },\n    style: function style() {\n      if (this.normalizedScale === 1) {\n        return false;\n      }\n      return {\n        fontSize: this.normalizedScale + 'em'\n      };\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this.icon) {\n      return;\n    }\n    this.$children.forEach(function (child) {\n      child.outerScale = _this.normalizedScale;\n    });\n    var width = 0;\n    var height = 0;\n    this.$children.forEach(function (child) {\n      width = Math.max(width, child.width);\n      height = Math.max(height, child.height);\n    });\n    this.childrenWidth = width;\n    this.childrenHeight = height;\n    this.$children.forEach(function (child) {\n      child.x = (width - child.width) / 2;\n      child.y = (height - child.height) / 2;\n    });\n  },\n  register: function register(data) {\n    for (var name in data) {\n      var icon = data[name];\n\n      if (!icon.paths) {\n        icon.paths = [];\n      }\n      if (icon.d) {\n        icon.paths.push({ d: icon.d });\n      }\n\n      if (!icon.polygons) {\n        icon.polygons = [];\n      }\n      if (icon.points) {\n        icon.polygons.push({ points: icon.points });\n      }\n\n      icons[name] = icon;\n    }\n  },\n\n  icons: icons\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vSWNvbi52dWU/NDBhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0NBOztBQUVBOztBQUVBO1FBRUE7OztZQUdBO3lDQUNBO2lCQUNBOytCQUNBO2dKQUNBLGlGQUNBO21CQUNBO0FBQ0E7aUJBQ0E7QUFDQTtlQUNBO0FBRUE7QUFiQTtvQkFjQTtVQUNBO2FBQ0E7O3lDQUVBOytDQUNBO0FBRUE7QUFKQTtXQU1BO0FBeEJBO3dCQXlCQTs7U0FFQTtTQUNBO3FCQUNBO3NCQUNBO2tCQUVBO0FBTkE7QUFPQTs7O2dEQUVBO3VCQUNBO3dEQUNBO3NDQUNBO2dJQUNBO29CQUNBO0FBQ0E7MEJBQ0E7QUFDQTs0QkFDQTs7bUJBRUE7d0JBQ0E7NENBQ0E7MENBQ0E7MkJBRUE7QUFOQTtBQU9BOzBCQUNBO3FCQUNBOzBCQUNBO0FBQ0E7YUFDQTtBQUNBO3dCQUNBO3FCQUNBOzBEQUNBO0FBQ0E7OENBQ0E7QUFDQTs7c0JBRUE7ZUFDQTtBQUNBO0FBSEEsdUJBSUE7Ozs7dUNBQ0E7QUFDQTs0QkFDQTt1R0FDQTtBQUNBOzhCQUNBO3lHQUNBO0FBQ0E7NEJBQ0E7c0NBQ0E7ZUFDQTtBQUNBOzt5Q0FHQTtBQUZBO0FBSUE7QUFwREE7O0FBcURBOzttQkFDQTtBQUNBO0FBQ0E7NENBQ0E7K0JBQ0E7QUFDQTtnQkFDQTtpQkFDQTs0Q0FDQTtvQ0FDQTtzQ0FDQTtBQUNBO3lCQUNBOzBCQUNBOzRDQUNBO3dDQUNBOzBDQUNBO0FBQ0E7QUFDQTtvQ0FDQTsyQkFDQTtzQkFFQTs7dUJBQ0E7cUJBQ0E7QUFDQTtrQkFDQTtrQ0FDQTtBQUVBOzswQkFDQTt3QkFDQTtBQUNBO3VCQUNBOzBDQUNBO0FBRUE7O29CQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQWxJQSIsImZpbGUiOiI5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgOmNsYXNzPVwiY2xhenpcIiA6cm9sZT1cImxhYmVsID8gJ2ltZycgOiAncHJlc2VudGF0aW9uJ1wiIDphcmlhLWxhYmVsPVwibGFiZWxcIiA6eD1cInhcIiA6eT1cInlcIiA6d2lkdGg9XCJ3aWR0aFwiIDpoZWlnaHQ9XCJoZWlnaHRcIiA6dmlld0JveD1cImJveFwiIDpzdHlsZT1cInN0eWxlXCI+XG4gICAgPHNsb3Q+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImljb24gJiYgaWNvbi5wYXRoc1wiPlxuICAgICAgICA8cGF0aCB2LWZvcj1cInBhdGggaW4gaWNvbi5wYXRoc1wiIHYtYmluZD1cInBhdGhcIi8+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpY29uICYmIGljb24ucG9seWdvbnNcIj5cbiAgICAgICAgPHBvbHlnb24gdi1mb3I9XCJwb2x5Z29uIGluIGljb24ucG9seWdvbnNcIiB2LWJpbmQ9XCJwb2x5Z29uXCIvPlxuICAgICAgPC90ZW1wbGF0ZT5cYlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpY29uICYmIGljb24ucmF3XCI+PGcgdi1odG1sPVwiaWNvbi5yYXdcIj48L2c+PC90ZW1wbGF0ZT5cbiAgICA8L3Nsb3Q+XG4gIDwvc3ZnPlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlPlxuLmZhLWljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcbn1cblxuLmZhLWZsaXAtaG9yaXpvbnRhbCB7XG4gIHRyYW5zZm9ybTogc2NhbGUoLTEsIDEpO1xufVxuXG4uZmEtZmxpcC12ZXJ0aWNhbCB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMSwgLTEpO1xufVxuXG4uZmEtc3BpbiB7XG4gIGFuaW1hdGlvbjogZmEtc3BpbiAxcyAwcyBpbmZpbml0ZSBsaW5lYXI7XG59XG5cbi5mYS1pbnZlcnNlIHtcbiAgY29sb3I6ICNmZmY7XG59XG5cbkBrZXlmcmFtZXMgZmEtc3BpbiB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59XG48L3N0eWxlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5cbmxldCBpY29ucyA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ljb24nLFxuICBwcm9wczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvciAodmFsKSB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICBpZiAoISh2YWwgaW4gaWNvbnMpKSB7XG4gICAgICAgICAgICBWdWUudXRpbC53YXJuKGBJbnZhbGlkIHByb3A6IHByb3AgXCJpY29uXCIgaXMgcmVmZXJyaW5nIHRvIGFuIHVucmVnaXN0ZXJlZCBpY29uIFwiJHt2YWx9XCIuYCArXG4gICAgICAgICAgICAgIGBcXG5QbGVzYXNlIG1ha2Ugc3VyZSB5b3UgaGF2ZSBpbXBvcnRlZCB0aGlzIGljb24gYmVmb3JlIHVzaW5nIGl0LmAsIHRoaXMpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0sXG4gICAgc2NhbGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgc3BpbjogQm9vbGVhbixcbiAgICBpbnZlcnNlOiBCb29sZWFuLFxuICAgIGZsaXA6IHtcbiAgICAgIHZhbGlkYXRvciAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPT09ICdob3Jpem9udGFsJyB8fCB2YWwgPT09ICd2ZXJ0aWNhbCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGxhYmVsOiBTdHJpbmdcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGZhbHNlLFxuICAgICAgeTogZmFsc2UsXG4gICAgICBjaGlsZHJlbldpZHRoOiAwLFxuICAgICAgY2hpbGRyZW5IZWlnaHQ6IDAsXG4gICAgICBvdXRlclNjYWxlOiAxXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIG5vcm1hbGl6ZWRTY2FsZSAoKSB7XG4gICAgICBsZXQgc2NhbGUgPSB0aGlzLnNjYWxlXG4gICAgICBzY2FsZSA9IHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgPyAxIDogTnVtYmVyKHNjYWxlKVxuICAgICAgaWYgKGlzTmFOKHNjYWxlKSB8fCBzY2FsZSA8PSAwKSB7XG4gICAgICAgIFZ1ZS51dGlsLndhcm4oYEludmFsaWQgcHJvcDogcHJvcCBcInNjYWxlXCIgc2hvdWxkIGJlIGEgbnVtYmVyIG92ZXIgMC5gLCB0aGlzKVxuICAgICAgICByZXR1cm4gdGhpcy5vdXRlclNjYWxlXG4gICAgICB9XG4gICAgICByZXR1cm4gc2NhbGUgKiB0aGlzLm91dGVyU2NhbGVcbiAgICB9LFxuICAgIGNsYXp6ICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdmYS1pY29uJzogdHJ1ZSxcbiAgICAgICAgJ2ZhLXNwaW4nOiB0aGlzLnNwaW4sXG4gICAgICAgICdmYS1mbGlwLWhvcml6b250YWwnOiB0aGlzLmZsaXAgPT09ICdob3Jpem9udGFsJyxcbiAgICAgICAgJ2ZhLWZsaXAtdmVydGljYWwnOiB0aGlzLmZsaXAgPT09ICd2ZXJ0aWNhbCcsXG4gICAgICAgICdmYS1pbnZlcnNlJzogdGhpcy5pbnZlcnNlXG4gICAgICB9XG4gICAgfSxcbiAgICBpY29uICgpIHtcbiAgICAgIGlmICh0aGlzLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGljb25zW3RoaXMubmFtZV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICBib3ggKCkge1xuICAgICAgaWYgKHRoaXMuaWNvbikge1xuICAgICAgICByZXR1cm4gYDAgMCAke3RoaXMuaWNvbi53aWR0aH0gJHt0aGlzLmljb24uaGVpZ2h0fWBcbiAgICAgIH1cbiAgICAgIHJldHVybiBgMCAwICR7dGhpcy53aWR0aH0gJHt0aGlzLmhlaWdodH1gXG4gICAgfSxcbiAgICByYXRpbyAoKSB7XG4gICAgICBpZiAoIXRoaXMuaWNvbikge1xuICAgICAgICByZXR1cm4gMVxuICAgICAgfVxuICAgICAgbGV0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5pY29uXG4gICAgICByZXR1cm4gTWF0aC5tYXgod2lkdGgsIGhlaWdodCkgLyAxNlxuICAgIH0sXG4gICAgd2lkdGggKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5XaWR0aCB8fCB0aGlzLmljb24gJiYgdGhpcy5pY29uLndpZHRoIC8gdGhpcy5yYXRpbyAqIHRoaXMubm9ybWFsaXplZFNjYWxlIHx8IDBcbiAgICB9LFxuICAgIGhlaWdodCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbkhlaWdodCB8fCB0aGlzLmljb24gJiYgdGhpcy5pY29uLmhlaWdodCAvIHRoaXMucmF0aW8gKiB0aGlzLm5vcm1hbGl6ZWRTY2FsZSB8fCAwXG4gICAgfSxcbiAgICBzdHlsZSAoKSB7XG4gICAgICBpZiAodGhpcy5ub3JtYWxpemVkU2NhbGUgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250U2l6ZTogdGhpcy5ub3JtYWxpemVkU2NhbGUgKyAnZW0nXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICBpZiAodGhpcy5pY29uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy4kY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBjaGlsZC5vdXRlclNjYWxlID0gdGhpcy5ub3JtYWxpemVkU2NhbGVcbiAgICB9KVxuICAgIGxldCB3aWR0aCA9IDBcbiAgICBsZXQgaGVpZ2h0ID0gMFxuICAgIHRoaXMuJGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY2hpbGQud2lkdGgpXG4gICAgICBoZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGNoaWxkLmhlaWdodClcbiAgICB9KVxuICAgIHRoaXMuY2hpbGRyZW5XaWR0aCA9IHdpZHRoXG4gICAgdGhpcy5jaGlsZHJlbkhlaWdodCA9IGhlaWdodFxuICAgIHRoaXMuJGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgY2hpbGQueCA9ICh3aWR0aCAtIGNoaWxkLndpZHRoKSAvIDJcbiAgICAgIGNoaWxkLnkgPSAoaGVpZ2h0IC0gY2hpbGQuaGVpZ2h0KSAvIDJcbiAgICB9KVxuICB9LFxuICByZWdpc3RlciAoZGF0YSkge1xuICAgIGZvciAobGV0IG5hbWUgaW4gZGF0YSkge1xuICAgICAgbGV0IGljb24gPSBkYXRhW25hbWVdXG5cbiAgICAgIGlmICghaWNvbi5wYXRocykge1xuICAgICAgICBpY29uLnBhdGhzID0gW11cbiAgICAgIH1cbiAgICAgIGlmIChpY29uLmQpIHtcbiAgICAgICAgaWNvbi5wYXRocy5wdXNoKHsgZDogaWNvbi5kIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICghaWNvbi5wb2x5Z29ucykge1xuICAgICAgICBpY29uLnBvbHlnb25zID0gW11cbiAgICAgIH1cbiAgICAgIGlmIChpY29uLnBvaW50cykge1xuICAgICAgICBpY29uLnBvbHlnb25zLnB1c2goeyBwb2ludHM6IGljb24ucG9pbnRzIH0pXG4gICAgICB9XG5cbiAgICAgIGljb25zW25hbWVdID0gaWNvblxuICAgIH1cbiAgfSxcbiAgaWNvbnNcbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEljb24udnVlPzhhMzQ3MmJjIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    title: String,\n    show: {\n      type: Boolean,\n      requried: true\n    }\n  },\n\n  methods: {\n    /**\n     * Emit the hide event.\n     */\n    hide: function hide() {\n      this.$emit('hide');\n    },\n\n\n    /**\n     * Hide on esc keyup.\n     */\n    onKeyUp: function onKeyUp(evt) {\n      var key = evt.keyCode ? evt.keyCode : evt.charCode;\n      if (key === 27) {\n        this.hide();\n      }\n    }\n  },\n\n  mounted: function mounted() {\n    document.addEventListener('keyup', this.onKeyUp);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('keyup', this.onKeyUp);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vTW9kYWwudnVlPzMwYzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBOztXQUdBOztZQUVBO2dCQUlBO0FBTEE7QUFGQTs7O0FBV0E7OzswQkFDQTtpQkFDQTtBQUVBOzs7QUFHQTs7O21DQUNBO2dEQUNBO3NCQUNBO2FBQ0E7QUFDQTtBQUdBO0FBbEJBOzs4QkFtQkE7NENBQ0E7QUFFQTswQ0FDQTsrQ0FDQTtBQUNBO0FBbENBIiwiZmlsZSI6Ijk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8dHJhbnNpdGlvbiBuYW1lPVwibHYtbW9kYWwtZmFkZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJsdi1tb2RhbFwiIHYtc2hvdz1cInNob3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImx2LW1vZGFsLW1hc2tcIiBAY2xpY2s9XCJoaWRlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImx2LW1vZGFsLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsdi1tb2RhbC1jb250YWluZXJcIiBAY2xpY2suc3RvcD5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibHYtbW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgPGgzPnt7IHRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xvc2VcIiBAY2xpY2s9XCJoaWRlXCI+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3Nsb3Q+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsdi1tb2RhbC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPHNsb3Q+XG4gICAgICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibHYtbW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljaz1cImhpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgT0tcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC90cmFuc2l0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHNob3c6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1cmllZDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgaGlkZSBldmVudC5cbiAgICAgKi9cbiAgICBoaWRlICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2hpZGUnKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWRlIG9uIGVzYyBrZXl1cC5cbiAgICAgKi9cbiAgICBvbktleVVwIChldnQpIHtcbiAgICAgIGNvbnN0IGtleSA9IGV2dC5rZXlDb2RlID8gZXZ0LmtleUNvZGUgOiBldnQuY2hhckNvZGVcbiAgICAgIGlmIChrZXkgPT09IDI3KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbktleVVwKVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbktleVVwKVxuICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0ICd+c3R5bGUvc2V0dGluZ3MnO1xuQGltcG9ydCAnfnN0eWxlL3BhcnRpYWxzL2J1dHRvbnMnO1xuXG4ubHYtbW9kYWwge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG5cbiAgLmx2LW1vZGFsLW1hc2sge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB6LWluZGV4OiA5OTk4O1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDM1MG1zIGVhc2U7XG4gIH1cblxuICAubHYtbW9kYWwtd3JhcHBlciB7XG4gICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG5cbiAgLmx2LW1vZGFsLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRncmF5LWRhcms7XG4gICAgbWFyZ2luLXRvcDogMmVtO1xuICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSA0ZW0pO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAuMzMpO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICRncmF5LWxpZ2h0O1xuICAgIHRyYW5zaXRpb246IGFsbCAzNTBtcyBlYXNlO1xuXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNTc2cHgpIHtcbiAgICAgIG1heC13aWR0aDogNTAwcHg7XG4gICAgICBtYXJnaW46IDMwcHggYXV0bztcbiAgICB9XG5cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCkge1xuICAgICAgbWF4LXdpZHRoOiA4MDBweDtcbiAgICB9XG4gIH1cblxuICAubHYtbW9kYWwtaGVhZGVyIHtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIHBhZGRpbmc6IDIwcHggMzBweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGdyYXktbGlnaHQ7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgfVxuXG4gICAgLmNsb3NlIHtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kOiAwIDA7XG4gICAgICBib3JkZXI6IDA7XG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBmb250LXNpemU6ICRmb250LXNpemUtbGc7XG4gICAgICBmb250LXdlaWdodDogMjAwO1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuICB9XG5cbiAgLmx2LW1vZGFsLWJvZHkge1xuICAgIHBhZGRpbmc6IDIwcHggMzBweDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuXG4gIC5sdi1tb2RhbC1mb290ZXIge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gICAgcGFkZGluZzogMjBweCAzMHB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkZ3JheS1saWdodDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG59XG5cbi5sdi1tb2RhbC1mYWRlLWVudGVyLWFjdGl2ZSxcbi5sdi1tb2RhbC1mYWRlLWxlYXZlLWFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IGFsbCAzNTBtcyBlYXNlO1xufVxuXG4ubHYtbW9kYWwtZmFkZS1lbnRlciAubHYtbW9kYWwtY29udGFpbmVyLFxuLmx2LW1vZGFsLWZhZGUtbGVhdmUtdG8gLmx2LW1vZGFsLWNvbnRhaW5lciB7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgwLjkpO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDAuOSk7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5sdi1tb2RhbC1mYWRlLWVudGVyIC5sdi1tb2RhbC1tYXNrLFxuLmx2LW1vZGFsLWZhZGUtbGVhdmUtdG8gLmx2LW1vZGFsLW1hc2sge1xuICBvcGFjaXR5OiAwO1xufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBNb2RhbC52dWU/NTliM2Q2MDUiXSwic291cmNlUm9vdCI6IiJ9")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(111);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_openseadragon__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_openseadragon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_openseadragon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_awesome_icons_circle__ = __webpack_require__(196);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_awesome_icons_times__ = __webpack_require__(199);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vue_awesome_icons_check__ = __webpack_require__(193);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_Task__ = __webpack_require__(5);\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      selecting: false,\n      rect: null,\n      minWidth: 10,\n      minHeight: 10,\n      mouseTrackers: []\n    };\n  },\n\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    },\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_7__model_Task__[\"a\" /* default */],\n      required: true\n    },\n    selectionRect: {\n      type: Object,\n      required: true\n    }\n  },\n\n  watch: {\n    selectionRect: {\n      handler: function handler(oldVal, newVal) {\n        if (__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(this.selectionRect).length > 0) {\n          this.rect = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Rect(this.selectionRect.x, this.selectionRect.y, this.selectionRect.width, this.selectionRect.height);\n          this.selecting = true;\n          this.draw();\n        } else {\n          this.rect = null;\n        }\n      },\n      deep: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon___default.a\n  },\n\n  methods: {\n    /**\n     * Return true if a viewport point is within the image, false otherwise.\n     * @param {Point} point\n     *   The point.\n     */\n    isPointInImage: function isPointInImage(point) {\n      var bounds = this.viewer.world.getHomeBounds();\n      return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\n    },\n\n\n    /**\n     * Return true if a rect is within the image, false otherwise.\n     * @param {Rect} rect\n     *   The viewport rectangle.\n     */\n    isRectInImage: function isRectInImage(rect) {\n      this.normalize();\n      var bounds = this.viewer.world.getHomeBounds();\n      var bRect = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Rect(0, 0, bounds.width, bounds.height);\n      var corners = [this.rect.getTopLeft(), this.rect.getTopRight(), this.rect.getBottomRight(), this.rect.getBottomLeft()];\n      var areaEnd = bRect.getBottomRight();\n      for (var i = 0; i < 4; i++) {\n        if (corners[i].x < bRect.x || corners[i].x > areaEnd.x || corners[i].y < bRect.y || corners[i].y > areaEnd.y) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n\n    /**\n     * Return true if a rect is the minimum width, false otherwise.\n     * @param {Rect} rect\n     *   The viewport rectangle.\n     */\n    isMinWidth: function isMinWidth(rect) {\n      var vp = this.viewer.viewport;\n      var wRect = vp.viewportToViewerElementRectangle(rect);\n      return wRect.width >= this.minWidth;\n    },\n\n\n    /**\n     * Return true if a rect is the minimum height, false otherwise.\n     * @param {Rect} rect\n     *   The viewport rectangle.\n     */\n    isMinHeight: function isMinHeight(rect) {\n      var vp = this.viewer.viewport;\n      var wRect = vp.viewportToViewerElementRectangle(rect);\n      return wRect.height >= this.minHeight;\n    },\n\n\n    /**\n     * Fixes negative width/height.\n     */\n    normalize: function normalize() {\n      if (this.rect) {\n        var fixed = this.rect.clone();\n        if (fixed.width < 0) {\n          fixed.x += fixed.width;\n          fixed.width *= -1;\n        }\n        if (fixed.height < 0) {\n          fixed.y += fixed.height;\n          fixed.height *= -1;\n        }\n        this.rect = fixed;\n      }\n    },\n\n\n    /**\n     * Draw the current rectangle.\n     */\n    draw: function draw() {\n      this.normalize();\n      if (this.rect) {\n        var vp = this.viewer.viewport;\n        var wRect = vp.viewportToViewerElementRectangle(this.rect);\n        this.$refs.box.style.left = wRect.x + 'px';\n        this.$refs.box.style.top = wRect.y + 'px';\n        this.$refs.box.style.width = wRect.width + 'px';\n        this.$refs.box.style.height = wRect.height + 'px';\n        this.$refs.box.style.display = 'block';\n      }\n    },\n\n\n    /**\n     * Undraw the rectangle.\n     */\n    undraw: function undraw() {\n      this.$refs.box.style.display = 'none';\n      this.$refs.box.style.left = '0px';\n      this.$refs.box.style.top = '0px';\n      this.$refs.box.style.width = '0px';\n      this.$refs.box.style.height = '0px';\n      this.rect = null;\n    },\n\n\n    /**\n     * Calculate the rectangle.\n     */\n    calculate: function calculate() {\n      var x3 = Math.min(this.x1, this.x2);\n      var x4 = Math.max(this.x1, this.x2);\n      var y3 = Math.min(this.y1, this.y2);\n      var y4 = Math.max(this.y1, this.y2);\n      var wRect = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Rect(x3, y3, x4 - x3, y4 - y3);\n      this.rect = this.viewer.viewport.viewerElementToViewportRectangle(wRect);\n    },\n\n\n    /**\n     * Start a new selection when the canvas is dragged.\n     * @param {Object} evt\n     *   The mouse tracker event.\n     */\n    onCanvasDrag: function onCanvasDrag(evt) {\n      var vp = this.viewer.viewport;\n      var wPoint = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Point(evt.position.x, evt.position.y);\n      var vpPoint = vp.viewerElementToViewportCoordinates(wPoint);\n      var pointIsInImage = this.isPointInImage(vpPoint);\n      if (pointIsInImage) {\n        if (!this.selecting) {\n          this.selecting = true;\n          this.x1 = evt.position.x;\n          this.y1 = evt.position.y;\n          return;\n        }\n        this.x2 = evt.position.x;\n        this.y2 = evt.position.y;\n        this.calculate();\n        this.draw();\n      }\n    },\n\n\n    /**\n     * Move selection box when dragged.\n     * @param {Object} evt\n     *   The mouse tracker event.\n     */\n    onSelectorBoxDrag: function onSelectorBoxDrag(evt) {\n      var vp = this.viewer.viewport;\n      var delta = vp.deltaPointsFromPixelsNoRotate(evt.delta);\n      var oldRect = this.rect.clone();\n      this.rect.x += delta.x;\n      this.rect.y += delta.y;\n      if (!this.isRectInImage(this.rect)) {\n        this.rect = oldRect;\n      }\n      this.draw();\n    },\n\n\n    /**\n     * Confirm the selection.\n     */\n    confirm: function confirm() {\n      if (this.rect) {\n        this.$emit('selection', this.task, this.rect);\n        this.undraw();\n      }\n    },\n\n\n    /**\n     * Cancel the selection.\n     */\n    cancel: function cancel() {\n      this.undraw();\n    },\n\n\n    /**\n     * End the selection.\n     */\n    onCanvasDragEnd: function onCanvasDragEnd() {\n      if (this.rect) {\n        this.selecting = false;\n      }\n    },\n\n\n    /**\n     * Resize a rectangle from the borders.\n     * @param {String} position\n     *   The border position.\n     * @param {Object} evt\n     *   The mouse tracker event.\n     */\n    onBorderDrag: function onBorderDrag(position, evt) {\n      var vp = this.viewer.viewport;\n      var wPoint = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Point(evt.position.x, evt.position.y);\n      var delta = vp.deltaPointsFromPixels(wPoint, true);\n      var oldRect = this.rect.clone();\n      switch (position) {\n        case 'top':\n          this.rect.y += delta.y;\n          this.rect.height -= delta.y;\n          break;\n        case 'right':\n          this.rect.width += delta.x;\n          break;\n        case 'bottom':\n          this.rect.height += delta.y;\n          break;\n        case 'left':\n          this.rect.x += delta.x;\n          this.rect.width -= delta.x;\n          break;\n      }\n      if (!this.isRectInImage(this.rect)) {\n        this.rect = oldRect;\n      }\n      if (!this.isMinWidth(this.rect)) {\n        this.rect.width = oldRect.width;\n        this.rect.x = oldRect.x;\n      }\n      if (!this.isMinHeight(this.rect)) {\n        this.rect.height = oldRect.height;\n      }\n      this.draw();\n    },\n\n\n    /**\n     * Resize a rectangle from the corners.\n     * @param {String} position\n     *   The corner position.\n     * @param {Object} evt\n     *   The mouse tracker event.\n     */\n    onCornerDrag: function onCornerDrag(position, evt) {\n      var vp = this.viewer.viewport;\n      var wPoint = new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.Point(evt.position.x, evt.position.y);\n      var delta = vp.deltaPointsFromPixels(wPoint);\n      var oldRect = this.rect.clone();\n      switch (position) {\n        case 'top-right':\n          this.rect.y += delta.y;\n          this.rect.height -= delta.y;\n          this.rect.width += delta.x;\n          break;\n        case 'bottom-right':\n          this.rect.width += delta.x;\n          this.rect.height += delta.y;\n          break;\n        case 'bottom-left':\n          this.rect.height += delta.y;\n          this.rect.x += delta.x;\n          this.rect.width -= delta.x;\n          break;\n        case 'top-left':\n          this.rect.y += delta.y;\n          this.rect.height -= delta.y;\n          this.rect.x += delta.x;\n          this.rect.width -= delta.x;\n          break;\n      }\n      if (!this.isRectInImage(this.rect)) {\n        this.rect = oldRect;\n      }\n      if (!this.isMinWidth(this.rect)) {\n        this.rect.width = oldRect.width;\n      }\n      if (!this.isMinHeight(this.rect)) {\n        this.rect.height = oldRect.height;\n      }\n      this.draw();\n    },\n\n\n    /**\n     * Handle key presses.\n     * @param {Object} evt\n     *   The mouse tracker event.\n     */\n    onKeyUp: function onKeyUp(evt) {\n      var key = evt.keyCode ? evt.keyCode : evt.charCode;\n      if (key === 13) {\n        this.confirm();\n      } else if (key === 27) {\n        this.cancel();\n      }\n    }\n  },\n\n  mounted: function mounted() {\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs.box,\n      clickTimeThreshold: this.viewer.clickTimeThreshold,\n      clickDistThreshold: this.viewer.clickDistThreshold,\n      dragHandler: __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.delegate(this, this.onSelectorBoxDrag)\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.viewer.canvas,\n      clickTimeThreshold: this.viewer.clickTimeThreshold,\n      clickDistThreshold: this.viewer.clickDistThreshold,\n      dragHandler: __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.delegate(this, this.onCanvasDrag),\n      dragEndHandler: __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.delegate(this, this.onCanvasDragEnd)\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['border-top'],\n      dragHandler: this.onBorderDrag.bind(this, 'top')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['border-right'],\n      dragHandler: this.onBorderDrag.bind(this, 'right')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['border-bottom'],\n      dragHandler: this.onBorderDrag.bind(this, 'bottom')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['border-left'],\n      dragHandler: this.onBorderDrag.bind(this, 'left')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['corner-top-right'],\n      dragHandler: this.onCornerDrag.bind(this, 'top-right')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['corner-bottom-right'],\n      dragHandler: this.onCornerDrag.bind(this, 'bottom-right')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['corner-bottom-left'],\n      dragHandler: this.onCornerDrag.bind(this, 'bottom-left')\n    }));\n\n    /* eslint-disable no-new */\n    this.mouseTrackers.push(new __WEBPACK_IMPORTED_MODULE_2_openseadragon___default.a.MouseTracker({\n      element: this.$refs['corner-top-left'],\n      dragHandler: this.onCornerDrag.bind(this, 'top-left')\n    }));\n\n    document.addEventListener('keyup', this.onKeyUp);\n    this.viewer.addHandler('open', this.draw);\n    this.viewer.addHandler('animation', this.draw);\n    this.viewer.addHandler('resize', this.draw);\n    this.viewer.addHandler('rotate', this.draw);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(this.mouseTrackers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var tracker = _step.value;\n\n        tracker.destroy();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    document.removeEventListener('keyup', this.onKeyUp);\n    this.viewer.removeHandler('open', this.draw);\n    this.viewer.removeHandler('animation', this.draw);\n    this.viewer.removeHandler('resize', this.draw);\n    this.viewer.removeHandler('rotate', this.draw);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_notyf__ = __webpack_require__(178);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_notyf___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_notyf__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_awesome_icons_chevron_left__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_awesome_icons_chevron_right__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_openseadragon__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_openseadragon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_openseadragon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_modals_Metadata__ = __webpack_require__(208);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_modals_Metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__components_modals_Metadata__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_modals_Help__ = __webpack_require__(207);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_modals_Help___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__components_modals_Help__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_modals_Browse__ = __webpack_require__(206);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_modals_Browse___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__components_modals_Browse__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_controls_Toolbar__ = __webpack_require__(204);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_controls_Toolbar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__components_controls_Toolbar__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_controls_Pan__ = __webpack_require__(203);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_controls_Pan___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__components_controls_Pan__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_controls_Zoom__ = __webpack_require__(205);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_controls_Zoom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__components_controls_Zoom__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_sidebar_Sidebar__ = __webpack_require__(209);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_sidebar_Sidebar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__components_sidebar_Sidebar__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_sidebar_items_Select__ = __webpack_require__(210);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_sidebar_items_Select___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__components_sidebar_items_Select__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_sidebar_items_Transcribe__ = __webpack_require__(211);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_sidebar_items_Transcribe___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__components_sidebar_items_Transcribe__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_Selector__ = __webpack_require__(201);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_Selector___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__components_Selector__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__model_Task__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__model_Annotator__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__utils_extractRectFromImageUri__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__utils_toggleFullScreen__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__utils_drawOverlay__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__utils_deleteOverlay__ = __webpack_require__(89);\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      viewer: {},\n      selectionRect: {},\n      notyf: new __WEBPACK_IMPORTED_MODULE_2_notyf___default.a(),\n      annotator: new __WEBPACK_IMPORTED_MODULE_18__model_Annotator__[\"a\" /* default */]({\n        creator: this.creator,\n        generator: this.generator\n      }),\n      viewerOpts: {\n        id: 'lv-viewer-container',\n        showNavigationControl: false,\n        helpButton: 'show-help',\n        infoButton: 'show-info',\n        panVertical: false,\n        panHorizontal: false,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        },\n        gestureSettingsTouch: {\n          dblClickToZoom: false\n        },\n        gestureSettingsPen: {\n          dblClickToZoom: false\n        }\n      },\n      showInfoModal: false,\n      showHelpModal: false,\n      showBrowseModal: false,\n      tasks: [],\n      currentTask: null\n    };\n  },\n\n  props: {\n    taskOpts: {\n      type: Array,\n      required: true\n    },\n    confirmBeforeUnload: {\n      type: Boolean,\n      default: false\n    },\n    disableComplete: {\n      type: Boolean,\n      default: false\n    },\n    showHelp: {\n      type: Boolean,\n      default: true\n    },\n    showInfo: {\n      type: Boolean,\n      default: true\n    },\n    showBrowse: {\n      type: Boolean,\n      default: true\n    },\n    showNote: {\n      type: Boolean,\n      default: true\n    },\n    showFormErrors: {\n      type: Boolean,\n      default: true\n    },\n    panBy: {\n      type: Number,\n      default: 0.1\n    },\n    zoomBy: {\n      type: Number,\n      default: 0.2\n    },\n    lang: {\n      type: String,\n      default: 'en'\n    },\n    creator: {\n      type: Object,\n      default: null\n    },\n    generator: {\n      type: Object,\n      default: null\n    },\n    showLike: {\n      type: Boolean,\n      default: false\n    },\n    showShare: {\n      type: Boolean,\n      default: true\n    },\n    nextOnSubmit: {\n      type: Boolean,\n      default: true\n    },\n    messageBus: {\n      type: Object,\n      default: null\n    }\n  },\n\n  components: {\n    MetadataModal: __WEBPACK_IMPORTED_MODULE_7__components_modals_Metadata___default.a,\n    HelpModal: __WEBPACK_IMPORTED_MODULE_8__components_modals_Help___default.a,\n    BrowseModal: __WEBPACK_IMPORTED_MODULE_9__components_modals_Browse___default.a,\n    ToolbarControls: __WEBPACK_IMPORTED_MODULE_10__components_controls_Toolbar___default.a,\n    PanControls: __WEBPACK_IMPORTED_MODULE_11__components_controls_Pan___default.a,\n    ZoomControls: __WEBPACK_IMPORTED_MODULE_12__components_controls_Zoom___default.a,\n    Sidebar: __WEBPACK_IMPORTED_MODULE_13__components_sidebar_Sidebar___default.a,\n    Selector: __WEBPACK_IMPORTED_MODULE_16__components_Selector___default.a,\n    SelectSidebarItem: __WEBPACK_IMPORTED_MODULE_14__components_sidebar_items_Select___default.a,\n    TranscribeSidebarItem: __WEBPACK_IMPORTED_MODULE_15__components_sidebar_items_Transcribe___default.a,\n    Icon: __WEBPACK_IMPORTED_MODULE_3_vue_awesome_components_Icon___default.a\n  },\n\n  computed: {\n    previousBtnDisabled: function previousBtnDisabled() {\n      if (!this.currentTask) {\n        return true;\n      }\n      return !(this.tasks.indexOf(this.currentTask) > 0);\n    },\n    nextBtnDisabled: function nextBtnDisabled() {\n      if (!this.currentTask) {\n        return true;\n      }\n      return this.tasks.indexOf(this.currentTask) >= this.tasks.length - 1;\n    },\n    tags: function tags() {\n      return this.annotator.getSelectAnnotations(this.currentTask);\n    },\n    commentAnnotation: function commentAnnotation() {\n      return this.annotator.getCommentAnnotation(this.currentTask);\n    },\n    selectorEnabled: function selectorEnabled() {\n      return this.currentTask && this.currentTask.mode === 'select' && (!this.currentTask.complete || !this.disableComplete);\n    }\n  },\n\n  methods: {\n    /**\n     * Emit the taskliked event.\n     */\n    emitTaskLiked: function emitTaskLiked(task, status) {\n      task.liked = status;\n      this.$emit('taskliked', task);\n    },\n\n\n    /**\n     * Toggle fullscreen mode.\n     */\n    toggleFullScreen: function toggleFullScreen() {\n      var el = this.$refs.container;\n      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_20__utils_toggleFullScreen__[\"a\" /* default */])(el);\n    },\n\n\n    /**\n     * Draw overlay and add tag when a selection is made.\n     * @param {Task} task\n     *   The task.\n     * @param {Object} rect\n     *   The viewport rectangle.\n     */\n    handleSelection: function handleSelection(task, rect) {\n      var vp = this.viewer.viewport;\n      var imgRect = vp.viewportToImageRectangle(rect);\n      var anno = this.annotator.createSelectAnnotation(task, imgRect);\n      this.drawSelectionOverlay(task, anno);\n      this.$emit('create', task, anno);\n    },\n\n\n    /**\n     * Draw a selection overlays from an annotation.\n     * @param {Task} task\n     *   The Task.\n     * @param {Annotation} annotation\n     *   The Annotation.\n     */\n    drawSelectionOverlay: function drawSelectionOverlay(task, anno) {\n      var _this = this;\n\n      var vp = this.viewer.viewport;\n      var imgRect = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__utils_extractRectFromImageUri__[\"a\" /* default */])(anno.target.selector.value);\n      var vpRect = vp.imageToViewportRectangle(imgRect);\n      var overlay = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_21__utils_drawOverlay__[\"a\" /* default */])(this.viewer, anno.id, vpRect, 'selection');\n      overlay.addEventListener('click', function (evt) {\n        if (!task.complete || !_this.disableComplete) {\n          _this.editTag(task, anno.id);\n        }\n      });\n    },\n\n\n    /**\n     * Draw a highlight.\n     * @param {Object} rect\n     *   The image rectangle.\n     * @param {String} id\n     *   Ah ID for the highlight element.\n     */\n    drawHighlight: function drawHighlight(rect, id) {\n      var vp = this.viewer.viewport;\n      var imgRect = new __WEBPACK_IMPORTED_MODULE_6_openseadragon___default.a.Rect(rect.x, rect.y, rect.width, rect.height);\n      var vpRect = vp.imageToViewportRectangle(imgRect);\n      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_21__utils_drawOverlay__[\"a\" /* default */])(this.viewer, id, vpRect, 'highlight');\n    },\n\n\n    /**\n     * Draw all highlights for the task.\n     * @param {Task} task.\n     *   The task.\n     */\n    drawHighlights: function drawHighlights(task) {\n      for (var i = 0; i < task.highlights.length; i++) {\n        this.drawHighlight(task.highlights[i], 'highlight-' + i);\n      }\n    },\n\n\n    /**\n     * Set the current task.\n     * @param {Task} task.\n     *   The task.\n     */\n    setCurrentTask: function setCurrentTask(task) {\n      this.currentTask = task;\n    },\n\n\n    /**\n     * Go to the previous task.\n     */\n    previousTask: function previousTask() {\n      var index = this.tasks.indexOf(this.currentTask);\n      if (index > 0) {\n        this.currentTask = this.tasks[index - 1];\n      }\n    },\n\n\n    /**\n     * Go to the next task.\n     */\n    nextTask: function nextTask() {\n      var index = this.tasks.indexOf(this.currentTask);\n      if (index + 1 < this.tasks.length) {\n        this.currentTask = this.tasks[index + 1];\n      }\n    },\n\n\n    /**\n     * Update the note and emit the relevant event.\n     * @param {Task} task.\n     *   The task.\n     * @param {String} text.\n     *   The text.\n     */\n    updateNote: function updateNote(task, text) {\n      var now = new Date().toISOString();\n      var anno = this.annotator.storeCommentAnnotation(task, text);\n      if (anno.created > now) {\n        this.$emit('create', task, anno);\n      } else {\n        this.$emit('update', task, anno);\n      }\n    },\n\n\n    /**\n     * Update a form and associated annotations.\n     * @param {Task} task.\n     *   The task.\n     * @param {Object} form\n     *   The updated form.\n     */\n    updateForm: function updateForm(task, form) {\n      task.updateForm(form);\n      for (var key in form.model) {\n        var now = new Date().toISOString();\n        var anno = this.annotator.storeTranscriptionAnnotation(task, key, form.model[key]);\n        if (anno.created > now) {\n          this.$emit('create', task, anno);\n        } else {\n          this.$emit('update', task, anno);\n        }\n      }\n    },\n\n\n    /**\n     * Emit submit event with a task object.\n     * @param {Task} task.\n     *   The task.\n     */\n    submitTask: function submitTask(task) {\n      // Show form errors if enabled and in transcribe mode\n      if (this.showFormErrors && this.currentTask.mode === 'transcribe') {\n        var formGroups = document.querySelector('.form-group');\n        if (formGroups.length) {\n          formGroups.classList.add('show-errors');\n        }\n      }\n      task.complete = true;\n\n      if (this.nextOnSubmit) {\n        this.nextTask();\n      }\n      this.$emit('submit', task);\n    },\n\n\n    /**\n     * Remove a tag and enable the selector in the same location.\n     * @param {Task} task\n     *   The task that the tag belongs to.\n     * @param {String} id\n     *   The tag ID.\n     */\n    editTag: function editTag(task, id) {\n      var vp = this.viewer.viewport;\n      var anno = this.annotator.getAnnotation(task, id);\n      var imgRect = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__utils_extractRectFromImageUri__[\"a\" /* default */])(anno.target.selector.value);\n      var vpRect = vp.imageToViewportRectangle(imgRect);\n      var rect = new __WEBPACK_IMPORTED_MODULE_6_openseadragon___default.a.Rect(vpRect.x, vpRect.y, vpRect.width, vpRect.height);\n      this.selectionRect = rect;\n      this.deleteTag(task, id);\n    },\n\n\n    /**\n     * Delete a tag.\n     * @param {Task} task\n     *   The task that the tag belongs to.\n     * @param {String} id\n     *   The tag ID.\n     */\n    deleteTag: function deleteTag(task, id) {\n      var anno = this.annotator.getAnnotation(task, id);\n      this.annotator.deleteAnnotation(task, id);\n      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_22__utils_deleteOverlay__[\"a\" /* default */])(this.viewer, id);\n      this.$emit('delete', task, anno);\n    },\n\n\n    /**\n     * Highlight any regions when transcribe form input focused.\n     * @param {Task} task\n     *   The task that the tag belongs to.\n     * @param {String} modelKey\n     *   The form model key.\n     */\n    onTranscribeInputFocus: function onTranscribeInputFocus(task, modelKey) {\n      if (modelKey in task.form.highlights) {\n        var rect = task.form.highlights[modelKey];\n        this.drawHighlight(rect, 'highlight-' + modelKey);\n      }\n    },\n\n\n    /**\n     * Remove all form region highlights when transcribe form input blured.\n     */\n    onTranscribeInputBlur: function onTranscribeInputBlur(task, modelKey) {\n      for (modelKey in task.form.highlights) {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_22__utils_deleteOverlay__[\"a\" /* default */])(this.viewer, 'highlight-' + modelKey);\n      }\n    },\n    setupMessageBus: function setupMessageBus() {\n      var _this2 = this;\n\n      this.messageBus.$on('success', function (text) {\n        _this2.notyf.confirm(text);\n      });\n    },\n\n\n    /**\n     * Mode specific configuration for a task.\n     * @param {Task} task\n     *   The task.\n     */\n    configureMode: function configureMode(task) {\n      if (task.mode === 'select') {\n        // Draw all selection overlays\n        var annos = this.annotator.getSelectAnnotations(task);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(annos), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var anno = _step.value;\n\n            this.drawSelectionOverlay(task, anno);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      this.drawHighlights(task);\n    },\n\n\n    /**\n     * Generate tasks from task options.\n     */\n    loadTasks: function loadTasks() {\n      var _this3 = this;\n\n      // Create an empty tasks array to later maintain order\n      this.tasks = Array.apply(null, Array(this.taskOpts.length)).map(function () {});\n\n      var _loop = function _loop(i) {\n        fetch(_this3.taskOpts[i].imgInfoUri, {\n          method: 'get'\n        }).then(function (response) {\n          return response.json();\n        }).then(function (json) {\n          var opts = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(_this3.taskOpts[i]));\n          opts.imgInfo = json;\n          _this3.tasks[i] = new __WEBPACK_IMPORTED_MODULE_17__model_Task__[\"a\" /* default */](opts);\n          // Set the first task as current\n          if (i === 1) {\n            _this3.setCurrentTask(_this3.tasks[0]);\n          }\n        }).catch(function (err) {\n          throw Error('Could not retrieve image info: ' + err);\n        });\n      };\n\n      for (var i = 0; i < this.taskOpts.length; i++) {\n        _loop(i);\n      }\n    },\n\n\n    /**\n     * Check for any unsaved annotations.\n     */\n    onBeforeUnload: function onBeforeUnload() {\n      var nAnnos = this.currentTask.annotations.length;\n      var complete = this.currentTask.complete;\n      if (this.confirmBeforeUnload && !complete && nAnnos > 0) {\n        return 'Unsaved changes will be lost.';\n      }\n    }\n  },\n\n  watch: {\n    currentTask: function currentTask() {\n      var _this4 = this;\n\n      this.viewer.close();\n      this.viewer.open({\n        tileSource: this.currentTask.imgInfoUri,\n        success: function success() {\n          return _this4.configureMode(_this4.currentTask);\n        }\n      });\n    },\n    taskOpts: {\n      handler: function handler() {\n        this.loadTasks();\n      },\n      deep: true\n    }\n  },\n\n  mounted: function mounted() {\n    this.viewer = new __WEBPACK_IMPORTED_MODULE_6_openseadragon___default.a.Viewer(this.viewerOpts);\n    this.loadTasks();\n    this.setupMessageBus();\n    window.addEventListener('beforeunload', this.onBeforeUnload);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('beforeunload', this.onBeforeUnload);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n  props: {\n    hintPosition: {\n      type: String,\n      required: true\n    },\n    tooltip: {\n      type: String,\n      required: true\n    },\n    callback: {\n      type: Function,\n      required: true\n    },\n    id: String\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQ29udHJvbEJ1dHRvbi52dWU/ZWVjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFXQTs7O1lBSUE7Z0JBRUE7QUFIQTs7WUFLQTtnQkFFQTtBQUhBOztZQUtBO2dCQUVBO0FBSEE7UUFLQTtBQWRBO0FBREEiLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxidXR0b25cbiAgICA6aWQ9XCJpZFwiXG4gICAgOmNsYXNzPVwiYGhpbnQtLSR7aGludFBvc2l0aW9ufSBoaW50LS1uby1hbmltYXRlIGJ0biBidG4tY29udHJvbGBcIlxuICAgIDphcmlhLWxhYmVsPVwidG9vbHRpcFwiXG4gICAgQGNsaWNrPVwiY2FsbGJhY2soJGV2ZW50KVwiPlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgPC9idXR0b24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIGhpbnRQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBjYWxsYmFjazoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgaWQ6IFN0cmluZ1xuICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuQGltcG9ydCAnfmhpbnQuY3NzJztcbkBpbXBvcnQgJ35zdHlsZS9zZXR0aW5ncyc7XG5cbmJ1dHRvbiB7XG4gIC5hY3RpdmUge1xuICAgIGNvbG9yOiAkYmx1ZTtcbiAgfVxufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBDb250cm9sQnV0dG9uLnZ1ZT82MzhmZjE2MiJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openseadragon__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openseadragon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_openseadragon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_arrow_circle_up__ = __webpack_require__(192);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_icons_arrow_circle_down__ = __webpack_require__(189);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_awesome_icons_arrow_circle_left__ = __webpack_require__(190);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_awesome_icons_arrow_circle_right__ = __webpack_require__(191);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_controls_ControlButton__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_controls_ControlButton___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__components_controls_ControlButton__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    },\n    panBy: {\n      type: Number,\n      required: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default.a,\n    ControlButton: __WEBPACK_IMPORTED_MODULE_6__components_controls_ControlButton___default.a\n  },\n\n  computed: {\n    buttons: function buttons() {\n      var _this = this;\n\n      return [{\n        id: 'pan-up',\n        tooltip: 'Move up',\n        icon: 'arrow-circle-up',\n        callback: function callback() {\n          _this.viewer.viewport.panBy(new __WEBPACK_IMPORTED_MODULE_0_openseadragon___default.a.Point(0, -_this.panBy));\n        }\n      }, {\n        id: 'pan-down',\n        tooltip: 'Move down',\n        icon: 'arrow-circle-down',\n        callback: function callback() {\n          _this.viewer.viewport.panBy(new __WEBPACK_IMPORTED_MODULE_0_openseadragon___default.a.Point(0, _this.panBy));\n        }\n      }, {\n        id: 'pan-left',\n        tooltip: 'Move left',\n        icon: 'arrow-circle-left',\n        callback: function callback() {\n          _this.viewer.viewport.panBy(new __WEBPACK_IMPORTED_MODULE_0_openseadragon___default.a.Point(-_this.panBy, 0));\n        }\n      }, {\n        id: 'pan-right',\n        tooltip: 'Move right',\n        icon: 'arrow-circle-right',\n        callback: function callback() {\n          _this.viewer.viewport.panBy(new __WEBPACK_IMPORTED_MODULE_0_openseadragon___default.a.Point(_this.panBy, 0));\n        }\n      }];\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vUGFuLnZ1ZT85NjUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzsrREFFQTs7O1lBSUE7Z0JBRUE7QUFIQTs7WUFLQTtnQkFJQTtBQUxBO0FBTEE7OztBQVlBO0FBR0E7QUFKQTs7OztBQU1BOzs7WUFHQTtpQkFDQTtjQUNBO3NDQUNBO2dIQUNBO0FBRUE7QUFQQSxPQURBO1lBVUE7aUJBQ0E7Y0FDQTtzQ0FDQTsrR0FDQTtBQUVBO0FBUEE7WUFTQTtpQkFDQTtjQUNBO3NDQUNBO29IQUNBO0FBRUE7QUFQQTtZQVNBO2lCQUNBO2NBQ0E7c0NBQ0E7bUhBQ0E7QUFHQTtBQVJBO0FBVUE7QUFyQ0E7QUFqQkEiLCJmaWxlIjoiMTAwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwibHYtcGFuLWNvbnRyb2xzXCI+XG5cbiAgICA8Y29udHJvbC1idXR0b25cbiAgICAgIHYtZm9yPVwiKGIsIGluZGV4KSBpbiBidXR0b25zXCJcbiAgICAgIDprZXk9XCJgYnRuLXpvb20tJHtpbmRleH1gXCJcbiAgICAgIDppZD1cImIuaWRcIlxuICAgICAgOnRvb2x0aXA9XCJiLnRvb2x0aXBcIlxuICAgICAgOmNhbGxiYWNrPVwiYi5jYWxsYmFja1wiXG4gICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICBoaW50LXBvc2l0aW9uPVwidG9wXCI+XG4gICAgICA8aWNvbiA6bmFtZT1cImIuaWNvblwiPjwvaWNvbj5cbiAgICA8L2NvbnRyb2wtYnV0dG9uPlxuXG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBPcGVuU2VhZHJhZ29uIGZyb20gJ29wZW5zZWFkcmFnb24nXG5pbXBvcnQgSWNvbiBmcm9tICd2dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS11cCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvYXJyb3ctY2lyY2xlLWRvd24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS1sZWZ0J1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9hcnJvdy1jaXJjbGUtcmlnaHQnXG5pbXBvcnQgQ29udHJvbEJ1dHRvbiBmcm9tICdAL2NvbXBvbmVudHMvY29udHJvbHMvQ29udHJvbEJ1dHRvbidcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIHZpZXdlcjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHBhbkJ5OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRzOiB7XG4gICAgSWNvbixcbiAgICBDb250cm9sQnV0dG9uXG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBidXR0b25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdwYW4tdXAnLFxuICAgICAgICAgIHRvb2x0aXA6ICdNb3ZlIHVwJyxcbiAgICAgICAgICBpY29uOiAnYXJyb3ctY2lyY2xlLXVwJyxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIudmlld3BvcnQucGFuQnkobmV3IE9wZW5TZWFkcmFnb24uUG9pbnQoMCwgLXRoaXMucGFuQnkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAncGFuLWRvd24nLFxuICAgICAgICAgIHRvb2x0aXA6ICdNb3ZlIGRvd24nLFxuICAgICAgICAgIGljb246ICdhcnJvdy1jaXJjbGUtZG93bicsXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLnZpZXdwb3J0LnBhbkJ5KG5ldyBPcGVuU2VhZHJhZ29uLlBvaW50KDAsIHRoaXMucGFuQnkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAncGFuLWxlZnQnLFxuICAgICAgICAgIHRvb2x0aXA6ICdNb3ZlIGxlZnQnLFxuICAgICAgICAgIGljb246ICdhcnJvdy1jaXJjbGUtbGVmdCcsXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLnZpZXdwb3J0LnBhbkJ5KG5ldyBPcGVuU2VhZHJhZ29uLlBvaW50KC10aGlzLnBhbkJ5LCAwKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Bhbi1yaWdodCcsXG4gICAgICAgICAgdG9vbHRpcDogJ01vdmUgcmlnaHQnLFxuICAgICAgICAgIGljb246ICdhcnJvdy1jaXJjbGUtcmlnaHQnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdlci52aWV3cG9ydC5wYW5CeShuZXcgT3BlblNlYWRyYWdvbi5Qb2ludCh0aGlzLnBhbkJ5LCAwKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5AaW1wb3J0ICd+c3R5bGUvc2V0dGluZ3MnO1xuXG4jbHYtcGFuLWNvbnRyb2xzIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkaHVkO1xuICBtYXJnaW46IDFyZW07XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYm90dG9tOiAwO1xuICB3aWR0aDogODBweDtcbiAgaGVpZ2h0OiA4MHB4O1xuXG4gIC5idG4tY29udHJvbCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcGFkZGluZzogMC41cmVtO1xuICB9XG5cbiAgI3Bhbi11cCB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0b3A6IDA7XG4gIH1cblxuICAjcGFuLWRvd24ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm90dG9tOiAwO1xuICB9XG5cbiAgI3Bhbi1sZWZ0IHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBsZWZ0OiAwO1xuICB9XG5cbiAgI3Bhbi1yaWdodCB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgcmlnaHQ6IDA7XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFBhbi52dWU/NTVhYThiNjIiXSwic291cmNlUm9vdCI6IiJ9")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_clipboard__ = __webpack_require__(116);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_clipboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_clipboard__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_expand__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_icons_question_circle__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_awesome_icons_info_circle__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_awesome_icons_thumbs_up__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vue_awesome_icons_share_alt__ = __webpack_require__(198);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_vue_awesome_icons_list__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_Task__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_getImageUri__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_controls_ControlButton__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_controls_ControlButton___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__components_controls_ControlButton__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      imgLink: null\n    };\n  },\n\n  props: {\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_8__model_Task__[\"a\" /* default */],\n      required: true\n    },\n    showHelp: {\n      type: Boolean,\n      required: true\n    },\n    showInfo: {\n      type: Boolean,\n      required: true\n    },\n    showBrowse: {\n      type: Boolean,\n      required: true\n    },\n    showShare: {\n      type: Boolean,\n      required: true\n    },\n    showLike: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default.a,\n    ControlButton: __WEBPACK_IMPORTED_MODULE_10__components_controls_ControlButton___default.a\n  },\n\n  computed: {\n    // We're handling the zoom and fullscreen functionality ourselves here\n    // as other controls rely on the current task being passed in and therefore\n    // this component could be rendered after the viewer and the default method\n    // of passing the button IDs won't work.\n    buttons: function buttons() {\n      var _this = this;\n\n      var buttons = [{\n        tooltip: 'Fullscreen',\n        icon: 'expand',\n        callback: function callback() {\n          _this.$emit('fullscreenclicked');\n        }\n      }];\n\n      if (this.showHelp) {\n        buttons.push({\n          tooltip: 'Help',\n          icon: 'question-circle',\n          callback: function callback() {\n            _this.$emit('helpclicked');\n          }\n        });\n      }\n\n      if (this.showInfo) {\n        buttons.push({\n          tooltip: 'Details',\n          icon: 'info-circle',\n          callback: function callback() {\n            _this.$emit('infoclicked');\n          }\n        });\n      }\n\n      if (this.showBrowse) {\n        buttons.push({\n          tooltip: 'Browse Tasks',\n          icon: 'list',\n          callback: function callback() {\n            _this.$emit('browseclicked');\n          }\n        });\n      }\n\n      if (this.showLike) {\n        buttons.push({\n          tooltip: !this.task.liked ? 'Like' : 'Unlike',\n          icon: 'thumbs-up',\n          iconClass: this.task.liked ? 'active' : null,\n          callback: function callback() {\n            _this.$emit('likeclicked', _this.task, !_this.task.liked);\n          }\n        });\n      }\n\n      if (this.showShare) {\n        var tooltip = 'Copy image URL';\n        buttons.push({\n          id: 'lv-share-btn',\n          tooltip: tooltip,\n          icon: 'share-alt',\n          callback: function callback() {\n            var clipboard = new __WEBPACK_IMPORTED_MODULE_0_clipboard___default.a('#lv-share-btn', {\n              text: function text(trigger) {\n                trigger.setAttribute('aria-label', 'URL Copied!');\n                trigger.addEventListener('mouseleave', function () {\n                  trigger.setAttribute('aria-label', tooltip);\n                  clipboard.destroy();\n                });\n                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_getImageUri__[\"a\" /* default */])({\n                  imgInfo: _this.task.imgInfo\n                });\n              }\n            });\n          }\n        });\n      }\n\n      return buttons;\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVG9vbGJhci52dWU/NjZhNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO3dCQUVBOztlQUdBO0FBRkE7QUFJQTs7OztZQUdBO2dCQUVBO0FBSEE7O1lBS0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFFQTtBQUhBOztZQUtBO2dCQUVBO0FBSEE7O1lBS0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFJQTtBQUxBO0FBckJBOzs7QUE0QkE7QUFHQTtBQUpBOzs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7O2lCQUdBO2NBQ0E7c0NBQ0E7c0JBQ0E7QUFJQTtBQVJBLE9BREE7O3lCQVVBOzttQkFFQTtnQkFDQTt3Q0FDQTt3QkFDQTtBQUVBO0FBTkE7QUFRQTs7eUJBQ0E7O21CQUVBO2dCQUNBO3dDQUNBO3dCQUNBO0FBRUE7QUFOQTtBQVFBOzsyQkFDQTs7bUJBRUE7Z0JBQ0E7d0NBQ0E7d0JBQ0E7QUFFQTtBQU5BO0FBUUE7O3lCQUNBOzsrQ0FFQTtnQkFDQTtrREFDQTt3Q0FDQTsrREFDQTtBQUVBO0FBUEE7QUFTQTs7MEJBQ0E7c0JBQ0E7O2NBRUE7bUJBQ0E7Z0JBQ0E7d0NBQ0E7OzJDQUVBO21EQUNBO21FQUNBO3FEQUNBOzRCQUNBO0FBQ0E7O3NDQUdBO0FBRkE7QUFJQTtBQVhBO0FBYUE7QUFsQkE7QUFvQkE7O2FBQ0E7QUFFQTtBQWxGQTtBQXZDQSIsImZpbGUiOiIxMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJsdi12aWV3ZXItY29udHJvbHNcIj5cblxuICAgIDxjb250cm9sLWJ1dHRvblxuICAgICAgdi1mb3I9XCIoYiwgaW5kZXgpIGluIGJ1dHRvbnNcIlxuICAgICAgOmtleT1cImBidG4tem9vbS0ke2luZGV4fWBcIlxuICAgICAgOnRvb2x0aXA9XCJiLnRvb2x0aXBcIlxuICAgICAgOmNhbGxiYWNrPVwiYi5jYWxsYmFja1wiXG4gICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICBoaW50LXBvc2l0aW9uPVwiYm90dG9tXCI+XG4gICAgICA8aWNvbiA6bmFtZT1cImIuaWNvblwiIDpjbGFzcz1cImIuaWNvbkNsYXNzXCI+PC9pY29uPlxuICAgIDwvY29udHJvbC1idXR0b24+XG5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENsaXBib2FyZCBmcm9tICdjbGlwYm9hcmQnXG5pbXBvcnQgSWNvbiBmcm9tICd2dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2V4cGFuZCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvcXVlc3Rpb24tY2lyY2xlJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9pbmZvLWNpcmNsZSdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvdGh1bWJzLXVwJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9zaGFyZS1hbHQnXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2xpc3QnXG5pbXBvcnQgVGFzayBmcm9tICdAL21vZGVsL1Rhc2snXG5pbXBvcnQgZ2V0SW1hZ2VVcmkgZnJvbSAnQC91dGlscy9nZXRJbWFnZVVyaSdcbmltcG9ydCBDb250cm9sQnV0dG9uIGZyb20gJ0AvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW1nTGluazogbnVsbFxuICAgIH1cbiAgfSxcblxuICBwcm9wczoge1xuICAgIHRhc2s6IHtcbiAgICAgIHR5cGU6IFRhc2ssXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd0hlbHA6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd0luZm86IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd0Jyb3dzZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBzaG93U2hhcmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd0xpa2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRzOiB7XG4gICAgSWNvbixcbiAgICBDb250cm9sQnV0dG9uXG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICAvLyBXZSdyZSBoYW5kbGluZyB0aGUgem9vbSBhbmQgZnVsbHNjcmVlbiBmdW5jdGlvbmFsaXR5IG91cnNlbHZlcyBoZXJlXG4gICAgLy8gYXMgb3RoZXIgY29udHJvbHMgcmVseSBvbiB0aGUgY3VycmVudCB0YXNrIGJlaW5nIHBhc3NlZCBpbiBhbmQgdGhlcmVmb3JlXG4gICAgLy8gdGhpcyBjb21wb25lbnQgY291bGQgYmUgcmVuZGVyZWQgYWZ0ZXIgdGhlIHZpZXdlciBhbmQgdGhlIGRlZmF1bHQgbWV0aG9kXG4gICAgLy8gb2YgcGFzc2luZyB0aGUgYnV0dG9uIElEcyB3b24ndCB3b3JrLlxuICAgIGJ1dHRvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBidXR0b25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgdG9vbHRpcDogJ0Z1bGxzY3JlZW4nLFxuICAgICAgICAgIGljb246ICdleHBhbmQnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdmdWxsc2NyZWVuY2xpY2tlZCcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG5cbiAgICAgIGlmICh0aGlzLnNob3dIZWxwKSB7XG4gICAgICAgIGJ1dHRvbnMucHVzaCh7XG4gICAgICAgICAgdG9vbHRpcDogJ0hlbHAnLFxuICAgICAgICAgIGljb246ICdxdWVzdGlvbi1jaXJjbGUnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdoZWxwY2xpY2tlZCcpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG93SW5mbykge1xuICAgICAgICBidXR0b25zLnB1c2goe1xuICAgICAgICAgIHRvb2x0aXA6ICdEZXRhaWxzJyxcbiAgICAgICAgICBpY29uOiAnaW5mby1jaXJjbGUnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdpbmZvY2xpY2tlZCcpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG93QnJvd3NlKSB7XG4gICAgICAgIGJ1dHRvbnMucHVzaCh7XG4gICAgICAgICAgdG9vbHRpcDogJ0Jyb3dzZSBUYXNrcycsXG4gICAgICAgICAgaWNvbjogJ2xpc3QnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdicm93c2VjbGlja2VkJylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNob3dMaWtlKSB7XG4gICAgICAgIGJ1dHRvbnMucHVzaCh7XG4gICAgICAgICAgdG9vbHRpcDogIXRoaXMudGFzay5saWtlZCA/ICdMaWtlJyA6ICdVbmxpa2UnLFxuICAgICAgICAgIGljb246ICd0aHVtYnMtdXAnLFxuICAgICAgICAgIGljb25DbGFzczogdGhpcy50YXNrLmxpa2VkID8gJ2FjdGl2ZScgOiBudWxsLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdsaWtlY2xpY2tlZCcsIHRoaXMudGFzaywgIXRoaXMudGFzay5saWtlZClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNob3dTaGFyZSkge1xuICAgICAgICBsZXQgdG9vbHRpcCA9ICdDb3B5IGltYWdlIFVSTCdcbiAgICAgICAgYnV0dG9ucy5wdXNoKHtcbiAgICAgICAgICBpZDogJ2x2LXNoYXJlLWJ0bicsXG4gICAgICAgICAgdG9vbHRpcDogdG9vbHRpcCxcbiAgICAgICAgICBpY29uOiAnc2hhcmUtYWx0JyxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNsdi1zaGFyZS1idG4nLCB7XG4gICAgICAgICAgICAgIHRleHQ6ICh0cmlnZ2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnVVJMIENvcGllZCEnKVxuICAgICAgICAgICAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdG9vbHRpcClcbiAgICAgICAgICAgICAgICAgIGNsaXBib2FyZC5kZXN0cm95KClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRJbWFnZVVyaSh7XG4gICAgICAgICAgICAgICAgICBpbWdJbmZvOiB0aGlzLnRhc2suaW1nSW5mb1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnV0dG9uc1xuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbkBpbXBvcnQgJ35zdHlsZS9zZXR0aW5ncyc7XG5cbiNsdi12aWV3ZXItY29udHJvbHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkaHVkO1xuICBtYXJnaW46IDA7XG4gIHotaW5kZXg6IDI7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAganVzdGlmeS1jb250ZW50OiBpbml0aWFsO1xuICAgIHdpZHRoOiBpbml0aWFsO1xuICAgIG1hcmdpbjogMXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICAgIHBhZGRpbmc6IDAgMC41cmVtO1xuICB9XG59XG48L3N0eWxlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUb29sYmFyLnZ1ZT9iYWViMGMzYyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_icons_plus_circle__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_minus_circle__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_icons_refresh__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_controls_ControlButton__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_controls_ControlButton___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__components_controls_ControlButton__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    },\n    zoomBy: {\n      type: Number,\n      required: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default.a,\n    ControlButton: __WEBPACK_IMPORTED_MODULE_4__components_controls_ControlButton___default.a\n  },\n\n  computed: {\n    buttons: function buttons() {\n      var _this = this;\n\n      return [{\n        tooltip: 'Zoom in',\n        icon: 'plus-circle',\n        callback: function callback() {\n          var currentZoom = _this.viewer.viewport.getZoom(true);\n          var zoomTo = currentZoom + currentZoom * _this.zoomBy;\n          _this.viewer.viewport.zoomTo(zoomTo);\n        }\n      }, {\n        tooltip: 'Reset zoom',\n        icon: 'refresh',\n        callback: function callback() {\n          var homeZoom = _this.viewer.viewport.getHomeZoom();\n          _this.viewer.viewport.zoomTo(homeZoom);\n        }\n      }, {\n        tooltip: 'Zoom out',\n        icon: 'minus-circle',\n        callback: function callback() {\n          var currentZoom = _this.viewer.viewport.getZoom(true);\n          var zoomTo = currentZoom - currentZoom * _this.zoomBy;\n          _this.viewer.viewport.zoomTo(zoomTo);\n        }\n      }];\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vWm9vbS52dWU/N2ZkOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztZQUlBO2dCQUVBO0FBSEE7O1lBS0E7Z0JBSUE7QUFMQTtBQUxBOzs7QUFZQTtBQUdBO0FBSkE7Ozs7QUFNQTs7O2lCQUdBO2NBQ0E7c0NBQ0E7MERBQ0E7eURBQ0E7dUNBQ0E7QUFFQTtBQVJBLE9BREE7aUJBV0E7Y0FDQTtzQ0FDQTsrQ0FDQTt1Q0FDQTtBQUVBO0FBUEE7aUJBU0E7Y0FDQTtzQ0FDQTswREFDQTt5REFDQTt1Q0FDQTtBQUdBO0FBVEE7QUFXQTtBQS9CQTtBQWpCQSIsImZpbGUiOiIxMDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJsdi16b29tLWNvbnRyb2xzXCI+XG5cbiAgICA8Y29udHJvbC1idXR0b25cbiAgICAgIHYtZm9yPVwiKGIsIGluZGV4KSBpbiBidXR0b25zXCJcbiAgICAgIDprZXk9XCJgYnRuLXpvb20tJHtpbmRleH1gXCJcbiAgICAgIDp0b29sdGlwPVwiYi50b29sdGlwXCJcbiAgICAgIDpjYWxsYmFjaz1cImIuY2FsbGJhY2tcIlxuICAgICAgcG9zaXRpb249XCJib3R0b21cIlxuICAgICAgaGludC1wb3NpdGlvbj1cInRvcFwiPlxuICAgICAgPGljb24gOm5hbWU9XCJiLmljb25cIj48L2ljb24+XG4gICAgPC9jb250cm9sLWJ1dHRvbj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSWNvbiBmcm9tICd2dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL3BsdXMtY2lyY2xlJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9taW51cy1jaXJjbGUnXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL3JlZnJlc2gnXG5pbXBvcnQgQ29udHJvbEJ1dHRvbiBmcm9tICdAL2NvbXBvbmVudHMvY29udHJvbHMvQ29udHJvbEJ1dHRvbidcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIHZpZXdlcjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHpvb21CeToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuICAgIEljb24sXG4gICAgQ29udHJvbEJ1dHRvblxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgYnV0dG9uczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIHRvb2x0aXA6ICdab29tIGluJyxcbiAgICAgICAgICBpY29uOiAncGx1cy1jaXJjbGUnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Wm9vbSA9IHRoaXMudmlld2VyLnZpZXdwb3J0LmdldFpvb20odHJ1ZSlcbiAgICAgICAgICAgIGNvbnN0IHpvb21UbyA9IGN1cnJlbnRab29tICsgKGN1cnJlbnRab29tICogdGhpcy56b29tQnkpXG4gICAgICAgICAgICB0aGlzLnZpZXdlci52aWV3cG9ydC56b29tVG8oem9vbVRvKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRvb2x0aXA6ICdSZXNldCB6b29tJyxcbiAgICAgICAgICBpY29uOiAncmVmcmVzaCcsXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhvbWVab29tID0gdGhpcy52aWV3ZXIudmlld3BvcnQuZ2V0SG9tZVpvb20oKVxuICAgICAgICAgICAgdGhpcy52aWV3ZXIudmlld3BvcnQuem9vbVRvKGhvbWVab29tKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRvb2x0aXA6ICdab29tIG91dCcsXG4gICAgICAgICAgaWNvbjogJ21pbnVzLWNpcmNsZScsXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRab29tID0gdGhpcy52aWV3ZXIudmlld3BvcnQuZ2V0Wm9vbSh0cnVlKVxuICAgICAgICAgICAgY29uc3Qgem9vbVRvID0gY3VycmVudFpvb20gLSAoY3VycmVudFpvb20gKiB0aGlzLnpvb21CeSlcbiAgICAgICAgICAgIHRoaXMudmlld2VyLnZpZXdwb3J0Lnpvb21Ubyh6b29tVG8pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuQGltcG9ydCAnfnN0eWxlL3NldHRpbmdzJztcblxuI2x2LXpvb20tY29udHJvbHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICB6LWluZGV4OiAyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkaHVkO1xuICBtYXJnaW46IDFyZW07XG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XG4gIGJvdHRvbTogMDtcbiAgaGVpZ2h0OiA4MHB4O1xuICByaWdodDogMDtcblxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIHJpZ2h0OiBpbml0aWFsO1xuICAgIGxlZnQ6IDEwMHB4O1xuICB9XG5cbiAgLmJ0bi1jb250cm9sOm5vdCg6bnRoLWNoaWxkKDIpKSB7XG4gICAgcGFkZGluZzogMC41cmVtO1xuICB9XG5cbiAgLmJ0bi1jb250cm9sOm50aC1jaGlsZCgyKSB7XG4gICAgcGFkZGluZzogMCAwLjVyZW07XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFpvb20udnVlP2FiMDUyNDJjIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_icons_check_circle__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Modal__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Modal___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__components_Modal__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    Modal: __WEBPACK_IMPORTED_MODULE_2__components_Modal___default.a,\n    Icon: __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default.a\n  },\n\n  props: {\n    tasks: {\n      type: Array,\n      required: true\n    },\n    show: {\n      type: Boolean,\n      requried: true\n    },\n    disableComplete: {\n      type: Boolean,\n      requried: true\n    }\n  },\n\n  computed: {\n    listItemClass: function listItemClass() {\n      var complete = this.task !== undefined && this.task.complete && this.disableComplete;\n      return {\n        'task-complete': complete\n      };\n    }\n  },\n\n  methods: {\n    /**\n     * Hide the modal and emit the taskclick event with the task.\n     */\n    onTaskClicked: function onTaskClicked(task) {\n      this.$emit('hide');\n      this.$emit('taskclick', task);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQnJvd3NlLnZ1ZT82Mzc0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCQTtBQUNBO0FBQ0E7O0FBRUE7O0FBR0E7QUFHQTtBQUpBOzs7O1lBT0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFFQTtBQUhBOztZQUtBO2dCQUlBO0FBTEE7QUFUQTs7OzRDQWdCQTtVQUNBLHlCQUNBLHVCQUNBLGlCQUVBOzt5QkFHQTtBQUZBO0FBS0E7QUFaQTs7O0FBZ0JBOzs7Z0RBQ0E7aUJBQ0E7OEJBQ0E7QUFFQTtBQVJBO0FBbENBIiwiZmlsZSI6IjEwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImx2LWJyb3dzZS1tb2RhbFwiPlxuICAgIDxtb2RhbCA6c2hvdz1cInNob3dcIiB0aXRsZT1cIkJyb3dzZSBUYXNrc1wiIEBoaWRlPVwiJGVtaXQoJ2hpZGUnKVwiPlxuICAgICAgPHVsPlxuICAgICAgICA8bGlcbiAgICAgICAgICA6Y2xhc3M9XCJsaXN0SXRlbUNsYXNzXCJcbiAgICAgICAgICB2LWZvcj1cIih0YXNrLCBpbmRleCkgaW4gdGFza3NcIlxuICAgICAgICAgIDprZXk9XCJgdGFzay0ke2luZGV4fWBcIlxuICAgICAgICAgIEBjbGljaz1cIm9uVGFza0NsaWNrZWQodGFzaylcIj5cbiAgICAgICAgICA8ZmlndXJlIHYtaWY9XCJ0YXNrICE9PSB1bmRlZmluZWRcIj5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgOnNyYz1cInRhc2sudGh1bWJuYWlsVXJpXCJcbiAgICAgICAgICAgICAgOmFsdD0nYFRhc2sgJHtpbmRleH0gdGh1bWJuYWlsYCc+XG4gICAgICAgICAgICA8ZmlnY2FwdGlvblxuICAgICAgICAgICAgICB2LWlmPVwiIXRhc2suY29tcGxldGUgfHwgIWRpc2FibGVDb21wbGV0ZVwiPlxuICAgICAgICAgICAgICB7eyB0YXNrLm9iamVjdGl2ZSB9fVxuICAgICAgICAgICAgPC9maWdjYXB0aW9uPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzcz1cImNvbXBsZXRlLWljb25cIlxuICAgICAgICAgICAgICB2LWlmPVwidGFzay5jb21wbGV0ZSAmJiBkaXNhYmxlQ29tcGxldGVcIj5cbiAgICAgICAgICAgICAgPGljb24gbmFtZT1cImNoZWNrLWNpcmNsZVwiPjwvaWNvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZmlndXJlPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L21vZGFsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSWNvbiBmcm9tICd2dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2NoZWNrLWNpcmNsZSdcbmltcG9ydCBNb2RhbCBmcm9tICdAL2NvbXBvbmVudHMvTW9kYWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIE1vZGFsLFxuICAgIEljb25cbiAgfSxcblxuICBwcm9wczoge1xuICAgIHRhc2tzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBzaG93OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdXJpZWQ6IHRydWVcbiAgICB9LFxuICAgIGRpc2FibGVDb21wbGV0ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVyaWVkOiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgbGlzdEl0ZW1DbGFzczogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY29tcGxldGUgPSAoXG4gICAgICAgIHRoaXMudGFzayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRoaXMudGFzay5jb21wbGV0ZSAmJlxuICAgICAgICB0aGlzLmRpc2FibGVDb21wbGV0ZVxuICAgICAgKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3Rhc2stY29tcGxldGUnOiBjb21wbGV0ZVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbW9kYWwgYW5kIGVtaXQgdGhlIHRhc2tjbGljayBldmVudCB3aXRoIHRoZSB0YXNrLlxuICAgICAqL1xuICAgIG9uVGFza0NsaWNrZWQgKHRhc2spIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2hpZGUnKVxuICAgICAgdGhpcy4kZW1pdCgndGFza2NsaWNrJywgdGFzaylcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgJ35zdHlsZS9zZXR0aW5ncyc7XG5cbiNsdi1icm93c2UtbW9kYWwge1xuICB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAtbW96LWNvbHVtbi1jb3VudDogMjtcbiAgICAtd2Via2l0LWNvbHVtbi1jb3VudDogMjtcbiAgICBjb2x1bW4tY291bnQ6IDI7XG4gICAgLW1vei1jb2x1bW4tZ2FwOiA1cHg7XG4gICAgLXdlYmtpdC1jb2x1bW4tZ2FwOiA1cHg7XG4gICAgY29sdW1uLWdhcDogNXB4O1xuXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XG4gICAgICAtbW96LWNvbHVtbi1jb3VudDogNDtcbiAgICAgIC13ZWJraXQtY29sdW1uLWNvdW50OiA0O1xuICAgICAgY29sdW1uLWNvdW50OiA0O1xuICAgIH1cbiAgfVxuXG4gIGxpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDEyOHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgbGlnaHRlbigkZ3JheS1kYXJrLCAyMCUpO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICY6bm90KC50YXNrLWNvbXBsZXRlKTpob3ZlcixcbiAgICAmOm5vdCgudGFzay1jb21wbGV0ZSk6Zm9jdXMge1xuICAgICAgYm9yZGVyLWNvbG9yOiBsaWdodGVuKCRncmF5LWRhcmssIDM1JSk7XG4gICAgfVxuXG4gICAgJi50YXNrLWNvbXBsZXRlIHtcbiAgICAgIGltZyB7XG4gICAgICAgIG9wYWNpdHk6IDAuMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWd1cmUge1xuICAgICAgbWFyZ2luOiA1cHg7XG4gICAgfVxuXG4gICAgaW1nIHtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICBmaWdjYXB0aW9uIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHktaGVhZGluZ3M7XG4gICAgICBmb250LXNpemU6ICRmb250LXNpemUtc207XG4gICAgICBtYXJnaW46IDVweCA1cHggM3B4IDVweDtcbiAgICB9XG5cbiAgICAuY29tcGxldGUtaWNvbiB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG4gICAgICBzdmcge1xuICAgICAgICBoZWlnaHQ6IDI0cHg7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICBjb2xvcjogJGdyZWVuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQnJvd3NlLnZ1ZT83NGNlMDA3YSJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_icons_plus_circle__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_minus_circle__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_icons_pencil__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_awesome_icons_refresh__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_awesome_icons_expand__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vue_awesome_icons_question_circle__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_vue_awesome_icons_info_circle__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_vue_awesome_icons_check_circle__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_vue_awesome_icons_times_circle__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_vue_awesome_icons_thumbs_up__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_vue_awesome_icons_chevron_up__ = __webpack_require__(195);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_vue_awesome_icons_chevron_down__ = __webpack_require__(194);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_vue_awesome_icons_chevron_left__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_vue_awesome_icons_chevron_right__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_vue_awesome_icons_list__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_Modal__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_Modal___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__components_Modal__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__model_Task__ = __webpack_require__(5);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n  data: function data() {\n    return {\n      manifestData: {}\n    };\n  },\n\n  props: {\n    show: {\n      type: Boolean,\n      requried: true\n    },\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_17__model_Task__["a" /* default */],\n      requried: true\n    },\n    showInfo: {\n      type: Boolean,\n      requried: true\n    },\n    showBrowse: {\n      type: Boolean,\n      requried: true\n    },\n    showLike: {\n      type: Boolean,\n      requried: true\n    },\n    showShare: {\n      type: Boolean,\n      requried: true\n    },\n    disableComplete: {\n      type: Boolean,\n      requried: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default.a,\n    Modal: __WEBPACK_IMPORTED_MODULE_16__components_Modal___default.a\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vSGVscC52dWU/ZTMwMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO3dCQUVBOztvQkFHQTtBQUZBO0FBSUE7Ozs7WUFHQTtnQkFFQTtBQUhBOztZQUtBO2dCQUVBO0FBSEE7O1lBS0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFFQTtBQUhBOztZQUtBO2dCQUVBO0FBSEE7O1lBS0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFJQTtBQUxBO0FBekJBOzs7QUFnQ0E7QUFFQTtBQUhBO0FBdENBIiwiZmlsZSI6IjEwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImx2LWhlbHAtbW9kYWxcIj5cbiAgICA8bW9kYWwgOnNob3c9XCJzaG93XCIgdGl0bGU9XCJIZWxwXCIgQGhpZGU9XCIkZW1pdCgnaGlkZScpXCI+XG4gICAgICA8cD5cbiAgICAgICAgVGhlIG9iamVjdGl2ZSBvZiB0aGUgY3VycmVudCB0YXNrLCBhbG9uZyB3aXRoIGFueSBhZGRpdGlvbmFsIGd1aWRhbmNlXG4gICAgICAgIGNhbiBiZSBzZWVuIGluIHRoZSBzaWRlYmFyIHRvIHRoZSByaWdodCBvZiB0aGUgdmlld2VyLiBPbmNlIHRoZSB0YXNrXG4gICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCBjbGljayB0aGUgU3VibWl0IGJ1dHRvbiB0byBzdWJtaXQgeW91ciBhbnN3ZXIuXG4gICAgICA8L3A+XG4gICAgICA8cCB2LWlmPVwiZGlzYWJsZUNvbXBsZXRlXCI+XG4gICAgICAgIE5vdGUgdGhhdCB5b3UgY2FuIG9ubHkgc3VibWl0IG9uZSBhbnN3ZXIgZm9yIGVhY2ggdGFzay4gWW91IGFyZSBmcmVlIHRvXG4gICAgICAgIGJyb3dzZSBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRhc2tzIGJ1dCBvbmNlIHlvdSBjbGljayBzdWJtaXQgeW91clxuICAgICAgICBhbnN3ZXIgd2lsbCBiZSBzYXZlZCBhbmQgZnVydGhlciBzdWJtaXNzaW9ucyBkaXNhYmxlZC5cbiAgICAgIDwvcD5cbiAgICAgIDxoND5WaWV3ZXIgY29udHJvbHM8L2g0PlxuICAgICAgPHA+VGhlIGZvbGxvd2luZyBjb250cm9scyBhcmUgcHJvdmlkZWQgdG8gdGhlIHRvcC1sZWZ0IG9mIHRoZSB2aWV3ZXI6PC9wPlxuICAgICAgPHVsPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGljb24gbmFtZT1cInBsdXMtY2lyY2xlXCI+PC9pY29uPlpvb20gaW5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxpY29uIG5hbWU9XCJtaW51cy1jaXJjbGVcIj48L2ljb24+Wm9vbSBvdXRcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxpY29uIG5hbWU9XCJyZWZyZXNoXCI+PC9pY29uPlJlc2V0IHpvb21cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxpY29uIG5hbWU9XCJleHBhbmRcIj48L2ljb24+RnVsbHNjcmVlblxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGljb24gbmFtZT1cInF1ZXN0aW9uLWNpcmNsZVwiPjwvaWNvbj5WaWV3IEhlbHBcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIHYtaWY9XCJzaG93SW5mb1wiPlxuICAgICAgICAgIDxpY29uIG5hbWU9XCJpbmZvLWNpcmNsZVwiPjwvaWNvbj5WaWV3IE1ldGFkYXRhXG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaSB2LWlmPVwic2hvd0Jyb3dzZVwiPlxuICAgICAgICAgIDxpY29uIG5hbWU9XCJsaXN0XCI+PC9pY29uPkJyb3dzZSBUYXNrc1xuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgdi1pZj1cInNob3dMaWtlXCI+XG4gICAgICAgICAgPGljb24gbmFtZT1cInRodW1icy11cFwiPjwvaWNvbj5MaWtlIFRhc2svSW1hZ2VcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIHYtaWY9XCJzaG93U2hhcmVcIj5cbiAgICAgICAgICA8aWNvbiBuYW1lPVwic2hhcmUtYWx0XCI+PC9pY29uPkNvcHkgSW1hZ2UgVVJMXG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgICAgPHA+XG4gICAgICAgIFRoZSBmb2xsb3dpbmcgY29udHJvbHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBib3R0b20tbGVmdCBvZiB0aGUgdmlld2VyOlxuICAgICAgPC9wPlxuICAgICAgPHVsPlxuICAgICAgICA8bGk+PGljb24gbmFtZT1cImNoZXZyb24tdXBcIj48L2ljb24+UGFuIHVwPC9saT5cbiAgICAgICAgPGxpPjxpY29uIG5hbWU9XCJjaGV2cm9uLWRvd25cIj48L2ljb24+UGFuIGRvd248L2xpPlxuICAgICAgICA8bGk+PGljb24gbmFtZT1cImNoZXZyb24tbGVmdFwiPjwvaWNvbj5QYW4gbGVmdDwvbGk+XG4gICAgICAgIDxsaT48aWNvbiBuYW1lPVwiY2hldnJvbi1yaWdodFwiPjwvaWNvbj5QYW4gcmlnaHQ8L2xpPlxuICAgICAgPC91bD5cbiAgICAgIDxwPlxuICAgICAgICBUbyB0aGUgbGVmdCBhbmQgcmlnaHQgb2YgdGhlIHZpZXdlciBhcmUgYnV0dG9ucyB0byBicm93c2UgYXZhaWxhYmxlXG4gICAgICAgIHRhc2tzOlxuICAgICAgPC9wPlxuICAgICAgPHVsPlxuICAgICAgICA8bGk+PGljb24gbmFtZT1cImNoZXZyb24tbGVmdFwiPjwvaWNvbj5QcmV2aW91cyB0YXNrPC9saT5cbiAgICAgICAgPGxpPjxpY29uIG5hbWU9XCJjaGV2cm9uLXJpZ2h0XCI+PC9pY29uPk5leHQgdGFzazwvbGk+XG4gICAgICA8L3VsPlxuICAgICAgPGRpdiB2LWlmPVwidGFzay5tb2RlID09PSAnc2VsZWN0J1wiPlxuICAgICAgICA8aDQ+U2VsZWN0IG1vZGU8L2g0PlxuICAgICAgICA8cD5cbiAgICAgICAgICBXaGVuIHVzaW5nIHRoZSB2aWV3ZXIgaW4gc2VsZWN0IG1vZGUgYW4gYXJlYSBvZiB0aGUgaW1hZ2UgY2FuXG4gICAgICAgICAgYmUgc2VsZWN0ZWQgYnkgY2xpY2tpbmcgKG9yIHRhcHBpbmcpIG9uIHRoZSBpbWFnZS4gVGhlIGZvbGxvd2luZ1xuICAgICAgICAgIGNvbnRyb2xzIGFyZSBwcm92aWRlZCB0byB0aGUgcmlnaHQgb2YgdGhlIHNlbGVjdGlvbiBib3g6XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIDxsaT48aWNvbiBuYW1lPVwiY2hlY2stY2lyY2xlXCI+PC9pY29uPkNvbmZpcm0gc2VsZWN0aW9uPC9saT5cbiAgICAgICAgICA8bGk+PGljb24gbmFtZT1cInRpbWVzLWNpcmNsZVwiPjwvaWNvbj5DYW5jZWwgc2VsZWN0aW9uPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgT25jZSBhIHNlbGVjdGlvbiBoYXMgYmVlbiBjb25maXJtZWQgaXQgd2lsbCBhcHBlYXIgaW4gdGhlXG4gICAgICAgICAgc2VsZWN0aW9ucyBzaWRlYmFyIHRvIHRoZSByaWdodCBvZiB0aGUgc2NyZWVuLCB3aGVyZSB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgY29udHJvbHMgYXJlIHByb3ZpZGVkOlxuICAgICAgICA8L3A+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICA8bGk+PGljb24gbmFtZT1cInBlbmNpbFwiPjwvaWNvbj5FZGl0IHNlbGVjdGlvbjwvbGk+XG4gICAgICAgICAgPGxpPjxpY29uIG5hbWU9XCJ0aW1lcy1jaXJjbGVcIj48L2ljb24+RGVsZXRlIHNlbGVjdGlvbjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L21vZGFsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSWNvbiBmcm9tICd2dWUtYXdlc29tZS9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL3BsdXMtY2lyY2xlJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9taW51cy1jaXJjbGUnXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL3BlbmNpbCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvcmVmcmVzaCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvZXhwYW5kJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9xdWVzdGlvbi1jaXJjbGUnXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2luZm8tY2lyY2xlJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9jaGVjay1jaXJjbGUnXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL3RpbWVzLWNpcmNsZSdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvdGh1bWJzLXVwJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9jaGV2cm9uLXVwJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9jaGV2cm9uLWRvd24nXG5pbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tbGVmdCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvY2hldnJvbi1yaWdodCdcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvbGlzdCdcbmltcG9ydCBNb2RhbCBmcm9tICdAL2NvbXBvbmVudHMvTW9kYWwnXG5pbXBvcnQgVGFzayBmcm9tICdAL21vZGVsL1Rhc2snXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYW5pZmVzdERhdGE6IHt9XG4gICAgfVxuICB9LFxuXG4gIHByb3BzOiB7XG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVyaWVkOiB0cnVlXG4gICAgfSxcbiAgICB0YXNrOiB7XG4gICAgICB0eXBlOiBUYXNrLFxuICAgICAgcmVxdXJpZWQ6IHRydWVcbiAgICB9LFxuICAgIHNob3dJbmZvOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdXJpZWQ6IHRydWVcbiAgICB9LFxuICAgIHNob3dCcm93c2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1cmllZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd0xpa2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1cmllZDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd1NoYXJlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdXJpZWQ6IHRydWVcbiAgICB9LFxuICAgIGRpc2FibGVDb21wbGV0ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVyaWVkOiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcbiAgICBJY29uLFxuICAgIE1vZGFsXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4jbHYtaGVscC1tb2RhbCB7XG4gIHVsIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgfVxuXG4gIGxpIHtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gIH1cblxuICBzdmcge1xuICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICB9XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEhlbHAudnVlPzE3NDEwODVlIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_Task__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Modal__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Modal___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__components_Modal__);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      metadata: [],\n      logo: null,\n      attribution: null,\n      license: null\n    };\n  },\n\n  props: {\n    show: {\n      type: Boolean,\n      requried: true\n    },\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_1__model_Task__[\"a\" /* default */],\n      required: true\n    },\n    lang: {\n      type: String,\n      default: 'en'\n    }\n  },\n\n  components: {\n    Modal: __WEBPACK_IMPORTED_MODULE_2__components_Modal___default.a\n  },\n\n  computed: {\n    hasData: function hasData() {\n      return this.metadata.length > 0 || this.logo !== null || this.attribution !== null || this.license !== null;\n    }\n  },\n\n  methods: {\n\n    /**\n     * Fetch the manifest and load data.\n     */\n    fetchManifest: function fetchManifest() {\n      var _this = this;\n\n      this.metadata = [];\n      this.logo = null;\n      this.attribution = null;\n      this.license = null;\n\n      if (!this.task.manifestUri.length) {\n        return;\n      }\n\n      fetch(this.task.manifestUri, {\n        method: 'get'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.metadata = data.metadata.map(function (item) {\n          if (__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(item.value) === 'object') {\n            item.value = _this.getValueInLang(item.value);\n          }\n          return item;\n        });\n        _this.logo = data.logo;\n        _this.attribution = data.attribution;\n        _this.license = data.license;\n      }).catch(function (err) {\n        throw Error('Could not retrieve the manifest: ' + err);\n      });\n    },\n\n\n    /**\n     * Return a metadata value in the chosen language, if available.\n     */\n    getValueInLang: function getValueInLang(values) {\n      var _this2 = this;\n\n      var filtered = values.filter(function (value) {\n        return value['@language'] === _this2.lang;\n      });\n      return filtered.length ? filtered[0]['@value'] : '';\n    }\n  },\n\n  watch: {\n\n    /**\n     * Update the manifest when the task changes.\n     */\n    task: function task() {\n      this.fetchManifest();\n    }\n  },\n\n  created: function created() {\n    this.fetchManifest();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vTWV0YWRhdGEudnVlPzQzYTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBO0FBQ0E7O0FBRUE7d0JBRUE7O2dCQUVBO1lBQ0E7bUJBQ0E7ZUFFQTtBQUxBO0FBT0E7Ozs7WUFHQTtnQkFFQTtBQUhBOztZQUtBO2dCQUVBO0FBSEE7O1lBS0E7ZUFJQTtBQUxBO0FBVEE7OztBQWtCQTtBQUhBOzs7Z0NBS0E7b0NBQ0EsbUJBQ0EsNkJBQ0EseUJBQ0E7QUFHQTtBQVJBOzs7O0FBYUE7Ozs7QUFDQTs7c0JBQ0E7a0JBQ0E7eUJBQ0E7cUJBRUE7O3lDQUNBO0FBQ0E7QUFFQTs7O2dCQUVBO0FBREEsa0NBRUE7d0JBQ0E7OEJBQ0E7MkRBQ0E7NkdBQ0E7bURBQ0E7QUFDQTtpQkFDQTtBQUNBOzBCQUNBO2lDQUNBOzZCQUNBOzhCQUNBOzBEQUNBO0FBQ0E7QUFFQTs7O0FBR0E7Ozs7QUFDQTs7b0RBQ0E7NkNBQ0E7QUFDQTt1REFDQTtBQUdBO0FBM0NBOzs7O0FBZ0RBOzs7MEJBQ0E7V0FDQTtBQUdBO0FBUkE7OzhCQVNBO1NBQ0E7QUFDQTtBQS9GQSIsImZpbGUiOiIxMDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJsdi1tZXRhZGF0YS1tb2RhbFwiPlxuICAgIDxtb2RhbCA6c2hvdz1cInNob3dcIiB0aXRsZT1cIk1ldGFkYXRhXCIgQGhpZGU9XCIkZW1pdCgnaGlkZScpXCI+XG5cbiAgICAgIDxzcGFuIHYtaWY9XCJoYXNEYXRhXCI+XG4gICAgICAgIDx1bCB2LWZvcj1cIml0ZW0gaW4gbWV0YWRhdGFcIiA6a2V5PVwiaXRlbS5sYWJlbFwiPlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxzdHJvbmc+e3sgaXRlbS5sYWJlbCB9fTo8L3N0cm9uZz5cbiAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cIml0ZW0udmFsdWVcIj48L3NwYW4+PC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlclwiPlxuICAgICAgICAgIDxpbWcgdi1pZj1cImxvZ29cIiA6c3JjPVwibG9nb1wiPlxuICAgICAgICAgIDxwIHYtaWY9XCJhdHRyaWJ1dGlvblwiIHYtaHRtbD1cImF0dHJpYnV0aW9uXCI+PC9wPlxuICAgICAgICAgIDxhIDpocmVmPVwibGljZW5zZVwiIHYtaWY9XCJsaWNlbnNlXCIgdi1odG1sPVwibGljZW5zZVwiPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvc3Bhbj5cblxuICAgIDxzcGFuIHYtZWxzZT5cbiAgICAgIDxwIGNsYXNzPVwiY2VudGVyXCI+Tm8gbWV0YWRhdGEgbG9hZGVkPC9wPlxuICAgIDwvc3Bhbj5cblxuICAgIDwvbW9kYWw+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBUYXNrIGZyb20gJ0AvbW9kZWwvVGFzaydcbmltcG9ydCBNb2RhbCBmcm9tICdAL2NvbXBvbmVudHMvTW9kYWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRhZGF0YTogW10sXG4gICAgICBsb2dvOiBudWxsLFxuICAgICAgYXR0cmlidXRpb246IG51bGwsXG4gICAgICBsaWNlbnNlOiBudWxsXG4gICAgfVxuICB9LFxuXG4gIHByb3BzOiB7XG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVyaWVkOiB0cnVlXG4gICAgfSxcbiAgICB0YXNrOiB7XG4gICAgICB0eXBlOiBUYXNrLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGxhbmc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdlbidcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuICAgIE1vZGFsXG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBoYXNEYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubWV0YWRhdGEubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICB0aGlzLmxvZ28gIT09IG51bGwgfHxcbiAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGlvbiAhPT0gbnVsbCB8fFxuICAgICAgICAgICAgICB0aGlzLmxpY2Vuc2UgIT09IG51bGwpXG4gICAgfVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcblxuICAgIC8qKlxuICAgICAqIEZldGNoIHRoZSBtYW5pZmVzdCBhbmQgbG9hZCBkYXRhLlxuICAgICAqL1xuICAgIGZldGNoTWFuaWZlc3QgKCkge1xuICAgICAgdGhpcy5tZXRhZGF0YSA9IFtdXG4gICAgICB0aGlzLmxvZ28gPSBudWxsXG4gICAgICB0aGlzLmF0dHJpYnV0aW9uID0gbnVsbFxuICAgICAgdGhpcy5saWNlbnNlID0gbnVsbFxuXG4gICAgICBpZiAoIXRoaXMudGFzay5tYW5pZmVzdFVyaS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGZldGNoKHRoaXMudGFzay5tYW5pZmVzdFVyaSwge1xuICAgICAgICBtZXRob2Q6ICdnZXQnXG4gICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gICAgICB9KS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBkYXRhLm1ldGFkYXRhLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS52YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGl0ZW0udmFsdWUgPSB0aGlzLmdldFZhbHVlSW5MYW5nKGl0ZW0udmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVtXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMubG9nbyA9IGRhdGEubG9nb1xuICAgICAgICB0aGlzLmF0dHJpYnV0aW9uID0gZGF0YS5hdHRyaWJ1dGlvblxuICAgICAgICB0aGlzLmxpY2Vuc2UgPSBkYXRhLmxpY2Vuc2VcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCByZXRyaWV2ZSB0aGUgbWFuaWZlc3Q6ICR7ZXJyfWApXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBtZXRhZGF0YSB2YWx1ZSBpbiB0aGUgY2hvc2VuIGxhbmd1YWdlLCBpZiBhdmFpbGFibGUuXG4gICAgICovXG4gICAgZ2V0VmFsdWVJbkxhbmcgKHZhbHVlcykge1xuICAgICAgY29uc3QgZmlsdGVyZWQgPSB2YWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWVbJ0BsYW5ndWFnZSddID09PSB0aGlzLmxhbmdcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZmlsdGVyZWQubGVuZ3RoID8gZmlsdGVyZWRbMF1bJ0B2YWx1ZSddIDogJydcbiAgICB9XG4gIH0sXG5cbiAgd2F0Y2g6IHtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgbWFuaWZlc3Qgd2hlbiB0aGUgdGFzayBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHRhc2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZmV0Y2hNYW5pZmVzdCgpXG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuZmV0Y2hNYW5pZmVzdCgpXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4jbHYtbWV0YWRhdGEtbW9kYWwge1xuICB1bCB7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIH1cblxuICAuY2VudGVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAycmVtO1xuICB9XG5cbiAgbGkge1xuICAgIG1hcmdpbjogMDtcbiAgfVxufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBNZXRhZGF0YS52dWU/Mjk2Mzk5YTEiXSwic291cmNlUm9vdCI6IiJ9")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_icons_check_circle__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Task__ = __webpack_require__(5);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      noteCollapsed: true\n    };\n  },\n\n  props: {\n    title: {\n      type: String,\n      default: 'Task'\n    },\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_2__model_Task__[\"a\" /* default */],\n      required: true\n    },\n    commentAnnotation: {\n      required: true\n    },\n    showNote: {\n      type: Boolean,\n      required: true\n    },\n    disableComplete: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  computed: {\n    note: function note() {\n      if (!this.commentAnnotation) {\n        return '';\n      }\n      return this.commentAnnotation.body.value;\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_0_vue_awesome_components_Icon___default.a\n  },\n\n  methods: {\n    /**\n     * Toggle the collapsing of the note input.\n     */\n    toggleeNoteCollapse: function toggleeNoteCollapse() {\n      this.noteCollapsed = !this.noteCollapsed;\n    },\n\n\n    /**\n     * Emit the noteupdated event with the note value.\n     */\n    updateNote: function updateNote(evt) {\n      this.$emit('noteupdated', this.task, evt.target.value);\n    },\n\n\n    /**\n     * Emit the submit event with the task.\n     */\n    submit: function submit() {\n      this.$emit('submit', this.task);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_Task__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_awesome_icons_times_circle__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_awesome_icons_pencil__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_highlightOverlay__ = __webpack_require__(92);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n  props: {\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_0__model_Task__["a" /* default */],\n      required: true\n    },\n    tags: {\n      type: Array,\n      required: true\n    }\n  },\n\n  components: {\n    Icon: __WEBPACK_IMPORTED_MODULE_1_vue_awesome_components_Icon___default.a\n  },\n\n  methods: {\n    highlightOverlay: __WEBPACK_IMPORTED_MODULE_4__utils_highlightOverlay__["a" /* default */],\n    editTag: function editTag(tag) {\n      this.$emit(\'edit\', this.task, tag.id);\n    },\n    deleteTag: function deleteTag(tag) {\n      this.$emit(\'delete\', this.task, tag.id);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vU2VsZWN0LnZ1ZT9kNWRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O1lBSUE7Z0JBRUE7QUFIQTs7WUFLQTtnQkFJQTtBQUxBO0FBTEE7OztBQWNBO0FBSEE7OztBQUtBO21DQUNBO3dDQUNBO0FBQ0E7dUNBQ0E7MENBQ0E7QUFFQTtBQVJBO0FBaEJBIiwiZmlsZSI6IjEwNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImx2LXNpZGViYXItc2VsZWN0LWl0ZW1cIj5cbiAgICA8dWw+XG4gICAgICA8bGlcbiAgICAgICAgdi1mb3I9XCJ0YWcgaW4gdGFnc1wiXG4gICAgICAgIDprZXk9XCJ0YWcuaWRcIlxuICAgICAgICBAbW91c2VvdmVyPVwiaGlnaGxpZ2h0T3ZlcmxheSh0YWcuaWQsIHRydWUpXCJcbiAgICAgICAgQG1vdXNlbGVhdmU9XCJoaWdobGlnaHRPdmVybGF5KHRhZy5pZCwgZmFsc2UpXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aHVtYm5haWwtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGltZyA6c3JjPVwidGFnLnRhcmdldC5zZWxlY3Rvci52YWx1ZVwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBAY2xpY2s9XCJlZGl0VGFnKHRhZylcIlxuICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWNvbnRyb2xcIj5cbiAgICAgICAgICAgIDxpY29uIG5hbWU9XCJwZW5jaWxcIj48L2ljb24+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgQGNsaWNrPVwiZGVsZXRlVGFnKHRhZylcIlxuICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWNvbnRyb2xcIj5cbiAgICAgICAgICAgIDxpY29uIG5hbWU9XCJ0aW1lcy1jaXJjbGVcIj48L2ljb24+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuXG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBUYXNrIGZyb20gJ0AvbW9kZWwvVGFzaydcbmltcG9ydCBJY29uIGZyb20gJ3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvdGltZXMtY2lyY2xlJ1xuaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9wZW5jaWwnXG5pbXBvcnQgaGlnaGxpZ2h0T3ZlcmxheSBmcm9tICdAL3V0aWxzL2hpZ2hsaWdodE92ZXJsYXknXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICB0YXNrOiB7XG4gICAgICB0eXBlOiBUYXNrLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZ3M6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuICAgIEljb25cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGlnaGxpZ2h0T3ZlcmxheSxcbiAgICBlZGl0VGFnICh0YWcpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2VkaXQnLCB0aGlzLnRhc2ssIHRhZy5pZClcbiAgICB9LFxuICAgIGRlbGV0ZVRhZyAodGFnKSB7XG4gICAgICB0aGlzLiRlbWl0KCdkZWxldGUnLCB0aGlzLnRhc2ssIHRhZy5pZClcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5AaW1wb3J0ICd+c3R5bGUvc2V0dGluZ3MnO1xuQGltcG9ydCAnfnN0eWxlL3BhcnRpYWxzL2J1dHRvbnMnO1xuXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBkaXNwbGF5OiBub25lO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIHVsIHtcbiAgICBtYXJnaW46IDA7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICBmbGV4OiAxIDEgYXV0bztcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyOiAxcHggc29saWQgbGlnaHRlbigkZ3JheS1kYXJrLCAyMCUpO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjUwbXM7XG5cbiAgICAmOmVtcHR5IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgbGkge1xuICAgICAgcGFkZGluZzogMC44cmVtO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGRhcmtlbigkZ3JheSwgMjUlKTtcbiAgICB9XG4gIH1cblxuICAuYnV0dG9ucyB7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXg6IDAgMCAzMy4zMzMzJTtcbiAgfVxuXG4gIC5idG4ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuXG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gICAgfVxuICB9XG5cbiAgLnRodW1ibmFpbC1jb250YWluZXIge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4OiAxIDEgYXV0bztcbiAgICBoZWlnaHQ6IDUwcHg7XG5cbiAgICBpbWcge1xuICAgICAgZmxleDogbm9uZTsgIC8qIElFIGZpeCAqL1xuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU2VsZWN0LnZ1ZT82MTY4NGY1NiJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Task__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_form_generator__ = __webpack_require__(200);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_form_generator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_form_generator__);\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      formOptions: {\n        validateAfterLoad: true,\n        validateAfterChanged: true\n      },\n      // To avoid modifying parent state\n      form: JSON.parse(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify___default()(this.task.form))\n    };\n  },\n\n  components: {\n    'vue-form-generator': __WEBPACK_IMPORTED_MODULE_3_vue_form_generator___default.a.component\n  },\n\n  props: {\n    task: {\n      type: __WEBPACK_IMPORTED_MODULE_2__model_Task__[\"a\" /* default */],\n      required: true\n    }\n  },\n\n  methods: {\n    /**\n     * Emit the update event when the form validates (or otherwise).\n     */\n    onValidated: function onValidated(isValid, errors) {\n      var _this = this;\n\n      document.querySelector('.form-group').classList.remove('show-errors');\n      // Replace the empty string with null for date fields in order\n      // to avoid Invalid Date in fecha.format\n      this.form.schema.fields.forEach(function (field) {\n        if (field.inputType === 'date' && _this.form.model[field.model] === '') {\n          _this.form.model[field.model] = null;\n        }\n      });\n      this.form.errors = errors;\n      this.$emit('update', this.task, this.form);\n    },\n\n\n    /**\n     * Emit the inputfocus event.\n     */\n    onInputFocus: function onInputFocus(evt) {\n      var modelId = evt.target.id;\n      this.$emit('inputfocus', this.task, modelId);\n    },\n\n\n    /**\n     * Emit the inputblur event.\n     */\n    onInputBlur: function onInputBlur() {\n      this.$emit('inputblur', this.task);\n    }\n  },\n\n  mounted: function mounted() {\n    var fieldElems = document.querySelectorAll('.form-control');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(fieldElems), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var el = _step.value;\n\n        el.addEventListener('focus', this.onInputFocus);\n        el.addEventListener('blur', this.onInputBlur);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    var fieldElems = document.querySelectorAll('.form-control');\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(fieldElems), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var el = _step2.value;\n\n        el.removeEventListener('focus', this.onInputFocus);\n        el.removeEventListener('focus', this.onInputBlur);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVHJhbnNjcmliZS52dWU/ZWJmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTtBQUNBOztBQUVBO3dCQUVBOzs7MkJBR0E7OEJBRUE7QUFIQTtBQUlBOzhHQUVBO0FBUEE7QUFTQTs7O3FGQUlBO0FBSEE7Ozs7WUFNQTtnQkFJQTtBQUxBO0FBREE7OztBQVVBOzs7O0FBQ0E7OzZEQUNBO0FBQ0E7QUFDQTt1REFDQTtnRkFDQTswQ0FDQTtBQUNBO0FBQ0E7eUJBQ0E7MkNBQ0E7QUFFQTs7O0FBR0E7Ozs2Q0FDQTsrQkFDQTswQ0FDQTtBQUVBOzs7QUFHQTs7O3dDQUNBO21DQUNBO0FBR0E7QUFoQ0E7OzsrQ0FrQ0E7QUFEQTs7Ozs7O0FBRUE7OzBDQUNBO3lDQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzsrQ0FFQTtBQURBOzs7Ozs7QUFFQTs7NkNBQ0E7NkNBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUF0RUEiLCJmaWxlIjoiMTA4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwibHYtc2lkZWJhci10cmFuc2NyaWJlLWl0ZW1cIj5cblxuICAgIDx2dWUtZm9ybS1nZW5lcmF0b3JcbiAgICAgIGlkPVwibHYtZm9ybVwiXG4gICAgICByZWY9XCJmb3JtXCJcbiAgICAgIDpzY2hlbWE9XCJmb3JtLnNjaGVtYVwiXG4gICAgICA6bW9kZWw9XCJmb3JtLm1vZGVsXCJcbiAgICAgIDpvcHRpb25zPVwiZm9ybU9wdGlvbnNcIlxuICAgICAgQHZhbGlkYXRlZD1cIm9uVmFsaWRhdGVkXCI+XG4gICAgPC92dWUtZm9ybS1nZW5lcmF0b3I+XG5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFRhc2sgZnJvbSAnQC9tb2RlbC9UYXNrJ1xuaW1wb3J0IFZ1ZUZvcm1HZW5lcmF0b3IgZnJvbSAndnVlLWZvcm0tZ2VuZXJhdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU9wdGlvbnM6IHtcbiAgICAgICAgdmFsaWRhdGVBZnRlckxvYWQ6IHRydWUsXG4gICAgICAgIHZhbGlkYXRlQWZ0ZXJDaGFuZ2VkOiB0cnVlXG4gICAgICB9LFxuICAgICAgLy8gVG8gYXZvaWQgbW9kaWZ5aW5nIHBhcmVudCBzdGF0ZVxuICAgICAgZm9ybTogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRhc2suZm9ybSkpXG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcbiAgICAndnVlLWZvcm0tZ2VuZXJhdG9yJzogVnVlRm9ybUdlbmVyYXRvci5jb21wb25lbnRcbiAgfSxcblxuICBwcm9wczoge1xuICAgIHRhc2s6IHtcbiAgICAgIHR5cGU6IFRhc2ssXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgdXBkYXRlIGV2ZW50IHdoZW4gdGhlIGZvcm0gdmFsaWRhdGVzIChvciBvdGhlcndpc2UpLlxuICAgICAqL1xuICAgIG9uVmFsaWRhdGVkIChpc1ZhbGlkLCBlcnJvcnMpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWdyb3VwJykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1lcnJvcnMnKVxuICAgICAgLy8gUmVwbGFjZSB0aGUgZW1wdHkgc3RyaW5nIHdpdGggbnVsbCBmb3IgZGF0ZSBmaWVsZHMgaW4gb3JkZXJcbiAgICAgIC8vIHRvIGF2b2lkIEludmFsaWQgRGF0ZSBpbiBmZWNoYS5mb3JtYXRcbiAgICAgIHRoaXMuZm9ybS5zY2hlbWEuZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIGlmIChmaWVsZC5pbnB1dFR5cGUgPT09ICdkYXRlJyAmJiB0aGlzLmZvcm0ubW9kZWxbZmllbGQubW9kZWxdID09PSAnJykge1xuICAgICAgICAgIHRoaXMuZm9ybS5tb2RlbFtmaWVsZC5tb2RlbF0gPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLmZvcm0uZXJyb3JzID0gZXJyb3JzXG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGUnLCB0aGlzLnRhc2ssIHRoaXMuZm9ybSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgaW5wdXRmb2N1cyBldmVudC5cbiAgICAgKi9cbiAgICBvbklucHV0Rm9jdXMgKGV2dCkge1xuICAgICAgY29uc3QgbW9kZWxJZCA9IGV2dC50YXJnZXQuaWRcbiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0Zm9jdXMnLCB0aGlzLnRhc2ssIG1vZGVsSWQpXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVtaXQgdGhlIGlucHV0Ymx1ciBldmVudC5cbiAgICAgKi9cbiAgICBvbklucHV0Qmx1ciAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdpbnB1dGJsdXInLCB0aGlzLnRhc2spXG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIGNvbnN0IGZpZWxkRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1jb250cm9sJylcbiAgICBmb3IgKGxldCBlbCBvZiBmaWVsZEVsZW1zKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMub25JbnB1dEZvY3VzKVxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25JbnB1dEJsdXIpXG4gICAgfVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIGNvbnN0IGZpZWxkRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1jb250cm9sJylcbiAgICBmb3IgKGxldCBlbCBvZiBmaWVsZEVsZW1zKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMub25JbnB1dEZvY3VzKVxuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLm9uSW5wdXRCbHVyKVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuQGltcG9ydCAnfnN0eWxlL3NldHRpbmdzJztcbkBpbXBvcnQgJ35zdHlsZS9wYXJ0aWFscy9mb3Jtcyc7XG5cbiNsdi1zaWRlYmFyLXRyYW5zY3JpYmUtaXRlbSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiAxcmVtO1xuXG4gIGZpZWxkc2V0IHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuXG4gIC5mb3JtLWdyb3VwIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICB9XG59XG5cbiNsdi1mb3JtIHtcbiAgZmxleDogMSAxIGF1dG87XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFRyYW5zY3JpYmUudnVlPzBkN2YyNWFlIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(119), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzP2FhNGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjEwOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(120), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzPzVmNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjExMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(122), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qcz9mZTA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIxMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(123), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz9iYjAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIxMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(124), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanM/YTcwZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiMTEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(125), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanM/ZDE2YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiMTE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(181)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(module, require('select'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod, global.select);\n        global.clipboardAction = mod.exports;\n    }\n})(this, function (module, _select) {\n    'use strict';\n\n    var _select2 = _interopRequireDefault(_select);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var ClipboardAction = function () {\n        /**\n         * @param {Object} options\n         */\n        function ClipboardAction(options) {\n            _classCallCheck(this, ClipboardAction);\n\n            this.resolveOptions(options);\n            this.initSelection();\n        }\n\n        /**\n         * Defines base properties passed from constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(ClipboardAction, [{\n            key: 'resolveOptions',\n            value: function resolveOptions() {\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                this.action = options.action;\n                this.container = options.container;\n                this.emitter = options.emitter;\n                this.target = options.target;\n                this.text = options.text;\n                this.trigger = options.trigger;\n\n                this.selectedText = '';\n            }\n        }, {\n            key: 'initSelection',\n            value: function initSelection() {\n                if (this.text) {\n                    this.selectFake();\n                } else if (this.target) {\n                    this.selectTarget();\n                }\n            }\n        }, {\n            key: 'selectFake',\n            value: function selectFake() {\n                var _this = this;\n\n                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n                this.removeFake();\n\n                this.fakeHandlerCallback = function () {\n                    return _this.removeFake();\n                };\n                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n                this.fakeElem = document.createElement('textarea');\n                // Prevent zooming on iOS\n                this.fakeElem.style.fontSize = '12pt';\n                // Reset box model\n                this.fakeElem.style.border = '0';\n                this.fakeElem.style.padding = '0';\n                this.fakeElem.style.margin = '0';\n                // Move element out of screen horizontally\n                this.fakeElem.style.position = 'absolute';\n                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n                // Move element to the same position vertically\n                var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n                this.fakeElem.style.top = yPosition + 'px';\n\n                this.fakeElem.setAttribute('readonly', '');\n                this.fakeElem.value = this.text;\n\n                this.container.appendChild(this.fakeElem);\n\n                this.selectedText = (0, _select2.default)(this.fakeElem);\n                this.copyText();\n            }\n        }, {\n            key: 'removeFake',\n            value: function removeFake() {\n                if (this.fakeHandler) {\n                    this.container.removeEventListener('click', this.fakeHandlerCallback);\n                    this.fakeHandler = null;\n                    this.fakeHandlerCallback = null;\n                }\n\n                if (this.fakeElem) {\n                    this.container.removeChild(this.fakeElem);\n                    this.fakeElem = null;\n                }\n            }\n        }, {\n            key: 'selectTarget',\n            value: function selectTarget() {\n                this.selectedText = (0, _select2.default)(this.target);\n                this.copyText();\n            }\n        }, {\n            key: 'copyText',\n            value: function copyText() {\n                var succeeded = void 0;\n\n                try {\n                    succeeded = document.execCommand(this.action);\n                } catch (err) {\n                    succeeded = false;\n                }\n\n                this.handleResult(succeeded);\n            }\n        }, {\n            key: 'handleResult',\n            value: function handleResult(succeeded) {\n                this.emitter.emit(succeeded ? 'success' : 'error', {\n                    action: this.action,\n                    text: this.selectedText,\n                    trigger: this.trigger,\n                    clearSelection: this.clearSelection.bind(this)\n                });\n            }\n        }, {\n            key: 'clearSelection',\n            value: function clearSelection() {\n                if (this.trigger) {\n                    this.trigger.focus();\n                }\n\n                window.getSelection().removeAllRanges();\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.removeFake();\n            }\n        }, {\n            key: 'action',\n            set: function set() {\n                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n                this._action = action;\n\n                if (this._action !== 'copy' && this._action !== 'cut') {\n                    throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n                }\n            },\n            get: function get() {\n                return this._action;\n            }\n        }, {\n            key: 'target',\n            set: function set(target) {\n                if (target !== undefined) {\n                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                        if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                            throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                        }\n\n                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                            throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                        }\n\n                        this._target = target;\n                    } else {\n                        throw new Error('Invalid \"target\" value, use a valid Element');\n                    }\n                }\n            },\n            get: function get() {\n                return this._target;\n            }\n        }]);\n\n        return ClipboardAction;\n    }();\n\n    module.exports = ClipboardAction;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(115), __webpack_require__(185), __webpack_require__(177)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);\n        global.clipboard = mod.exports;\n    }\n})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {\n    'use strict';\n\n    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n    var _goodListener2 = _interopRequireDefault(_goodListener);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Clipboard = function (_Emitter) {\n        _inherits(Clipboard, _Emitter);\n\n        /**\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         * @param {Object} options\n         */\n        function Clipboard(trigger, options) {\n            _classCallCheck(this, Clipboard);\n\n            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n            _this.resolveOptions(options);\n            _this.listenClick(trigger);\n            return _this;\n        }\n\n        /**\n         * Defines if attributes would be resolved using internal setter functions\n         * or custom functions that were passed in the constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(Clipboard, [{\n            key: 'resolveOptions',\n            value: function resolveOptions() {\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n                this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n                this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n            }\n        }, {\n            key: 'listenClick',\n            value: function listenClick(trigger) {\n                var _this2 = this;\n\n                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n                    return _this2.onClick(e);\n                });\n            }\n        }, {\n            key: 'onClick',\n            value: function onClick(e) {\n                var trigger = e.delegateTarget || e.currentTarget;\n\n                if (this.clipboardAction) {\n                    this.clipboardAction = null;\n                }\n\n                this.clipboardAction = new _clipboardAction2.default({\n                    action: this.action(trigger),\n                    target: this.target(trigger),\n                    text: this.text(trigger),\n                    container: this.container,\n                    trigger: trigger,\n                    emitter: this\n                });\n            }\n        }, {\n            key: 'defaultAction',\n            value: function defaultAction(trigger) {\n                return getAttributeValue('action', trigger);\n            }\n        }, {\n            key: 'defaultTarget',\n            value: function defaultTarget(trigger) {\n                var selector = getAttributeValue('target', trigger);\n\n                if (selector) {\n                    return document.querySelector(selector);\n                }\n            }\n        }, {\n            key: 'defaultText',\n            value: function defaultText(trigger) {\n                return getAttributeValue('text', trigger);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.listener.destroy();\n\n                if (this.clipboardAction) {\n                    this.clipboardAction.destroy();\n                    this.clipboardAction = null;\n                }\n            }\n        }], [{\n            key: 'isSupported',\n            value: function isSupported() {\n                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n                var actions = typeof action === 'string' ? [action] : action;\n                var support = !!document.queryCommandSupported;\n\n                actions.forEach(function (action) {\n                    support = support && !!document.queryCommandSupported(action);\n                });\n\n                return support;\n            }\n        }]);\n\n        return Clipboard;\n    }(_tinyEmitter2.default);\n\n    /**\n     * Helper function to retrieve attribute value.\n     * @param {String} suffix\n     * @param {Element} element\n     */\n    function getAttributeValue(suffix, element) {\n        var attribute = 'data-clipboard-' + suffix;\n\n        if (!element.hasAttribute(attribute)) {\n            return;\n        }\n\n        return element.getAttribute(attribute);\n    }\n\n    module.exports = Clipboard;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("__webpack_require__(66);\n__webpack_require__(65);\nmodule.exports = __webpack_require__(145);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanM/MmNmNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var core  = __webpack_require__(4)\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qcz82NzA4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsdUNBQXVDLDBCQUEwQjtBQUNqRSx3Q0FBd0M7QUFDeEM7QUFDQSIsImZpbGUiOiIxMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJylcbiAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("__webpack_require__(147);\nvar $Object = __webpack_require__(4).Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzPzczOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("__webpack_require__(148);\nvar $Object = __webpack_require__(4).Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzP2I3ZDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("__webpack_require__(149);\nmodule.exports = __webpack_require__(4).Object.getPrototypeOf;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcz81MTkzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMTIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("__webpack_require__(150);\nmodule.exports = __webpack_require__(4).Object.keys;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcz9jYzNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMTIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("__webpack_require__(151);\nmodule.exports = __webpack_require__(4).Object.setPrototypeOf;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz9mOTA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMTIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("__webpack_require__(153);\n__webpack_require__(152);\n__webpack_require__(154);\n__webpack_require__(155);\nmodule.exports = __webpack_require__(4).Symbol;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanM/ZjA3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("__webpack_require__(65);\n__webpack_require__(66);\nmodule.exports = __webpack_require__(47).f('iterator');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanM/MjM4ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzP2Q1M2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("module.exports = function(){ /* empty */ };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/ZDVlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEIiLCJmaWxlIjoiMTI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(13)\n  , toLength  = __webpack_require__(143)\n  , toIndex   = __webpack_require__(142);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz82MTk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxXQUFXLGVBQWU7QUFDL0I7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIxMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(34)\n  , TAG = __webpack_require__(7)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzP2I0YjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0JBQWtCLEVBQUU7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxVQUFVO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanNcbi8vIG1vZHVsZSBpZCA9IDEyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(20)\n  , gOPS    = __webpack_require__(60)\n  , pIE     = __webpack_require__(39);\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanM/NzI3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIxMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(6).document && document.documentElement;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzP2U1YWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(34);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzPzVjZjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(34);\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcz8xODQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\nvar create         = __webpack_require__(38)\n  , descriptor     = __webpack_require__(23)\n  , setToStringTag = __webpack_require__(40)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(16)(IteratorPrototype, __webpack_require__(7)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcz8wMTI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRkFBZ0YsYUFBYSxFQUFFOztBQUUvRjtBQUNBLHFEQUFxRCwwQkFBMEI7QUFDL0U7QUFDQSIsImZpbGUiOiIxMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("module.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanM/ZTIwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFVBQVU7QUFDViIsImZpbGUiOiIxMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var getKeys   = __webpack_require__(20)\n  , toIObject = __webpack_require__(13);\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19rZXlvZi5qcz8wZDNiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2tleW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var META     = __webpack_require__(24)('meta')\n  , isObject = __webpack_require__(19)\n  , has      = __webpack_require__(11)\n  , setDesc  = __webpack_require__(12).f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !__webpack_require__(18)(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzPzU1M2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELENBQUM7QUFDRDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFNBQVM7QUFDVCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNRVRBICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJylcbiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaGFzICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHNldERlc2MgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGlkICAgICAgID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcbiAgc2V0RGVzYyhpdCwgTUVUQSwge3ZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfX0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbihpdCl7XG4gIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogICAgICBNRVRBLFxuICBORUVEOiAgICAgZmFsc2UsXG4gIGZhc3RLZXk6ICBmYXN0S2V5LFxuICBnZXRXZWFrOiAgZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gMTM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var dP       = __webpack_require__(12)\n  , anObject = __webpack_require__(14)\n  , getKeys  = __webpack_require__(20);\n\nmodule.exports = __webpack_require__(10) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzPzQ3ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZFAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIFA7XG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(13)\n  , gOPN      = __webpack_require__(59).f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanM/ZDIzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7O0FBRWxCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(19)\n  , anObject = __webpack_require__(14);\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = __webpack_require__(54)(Function.call, __webpack_require__(58).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanM/OTY2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sVUFBVSxjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRztBQUNSO0FBQ0EiLCJmaWxlIjoiMTQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(43)\n  , defined   = __webpack_require__(35);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanM/NDEzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(43)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcz85ZmQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(43)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NjJhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRCIsImZpbGUiOiIxNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gMTQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var classof   = __webpack_require__(129)\n  , ITERATOR  = __webpack_require__(7)('iterator')\n  , Iterators = __webpack_require__(22);\nmodule.exports = __webpack_require__(4).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcz85Yzg4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNsYXNzb2YgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var anObject = __webpack_require__(14)\n  , get      = __webpack_require__(144);\nmodule.exports = __webpack_require__(4).getIterator = function(it){\n  var iterFn = get(it);\n  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLmpzP2FjYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXQgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\nvar addToUnscopables = __webpack_require__(127)\n  , step             = __webpack_require__(135)\n  , Iterators        = __webpack_require__(22)\n  , toIObject        = __webpack_require__(13);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(57)(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcz8xZTA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxjQUFjO0FBQ2QsaUJBQWlCO0FBQ2pCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(15)\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: __webpack_require__(38)});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzPzkwMzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLDhCQUE4QixnQ0FBb0MiLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(15);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(10), 'Object', {defineProperty: __webpack_require__(12).f});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzP2M4MmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLHFFQUF1RSwwQ0FBMEMiLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject        = __webpack_require__(44)\n  , $getPrototypeOf = __webpack_require__(61);\n\n__webpack_require__(63)('getPrototypeOf', function(){\n  return function getPrototypeOf(it){\n    return $getPrototypeOf(toObject(it));\n  };\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcz9lYWEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(44)\n  , $keys    = __webpack_require__(20);\n\n__webpack_require__(63)('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcz9jOThmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(15);\n$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(140).set});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcz9iMTk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSw4QkFBOEIsNkNBQTRDIiwiZmlsZSI6IjE1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNTIuanMiLCJzb3VyY2VzQ29udGVudCI6W10sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n// ECMAScript 6 symbols shim\nvar global         = __webpack_require__(6)\n  , has            = __webpack_require__(11)\n  , DESCRIPTORS    = __webpack_require__(10)\n  , $export        = __webpack_require__(15)\n  , redefine       = __webpack_require__(64)\n  , META           = __webpack_require__(137).KEY\n  , $fails         = __webpack_require__(18)\n  , shared         = __webpack_require__(42)\n  , setToStringTag = __webpack_require__(40)\n  , uid            = __webpack_require__(24)\n  , wks            = __webpack_require__(7)\n  , wksExt         = __webpack_require__(47)\n  , wksDefine      = __webpack_require__(46)\n  , keyOf          = __webpack_require__(136)\n  , enumKeys       = __webpack_require__(130)\n  , isArray        = __webpack_require__(133)\n  , anObject       = __webpack_require__(14)\n  , toIObject      = __webpack_require__(13)\n  , toPrimitive    = __webpack_require__(45)\n  , createDesc     = __webpack_require__(23)\n  , _create        = __webpack_require__(38)\n  , gOPNExt        = __webpack_require__(139)\n  , $GOPD          = __webpack_require__(58)\n  , $DP            = __webpack_require__(12)\n  , $keys          = __webpack_require__(20)\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  __webpack_require__(59).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(39).f  = $propertyIsEnumerable;\n  __webpack_require__(60).f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !__webpack_require__(37)){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(16)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("__webpack_require__(46)('asyncIterator');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanM/YjhjNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("__webpack_require__(46)('observable');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcz9kYWE0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */\\n/* Document\\n   ========================================================================== */\\n/**\\n * 1. Correct the line height in all browsers.\\n * 2. Prevent adjustments of font size after orientation changes in\\n *    IE on Windows Phone and in iOS.\\n */\\nhtml {\\n  line-height: 1.15;\\n  /* 1 */\\n  -ms-text-size-adjust: 100%;\\n  /* 2 */\\n  -webkit-text-size-adjust: 100%;\\n  /* 2 */ }\\n\\n/* Sections\\n   ========================================================================== */\\n/**\\n * Remove the margin in all browsers (opinionated).\\n */\\nbody {\\n  margin: 0; }\\n\\n/**\\n * Add the correct display in IE 9-.\\n */\\narticle,\\naside,\\nfooter,\\nheader,\\nnav,\\nsection {\\n  display: block; }\\n\\n/**\\n * Correct the font size and margin on `h1` elements within `section` and\\n * `article` contexts in Chrome, Firefox, and Safari.\\n */\\nh1 {\\n  font-size: 2em;\\n  margin: 0.67em 0; }\\n\\n/* Grouping content\\n   ========================================================================== */\\n/**\\n * Add the correct display in IE 9-.\\n * 1. Add the correct display in IE.\\n */\\nfigcaption,\\nfigure,\\nmain {\\n  /* 1 */\\n  display: block; }\\n\\n/**\\n * Add the correct margin in IE 8.\\n */\\nfigure {\\n  margin: 1em 40px; }\\n\\n/**\\n * 1. Add the correct box sizing in Firefox.\\n * 2. Show the overflow in Edge and IE.\\n */\\nhr {\\n  box-sizing: content-box;\\n  /* 1 */\\n  height: 0;\\n  /* 1 */\\n  overflow: visible;\\n  /* 2 */ }\\n\\n/**\\n * 1. Correct the inheritance and scaling of font size in all browsers.\\n * 2. Correct the odd `em` font sizing in all browsers.\\n */\\npre {\\n  font-family: monospace, monospace;\\n  /* 1 */\\n  font-size: 1em;\\n  /* 2 */ }\\n\\n/* Text-level semantics\\n   ========================================================================== */\\n/**\\n * 1. Remove the gray background on active links in IE 10.\\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\\n */\\na {\\n  background-color: transparent;\\n  /* 1 */\\n  -webkit-text-decoration-skip: objects;\\n  /* 2 */ }\\n\\n/**\\n * 1. Remove the bottom border in Chrome 57- and Firefox 39-.\\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\\n */\\nabbr[title] {\\n  border-bottom: none;\\n  /* 1 */\\n  text-decoration: underline;\\n  /* 2 */\\n  text-decoration: underline dotted;\\n  /* 2 */ }\\n\\n/**\\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\\n */\\nb,\\nstrong {\\n  font-weight: inherit; }\\n\\n/**\\n * Add the correct font weight in Chrome, Edge, and Safari.\\n */\\nb,\\nstrong {\\n  font-weight: bolder; }\\n\\n/**\\n * 1. Correct the inheritance and scaling of font size in all browsers.\\n * 2. Correct the odd `em` font sizing in all browsers.\\n */\\ncode,\\nkbd,\\nsamp {\\n  font-family: monospace, monospace;\\n  /* 1 */\\n  font-size: 1em;\\n  /* 2 */ }\\n\\n/**\\n * Add the correct font style in Android 4.3-.\\n */\\ndfn {\\n  font-style: italic; }\\n\\n/**\\n * Add the correct background and color in IE 9-.\\n */\\nmark {\\n  background-color: #ff0;\\n  color: #000; }\\n\\n/**\\n * Add the correct font size in all browsers.\\n */\\nsmall {\\n  font-size: 80%; }\\n\\n/**\\n * Prevent `sub` and `sup` elements from affecting the line height in\\n * all browsers.\\n */\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline; }\\n\\nsub {\\n  bottom: -0.25em; }\\n\\nsup {\\n  top: -0.5em; }\\n\\n/* Embedded content\\n   ========================================================================== */\\n/**\\n * Add the correct display in IE 9-.\\n */\\naudio,\\nvideo {\\n  display: inline-block; }\\n\\n/**\\n * Add the correct display in iOS 4-7.\\n */\\naudio:not([controls]) {\\n  display: none;\\n  height: 0; }\\n\\n/**\\n * Remove the border on images inside links in IE 10-.\\n */\\nimg {\\n  border-style: none; }\\n\\n/**\\n * Hide the overflow in IE.\\n */\\nsvg:not(:root) {\\n  overflow: hidden; }\\n\\n/* Forms\\n   ========================================================================== */\\n/**\\n * 1. Change the font styles in all browsers (opinionated).\\n * 2. Remove the margin in Firefox and Safari.\\n */\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  font-family: sans-serif;\\n  /* 1 */\\n  font-size: 100%;\\n  /* 1 */\\n  line-height: 1.15;\\n  /* 1 */\\n  margin: 0;\\n  /* 2 */ }\\n\\n/**\\n * Show the overflow in IE.\\n * 1. Show the overflow in Edge.\\n */\\nbutton,\\ninput {\\n  /* 1 */\\n  overflow: visible; }\\n\\n/**\\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\\n * 1. Remove the inheritance of text transform in Firefox.\\n */\\nbutton,\\nselect {\\n  /* 1 */\\n  text-transform: none; }\\n\\n/**\\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\\n *    controls in Android 4.\\n * 2. Correct the inability to style clickable types in iOS and Safari.\\n */\\nbutton,\\nhtml [type=\\"button\\"],\\n[type=\\"reset\\"],\\n[type=\\"submit\\"] {\\n  -webkit-appearance: button;\\n  /* 2 */ }\\n\\n/**\\n * Remove the inner border and padding in Firefox.\\n */\\nbutton::-moz-focus-inner,\\n[type=\\"button\\"]::-moz-focus-inner,\\n[type=\\"reset\\"]::-moz-focus-inner,\\n[type=\\"submit\\"]::-moz-focus-inner {\\n  border-style: none;\\n  padding: 0; }\\n\\n/**\\n * Restore the focus styles unset by the previous rule.\\n */\\nbutton:-moz-focusring,\\n[type=\\"button\\"]:-moz-focusring,\\n[type=\\"reset\\"]:-moz-focusring,\\n[type=\\"submit\\"]:-moz-focusring {\\n  outline: 1px dotted ButtonText; }\\n\\n/**\\n * Correct the padding in Firefox.\\n */\\nfieldset {\\n  padding: 0.35em 0.75em 0.625em; }\\n\\n/**\\n * 1. Correct the text wrapping in Edge and IE.\\n * 2. Correct the color inheritance from `fieldset` elements in IE.\\n * 3. Remove the padding so developers are not caught out when they zero out\\n *    `fieldset` elements in all browsers.\\n */\\nlegend {\\n  box-sizing: border-box;\\n  /* 1 */\\n  color: inherit;\\n  /* 2 */\\n  display: table;\\n  /* 1 */\\n  max-width: 100%;\\n  /* 1 */\\n  padding: 0;\\n  /* 3 */\\n  white-space: normal;\\n  /* 1 */ }\\n\\n/**\\n * 1. Add the correct display in IE 9-.\\n * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.\\n */\\nprogress {\\n  display: inline-block;\\n  /* 1 */\\n  vertical-align: baseline;\\n  /* 2 */ }\\n\\n/**\\n * Remove the default vertical scrollbar in IE.\\n */\\ntextarea {\\n  overflow: auto; }\\n\\n/**\\n * 1. Add the correct box sizing in IE 10-.\\n * 2. Remove the padding in IE 10-.\\n */\\n[type=\\"checkbox\\"],\\n[type=\\"radio\\"] {\\n  box-sizing: border-box;\\n  /* 1 */\\n  padding: 0;\\n  /* 2 */ }\\n\\n/**\\n * Correct the cursor style of increment and decrement buttons in Chrome.\\n */\\n[type=\\"number\\"]::-webkit-inner-spin-button,\\n[type=\\"number\\"]::-webkit-outer-spin-button {\\n  height: auto; }\\n\\n/**\\n * 1. Correct the odd appearance in Chrome and Safari.\\n * 2. Correct the outline style in Safari.\\n */\\n[type=\\"search\\"] {\\n  -webkit-appearance: textfield;\\n  /* 1 */\\n  outline-offset: -2px;\\n  /* 2 */ }\\n\\n/**\\n * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.\\n */\\n[type=\\"search\\"]::-webkit-search-cancel-button,\\n[type=\\"search\\"]::-webkit-search-decoration {\\n  -webkit-appearance: none; }\\n\\n/**\\n * 1. Correct the inability to style clickable types in iOS and Safari.\\n * 2. Change font properties to `inherit` in Safari.\\n */\\n::-webkit-file-upload-button {\\n  -webkit-appearance: button;\\n  /* 1 */\\n  font: inherit;\\n  /* 2 */ }\\n\\n/* Interactive\\n   ========================================================================== */\\n/*\\n * Add the correct display in IE 9-.\\n * 1. Add the correct display in Edge, IE, and Firefox.\\n */\\ndetails,\\nmenu {\\n  display: block; }\\n\\n/*\\n * Add the correct display in all browsers.\\n */\\nsummary {\\n  display: list-item; }\\n\\n/* Scripting\\n   ========================================================================== */\\n/**\\n * Add the correct display in IE 9-.\\n */\\ncanvas {\\n  display: inline-block; }\\n\\n/**\\n * Add the correct display in IE.\\n */\\ntemplate {\\n  display: none; }\\n\\n/* Hidden\\n   ========================================================================== */\\n/**\\n * Add the correct display in IE 10-.\\n */\\n[hidden] {\\n  display: none; }\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-zoom-controls[data-v-07c9ed4a] {\\n  display: flex;\\n  flex-direction: column;\\n  position: absolute;\\n  justify-content: space-around;\\n  z-index: 2;\\n  background-color: rgba(0, 0, 0, 0.75);\\n  margin: 1rem;\\n  border-radius: 25px;\\n  bottom: 0;\\n  height: 80px;\\n  right: 0;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-zoom-controls[data-v-07c9ed4a] {\\n      right: initial;\\n      left: 100px;\\n}\\n}\\n#lv-zoom-controls .btn-control[data-v-07c9ed4a]:not(:nth-child(2)) {\\n    padding: 0.5rem;\\n}\\n#lv-zoom-controls .btn-control[data-v-07c9ed4a]:nth-child(2) {\\n    padding: 0 0.5rem;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9ab29tLnZ1ZT82N2MxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsK0RBQWdFLGtCQUFrQiwyQkFBMkIsdUJBQXVCLGtDQUFrQyxlQUFlLDBDQUEwQyxpQkFBaUIsd0JBQXdCLGNBQWMsaUJBQWlCLGFBQWEsR0FBRyx3Q0FBd0Msc0NBQXNDLHVCQUF1QixvQkFBb0IsR0FBRyxHQUFHLHNFQUFzRSxzQkFBc0IsR0FBRyxnRUFBZ0Usd0JBQXdCLEdBQUc7O0FBRWhuQiIsImZpbGUiOiIxNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4jbHYtem9vbS1jb250cm9sc1tkYXRhLXYtMDdjOWVkNGFdIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICB6LWluZGV4OiAyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjc1KTtcXG4gIG1hcmdpbjogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICBib3R0b206IDA7XFxuICBoZWlnaHQ6IDgwcHg7XFxuICByaWdodDogMDtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4jbHYtem9vbS1jb250cm9sc1tkYXRhLXYtMDdjOWVkNGFdIHtcXG4gICAgICByaWdodDogaW5pdGlhbDtcXG4gICAgICBsZWZ0OiAxMDBweDtcXG59XFxufVxcbiNsdi16b29tLWNvbnRyb2xzIC5idG4tY29udHJvbFtkYXRhLXYtMDdjOWVkNGFdOm5vdCg6bnRoLWNoaWxkKDIpKSB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbTtcXG59XFxuI2x2LXpvb20tY29udHJvbHMgLmJ0bi1jb250cm9sW2RhdGEtdi0wN2M5ZWQ0YV06bnRoLWNoaWxkKDIpIHtcXG4gICAgcGFkZGluZzogMCAwLjVyZW07XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0wN2M5ZWQ0YVwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL1pvb20udnVlXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n@keyframes fadeinup {\\n0% {\\n    opacity: 0;\\n    bottom: -15px;\\n    max-height: 0;\\n    max-width: 0;\\n    margin-top: 0;\\n}\\n30% {\\n    opacity: 0.8;\\n    bottom: -3px;\\n}\\n100% {\\n    opacity: 1;\\n    bottom: 0;\\n    max-height: 200px;\\n    margin-top: 12px;\\n    max-width: 400px;\\n}\\n}\\n@keyframes fadeoutdown {\\n0% {\\n    opacity: 1;\\n    bottom: 0;\\n}\\n30% {\\n    opacity: 0.2;\\n    bottom: -3px;\\n}\\n100% {\\n    opacity: 0;\\n    bottom: -15px;\\n}\\n}\\n@keyframes appear {\\n0% {\\n    opacity: 0;\\n}\\n30% {\\n    opacity: 0.5;\\n}\\n100% {\\n    opacity: 0.6;\\n}\\n}\\n@keyframes disappear {\\n0% {\\n    opacity: 0.6;\\n}\\n30% {\\n    opacity: 0.1;\\n}\\n100% {\\n    opacity: 0;\\n}\\n}\\n.notyf__icon--alert, .notyf__icon--confirm {\\n  height: 21px;\\n  width: 21px;\\n  background: white;\\n  border-radius: 50%;\\n  display: block;\\n  margin: 0 auto;\\n  position: relative;\\n}\\n.notyf__icon--alert:after, .notyf__icon--alert:before {\\n  content: \\"\\";\\n  background: #ed3d3d;\\n  display: block;\\n  position: absolute;\\n  width: 3px;\\n  border-radius: 3px;\\n  left: 9px;\\n}\\n.notyf__icon--alert:after {\\n  height: 3px;\\n  top: 14px;\\n}\\n.notyf__icon--alert:before {\\n  height: 8px;\\n  top: 4px;\\n}\\n.notyf__icon--confirm:after, .notyf__icon--confirm:before {\\n  content: \\"\\";\\n  background: #3dc763;\\n  display: block;\\n  position: absolute;\\n  width: 3px;\\n  border-radius: 3px;\\n}\\n.notyf__icon--confirm:after {\\n  height: 6px;\\n  transform: rotate(-45deg);\\n  top: 9px;\\n  left: 6px;\\n}\\n.notyf__icon--confirm:before {\\n  height: 11px;\\n  transform: rotate(45deg);\\n  top: 5px;\\n  left: 10px;\\n}\\n.notyf__toast {\\n  display: block;\\n  overflow: hidden;\\n  animation: fadeinup 0.3s forwards;\\n  -webkit-box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.45);\\n  -moz-box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.45);\\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.45);\\n  position: relative;\\n  padding-right: 13px;\\n}\\n.notyf__toast.notyf--alert {\\n    background: #ed3d3d;\\n}\\n.notyf__toast.notyf--confirm {\\n    background: #3dc763;\\n}\\n.notyf__toast.notyf--disappear {\\n    animation: fadeoutdown 0.3s 1 forwards;\\n    animation-delay: 0.25s;\\n}\\n.notyf__toast.notyf--disappear .notyf__message {\\n      opacity: 1;\\n      animation: fadeoutdown 0.3s 1 forwards;\\n      animation-delay: 0.1s;\\n}\\n.notyf__toast.notyf--disappear .notyf__icon {\\n      opacity: 1;\\n      animation: disappear 0.3s 1 forwards;\\n}\\n.notyf__wrapper {\\n  display: table;\\n  width: 100%;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-right: 15px;\\n  border-radius: 3px;\\n}\\n.notyf__icon {\\n  display: table-cell;\\n  width: 20%;\\n  text-align: center;\\n  vertical-align: middle;\\n  font-size: 1.3em;\\n  opacity: 0;\\n  animation: appear 0.5s forwards;\\n  animation-delay: 0.25s;\\n}\\n.notyf__message {\\n  display: table-cell;\\n  width: 80%;\\n  vertical-align: middle;\\n  position: relative;\\n  opacity: 0;\\n  animation: fadeinup 0.3s forwards;\\n  animation-delay: 0.15s;\\n}\\n.notyf {\\n  position: fixed;\\n  bottom: 20px;\\n  right: 30px;\\n  width: 20%;\\n  color: white;\\n  z-index: 9999;\\n}\\n\\n/* Small screens */\\n@media only screen and (max-width: 736px) {\\n.notyf__container {\\n    width: 90%;\\n    margin: 0 auto;\\n    display: block;\\n    right: 0;\\n    left: 0;\\n}\\n}\\n.btn {\\n  cursor: default;\\n  font-size: 14px;\\n  background-color: transparent;\\n  border: 1px solid #fff;\\n  color: #fff;\\n  padding: 8px 26px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  touch-action: manipulation;\\n}\\n.btn.btn-green {\\n    background-color: #4DAF7C;\\n    border-color: #4DAF7C;\\n}\\n.btn.btn-green:hover, .btn.btn-green:focus {\\n      background-color: #3d8c63;\\n      border-color: #3d8c63;\\n}\\n.btn.btn-control {\\n    display: flex !important;\\n    background: none;\\n    text-shadow: 0 0 5px #000000;\\n    font-size: 1.25rem;\\n    padding: 0.5rem;\\n    border: none;\\n    outline: none !important;\\n    opacity: 0.8;\\n    margin: 0;\\n}\\n@media screen and (min-width: 768px) {\\n.btn.btn-control {\\n        padding: 0.5rem 0.75rem;\\n}\\n}\\n.btn.btn-control:hover, .btn.btn-control:focus {\\n      opacity: 1;\\n}\\n.btn.btn-block {\\n    width: 100%;\\n    display: block;\\n}\\n.btn.btn-hud {\\n    display: flex !important;\\n    justify-content: center;\\n    height: 32px;\\n    width: 32px;\\n    border: none;\\n    padding: 5px;\\n    z-index: 2;\\n    border-radius: 25px;\\n    background-color: rgba(0, 0, 0, 0.75);\\n}\\n.btn.btn-hud svg {\\n      display: flex;\\n      opacity: 0.8;\\n}\\n.btn.btn-hud[disabled] {\\n      opacity: 0.2;\\n}\\n#lv-viewer {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  width: 100%;\\n  left: 0;\\n  margin: 0;\\n  top: 0;\\n  overflow: hidden;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-viewer {\\n      flex-direction: row;\\n}\\n}\\n#lv-viewer-wrapper {\\n  display: flex;\\n  position: relative;\\n  height: 100%;\\n  width: 100%;\\n  background-color: #000;\\n}\\n#lv-viewer-container {\\n  flex: 1 1 auto;\\n}\\n#lv-browse-next,\\n#lv-browse-previous {\\n  margin: 1rem;\\n  height: 3rem;\\n  width: 3rem;\\n  position: absolute !important;\\n  top: calc(50% - 2rem);\\n}\\n#lv-browse-previous {\\n  left: 0;\\n}\\n#lv-browse-previous svg {\\n    margin-right: 2px;\\n}\\n#lv-browse-next {\\n  right: 0;\\n}\\n#lv-browse-next svg {\\n    margin-left: 2px;\\n}\\n.openseadragon-container {\\n  height: 100%;\\n}\\n.openseadragon-container .openseadragon-message {\\n    color: #FFF;\\n}\\n@media screen and (min-width: 768px) {\\n.notyf {\\n    right: 280px;\\n}\\n}\\n@media screen and (max-width: 767px) {\\n.notyf {\\n    bottom: initial;\\n    top: 0;\\n    right: 0;\\n    width: 100%;\\n}\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-browse-modal ul {\\n  list-style: none;\\n  -moz-column-count: 2;\\n  -webkit-column-count: 2;\\n  column-count: 2;\\n  -moz-column-gap: 5px;\\n  -webkit-column-gap: 5px;\\n  column-gap: 5px;\\n}\\n@media (min-width: 992px) {\\n#lv-browse-modal ul {\\n      -moz-column-count: 4;\\n      -webkit-column-count: 4;\\n      column-count: 4;\\n}\\n}\\n#lv-browse-modal li {\\n  display: inline-block;\\n  width: 128px;\\n  margin-bottom: 30px;\\n  border: 1px solid #404040;\\n  position: relative;\\n}\\n#lv-browse-modal li:not(.task-complete):hover, #lv-browse-modal li:not(.task-complete):focus {\\n    border-color: #666666;\\n}\\n#lv-browse-modal li.task-complete img {\\n    opacity: 0.2;\\n}\\n#lv-browse-modal li figure {\\n    margin: 5px;\\n}\\n#lv-browse-modal li img {\\n    max-width: 100%;\\n}\\n#lv-browse-modal li figcaption {\\n    text-align: center;\\n    font-family: Arial, Helvetica, sans-serif;\\n    font-size: 0.85rem;\\n    margin: 5px 5px 3px 5px;\\n}\\n#lv-browse-modal li .complete-icon {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n#lv-browse-modal li .complete-icon svg {\\n      height: 24px;\\n      width: auto;\\n      color: #4DAF7C;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvQnJvd3NlLnZ1ZT85YzkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsZ0RBQWlELHFCQUFxQix5QkFBeUIsNEJBQTRCLG9CQUFvQix5QkFBeUIsNEJBQTRCLG9CQUFvQixHQUFHLDZCQUE2Qix1QkFBdUIsNkJBQTZCLGdDQUFnQyx3QkFBd0IsR0FBRyxHQUFHLHVCQUF1QiwwQkFBMEIsaUJBQWlCLHdCQUF3Qiw4QkFBOEIsdUJBQXVCLEdBQUcsZ0dBQWdHLDRCQUE0QixHQUFHLHlDQUF5QyxtQkFBbUIsR0FBRyw4QkFBOEIsa0JBQWtCLEdBQUcsMkJBQTJCLHNCQUFzQixHQUFHLGtDQUFrQyx5QkFBeUIsZ0RBQWdELHlCQUF5Qiw4QkFBOEIsR0FBRyxzQ0FBc0Msb0JBQW9CLDBCQUEwQiw4QkFBOEIsR0FBRywwQ0FBMEMscUJBQXFCLG9CQUFvQix1QkFBdUIsR0FBRzs7QUFFeHFDIiwiZmlsZSI6IjE1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNsdi1icm93c2UtbW9kYWwgdWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIC1tb3otY29sdW1uLWNvdW50OiAyO1xcbiAgLXdlYmtpdC1jb2x1bW4tY291bnQ6IDI7XFxuICBjb2x1bW4tY291bnQ6IDI7XFxuICAtbW96LWNvbHVtbi1nYXA6IDVweDtcXG4gIC13ZWJraXQtY29sdW1uLWdhcDogNXB4O1xcbiAgY29sdW1uLWdhcDogNXB4O1xcbn1cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4jbHYtYnJvd3NlLW1vZGFsIHVsIHtcXG4gICAgICAtbW96LWNvbHVtbi1jb3VudDogNDtcXG4gICAgICAtd2Via2l0LWNvbHVtbi1jb3VudDogNDtcXG4gICAgICBjb2x1bW4tY291bnQ6IDQ7XFxufVxcbn1cXG4jbHYtYnJvd3NlLW1vZGFsIGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMjhweDtcXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MDQwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4jbHYtYnJvd3NlLW1vZGFsIGxpOm5vdCgudGFzay1jb21wbGV0ZSk6aG92ZXIsICNsdi1icm93c2UtbW9kYWwgbGk6bm90KC50YXNrLWNvbXBsZXRlKTpmb2N1cyB7XFxuICAgIGJvcmRlci1jb2xvcjogIzY2NjY2NjtcXG59XFxuI2x2LWJyb3dzZS1tb2RhbCBsaS50YXNrLWNvbXBsZXRlIGltZyB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG59XFxuI2x2LWJyb3dzZS1tb2RhbCBsaSBmaWd1cmUge1xcbiAgICBtYXJnaW46IDVweDtcXG59XFxuI2x2LWJyb3dzZS1tb2RhbCBsaSBpbWcge1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcbiNsdi1icm93c2UtbW9kYWwgbGkgZmlnY2FwdGlvbiB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcXG4gICAgbWFyZ2luOiA1cHggNXB4IDNweCA1cHg7XFxufVxcbiNsdi1icm93c2UtbW9kYWwgbGkgLmNvbXBsZXRlLWljb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuI2x2LWJyb3dzZS1tb2RhbCBsaSAuY29tcGxldGUtaWNvbiBzdmcge1xcbiAgICAgIGhlaWdodDogMjRweDtcXG4gICAgICB3aWR0aDogYXV0bztcXG4gICAgICBjb2xvcjogIzREQUY3QztcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTI4ZDMwM2EyXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL21vZGFscy9Ccm93c2UudnVlXG4vLyBtb2R1bGUgaWQgPSAxNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#home-container {\\n  font-family: Arial, Helvetica, sans-serif;\\n  margin: 0;\\n  background-color: #F8F8F8;\\n  color: #1F1E38;\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-direction: column;\\n}\\n#home-container h1 {\\n    margin: 0;\\n    font-weight: 200;\\n}\\n#home-container p.lead {\\n    font-weight: bold;\\n    color: #5F5F5F;\\n}\\n#home-container button {\\n    color: white;\\n    background: #59ABE3;\\n    padding: 12px 26px;\\n    margin: 0.5rem;\\n    letter-spacing: 0.8px;\\n    font-size: 1.25rem;\\n    border: none;\\n}\\n#home-container #doc-link {\\n    display: flex;\\n    align-items: center;\\n    margin-top: 1em;\\n    text-decoration: none;\\n}\\n#home-container #doc-link svg {\\n      margin-right: 5px;\\n}\\n#home-container #doc-link .text {\\n      font-size: 0.85rem;\\n      color: #5F5F5F;\\n      font-family: Arial, Helvetica, sans-serif;\\n}\\n#mode-buttons {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.viewer-container {\\n  margin: 0;\\n  height: 100vh;\\n}\\n.notyf {\\n  right: 280px;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9BcHAudnVlPzZmZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSw0Q0FBNkMsOENBQThDLGNBQWMsOEJBQThCLG1CQUFtQixrQkFBa0Isa0JBQWtCLDRCQUE0Qix3QkFBd0IsMkJBQTJCLEdBQUcsc0JBQXNCLGdCQUFnQix1QkFBdUIsR0FBRywwQkFBMEIsd0JBQXdCLHFCQUFxQixHQUFHLDBCQUEwQixtQkFBbUIsMEJBQTBCLHlCQUF5QixxQkFBcUIsNEJBQTRCLHlCQUF5QixtQkFBbUIsR0FBRyw2QkFBNkIsb0JBQW9CLDBCQUEwQixzQkFBc0IsNEJBQTRCLEdBQUcsaUNBQWlDLDBCQUEwQixHQUFHLG1DQUFtQywyQkFBMkIsdUJBQXVCLGtEQUFrRCxHQUFHLGlCQUFpQixrQkFBa0IsMkJBQTJCLEdBQUcscUJBQXFCLGNBQWMsa0JBQWtCLEdBQUcsVUFBVSxpQkFBaUIsR0FBRzs7QUFFempDIiwiZmlsZSI6IjE2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNob21lLWNvbnRhaW5lciB7XFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gIG1hcmdpbjogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGOEY4Rjg7XFxuICBjb2xvcjogIzFGMUUzODtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuI2hvbWUtY29udGFpbmVyIGgxIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbn1cXG4jaG9tZS1jb250YWluZXIgcC5sZWFkIHtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGNvbG9yOiAjNUY1RjVGO1xcbn1cXG4jaG9tZS1jb250YWluZXIgYnV0dG9uIHtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBiYWNrZ3JvdW5kOiAjNTlBQkUzO1xcbiAgICBwYWRkaW5nOiAxMnB4IDI2cHg7XFxuICAgIG1hcmdpbjogMC41cmVtO1xcbiAgICBsZXR0ZXItc3BhY2luZzogMC44cHg7XFxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgYm9yZGVyOiBub25lO1xcbn1cXG4jaG9tZS1jb250YWluZXIgI2RvYy1saW5rIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMWVtO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbiNob21lLWNvbnRhaW5lciAjZG9jLWxpbmsgc3ZnIHtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcXG59XFxuI2hvbWUtY29udGFpbmVyICNkb2MtbGluayAudGV4dCB7XFxuICAgICAgZm9udC1zaXplOiAwLjg1cmVtO1xcbiAgICAgIGNvbG9yOiAjNUY1RjVGO1xcbiAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbn1cXG4jbW9kZS1idXR0b25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG4udmlld2VyLWNvbnRhaW5lciB7XFxuICBtYXJnaW46IDA7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbn1cXG4ubm90eWYge1xcbiAgcmlnaHQ6IDI4MHB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMzhiM2I2NDdcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vZGVtby9zcmMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\ninput,\\nselect,\\ntextarea {\\n  margin: 10px 0;\\n  display: block;\\n  width: 100%;\\n  padding: 10px;\\n  line-height: 1.25;\\n  color: #0d0d0d;\\n  background-image: none;\\n  background-clip: padding-box;\\n  border: 1px solid rgba(0, 0, 0, 0.15);\\n  transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;\\n  touch-action: manipulation;\\n  font-family: Arial, Helvetica, sans-serif;\\n  box-sizing: border-box;\\n}\\ninput:focus,\\n  select:focus,\\n  textarea:focus {\\n    border-color: #3498DB;\\n    outline: none;\\n    box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);\\n}\\nlabel {\\n  text-transform: uppercase;\\n  font-family: Arial, sans-serif;\\n  font-size: 0.85rem;\\n  letter-spacing: 1px;\\n}\\ntextarea {\\n  overflow: auto;\\n}\\n.form-group.show-errors.error input,\\n.form-group.show-errors.error select,\\n.form-group.show-errors.error textarea {\\n  border: 1px solid rgba(217, 30, 24, 0.75);\\n}\\n.form-group.show-errors .errors {\\n  display: block;\\n  margin-top: 5px;\\n  color: #D91E18;\\n  font-weight: bold;\\n}\\n.form-group .errors {\\n  display: none;\\n}\\n.form-group .field-wrap {\\n  margin-top: 2px;\\n}\\n#lv-sidebar-transcribe-item {\\n  flex: 1 1 auto;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 1rem;\\n}\\n#lv-sidebar-transcribe-item fieldset {\\n    border: none;\\n    padding: 0;\\n}\\n#lv-sidebar-transcribe-item .form-group {\\n    margin-bottom: 1rem;\\n}\\n#lv-form {\\n  flex: 1 1 auto;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1RyYW5zY3JpYmUudnVlPzA1MjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSxzREFBdUQsbUJBQW1CLG1CQUFtQixnQkFBZ0Isa0JBQWtCLHNCQUFzQixtQkFBbUIsMkJBQTJCLGlDQUFpQywwQ0FBMEMsNEVBQTRFLCtCQUErQiw4Q0FBOEMsMkJBQTJCLEdBQUcsbURBQW1ELDRCQUE0QixvQkFBb0Isa0RBQWtELEdBQUcsU0FBUyw4QkFBOEIsbUNBQW1DLHVCQUF1Qix3QkFBd0IsR0FBRyxZQUFZLG1CQUFtQixHQUFHLHVIQUF1SCw4Q0FBOEMsR0FBRyxtQ0FBbUMsbUJBQW1CLG9CQUFvQixtQkFBbUIsc0JBQXNCLEdBQUcsdUJBQXVCLGtCQUFrQixHQUFHLDJCQUEyQixvQkFBb0IsR0FBRywrQkFBK0IsbUJBQW1CLGtCQUFrQiwyQkFBMkIscUJBQXFCLEdBQUcsd0NBQXdDLG1CQUFtQixpQkFBaUIsR0FBRywyQ0FBMkMsMEJBQTBCLEdBQUcsWUFBWSxtQkFBbUIsR0FBRzs7QUFFdjZDIiwiZmlsZSI6IjE2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmlucHV0LFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XFxuICBjb2xvcjogIzBkMGQwZDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjE1KTtcXG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cyxib3gtc2hhZG93IGVhc2UtaW4tb3V0IDAuMTVzO1xcbiAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmlucHV0OmZvY3VzLFxcbiAgc2VsZWN0OmZvY3VzLFxcbiAgdGV4dGFyZWE6Zm9jdXMge1xcbiAgICBib3JkZXItY29sb3I6ICMzNDk4REI7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJveC1zaGFkb3c6IDAgMCA1cHggcmdiYSg1MiwgMTUyLCAyMTksIDAuNSk7XFxufVxcbmxhYmVsIHtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDAuODVyZW07XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcbn1cXG50ZXh0YXJlYSB7XFxuICBvdmVyZmxvdzogYXV0bztcXG59XFxuLmZvcm0tZ3JvdXAuc2hvdy1lcnJvcnMuZXJyb3IgaW5wdXQsXFxuLmZvcm0tZ3JvdXAuc2hvdy1lcnJvcnMuZXJyb3Igc2VsZWN0LFxcbi5mb3JtLWdyb3VwLnNob3ctZXJyb3JzLmVycm9yIHRleHRhcmVhIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjE3LCAzMCwgMjQsIDAuNzUpO1xcbn1cXG4uZm9ybS1ncm91cC5zaG93LWVycm9ycyAuZXJyb3JzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgY29sb3I6ICNEOTFFMTg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuLmZvcm0tZ3JvdXAgLmVycm9ycyB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4uZm9ybS1ncm91cCAuZmllbGQtd3JhcCB7XFxuICBtYXJnaW4tdG9wOiAycHg7XFxufVxcbiNsdi1zaWRlYmFyLXRyYW5zY3JpYmUtaXRlbSB7XFxuICBmbGV4OiAxIDEgYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG59XFxuI2x2LXNpZGViYXItdHJhbnNjcmliZS1pdGVtIGZpZWxkc2V0IHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG4jbHYtc2lkZWJhci10cmFuc2NyaWJlLWl0ZW0gLmZvcm0tZ3JvdXAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG4jbHYtZm9ybSB7XFxuICBmbGV4OiAxIDEgYXV0bztcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTRiNDgxZmI4XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL3NpZGViYXIvaXRlbXMvVHJhbnNjcmliZS52dWVcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-help-modal ul[data-v-5a724e4e] {\\n  padding-left: 0;\\n  list-style: none;\\n}\\n#lv-help-modal li[data-v-5a724e4e] {\\n  margin-bottom: 5px;\\n}\\n#lv-help-modal svg[data-v-5a724e4e] {\\n  margin-right: 8px;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvSGVscC52dWU/M2Y5MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLCtEQUFnRSxvQkFBb0IscUJBQXFCLEdBQUcsc0NBQXNDLHVCQUF1QixHQUFHLHVDQUF1QyxzQkFBc0IsR0FBRzs7QUFFNU8iLCJmaWxlIjoiMTYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2x2LWhlbHAtbW9kYWwgdWxbZGF0YS12LTVhNzI0ZTRlXSB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG4jbHYtaGVscC1tb2RhbCBsaVtkYXRhLXYtNWE3MjRlNGVdIHtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG59XFxuI2x2LWhlbHAtbW9kYWwgc3ZnW2RhdGEtdi01YTcyNGU0ZV0ge1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01YTcyNGU0ZVwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL21vZGFscy9IZWxwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-pan-controls[data-v-6b792a45] {\\n  position: absolute;\\n  z-index: 2;\\n  background-color: rgba(0, 0, 0, 0.75);\\n  margin: 1rem;\\n  border-radius: 50%;\\n  bottom: 0;\\n  width: 80px;\\n  height: 80px;\\n}\\n#lv-pan-controls .btn-control[data-v-6b792a45] {\\n    display: flex;\\n    justify-content: center;\\n    position: absolute;\\n    padding: 0.5rem;\\n}\\n#lv-pan-controls #pan-up[data-v-6b792a45] {\\n    flex-direction: row;\\n    width: 100%;\\n    top: 0;\\n}\\n#lv-pan-controls #pan-down[data-v-6b792a45] {\\n    flex-direction: row;\\n    width: 100%;\\n    bottom: 0;\\n}\\n#lv-pan-controls #pan-left[data-v-6b792a45] {\\n    flex-direction: column;\\n    height: 100%;\\n    left: 0;\\n}\\n#lv-pan-controls #pan-right[data-v-6b792a45] {\\n    flex-direction: column;\\n    height: 100%;\\n    right: 0;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9QYW4udnVlPzEzYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSw4REFBK0QsdUJBQXVCLGVBQWUsMENBQTBDLGlCQUFpQix1QkFBdUIsY0FBYyxnQkFBZ0IsaUJBQWlCLEdBQUcsa0RBQWtELG9CQUFvQiw4QkFBOEIseUJBQXlCLHNCQUFzQixHQUFHLDZDQUE2QywwQkFBMEIsa0JBQWtCLGFBQWEsR0FBRywrQ0FBK0MsMEJBQTBCLGtCQUFrQixnQkFBZ0IsR0FBRywrQ0FBK0MsNkJBQTZCLG1CQUFtQixjQUFjLEdBQUcsZ0RBQWdELDZCQUE2QixtQkFBbUIsZUFBZSxHQUFHOztBQUV4ekIiLCJmaWxlIjoiMTYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2x2LXBhbi1jb250cm9sc1tkYXRhLXYtNmI3OTJhNDVdIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xcbiAgbWFyZ2luOiAxcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYm90dG9tOiAwO1xcbiAgd2lkdGg6IDgwcHg7XFxuICBoZWlnaHQ6IDgwcHg7XFxufVxcbiNsdi1wYW4tY29udHJvbHMgLmJ0bi1jb250cm9sW2RhdGEtdi02Yjc5MmE0NV0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBwYWRkaW5nOiAwLjVyZW07XFxufVxcbiNsdi1wYW4tY29udHJvbHMgI3Bhbi11cFtkYXRhLXYtNmI3OTJhNDVdIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHRvcDogMDtcXG59XFxuI2x2LXBhbi1jb250cm9scyAjcGFuLWRvd25bZGF0YS12LTZiNzkyYTQ1XSB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBib3R0b206IDA7XFxufVxcbiNsdi1wYW4tY29udHJvbHMgI3Bhbi1sZWZ0W2RhdGEtdi02Yjc5MmE0NV0ge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGxlZnQ6IDA7XFxufVxcbiNsdi1wYW4tY29udHJvbHMgI3Bhbi1yaWdodFtkYXRhLXYtNmI3OTJhNDVdIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICByaWdodDogMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTZiNzkyYTQ1XCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvUGFuLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n.btn {\\n  cursor: default;\\n  font-size: 14px;\\n  background-color: transparent;\\n  border: 1px solid #fff;\\n  color: #fff;\\n  padding: 8px 26px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  touch-action: manipulation;\\n}\\n.btn.btn-green {\\n    background-color: #4DAF7C;\\n    border-color: #4DAF7C;\\n}\\n.btn.btn-green:hover, .btn.btn-green:focus {\\n      background-color: #3d8c63;\\n      border-color: #3d8c63;\\n}\\n.btn.btn-control {\\n    display: flex !important;\\n    background: none;\\n    text-shadow: 0 0 5px #000000;\\n    font-size: 1.25rem;\\n    padding: 0.5rem;\\n    border: none;\\n    outline: none !important;\\n    opacity: 0.8;\\n    margin: 0;\\n}\\n@media screen and (min-width: 768px) {\\n.btn.btn-control {\\n        padding: 0.5rem 0.75rem;\\n}\\n}\\n.btn.btn-control:hover, .btn.btn-control:focus {\\n      opacity: 1;\\n}\\n.btn.btn-block {\\n    width: 100%;\\n    display: block;\\n}\\n.btn.btn-hud {\\n    display: flex !important;\\n    justify-content: center;\\n    height: 32px;\\n    width: 32px;\\n    border: none;\\n    padding: 5px;\\n    z-index: 2;\\n    border-radius: 25px;\\n    background-color: rgba(0, 0, 0, 0.75);\\n}\\n.btn.btn-hud svg {\\n      display: flex;\\n      opacity: 0.8;\\n}\\n.btn.btn-hud[disabled] {\\n      opacity: 0.2;\\n}\\n.lv-modal {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n}\\n.lv-modal .lv-modal-mask {\\n    position: fixed;\\n    z-index: 9998;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-color: rgba(0, 0, 0, 0.5);\\n    display: table;\\n    transition: opacity 350ms ease;\\n}\\n.lv-modal .lv-modal-wrapper {\\n    display: table-cell;\\n    vertical-align: middle;\\n}\\n.lv-modal .lv-modal-container {\\n    display: flex;\\n    flex-direction: column;\\n    color: #fff;\\n    background-color: #0d0d0d;\\n    margin-top: 2em;\\n    max-height: calc(100vh - 4em);\\n    width: auto;\\n    margin: 0px auto;\\n    overflow: hidden;\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);\\n    border: 1px solid #cccccc;\\n    transition: all 350ms ease;\\n}\\n@media screen and (min-width: 576px) {\\n.lv-modal .lv-modal-container {\\n        max-width: 500px;\\n        margin: 30px auto;\\n}\\n}\\n@media screen and (min-width: 992px) {\\n.lv-modal .lv-modal-container {\\n        max-width: 800px;\\n}\\n}\\n.lv-modal .lv-modal-header {\\n    margin-top: 0;\\n    padding: 20px 30px;\\n    border-bottom: 1px solid #cccccc;\\n    flex-direction: row;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n.lv-modal .lv-modal-header h1, .lv-modal .lv-modal-header h2, .lv-modal .lv-modal-header h3, .lv-modal .lv-modal-header h4, .lv-modal .lv-modal-header h5, .lv-modal .lv-modal-header h6 {\\n      margin: 0;\\n}\\n.lv-modal .lv-modal-header .close {\\n      padding: 0;\\n      cursor: pointer;\\n      background: 0 0;\\n      border: 0;\\n      -webkit-appearance: none;\\n      float: right;\\n      font-size: 1.25rem;\\n      font-weight: 200;\\n      line-height: 1;\\n}\\n.lv-modal .lv-modal-body {\\n    padding: 20px 30px;\\n    overflow: auto;\\n}\\n.lv-modal .lv-modal-footer {\\n    margin-top: 0;\\n    padding: 20px 30px;\\n    border-top: 1px solid #cccccc;\\n    flex-direction: row;\\n    display: flex;\\n    justify-content: flex-end;\\n    align-items: center;\\n}\\n.lv-modal-fade-enter-active,\\n.lv-modal-fade-leave-active {\\n  transition: all 350ms ease;\\n}\\n.lv-modal-fade-enter .lv-modal-container,\\n.lv-modal-fade-leave-to .lv-modal-container {\\n  -webkit-transform: translateY(-10px) scale(0.9);\\n  transform: translateY(-10px) scale(0.9);\\n  opacity: 0;\\n}\\n.lv-modal-fade-enter .lv-modal-mask,\\n.lv-modal-fade-leave-to .lv-modal-mask {\\n  opacity: 0;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/ZDljZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLGlDQUFrQyxvQkFBb0Isb0JBQW9CLGtDQUFrQywyQkFBMkIsZ0JBQWdCLHNCQUFzQix1QkFBdUIsMEJBQTBCLDBCQUEwQiwrQkFBK0IsR0FBRyxrQkFBa0IsZ0NBQWdDLDRCQUE0QixHQUFHLDhDQUE4QyxrQ0FBa0MsOEJBQThCLEdBQUcsb0JBQW9CLCtCQUErQix1QkFBdUIsbUNBQW1DLHlCQUF5QixzQkFBc0IsbUJBQW1CLCtCQUErQixtQkFBbUIsZ0JBQWdCLEdBQUcsd0NBQXdDLG9CQUFvQixrQ0FBa0MsR0FBRyxHQUFHLGtEQUFrRCxtQkFBbUIsR0FBRyxrQkFBa0Isa0JBQWtCLHFCQUFxQixHQUFHLGdCQUFnQiwrQkFBK0IsOEJBQThCLG1CQUFtQixrQkFBa0IsbUJBQW1CLG1CQUFtQixpQkFBaUIsMEJBQTBCLDRDQUE0QyxHQUFHLG9CQUFvQixzQkFBc0IscUJBQXFCLEdBQUcsMEJBQTBCLHFCQUFxQixHQUFHLGFBQWEsdUJBQXVCLGlCQUFpQixnQkFBZ0IsR0FBRyw0QkFBNEIsc0JBQXNCLG9CQUFvQixhQUFhLGNBQWMsa0JBQWtCLG1CQUFtQiwyQ0FBMkMscUJBQXFCLHFDQUFxQyxHQUFHLCtCQUErQiwwQkFBMEIsNkJBQTZCLEdBQUcsaUNBQWlDLG9CQUFvQiw2QkFBNkIsa0JBQWtCLGdDQUFnQyxzQkFBc0Isb0NBQW9DLGtCQUFrQix1QkFBdUIsdUJBQXVCLGdEQUFnRCxnQ0FBZ0MsaUNBQWlDLEdBQUcsd0NBQXdDLGlDQUFpQywyQkFBMkIsNEJBQTRCLEdBQUcsR0FBRyx3Q0FBd0MsaUNBQWlDLDJCQUEyQixHQUFHLEdBQUcsOEJBQThCLG9CQUFvQix5QkFBeUIsdUNBQXVDLDBCQUEwQixvQkFBb0IscUNBQXFDLDBCQUEwQixHQUFHLDRMQUE0TCxrQkFBa0IsR0FBRyxxQ0FBcUMsbUJBQW1CLHdCQUF3Qix3QkFBd0Isa0JBQWtCLGlDQUFpQyxxQkFBcUIsMkJBQTJCLHlCQUF5Qix1QkFBdUIsR0FBRyw0QkFBNEIseUJBQXlCLHFCQUFxQixHQUFHLDhCQUE4QixvQkFBb0IseUJBQXlCLG9DQUFvQywwQkFBMEIsb0JBQW9CLGdDQUFnQywwQkFBMEIsR0FBRyw2REFBNkQsK0JBQStCLEdBQUcsMEZBQTBGLG9EQUFvRCw0Q0FBNEMsZUFBZSxHQUFHLGdGQUFnRixlQUFlLEdBQUc7O0FBRXBuSCIsImZpbGUiOiIxNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uYnRuIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgcGFkZGluZzogOHB4IDI2cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcXG59XFxuLmJ0bi5idG4tZ3JlZW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNERBRjdDO1xcbiAgICBib3JkZXItY29sb3I6ICM0REFGN0M7XFxufVxcbi5idG4uYnRuLWdyZWVuOmhvdmVyLCAuYnRuLmJ0bi1ncmVlbjpmb2N1cyB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzNkOGM2MztcXG4gICAgICBib3JkZXItY29sb3I6ICMzZDhjNjM7XFxufVxcbi5idG4uYnRuLWNvbnRyb2wge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIHRleHQtc2hhZG93OiAwIDAgNXB4ICMwMDAwMDA7XFxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgcGFkZGluZzogMC41cmVtO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXG4gICAgb3BhY2l0eTogMC44O1xcbiAgICBtYXJnaW46IDA7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuLmJ0bi5idG4tY29udHJvbCB7XFxuICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXG59XFxufVxcbi5idG4uYnRuLWNvbnRyb2w6aG92ZXIsIC5idG4uYnRuLWNvbnRyb2w6Zm9jdXMge1xcbiAgICAgIG9wYWNpdHk6IDE7XFxufVxcbi5idG4uYnRuLWJsb2NrIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uYnRuLmJ0bi1odWQge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBoZWlnaHQ6IDMycHg7XFxuICAgIHdpZHRoOiAzMnB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgei1pbmRleDogMjtcXG4gICAgYm9yZGVyLXJhZGl1czogMjVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjc1KTtcXG59XFxuLmJ0bi5idG4taHVkIHN2ZyB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBvcGFjaXR5OiAwLjg7XFxufVxcbi5idG4uYnRuLWh1ZFtkaXNhYmxlZF0ge1xcbiAgICAgIG9wYWNpdHk6IDAuMjtcXG59XFxuLmx2LW1vZGFsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLW1hc2sge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHotaW5kZXg6IDk5OTg7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgICBkaXNwbGF5OiB0YWJsZTtcXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAzNTBtcyBlYXNlO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGQwZDBkO1xcbiAgICBtYXJnaW4tdG9wOiAyZW07XFxuICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSA0ZW0pO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWFyZ2luOiAwcHggYXV0bztcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4zMyk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XFxuICAgIHRyYW5zaXRpb246IGFsbCAzNTBtcyBlYXNlO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA1NzZweCkge1xcbi5sdi1tb2RhbCAubHYtbW9kYWwtY29udGFpbmVyIHtcXG4gICAgICAgIG1heC13aWR0aDogNTAwcHg7XFxuICAgICAgICBtYXJnaW46IDMwcHggYXV0bztcXG59XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuLmx2LW1vZGFsIC5sdi1tb2RhbC1jb250YWluZXIge1xcbiAgICAgICAgbWF4LXdpZHRoOiA4MDBweDtcXG59XFxufVxcbi5sdi1tb2RhbCAubHYtbW9kYWwtaGVhZGVyIHtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gICAgcGFkZGluZzogMjBweCAzMHB4O1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjY2NjYztcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLWhlYWRlciBoMSwgLmx2LW1vZGFsIC5sdi1tb2RhbC1oZWFkZXIgaDIsIC5sdi1tb2RhbCAubHYtbW9kYWwtaGVhZGVyIGgzLCAubHYtbW9kYWwgLmx2LW1vZGFsLWhlYWRlciBoNCwgLmx2LW1vZGFsIC5sdi1tb2RhbC1oZWFkZXIgaDUsIC5sdi1tb2RhbCAubHYtbW9kYWwtaGVhZGVyIGg2IHtcXG4gICAgICBtYXJnaW46IDA7XFxufVxcbi5sdi1tb2RhbCAubHYtbW9kYWwtaGVhZGVyIC5jbG9zZSB7XFxuICAgICAgcGFkZGluZzogMDtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgYmFja2dyb3VuZDogMCAwO1xcbiAgICAgIGJvcmRlcjogMDtcXG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLWJvZHkge1xcbiAgICBwYWRkaW5nOiAyMHB4IDMwcHg7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbn1cXG4ubHYtbW9kYWwgLmx2LW1vZGFsLWZvb3RlciB7XFxuICAgIG1hcmdpbi10b3A6IDA7XFxuICAgIHBhZGRpbmc6IDIwcHggMzBweDtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2NjY2M7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5sdi1tb2RhbC1mYWRlLWVudGVyLWFjdGl2ZSxcXG4ubHYtbW9kYWwtZmFkZS1sZWF2ZS1hY3RpdmUge1xcbiAgdHJhbnNpdGlvbjogYWxsIDM1MG1zIGVhc2U7XFxufVxcbi5sdi1tb2RhbC1mYWRlLWVudGVyIC5sdi1tb2RhbC1jb250YWluZXIsXFxuLmx2LW1vZGFsLWZhZGUtbGVhdmUtdG8gLmx2LW1vZGFsLWNvbnRhaW5lciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMC45KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMC45KTtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi5sdi1tb2RhbC1mYWRlLWVudGVyIC5sdi1tb2RhbC1tYXNrLFxcbi5sdi1tb2RhbC1mYWRlLWxlYXZlLXRvIC5sdi1tb2RhbC1tYXNrIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi03Y2JjNWViY1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWVcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n.btn[data-v-8bcd5610] {\\n  cursor: default;\\n  font-size: 14px;\\n  background-color: transparent;\\n  border: 1px solid #fff;\\n  color: #fff;\\n  padding: 8px 26px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  touch-action: manipulation;\\n}\\n.btn.btn-green[data-v-8bcd5610] {\\n    background-color: #4DAF7C;\\n    border-color: #4DAF7C;\\n}\\n.btn.btn-green[data-v-8bcd5610]:hover, .btn.btn-green[data-v-8bcd5610]:focus {\\n      background-color: #3d8c63;\\n      border-color: #3d8c63;\\n}\\n.btn.btn-control[data-v-8bcd5610] {\\n    display: flex !important;\\n    background: none;\\n    text-shadow: 0 0 5px #000000;\\n    font-size: 1.25rem;\\n    padding: 0.5rem;\\n    border: none;\\n    outline: none !important;\\n    opacity: 0.8;\\n    margin: 0;\\n}\\n@media screen and (min-width: 768px) {\\n.btn.btn-control[data-v-8bcd5610] {\\n        padding: 0.5rem 0.75rem;\\n}\\n}\\n.btn.btn-control[data-v-8bcd5610]:hover, .btn.btn-control[data-v-8bcd5610]:focus {\\n      opacity: 1;\\n}\\n.btn.btn-block[data-v-8bcd5610] {\\n    width: 100%;\\n    display: block;\\n}\\n.btn.btn-hud[data-v-8bcd5610] {\\n    display: flex !important;\\n    justify-content: center;\\n    height: 32px;\\n    width: 32px;\\n    border: none;\\n    padding: 5px;\\n    z-index: 2;\\n    border-radius: 25px;\\n    background-color: rgba(0, 0, 0, 0.75);\\n}\\n.btn.btn-hud svg[data-v-8bcd5610] {\\n      display: flex;\\n      opacity: 0.8;\\n}\\n.btn.btn-hud[disabled][data-v-8bcd5610] {\\n      opacity: 0.2;\\n}\\n.fade-height-enter-active[data-v-8bcd5610],\\n.fade-height-leave-active[data-v-8bcd5610] {\\n  transition: all 0.2s;\\n  max-height: 500px;\\n}\\n.fade-height-enter[data-v-8bcd5610],\\n.fade-height-leave-to[data-v-8bcd5610] {\\n  opacity: 0;\\n  max-height: 0px;\\n}\\n#lv-sidebar[data-v-8bcd5610] {\\n  z-index: 2;\\n  top: 0;\\n  right: 0;\\n  width: 100%;\\n  font-size: 14px;\\n  color: #FFFFFF;\\n  height: 100%;\\n  background-color: #0d0d0d;\\n  display: flex;\\n  flex-direction: column;\\n  transition: width 350ms;\\n  overflow-y: auto;\\n  border-top: 1px solid #666666;\\n  flex-shrink: 2;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar[data-v-8bcd5610] {\\n      width: 320px;\\n      overflow-y: initial;\\n      border-top: none;\\n      flex-shrink: initial;\\n}\\n}\\n#lv-sidebar.collapsed[data-v-8bcd5610] {\\n    width: 0px;\\n}\\n#lv-sidebar.collapsed #show-sidebar[data-v-8bcd5610] {\\n      background-color: #0d0d0d;\\n      transform: translateX(0);\\n      padding: 0.5rem;\\n}\\n#lv-sidebar #show-sidebar[data-v-8bcd5610] {\\n    cursor: default;\\n    position: fixed;\\n    right: 0;\\n    top: 1rem;\\n    font-size: 0.85rem;\\n    font-family: Arial, Helvetica, sans-serif;\\n    letter-spacing: 1px;\\n    text-transform: uppercase;\\n    transform: translateX(100%);\\n    transition: transform 200ms;\\n}\\n#lv-sidebar #show-sidebar.delay[data-v-8bcd5610] {\\n      -webkit-transition-delay: 450ms;\\n      transition-delay: 450ms;\\n}\\n#lv-sidebar .lv-sidebar-header[data-v-8bcd5610] {\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-between;\\n    padding: 0.75rem 1.5rem 1.5rem 1.5rem;\\n    font-family: Arial, Helvetica, sans-serif;\\n    letter-spacing: 1px;\\n    display: none;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar .lv-sidebar-header[data-v-8bcd5610] {\\n        display: block;\\n        padding: 0.75rem 1.5rem 0.75rem 1.5rem;\\n}\\n}\\n#lv-sidebar .lv-sidebar-header h4[data-v-8bcd5610] {\\n      text-transform: uppercase;\\n      margin-bottom: 0;\\n      font-size: 1rem;\\n      flex-direction: row;\\n}\\n#lv-sidebar .lv-sidebar-content[data-v-8bcd5610] {\\n    flex: none;\\n    display: flex;\\n    flex-direction: column;\\n    position: relative;\\n    padding: 0.75rem 1.5rem 0.75rem 1.5rem;\\n    overflow-y: auto;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar .lv-sidebar-content[data-v-8bcd5610] {\\n        flex: 1 1 auto;\\n        padding: 0.75rem 1.5rem 1.5rem 1.5rem;\\n}\\n}\\n#lv-sidebar .lv-sidebar-content h4[data-v-8bcd5610] {\\n      margin: 0;\\n      font-family: Arial, Helvetica, sans-serif;\\n      font-weight: 200;\\n      letter-spacing: 0.5px;\\n}\\n#lv-sidebar .lv-sidebar-content p[data-v-8bcd5610] {\\n      margin-bottom: 0;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar .lv-sidebar-content p[data-v-8bcd5610] {\\n          margin-bottom: 1rem;\\n}\\n}\\n#lv-sidebar .lv-sidebar-footer[data-v-8bcd5610] {\\n    padding: 0.75rem 1.5rem 0.75rem 1.5rem;\\n    border-top: 1px solid #262626;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar .lv-sidebar-footer[data-v-8bcd5610] {\\n        padding: 1.5rem;\\n}\\n}\\n#lv-sidebar .lv-sidebar-footer button[data-v-8bcd5610]:not(:last-child) {\\n      margin-bottom: 0.6rem;\\n}\\n#lv-sidebar .lv-sidebar-footer textarea[data-v-8bcd5610] {\\n      margin-bottom: 0.6rem;\\n      -webkit-box-sizing: border-box;\\n      -moz-box-sizing: border-box;\\n      box-sizing: border-box;\\n      width: 100%;\\n}\\n#lv-sidebar #task-complete[data-v-8bcd5610] {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    flex-direction: column;\\n    font-size: 1.2rem;\\n    text-align: center;\\n}\\n#lv-sidebar #task-complete svg[data-v-8bcd5610] {\\n      height: 32px;\\n      width: auto;\\n      color: #4DAF7C;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-selector .lv-selector-box[data-v-8d7a90c0] {\\n  background-color: rgba(52, 152, 219, 0.2);\\n  position: absolute;\\n  z-index: 1;\\n  display: none;\\n}\\n#lv-selector .lv-selector-box .border[data-v-8d7a90c0] {\\n    background: #3498DB;\\n    position: absolute;\\n    height: 1px;\\n    width: 1px;\\n    margin: 0px;\\n    padding: 0px;\\n}\\n#lv-selector .lv-selector-box .border.border-top[data-v-8d7a90c0] {\\n      width: 100%;\\n      top: 0;\\n}\\n#lv-selector .lv-selector-box .border.border-top .handle[data-v-8d7a90c0] {\\n        cursor: ns-resize;\\n}\\n#lv-selector .lv-selector-box .border.border-right[data-v-8d7a90c0] {\\n      height: 100%;\\n      right: 0;\\n}\\n#lv-selector .lv-selector-box .border.border-right .handle[data-v-8d7a90c0] {\\n        cursor: ew-resize;\\n}\\n#lv-selector .lv-selector-box .border.border-bottom[data-v-8d7a90c0] {\\n      width: 100%;\\n      bottom: 0;\\n}\\n#lv-selector .lv-selector-box .border.border-bottom .handle[data-v-8d7a90c0] {\\n        cursor: ns-resize;\\n}\\n#lv-selector .lv-selector-box .border.border-left[data-v-8d7a90c0] {\\n      height: 100%;\\n      left: 0;\\n}\\n#lv-selector .lv-selector-box .border.border-left .handle[data-v-8d7a90c0] {\\n        cursor: ew-resize;\\n}\\n#lv-selector .lv-selector-box .border .handle[data-v-8d7a90c0] {\\n      position: absolute;\\n      top: 50%;\\n      left: 50%;\\n      width: 4px;\\n      height: 4px;\\n      margin: -3px 0 0 -3px;\\n      background: #FFF;\\n      border: 1px solid #3498DB;\\n}\\n#lv-selector .lv-selector-box .corner[data-v-8d7a90c0] {\\n    position: absolute;\\n    width: 4px;\\n    height: 4px;\\n    background: #FFF;\\n    border: 1px solid #3498DB;\\n}\\n#lv-selector .lv-selector-box .corner.corner-top-right[data-v-8d7a90c0] {\\n      top: -2px;\\n      right: -2px;\\n      cursor: nesw-resize;\\n}\\n#lv-selector .lv-selector-box .corner.corner-bottom-right[data-v-8d7a90c0] {\\n      bottom: -2px;\\n      right: -2px;\\n      cursor: nwse-resize;\\n}\\n#lv-selector .lv-selector-box .corner.corner-bottom-left[data-v-8d7a90c0] {\\n      bottom: -2px;\\n      left: -2px;\\n      cursor: nesw-resize;\\n}\\n#lv-selector .lv-selector-box .corner.corner-top-left[data-v-8d7a90c0] {\\n      top: -2px;\\n      left: -2px;\\n      cursor: nwse-resize;\\n}\\n#lv-selector .selection-buttons[data-v-8d7a90c0] {\\n  bottom: 0;\\n  right: 0;\\n  transform: translateY(105%);\\n  position: absolute;\\n  display: flex;\\n  flex-direction: row;\\n}\\n#lv-selector .selection-buttons .btn-selection[data-v-8d7a90c0] {\\n    border: none;\\n    background: none;\\n    display: flex;\\n    align-items: center;\\n    font-size: 0.85rem;\\n    padding: 2px;\\n    margin-left: 5px;\\n}\\n#lv-selector .selection-buttons .btn-selection#cancel-selection[data-v-8d7a90c0] {\\n      color: #D91E18;\\n}\\n#lv-selector .selection-buttons .btn-selection#confirm-selection[data-v-8d7a90c0] {\\n      color: #4DAF7C;\\n}\\n#lv-selector .selection-buttons .btn-selection .icon-white[data-v-8d7a90c0] {\\n      color: #FFF;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3Rvci52dWU/ZTM2MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLDJFQUE0RSw4Q0FBOEMsdUJBQXVCLGVBQWUsa0JBQWtCLEdBQUcsMERBQTBELDBCQUEwQix5QkFBeUIsa0JBQWtCLGlCQUFpQixrQkFBa0IsbUJBQW1CLEdBQUcscUVBQXFFLG9CQUFvQixlQUFlLEdBQUcsNkVBQTZFLDRCQUE0QixHQUFHLHVFQUF1RSxxQkFBcUIsaUJBQWlCLEdBQUcsK0VBQStFLDRCQUE0QixHQUFHLHdFQUF3RSxvQkFBb0Isa0JBQWtCLEdBQUcsZ0ZBQWdGLDRCQUE0QixHQUFHLHNFQUFzRSxxQkFBcUIsZ0JBQWdCLEdBQUcsOEVBQThFLDRCQUE0QixHQUFHLGtFQUFrRSwyQkFBMkIsaUJBQWlCLGtCQUFrQixtQkFBbUIsb0JBQW9CLDhCQUE4Qix5QkFBeUIsa0NBQWtDLEdBQUcsMERBQTBELHlCQUF5QixpQkFBaUIsa0JBQWtCLHVCQUF1QixnQ0FBZ0MsR0FBRywyRUFBMkUsa0JBQWtCLG9CQUFvQiw0QkFBNEIsR0FBRyw4RUFBOEUscUJBQXFCLG9CQUFvQiw0QkFBNEIsR0FBRyw2RUFBNkUscUJBQXFCLG1CQUFtQiw0QkFBNEIsR0FBRywwRUFBMEUsa0JBQWtCLG1CQUFtQiw0QkFBNEIsR0FBRyxvREFBb0QsY0FBYyxhQUFhLGdDQUFnQyx1QkFBdUIsa0JBQWtCLHdCQUF3QixHQUFHLG1FQUFtRSxtQkFBbUIsdUJBQXVCLG9CQUFvQiwwQkFBMEIseUJBQXlCLG1CQUFtQix1QkFBdUIsR0FBRyxvRkFBb0YsdUJBQXVCLEdBQUcscUZBQXFGLHVCQUF1QixHQUFHLCtFQUErRSxvQkFBb0IsR0FBRzs7QUFFLzZGIiwiZmlsZSI6IjE2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94W2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg1MiwgMTUyLCAyMTksIDAuMik7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxO1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuI2x2LXNlbGVjdG9yIC5sdi1zZWxlY3Rvci1ib3ggLmJvcmRlcltkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgYmFja2dyb3VuZDogIzM0OThEQjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBoZWlnaHQ6IDFweDtcXG4gICAgd2lkdGg6IDFweDtcXG4gICAgbWFyZ2luOiAwcHg7XFxuICAgIHBhZGRpbmc6IDBweDtcXG59XFxuI2x2LXNlbGVjdG9yIC5sdi1zZWxlY3Rvci1ib3ggLmJvcmRlci5ib3JkZXItdG9wW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIHRvcDogMDtcXG59XFxuI2x2LXNlbGVjdG9yIC5sdi1zZWxlY3Rvci1ib3ggLmJvcmRlci5ib3JkZXItdG9wIC5oYW5kbGVbZGF0YS12LThkN2E5MGMwXSB7XFxuICAgICAgICBjdXJzb3I6IG5zLXJlc2l6ZTtcXG59XFxuI2x2LXNlbGVjdG9yIC5sdi1zZWxlY3Rvci1ib3ggLmJvcmRlci5ib3JkZXItcmlnaHRbZGF0YS12LThkN2E5MGMwXSB7XFxuICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgIHJpZ2h0OiAwO1xcbn1cXG4jbHYtc2VsZWN0b3IgLmx2LXNlbGVjdG9yLWJveCAuYm9yZGVyLmJvcmRlci1yaWdodCAuaGFuZGxlW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgICAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5ib3JkZXIuYm9yZGVyLWJvdHRvbVtkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBib3R0b206IDA7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5ib3JkZXIuYm9yZGVyLWJvdHRvbSAuaGFuZGxlW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgICAgY3Vyc29yOiBucy1yZXNpemU7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5ib3JkZXIuYm9yZGVyLWxlZnRbZGF0YS12LThkN2E5MGMwXSB7XFxuICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgIGxlZnQ6IDA7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5ib3JkZXIuYm9yZGVyLWxlZnQgLmhhbmRsZVtkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgICAgIGN1cnNvcjogZXctcmVzaXplO1xcbn1cXG4jbHYtc2VsZWN0b3IgLmx2LXNlbGVjdG9yLWJveCAuYm9yZGVyIC5oYW5kbGVbZGF0YS12LThkN2E5MGMwXSB7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHRvcDogNTAlO1xcbiAgICAgIGxlZnQ6IDUwJTtcXG4gICAgICB3aWR0aDogNHB4O1xcbiAgICAgIGhlaWdodDogNHB4O1xcbiAgICAgIG1hcmdpbjogLTNweCAwIDAgLTNweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjRkZGO1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzNDk4REI7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5jb3JuZXJbZGF0YS12LThkN2E5MGMwXSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDRweDtcXG4gICAgaGVpZ2h0OiA0cHg7XFxuICAgIGJhY2tncm91bmQ6ICNGRkY7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzNDk4REI7XFxufVxcbiNsdi1zZWxlY3RvciAubHYtc2VsZWN0b3ItYm94IC5jb3JuZXIuY29ybmVyLXRvcC1yaWdodFtkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgICB0b3A6IC0ycHg7XFxuICAgICAgcmlnaHQ6IC0ycHg7XFxuICAgICAgY3Vyc29yOiBuZXN3LXJlc2l6ZTtcXG59XFxuI2x2LXNlbGVjdG9yIC5sdi1zZWxlY3Rvci1ib3ggLmNvcm5lci5jb3JuZXItYm90dG9tLXJpZ2h0W2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgIGJvdHRvbTogLTJweDtcXG4gICAgICByaWdodDogLTJweDtcXG4gICAgICBjdXJzb3I6IG53c2UtcmVzaXplO1xcbn1cXG4jbHYtc2VsZWN0b3IgLmx2LXNlbGVjdG9yLWJveCAuY29ybmVyLmNvcm5lci1ib3R0b20tbGVmdFtkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgICBib3R0b206IC0ycHg7XFxuICAgICAgbGVmdDogLTJweDtcXG4gICAgICBjdXJzb3I6IG5lc3ctcmVzaXplO1xcbn1cXG4jbHYtc2VsZWN0b3IgLmx2LXNlbGVjdG9yLWJveCAuY29ybmVyLmNvcm5lci10b3AtbGVmdFtkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgICB0b3A6IC0ycHg7XFxuICAgICAgbGVmdDogLTJweDtcXG4gICAgICBjdXJzb3I6IG53c2UtcmVzaXplO1xcbn1cXG4jbHYtc2VsZWN0b3IgLnNlbGVjdGlvbi1idXR0b25zW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTA1JSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuI2x2LXNlbGVjdG9yIC5zZWxlY3Rpb24tYnV0dG9ucyAuYnRuLXNlbGVjdGlvbltkYXRhLXYtOGQ3YTkwYzBdIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDAuODVyZW07XFxuICAgIHBhZGRpbmc6IDJweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcXG59XFxuI2x2LXNlbGVjdG9yIC5zZWxlY3Rpb24tYnV0dG9ucyAuYnRuLXNlbGVjdGlvbiNjYW5jZWwtc2VsZWN0aW9uW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgIGNvbG9yOiAjRDkxRTE4O1xcbn1cXG4jbHYtc2VsZWN0b3IgLnNlbGVjdGlvbi1idXR0b25zIC5idG4tc2VsZWN0aW9uI2NvbmZpcm0tc2VsZWN0aW9uW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgIGNvbG9yOiAjNERBRjdDO1xcbn1cXG4jbHYtc2VsZWN0b3IgLnNlbGVjdGlvbi1idXR0b25zIC5idG4tc2VsZWN0aW9uIC5pY29uLXdoaXRlW2RhdGEtdi04ZDdhOTBjMF0ge1xcbiAgICAgIGNvbG9yOiAjRkZGO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtOGQ3YTkwYzBcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9TZWxlY3Rvci52dWVcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n.btn[data-v-caebde82] {\\n  cursor: default;\\n  font-size: 14px;\\n  background-color: transparent;\\n  border: 1px solid #fff;\\n  color: #fff;\\n  padding: 8px 26px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  touch-action: manipulation;\\n}\\n.btn.btn-green[data-v-caebde82] {\\n    background-color: #4DAF7C;\\n    border-color: #4DAF7C;\\n}\\n.btn.btn-green[data-v-caebde82]:hover, .btn.btn-green[data-v-caebde82]:focus {\\n      background-color: #3d8c63;\\n      border-color: #3d8c63;\\n}\\n.btn.btn-control[data-v-caebde82] {\\n    display: flex !important;\\n    background: none;\\n    text-shadow: 0 0 5px #000000;\\n    font-size: 1.25rem;\\n    padding: 0.5rem;\\n    border: none;\\n    outline: none !important;\\n    opacity: 0.8;\\n    margin: 0;\\n}\\n@media screen and (min-width: 768px) {\\n.btn.btn-control[data-v-caebde82] {\\n        padding: 0.5rem 0.75rem;\\n}\\n}\\n.btn.btn-control[data-v-caebde82]:hover, .btn.btn-control[data-v-caebde82]:focus {\\n      opacity: 1;\\n}\\n.btn.btn-block[data-v-caebde82] {\\n    width: 100%;\\n    display: block;\\n}\\n.btn.btn-hud[data-v-caebde82] {\\n    display: flex !important;\\n    justify-content: center;\\n    height: 32px;\\n    width: 32px;\\n    border: none;\\n    padding: 5px;\\n    z-index: 2;\\n    border-radius: 25px;\\n    background-color: rgba(0, 0, 0, 0.75);\\n}\\n.btn.btn-hud svg[data-v-caebde82] {\\n      display: flex;\\n      opacity: 0.8;\\n}\\n.btn.btn-hud[disabled][data-v-caebde82] {\\n      opacity: 0.2;\\n}\\n#lv-sidebar-select-item[data-v-caebde82] {\\n  flex: 1 1 auto;\\n  display: none;\\n  flex-direction: column;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-sidebar-select-item[data-v-caebde82] {\\n      display: flex;\\n}\\n}\\n#lv-sidebar-select-item ul[data-v-caebde82] {\\n    margin: 0;\\n    overflow-y: auto;\\n    flex: 1 1 auto;\\n    list-style: none;\\n    padding: 0;\\n    border: 1px solid #404040;\\n    transition: opacity 250ms;\\n}\\n#lv-sidebar-select-item ul[data-v-caebde82]:empty {\\n      opacity: 0;\\n}\\n#lv-sidebar-select-item ul li[data-v-caebde82] {\\n      padding: 0.8rem;\\n      display: flex;\\n      flex-direction: row;\\n      align-items: center;\\n      justify-content: space-between;\\n      border-bottom: 1px solid #262626;\\n}\\n#lv-sidebar-select-item .buttons[data-v-caebde82] {\\n    justify-content: flex-end;\\n    display: flex;\\n    flex: 0 0 33.3333%;\\n}\\n#lv-sidebar-select-item .btn[data-v-caebde82] {\\n    display: flex;\\n    margin-right: auto;\\n    margin-left: auto;\\n}\\n#lv-sidebar-select-item .btn[data-v-caebde82]:last-child {\\n      padding-left: 0;\\n      padding-right: 0;\\n}\\n#lv-sidebar-select-item .thumbnail-container[data-v-caebde82] {\\n    align-items: center;\\n    justify-content: center;\\n    display: flex;\\n    flex: 1 1 auto;\\n    height: 50px;\\n}\\n#lv-sidebar-select-item .thumbnail-container img[data-v-caebde82] {\\n      flex: none;\\n      /* IE fix */\\n      max-width: 100%;\\n      max-height: 100%;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWU/NzYyMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLGtEQUFtRCxvQkFBb0Isb0JBQW9CLGtDQUFrQywyQkFBMkIsZ0JBQWdCLHNCQUFzQix1QkFBdUIsMEJBQTBCLDBCQUEwQiwrQkFBK0IsR0FBRyxtQ0FBbUMsZ0NBQWdDLDRCQUE0QixHQUFHLGdGQUFnRixrQ0FBa0MsOEJBQThCLEdBQUcscUNBQXFDLCtCQUErQix1QkFBdUIsbUNBQW1DLHlCQUF5QixzQkFBc0IsbUJBQW1CLCtCQUErQixtQkFBbUIsZ0JBQWdCLEdBQUcsd0NBQXdDLHFDQUFxQyxrQ0FBa0MsR0FBRyxHQUFHLG9GQUFvRixtQkFBbUIsR0FBRyxtQ0FBbUMsa0JBQWtCLHFCQUFxQixHQUFHLGlDQUFpQywrQkFBK0IsOEJBQThCLG1CQUFtQixrQkFBa0IsbUJBQW1CLG1CQUFtQixpQkFBaUIsMEJBQTBCLDRDQUE0QyxHQUFHLHFDQUFxQyxzQkFBc0IscUJBQXFCLEdBQUcsMkNBQTJDLHFCQUFxQixHQUFHLDRDQUE0QyxtQkFBbUIsa0JBQWtCLDJCQUEyQixHQUFHLHdDQUF3Qyw0Q0FBNEMsc0JBQXNCLEdBQUcsR0FBRywrQ0FBK0MsZ0JBQWdCLHVCQUF1QixxQkFBcUIsdUJBQXVCLGlCQUFpQixnQ0FBZ0MsZ0NBQWdDLEdBQUcscURBQXFELG1CQUFtQixHQUFHLGtEQUFrRCx3QkFBd0Isc0JBQXNCLDRCQUE0Qiw0QkFBNEIsdUNBQXVDLHlDQUF5QyxHQUFHLHFEQUFxRCxnQ0FBZ0Msb0JBQW9CLHlCQUF5QixHQUFHLGlEQUFpRCxvQkFBb0IseUJBQXlCLHdCQUF3QixHQUFHLDREQUE0RCx3QkFBd0IseUJBQXlCLEdBQUcsaUVBQWlFLDBCQUEwQiw4QkFBOEIsb0JBQW9CLHFCQUFxQixtQkFBbUIsR0FBRyxxRUFBcUUsbUJBQW1CLDRDQUE0Qyx5QkFBeUIsR0FBRzs7QUFFMzVGIiwiZmlsZSI6IjE2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5idG5bZGF0YS12LWNhZWJkZTgyXSB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHBhZGRpbmc6IDhweCAyNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxufVxcbi5idG4uYnRuLWdyZWVuW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNERBRjdDO1xcbiAgICBib3JkZXItY29sb3I6ICM0REFGN0M7XFxufVxcbi5idG4uYnRuLWdyZWVuW2RhdGEtdi1jYWViZGU4Ml06aG92ZXIsIC5idG4uYnRuLWdyZWVuW2RhdGEtdi1jYWViZGU4Ml06Zm9jdXMge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZDhjNjM7XFxuICAgICAgYm9yZGVyLWNvbG9yOiAjM2Q4YzYzO1xcbn1cXG4uYnRuLmJ0bi1jb250cm9sW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIHRleHQtc2hhZG93OiAwIDAgNXB4ICMwMDAwMDA7XFxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgcGFkZGluZzogMC41cmVtO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXG4gICAgb3BhY2l0eTogMC44O1xcbiAgICBtYXJnaW46IDA7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuLmJ0bi5idG4tY29udHJvbFtkYXRhLXYtY2FlYmRlODJdIHtcXG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcbn1cXG59XFxuLmJ0bi5idG4tY29udHJvbFtkYXRhLXYtY2FlYmRlODJdOmhvdmVyLCAuYnRuLmJ0bi1jb250cm9sW2RhdGEtdi1jYWViZGU4Ml06Zm9jdXMge1xcbiAgICAgIG9wYWNpdHk6IDE7XFxufVxcbi5idG4uYnRuLWJsb2NrW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5idG4uYnRuLWh1ZFtkYXRhLXYtY2FlYmRlODJdIHtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgaGVpZ2h0OiAzMnB4O1xcbiAgICB3aWR0aDogMzJweDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIHotaW5kZXg6IDI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxufVxcbi5idG4uYnRuLWh1ZCBzdmdbZGF0YS12LWNhZWJkZTgyXSB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBvcGFjaXR5OiAwLjg7XFxufVxcbi5idG4uYnRuLWh1ZFtkaXNhYmxlZF1bZGF0YS12LWNhZWJkZTgyXSB7XFxuICAgICAgb3BhY2l0eTogMC4yO1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbVtkYXRhLXYtY2FlYmRlODJdIHtcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuI2x2LXNpZGViYXItc2VsZWN0LWl0ZW1bZGF0YS12LWNhZWJkZTgyXSB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG59XFxufVxcbiNsdi1zaWRlYmFyLXNlbGVjdC1pdGVtIHVsW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIG92ZXJmbG93LXk6IGF1dG87XFxuICAgIGZsZXg6IDEgMSBhdXRvO1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MDQwO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zO1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSB1bFtkYXRhLXYtY2FlYmRlODJdOmVtcHR5IHtcXG4gICAgICBvcGFjaXR5OiAwO1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSB1bCBsaVtkYXRhLXYtY2FlYmRlODJdIHtcXG4gICAgICBwYWRkaW5nOiAwLjhyZW07XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMjYyNjI2O1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSAuYnV0dG9uc1tkYXRhLXYtY2FlYmRlODJdIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMlO1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSAuYnRuW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG4jbHYtc2lkZWJhci1zZWxlY3QtaXRlbSAuYnRuW2RhdGEtdi1jYWViZGU4Ml06bGFzdC1jaGlsZCB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxufVxcbiNsdi1zaWRlYmFyLXNlbGVjdC1pdGVtIC50aHVtYm5haWwtY29udGFpbmVyW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMSAxIGF1dG87XFxuICAgIGhlaWdodDogNTBweDtcXG59XFxuI2x2LXNpZGViYXItc2VsZWN0LWl0ZW0gLnRodW1ibmFpbC1jb250YWluZXIgaW1nW2RhdGEtdi1jYWViZGU4Ml0ge1xcbiAgICAgIGZsZXg6IG5vbmU7XFxuICAgICAgLyogSUUgZml4ICovXFxuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi1jYWViZGU4MlwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL3NpZGViYXIvaXRlbXMvU2VsZWN0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-metadata-modal ul[data-v-cdd7c472] {\\n  padding-left: 0;\\n  list-style: none;\\n}\\n#lv-metadata-modal .center[data-v-cdd7c472] {\\n  text-align: center;\\n  margin: 2rem;\\n}\\n#lv-metadata-modal li[data-v-cdd7c472] {\\n  margin: 0;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlP2E1OTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSxtRUFBb0Usb0JBQW9CLHFCQUFxQixHQUFHLCtDQUErQyx1QkFBdUIsaUJBQWlCLEdBQUcsMENBQTBDLGNBQWMsR0FBRzs7QUFFclEiLCJmaWxlIjoiMTY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2x2LW1ldGFkYXRhLW1vZGFsIHVsW2RhdGEtdi1jZGQ3YzQ3Ml0ge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuI2x2LW1ldGFkYXRhLW1vZGFsIC5jZW50ZXJbZGF0YS12LWNkZDdjNDcyXSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW46IDJyZW07XFxufVxcbiNsdi1tZXRhZGF0YS1tb2RhbCBsaVtkYXRhLXYtY2RkN2M0NzJdIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LWNkZDdjNDcyXCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbW9kYWxzL01ldGFkYXRhLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "/*! Hint.css - v2.5.0 - 2017-04-23\\n* http://kushagragour.in/lab/hint/\\n* Copyright (c) 2017 Kushagra Gour */\\n/*-------------------------------------*\\tHINT.css - A CSS tooltip library\\n\\\\*-------------------------------------*/\\n/**\\n * HINT.css is a tooltip library made in pure CSS.\\n *\\n * Source: https://github.com/chinchang/hint.css\\n * Demo: http://kushagragour.in/lab/hint/\\n *\\n */\\n/**\\n * source: hint-core.scss\\n *\\n * Defines the basic styling for the tooltip.\\n * Each tooltip is made of 2 parts:\\n * \\t1) body (:after)\\n * \\t2) arrow (:before)\\n *\\n * Classes added:\\n * \\t1) hint\\n */\\n[class*=\\"hint--\\"][data-v-f54ae8d2] {\\n  position: relative;\\n  display: inline-block;\\n  /**\\n\\t * tooltip arrow\\n\\t */\\n  /**\\n\\t * tooltip body\\n\\t */\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:before, [class*=\\"hint--\\"][data-v-f54ae8d2]:after {\\n  position: absolute;\\n  -webkit-transform: translate3d(0, 0, 0);\\n  -moz-transform: translate3d(0, 0, 0);\\n  transform: translate3d(0, 0, 0);\\n  visibility: hidden;\\n  opacity: 0;\\n  z-index: 1000000;\\n  pointer-events: none;\\n  -webkit-transition: 0.3s ease;\\n  -moz-transition: 0.3s ease;\\n  transition: 0.3s ease;\\n  -webkit-transition-delay: 0ms;\\n  -moz-transition-delay: 0ms;\\n  transition-delay: 0ms;\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:hover:before, [class*=\\"hint--\\"][data-v-f54ae8d2]:hover:after {\\n  visibility: visible;\\n  opacity: 1;\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:hover:before, [class*=\\"hint--\\"][data-v-f54ae8d2]:hover:after {\\n  -webkit-transition-delay: 100ms;\\n  -moz-transition-delay: 100ms;\\n  transition-delay: 100ms;\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:before {\\n  content: \'\';\\n  position: absolute;\\n  background: transparent;\\n  border: 6px solid transparent;\\n  z-index: 1000001;\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:after {\\n  background: #383838;\\n  color: white;\\n  padding: 8px 10px;\\n  font-size: 12px;\\n  font-family: \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;\\n  line-height: 12px;\\n  white-space: nowrap;\\n}\\n[class*=\\"hint--\\"][aria-label][data-v-f54ae8d2]:after {\\n  content: attr(aria-label);\\n}\\n[class*=\\"hint--\\"][data-hint][data-v-f54ae8d2]:after {\\n  content: attr(data-hint);\\n}\\n[aria-label=\'\'][data-v-f54ae8d2]:before, [aria-label=\'\'][data-v-f54ae8d2]:after,\\n[data-hint=\'\'][data-v-f54ae8d2]:before,\\n[data-hint=\'\'][data-v-f54ae8d2]:after {\\n  display: none !important;\\n}\\n\\n/**\\n * source: hint-position.scss\\n *\\n * Defines the positoning logic for the tooltips.\\n *\\n * Classes added:\\n * \\t1) hint--top\\n * \\t2) hint--bottom\\n * \\t3) hint--left\\n * \\t4) hint--right\\n */\\n/**\\n * set default color for tooltip arrows\\n */\\n.hint--top-left[data-v-f54ae8d2]:before {\\n  border-top-color: #383838;\\n}\\n.hint--top-right[data-v-f54ae8d2]:before {\\n  border-top-color: #383838;\\n}\\n.hint--top[data-v-f54ae8d2]:before {\\n  border-top-color: #383838;\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:before {\\n  border-bottom-color: #383838;\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:before {\\n  border-bottom-color: #383838;\\n}\\n.hint--bottom[data-v-f54ae8d2]:before {\\n  border-bottom-color: #383838;\\n}\\n.hint--left[data-v-f54ae8d2]:before {\\n  border-left-color: #383838;\\n}\\n.hint--right[data-v-f54ae8d2]:before {\\n  border-right-color: #383838;\\n}\\n\\n/**\\n * top tooltip\\n */\\n.hint--top[data-v-f54ae8d2]:before {\\n  margin-bottom: -11px;\\n}\\n.hint--top[data-v-f54ae8d2]:before, .hint--top[data-v-f54ae8d2]:after {\\n  bottom: 100%;\\n  left: 50%;\\n}\\n.hint--top[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--top[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  transform: translateX(-50%);\\n}\\n.hint--top[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--top[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(-50%) translateY(-8px);\\n  -moz-transform: translateX(-50%) translateY(-8px);\\n  transform: translateX(-50%) translateY(-8px);\\n}\\n\\n/**\\n * bottom tooltip\\n */\\n.hint--bottom[data-v-f54ae8d2]:before {\\n  margin-top: -11px;\\n}\\n.hint--bottom[data-v-f54ae8d2]:before, .hint--bottom[data-v-f54ae8d2]:after {\\n  top: 100%;\\n  left: 50%;\\n}\\n.hint--bottom[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--bottom[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  transform: translateX(-50%);\\n}\\n.hint--bottom[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--bottom[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(-50%) translateY(8px);\\n  -moz-transform: translateX(-50%) translateY(8px);\\n  transform: translateX(-50%) translateY(8px);\\n}\\n\\n/**\\n * right tooltip\\n */\\n.hint--right[data-v-f54ae8d2]:before {\\n  margin-left: -11px;\\n  margin-bottom: -6px;\\n}\\n.hint--right[data-v-f54ae8d2]:after {\\n  margin-bottom: -14px;\\n}\\n.hint--right[data-v-f54ae8d2]:before, .hint--right[data-v-f54ae8d2]:after {\\n  left: 100%;\\n  bottom: 50%;\\n}\\n.hint--right[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateX(8px);\\n  -moz-transform: translateX(8px);\\n  transform: translateX(8px);\\n}\\n.hint--right[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(8px);\\n  -moz-transform: translateX(8px);\\n  transform: translateX(8px);\\n}\\n\\n/**\\n * left tooltip\\n */\\n.hint--left[data-v-f54ae8d2]:before {\\n  margin-right: -11px;\\n  margin-bottom: -6px;\\n}\\n.hint--left[data-v-f54ae8d2]:after {\\n  margin-bottom: -14px;\\n}\\n.hint--left[data-v-f54ae8d2]:before, .hint--left[data-v-f54ae8d2]:after {\\n  right: 100%;\\n  bottom: 50%;\\n}\\n.hint--left[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateX(-8px);\\n  -moz-transform: translateX(-8px);\\n  transform: translateX(-8px);\\n}\\n.hint--left[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(-8px);\\n  -moz-transform: translateX(-8px);\\n  transform: translateX(-8px);\\n}\\n\\n/**\\n * top-left tooltip\\n */\\n.hint--top-left[data-v-f54ae8d2]:before {\\n  margin-bottom: -11px;\\n}\\n.hint--top-left[data-v-f54ae8d2]:before, .hint--top-left[data-v-f54ae8d2]:after {\\n  bottom: 100%;\\n  left: 50%;\\n}\\n.hint--top-left[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--top-left[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-100%);\\n  -moz-transform: translateX(-100%);\\n  transform: translateX(-100%);\\n}\\n.hint--top-left[data-v-f54ae8d2]:after {\\n  margin-left: 12px;\\n}\\n.hint--top-left[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--top-left[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(-100%) translateY(-8px);\\n  -moz-transform: translateX(-100%) translateY(-8px);\\n  transform: translateX(-100%) translateY(-8px);\\n}\\n\\n/**\\n * top-right tooltip\\n */\\n.hint--top-right[data-v-f54ae8d2]:before {\\n  margin-bottom: -11px;\\n}\\n.hint--top-right[data-v-f54ae8d2]:before, .hint--top-right[data-v-f54ae8d2]:after {\\n  bottom: 100%;\\n  left: 50%;\\n}\\n.hint--top-right[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--top-right[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(0);\\n  -moz-transform: translateX(0);\\n  transform: translateX(0);\\n}\\n.hint--top-right[data-v-f54ae8d2]:after {\\n  margin-left: -12px;\\n}\\n.hint--top-right[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--top-right[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n\\n/**\\n * bottom-left tooltip\\n */\\n.hint--bottom-left[data-v-f54ae8d2]:before {\\n  margin-top: -11px;\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:before, .hint--bottom-left[data-v-f54ae8d2]:after {\\n  top: 100%;\\n  left: 50%;\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-100%);\\n  -moz-transform: translateX(-100%);\\n  transform: translateX(-100%);\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:after {\\n  margin-left: 12px;\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--bottom-left[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateX(-100%) translateY(8px);\\n  -moz-transform: translateX(-100%) translateY(8px);\\n  transform: translateX(-100%) translateY(8px);\\n}\\n\\n/**\\n * bottom-right tooltip\\n */\\n.hint--bottom-right[data-v-f54ae8d2]:before {\\n  margin-top: -11px;\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:before, .hint--bottom-right[data-v-f54ae8d2]:after {\\n  top: 100%;\\n  left: 50%;\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:before {\\n  left: calc(50% - 6px);\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(0);\\n  -moz-transform: translateX(0);\\n  transform: translateX(0);\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:after {\\n  margin-left: -12px;\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:hover:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--bottom-right[data-v-f54ae8d2]:hover:after {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n\\n/**\\n * source: hint-sizes.scss\\n *\\n * Defines width restricted tooltips that can span\\n * across multiple lines.\\n *\\n * Classes added:\\n * \\t1) hint--small\\n * \\t2) hint--medium\\n * \\t3) hint--large\\n *\\n */\\n.hint--small[data-v-f54ae8d2]:after,\\n.hint--medium[data-v-f54ae8d2]:after,\\n.hint--large[data-v-f54ae8d2]:after {\\n  white-space: normal;\\n  line-height: 1.4em;\\n  word-wrap: break-word;\\n}\\n.hint--small[data-v-f54ae8d2]:after {\\n  width: 80px;\\n}\\n.hint--medium[data-v-f54ae8d2]:after {\\n  width: 150px;\\n}\\n.hint--large[data-v-f54ae8d2]:after {\\n  width: 300px;\\n}\\n\\n/**\\n * source: hint-theme.scss\\n *\\n * Defines basic theme for tooltips.\\n *\\n */\\n[class*=\\"hint--\\"][data-v-f54ae8d2] {\\n  /**\\n\\t * tooltip body\\n\\t */\\n}\\n[class*=\\"hint--\\"][data-v-f54ae8d2]:after {\\n  text-shadow: 0 -1px 0px black;\\n  box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);\\n}\\n\\n/**\\n * source: hint-color-types.scss\\n *\\n * Contains tooltips of various types based on color differences.\\n *\\n * Classes added:\\n * \\t1) hint--error\\n * \\t2) hint--warning\\n * \\t3) hint--info\\n * \\t4) hint--success\\n *\\n */\\n/**\\n * Error\\n */\\n.hint--error[data-v-f54ae8d2]:after {\\n  background-color: #b34e4d;\\n  text-shadow: 0 -1px 0px #592726;\\n}\\n.hint--error.hint--top-left[data-v-f54ae8d2]:before {\\n  border-top-color: #b34e4d;\\n}\\n.hint--error.hint--top-right[data-v-f54ae8d2]:before {\\n  border-top-color: #b34e4d;\\n}\\n.hint--error.hint--top[data-v-f54ae8d2]:before {\\n  border-top-color: #b34e4d;\\n}\\n.hint--error.hint--bottom-left[data-v-f54ae8d2]:before {\\n  border-bottom-color: #b34e4d;\\n}\\n.hint--error.hint--bottom-right[data-v-f54ae8d2]:before {\\n  border-bottom-color: #b34e4d;\\n}\\n.hint--error.hint--bottom[data-v-f54ae8d2]:before {\\n  border-bottom-color: #b34e4d;\\n}\\n.hint--error.hint--left[data-v-f54ae8d2]:before {\\n  border-left-color: #b34e4d;\\n}\\n.hint--error.hint--right[data-v-f54ae8d2]:before {\\n  border-right-color: #b34e4d;\\n}\\n\\n/**\\n * Warning\\n */\\n.hint--warning[data-v-f54ae8d2]:after {\\n  background-color: #c09854;\\n  text-shadow: 0 -1px 0px #6c5328;\\n}\\n.hint--warning.hint--top-left[data-v-f54ae8d2]:before {\\n  border-top-color: #c09854;\\n}\\n.hint--warning.hint--top-right[data-v-f54ae8d2]:before {\\n  border-top-color: #c09854;\\n}\\n.hint--warning.hint--top[data-v-f54ae8d2]:before {\\n  border-top-color: #c09854;\\n}\\n.hint--warning.hint--bottom-left[data-v-f54ae8d2]:before {\\n  border-bottom-color: #c09854;\\n}\\n.hint--warning.hint--bottom-right[data-v-f54ae8d2]:before {\\n  border-bottom-color: #c09854;\\n}\\n.hint--warning.hint--bottom[data-v-f54ae8d2]:before {\\n  border-bottom-color: #c09854;\\n}\\n.hint--warning.hint--left[data-v-f54ae8d2]:before {\\n  border-left-color: #c09854;\\n}\\n.hint--warning.hint--right[data-v-f54ae8d2]:before {\\n  border-right-color: #c09854;\\n}\\n\\n/**\\n * Info\\n */\\n.hint--info[data-v-f54ae8d2]:after {\\n  background-color: #3986ac;\\n  text-shadow: 0 -1px 0px #1a3c4d;\\n}\\n.hint--info.hint--top-left[data-v-f54ae8d2]:before {\\n  border-top-color: #3986ac;\\n}\\n.hint--info.hint--top-right[data-v-f54ae8d2]:before {\\n  border-top-color: #3986ac;\\n}\\n.hint--info.hint--top[data-v-f54ae8d2]:before {\\n  border-top-color: #3986ac;\\n}\\n.hint--info.hint--bottom-left[data-v-f54ae8d2]:before {\\n  border-bottom-color: #3986ac;\\n}\\n.hint--info.hint--bottom-right[data-v-f54ae8d2]:before {\\n  border-bottom-color: #3986ac;\\n}\\n.hint--info.hint--bottom[data-v-f54ae8d2]:before {\\n  border-bottom-color: #3986ac;\\n}\\n.hint--info.hint--left[data-v-f54ae8d2]:before {\\n  border-left-color: #3986ac;\\n}\\n.hint--info.hint--right[data-v-f54ae8d2]:before {\\n  border-right-color: #3986ac;\\n}\\n\\n/**\\n * Success\\n */\\n.hint--success[data-v-f54ae8d2]:after {\\n  background-color: #458746;\\n  text-shadow: 0 -1px 0px #1a321a;\\n}\\n.hint--success.hint--top-left[data-v-f54ae8d2]:before {\\n  border-top-color: #458746;\\n}\\n.hint--success.hint--top-right[data-v-f54ae8d2]:before {\\n  border-top-color: #458746;\\n}\\n.hint--success.hint--top[data-v-f54ae8d2]:before {\\n  border-top-color: #458746;\\n}\\n.hint--success.hint--bottom-left[data-v-f54ae8d2]:before {\\n  border-bottom-color: #458746;\\n}\\n.hint--success.hint--bottom-right[data-v-f54ae8d2]:before {\\n  border-bottom-color: #458746;\\n}\\n.hint--success.hint--bottom[data-v-f54ae8d2]:before {\\n  border-bottom-color: #458746;\\n}\\n.hint--success.hint--left[data-v-f54ae8d2]:before {\\n  border-left-color: #458746;\\n}\\n.hint--success.hint--right[data-v-f54ae8d2]:before {\\n  border-right-color: #458746;\\n}\\n\\n/**\\n * source: hint-always.scss\\n *\\n * Defines a persisted tooltip which shows always.\\n *\\n * Classes added:\\n * \\t1) hint--always\\n *\\n */\\n.hint--always[data-v-f54ae8d2]:after, .hint--always[data-v-f54ae8d2]:before {\\n  opacity: 1;\\n  visibility: visible;\\n}\\n.hint--always.hint--top[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--always.hint--top[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-50%) translateY(-8px);\\n  -moz-transform: translateX(-50%) translateY(-8px);\\n  transform: translateX(-50%) translateY(-8px);\\n}\\n.hint--always.hint--top-left[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--always.hint--top-left[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-100%) translateY(-8px);\\n  -moz-transform: translateX(-100%) translateY(-8px);\\n  transform: translateX(-100%) translateY(-8px);\\n}\\n.hint--always.hint--top-right[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--always.hint--top-right[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateY(-8px);\\n  -moz-transform: translateY(-8px);\\n  transform: translateY(-8px);\\n}\\n.hint--always.hint--bottom[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--always.hint--bottom[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-50%) translateY(8px);\\n  -moz-transform: translateX(-50%) translateY(8px);\\n  transform: translateX(-50%) translateY(8px);\\n}\\n.hint--always.hint--bottom-left[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--always.hint--bottom-left[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-100%) translateY(8px);\\n  -moz-transform: translateX(-100%) translateY(8px);\\n  transform: translateX(-100%) translateY(8px);\\n}\\n.hint--always.hint--bottom-right[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--always.hint--bottom-right[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateY(8px);\\n  -moz-transform: translateY(8px);\\n  transform: translateY(8px);\\n}\\n.hint--always.hint--left[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateX(-8px);\\n  -moz-transform: translateX(-8px);\\n  transform: translateX(-8px);\\n}\\n.hint--always.hint--left[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(-8px);\\n  -moz-transform: translateX(-8px);\\n  transform: translateX(-8px);\\n}\\n.hint--always.hint--right[data-v-f54ae8d2]:before {\\n  -webkit-transform: translateX(8px);\\n  -moz-transform: translateX(8px);\\n  transform: translateX(8px);\\n}\\n.hint--always.hint--right[data-v-f54ae8d2]:after {\\n  -webkit-transform: translateX(8px);\\n  -moz-transform: translateX(8px);\\n  transform: translateX(8px);\\n}\\n\\n/**\\n * source: hint-rounded.scss\\n *\\n * Defines rounded corner tooltips.\\n *\\n * Classes added:\\n * \\t1) hint--rounded\\n *\\n */\\n.hint--rounded[data-v-f54ae8d2]:after {\\n  border-radius: 4px;\\n}\\n\\n/**\\n * source: hint-effects.scss\\n *\\n * Defines various transition effects for the tooltips.\\n *\\n * Classes added:\\n * \\t1) hint--no-animate\\n * \\t2) hint--bounce\\n *\\n */\\n.hint--no-animate[data-v-f54ae8d2]:before, .hint--no-animate[data-v-f54ae8d2]:after {\\n  -webkit-transition-duration: 0ms;\\n  -moz-transition-duration: 0ms;\\n  transition-duration: 0ms;\\n}\\n.hint--bounce[data-v-f54ae8d2]:before, .hint--bounce[data-v-f54ae8d2]:after {\\n  -webkit-transition: opacity 0.3s ease, visibility 0.3s ease, -webkit-transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24);\\n  -moz-transition: opacity 0.3s ease, visibility 0.3s ease, -moz-transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24);\\n  transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24);\\n}\\nbutton .active[data-v-f54ae8d2] {\\n  color: #3498DB;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZT85ODhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsMnBCQUE0cEIsdUJBQXVCLDBCQUEwQixzRUFBc0UsMkZBQTJGLHVCQUF1Qiw0Q0FBNEMseUNBQXlDLG9DQUFvQyx1QkFBdUIsZUFBZSxxQkFBcUIseUJBQXlCLGtDQUFrQywrQkFBK0IsMEJBQTBCLGtDQUFrQywrQkFBK0IsMEJBQTBCLEdBQUcsdUdBQXVHLHdCQUF3QixlQUFlLEdBQUcsdUdBQXVHLG9DQUFvQyxpQ0FBaUMsNEJBQTRCLEdBQUcsK0NBQStDLGdCQUFnQix1QkFBdUIsNEJBQTRCLGtDQUFrQyxxQkFBcUIsR0FBRyw4Q0FBOEMsd0JBQXdCLGlCQUFpQixzQkFBc0Isb0JBQW9CLGtFQUFrRSxzQkFBc0Isd0JBQXdCLEdBQUcsMERBQTBELDhCQUE4QixHQUFHLHlEQUF5RCw2QkFBNkIsR0FBRyxvS0FBb0ssNkJBQTZCLEdBQUcseVNBQXlTLDhCQUE4QixHQUFHLDRDQUE0Qyw4QkFBOEIsR0FBRyxzQ0FBc0MsOEJBQThCLEdBQUcsOENBQThDLGlDQUFpQyxHQUFHLCtDQUErQyxpQ0FBaUMsR0FBRyx5Q0FBeUMsaUNBQWlDLEdBQUcsdUNBQXVDLCtCQUErQixHQUFHLHdDQUF3QyxnQ0FBZ0MsR0FBRyxrRUFBa0UseUJBQXlCLEdBQUcseUVBQXlFLGlCQUFpQixjQUFjLEdBQUcsc0NBQXNDLDBCQUEwQixHQUFHLHFDQUFxQyx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLDRDQUE0Qyx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLDJDQUEyQyx5REFBeUQsc0RBQXNELGlEQUFpRCxHQUFHLHdFQUF3RSxzQkFBc0IsR0FBRywrRUFBK0UsY0FBYyxjQUFjLEdBQUcseUNBQXlDLDBCQUEwQixHQUFHLHdDQUF3Qyx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLCtD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REFBNEQsaUNBQWlDLEdBQUcsNkRBQTZELGlDQUFpQyxHQUFHLHVEQUF1RCxpQ0FBaUMsR0FBRyxxREFBcUQsK0JBQStCLEdBQUcsc0RBQXNELGdDQUFnQyxHQUFHLGlPQUFpTyxlQUFlLHdCQUF3QixHQUFHLG1EQUFtRCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLGtEQUFrRCx5REFBeUQsc0RBQXNELGlEQUFpRCxHQUFHLHdEQUF3RCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLHVEQUF1RCwwREFBMEQsdURBQXVELGtEQUFrRCxHQUFHLHlEQUF5RCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLHdEQUF3RCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLHNEQUFzRCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLHFEQUFxRCx3REFBd0QscURBQXFELGdEQUFnRCxHQUFHLDJEQUEyRCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLDBEQUEwRCx5REFBeUQsc0RBQXNELGlEQUFpRCxHQUFHLDREQUE0RCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLDJEQUEyRCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLG9EQUFvRCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLG1EQUFtRCx3Q0FBd0MscUNBQXFDLGdDQUFnQyxHQUFHLHFEQUFxRCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLG9EQUFvRCx1Q0FBdUMsb0NBQW9DLCtCQUErQixHQUFHLDhLQUE4Syx1QkFBdUIsR0FBRyx5UUFBeVEscUNBQXFDLGtDQUFrQyw2QkFBNkIsR0FBRywrRUFBK0UsNEhBQTRILHNIQUFzSCw0R0FBNEcsR0FBRyxtQ0FBbUMsbUJBQW1CLEdBQUc7O0FBRWwwakIiLCJmaWxlIjoiMTY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIEhpbnQuY3NzIC0gdjIuNS4wIC0gMjAxNy0wNC0yM1xcbiogaHR0cDovL2t1c2hhZ3JhZ291ci5pbi9sYWIvaGludC9cXG4qIENvcHlyaWdodCAoYykgMjAxNyBLdXNoYWdyYSBHb3VyICovXFxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcdEhJTlQuY3NzIC0gQSBDU1MgdG9vbHRpcCBsaWJyYXJ5XFxuXFxcXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKipcXG4gKiBISU5ULmNzcyBpcyBhIHRvb2x0aXAgbGlicmFyeSBtYWRlIGluIHB1cmUgQ1NTLlxcbiAqXFxuICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vY2hpbmNoYW5nL2hpbnQuY3NzXFxuICogRGVtbzogaHR0cDovL2t1c2hhZ3JhZ291ci5pbi9sYWIvaGludC9cXG4gKlxcbiAqL1xcbi8qKlxcbiAqIHNvdXJjZTogaGludC1jb3JlLnNjc3NcXG4gKlxcbiAqIERlZmluZXMgdGhlIGJhc2ljIHN0eWxpbmcgZm9yIHRoZSB0b29sdGlwLlxcbiAqIEVhY2ggdG9vbHRpcCBpcyBtYWRlIG9mIDIgcGFydHM6XFxuICogXFx0MSkgYm9keSAoOmFmdGVyKVxcbiAqIFxcdDIpIGFycm93ICg6YmVmb3JlKVxcbiAqXFxuICogQ2xhc3NlcyBhZGRlZDpcXG4gKiBcXHQxKSBoaW50XFxuICovXFxuW2NsYXNzKj1cXFwiaGludC0tXFxcIl1bZGF0YS12LWY1NGFlOGQyXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAvKipcXG5cXHQgKiB0b29sdGlwIGFycm93XFxuXFx0ICovXFxuICAvKipcXG5cXHQgKiB0b29sdGlwIGJvZHlcXG5cXHQgKi9cXG59XFxuW2NsYXNzKj1cXFwiaGludC0tXFxcIl1bZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUsIFtjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIG9wYWNpdHk6IDA7XFxuICB6LWluZGV4OiAxMDAwMDAwO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IDAuM3MgZWFzZTtcXG4gIC1tb3otdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwbXM7XFxuICAtbW96LXRyYW5zaXRpb24tZGVsYXk6IDBtcztcXG4gIHRyYW5zaXRpb24tZGVsYXk6IDBtcztcXG59XFxuW2NsYXNzKj1cXFwiaGludC0tXFxcIl1bZGF0YS12LWY1NGFlOGQyXTpob3ZlcjpiZWZvcmUsIFtjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YWZ0ZXIge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbltjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YmVmb3JlLCBbY2xhc3MqPVxcXCJoaW50LS1cXFwiXVtkYXRhLXYtZjU0YWU4ZDJdOmhvdmVyOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMTAwbXM7XFxuICAtbW96LXRyYW5zaXRpb24tZGVsYXk6IDEwMG1zO1xcbiAgdHJhbnNpdGlvbi1kZWxheTogMTAwbXM7XFxufVxcbltjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIHotaW5kZXg6IDEwMDAwMDE7XFxufVxcbltjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgYmFja2dyb3VuZDogIzM4MzgzODtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDhweCAxMHB4O1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBsaW5lLWhlaWdodDogMTJweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbltjbGFzcyo9XFxcImhpbnQtLVxcXCJdW2FyaWEtbGFiZWxdW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgY29udGVudDogYXR0cihhcmlhLWxhYmVsKTtcXG59XFxuW2NsYXNzKj1cXFwiaGludC0tXFxcIl1bZGF0YS1oaW50XVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1oaW50KTtcXG59XFxuW2FyaWEtbGFiZWw9JyddW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlLCBbYXJpYS1sYWJlbD0nJ11bZGF0YS12LWY1NGFlOGQyXTphZnRlcixcXG5bZGF0YS1oaW50PScnXVtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSxcXG5bZGF0YS1oaW50PScnXVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLyoqXFxuICogc291cmNlOiBoaW50LXBvc2l0aW9uLnNjc3NcXG4gKlxcbiAqIERlZmluZXMgdGhlIHBvc2l0b25pbmcgbG9naWMgZm9yIHRoZSB0b29sdGlwcy5cXG4gKlxcbiAqIENsYXNzZXMgYWRkZWQ6XFxuICogXFx0MSkgaGludC0tdG9wXFxuICogXFx0MikgaGludC0tYm90dG9tXFxuICogXFx0MykgaGludC0tbGVmdFxcbiAqIFxcdDQpIGhpbnQtLXJpZ2h0XFxuICovXFxuLyoqXFxuICogc2V0IGRlZmF1bHQgY29sb3IgZm9yIHRvb2x0aXAgYXJyb3dzXFxuICovXFxuLmhpbnQtLXRvcC1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICMzODM4Mzg7XFxufVxcbi5oaW50LS10b3AtcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzM4MzgzODtcXG59XFxuLmhpbnQtLXRvcFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjMzgzODM4O1xcbn1cXG4uaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzM4MzgzODtcXG59XFxuLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjMzgzODM4O1xcbn1cXG4uaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICMzODM4Mzg7XFxufVxcbi5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjMzgzODM4O1xcbn1cXG4uaGludC0tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjMzgzODM4O1xcbn1cXG5cXG4vKipcXG4gKiB0b3AgdG9vbHRpcFxcbiAqL1xcbi5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbWFyZ2luLWJvdHRvbTogLTExcHg7XFxufVxcbi5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUsIC5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBib3R0b206IDEwMCU7XFxuICBsZWZ0OiA1MCU7XFxufVxcbi5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbGVmdDogY2FsYyg1MCUgLSA2cHgpO1xcbn1cXG4uaGludC0tdG9wW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG59XFxuLmhpbnQtLXRvcFtkYXRhLXYtZjU0YWU4ZDJdOmhvdmVyOmJlZm9yZSB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbn1cXG4uaGludC0tdG9wW2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG59XFxuXFxuLyoqXFxuICogYm90dG9tIHRvb2x0aXBcXG4gKi9cXG4uaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIG1hcmdpbi10b3A6IC0xMXB4O1xcbn1cXG4uaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlLCAuaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgdG9wOiAxMDAlO1xcbiAgbGVmdDogNTAlO1xcbn1cXG4uaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGxlZnQ6IGNhbGMoNTAlIC0gNnB4KTtcXG59XFxuLmhpbnQtLWJvdHRvbVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxufVxcbi5oaW50LS1ib3R0b21bZGF0YS12LWY1NGFlOGQyXTpob3ZlcjpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG59XFxuLmhpbnQtLWJvdHRvbVtkYXRhLXYtZjU0YWU4ZDJdOmhvdmVyOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKDhweCk7XFxufVxcblxcbi8qKlxcbiAqIHJpZ2h0IHRvb2x0aXBcXG4gKi9cXG4uaGludC0tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbWFyZ2luLWxlZnQ6IC0xMXB4O1xcbiAgbWFyZ2luLWJvdHRvbTogLTZweDtcXG59XFxuLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgbWFyZ2luLWJvdHRvbTogLTE0cHg7XFxufVxcbi5oaW50LS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSwgLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgbGVmdDogMTAwJTtcXG4gIGJvdHRvbTogNTAlO1xcbn1cXG4uaGludC0tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpob3ZlcjpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG59XFxuLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG59XFxuXFxuLyoqXFxuICogbGVmdCB0b29sdGlwXFxuICovXFxuLmhpbnQtLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMTFweDtcXG4gIG1hcmdpbi1ib3R0b206IC02cHg7XFxufVxcbi5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgbWFyZ2luLWJvdHRvbTogLTE0cHg7XFxufVxcbi5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlLCAuaGludC0tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIHJpZ2h0OiAxMDAlO1xcbiAgYm90dG9tOiA1MCU7XFxufVxcbi5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC04cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLThweCk7XFxufVxcbi5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG59XFxuXFxuLyoqXFxuICogdG9wLWxlZnQgdG9vbHRpcFxcbiAqL1xcbi5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBtYXJnaW4tYm90dG9tOiAtMTFweDtcXG59XFxuLmhpbnQtLXRvcC1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlLCAuaGludC0tdG9wLWxlZnRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBib3R0b206IDEwMCU7XFxuICBsZWZ0OiA1MCU7XFxufVxcbi5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBsZWZ0OiBjYWxjKDUwJSAtIDZweCk7XFxufVxcbi5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxufVxcbi5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbn1cXG4uaGludC0tdG9wLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpob3ZlcjpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG59XFxuLmhpbnQtLXRvcC1sZWZ0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpIHRyYW5zbGF0ZVkoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG59XFxuXFxuLyoqXFxuICogdG9wLXJpZ2h0IHRvb2x0aXBcXG4gKi9cXG4uaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIG1hcmdpbi1ib3R0b206IC0xMXB4O1xcbn1cXG4uaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlLCAuaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgYm90dG9tOiAxMDAlO1xcbiAgbGVmdDogNTAlO1xcbn1cXG4uaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGxlZnQ6IGNhbGMoNTAlIC0gNnB4KTtcXG59XFxuLmhpbnQtLXRvcC1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XFxufVxcbi5oaW50LS10b3AtcmlnaHRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBtYXJnaW4tbGVmdDogLTEycHg7XFxufVxcbi5oaW50LS10b3AtcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpob3ZlcjpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG59XFxuLmhpbnQtLXRvcC1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmhvdmVyOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxufVxcblxcbi8qKlxcbiAqIGJvdHRvbS1sZWZ0IHRvb2x0aXBcXG4gKi9cXG4uaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbWFyZ2luLXRvcDogLTExcHg7XFxufVxcbi5oaW50LS1ib3R0b20tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSwgLmhpbnQtLWJvdHRvbS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgdG9wOiAxMDAlO1xcbiAgbGVmdDogNTAlO1xcbn1cXG4uaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgbGVmdDogY2FsYyg1MCUgLSA2cHgpO1xcbn1cXG4uaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xcbn1cXG4uaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBtYXJnaW4tbGVmdDogMTJweDtcXG59XFxuLmhpbnQtLWJvdHRvbS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxufVxcbi5oaW50LS1ib3R0b20tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmhvdmVyOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKDhweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSg4cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKDhweCk7XFxufVxcblxcbi8qKlxcbiAqIGJvdHRvbS1yaWdodCB0b29sdGlwXFxuICovXFxuLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBtYXJnaW4tdG9wOiAtMTFweDtcXG59XFxuLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSwgLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIHRvcDogMTAwJTtcXG4gIGxlZnQ6IDUwJTtcXG59XFxuLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBsZWZ0OiBjYWxjKDUwJSAtIDZweCk7XFxufVxcbi5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbn1cXG4uaGludC0tYm90dG9tLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IC0xMnB4O1xcbn1cXG4uaGludC0tYm90dG9tLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06aG92ZXI6YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxufVxcbi5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpob3ZlcjphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbn1cXG5cXG4vKipcXG4gKiBzb3VyY2U6IGhpbnQtc2l6ZXMuc2Nzc1xcbiAqXFxuICogRGVmaW5lcyB3aWR0aCByZXN0cmljdGVkIHRvb2x0aXBzIHRoYXQgY2FuIHNwYW5cXG4gKiBhY3Jvc3MgbXVsdGlwbGUgbGluZXMuXFxuICpcXG4gKiBDbGFzc2VzIGFkZGVkOlxcbiAqIFxcdDEpIGhpbnQtLXNtYWxsXFxuICogXFx0MikgaGludC0tbWVkaXVtXFxuICogXFx0MykgaGludC0tbGFyZ2VcXG4gKlxcbiAqL1xcbi5oaW50LS1zbWFsbFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyLFxcbi5oaW50LS1tZWRpdW1bZGF0YS12LWY1NGFlOGQyXTphZnRlcixcXG4uaGludC0tbGFyZ2VbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgbGluZS1oZWlnaHQ6IDEuNGVtO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbn1cXG4uaGludC0tc21hbGxbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICB3aWR0aDogODBweDtcXG59XFxuLmhpbnQtLW1lZGl1bVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIHdpZHRoOiAxNTBweDtcXG59XFxuLmhpbnQtLWxhcmdlW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG5cXG4vKipcXG4gKiBzb3VyY2U6IGhpbnQtdGhlbWUuc2Nzc1xcbiAqXFxuICogRGVmaW5lcyBiYXNpYyB0aGVtZSBmb3IgdG9vbHRpcHMuXFxuICpcXG4gKi9cXG5bY2xhc3MqPVxcXCJoaW50LS1cXFwiXVtkYXRhLXYtZjU0YWU4ZDJdIHtcXG4gIC8qKlxcblxcdCAqIHRvb2x0aXAgYm9keVxcblxcdCAqL1xcbn1cXG5bY2xhc3MqPVxcXCJoaW50LS1cXFwiXVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMHB4IGJsYWNrO1xcbiAgYm94LXNoYWRvdzogNHB4IDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xcbn1cXG5cXG4vKipcXG4gKiBzb3VyY2U6IGhpbnQtY29sb3ItdHlwZXMuc2Nzc1xcbiAqXFxuICogQ29udGFpbnMgdG9vbHRpcHMgb2YgdmFyaW91cyB0eXBlcyBiYXNlZCBvbiBjb2xvciBkaWZmZXJlbmNlcy5cXG4gKlxcbiAqIENsYXNzZXMgYWRkZWQ6XFxuICogXFx0MSkgaGludC0tZXJyb3JcXG4gKiBcXHQyKSBoaW50LS13YXJuaW5nXFxuICogXFx0MykgaGludC0taW5mb1xcbiAqIFxcdDQpIGhpbnQtLXN1Y2Nlc3NcXG4gKlxcbiAqL1xcbi8qKlxcbiAqIEVycm9yXFxuICovXFxuLmhpbnQtLWVycm9yW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IzNGU0ZDtcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMHB4ICM1OTI3MjY7XFxufVxcbi5oaW50LS1lcnJvci5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYjM0ZTRkO1xcbn1cXG4uaGludC0tZXJyb3IuaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNiMzRlNGQ7XFxufVxcbi5oaW50LS1lcnJvci5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2IzNGU0ZDtcXG59XFxuLmhpbnQtLWVycm9yLmhpbnQtLWJvdHRvbS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNiMzRlNGQ7XFxufVxcbi5oaW50LS1lcnJvci5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2IzNGU0ZDtcXG59XFxuLmhpbnQtLWVycm9yLmhpbnQtLWJvdHRvbVtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYjM0ZTRkO1xcbn1cXG4uaGludC0tZXJyb3IuaGludC0tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2IzNGU0ZDtcXG59XFxuLmhpbnQtLWVycm9yLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2IzNGU0ZDtcXG59XFxuXFxuLyoqXFxuICogV2FybmluZ1xcbiAqL1xcbi5oaW50LS13YXJuaW5nW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2MwOTg1NDtcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMHB4ICM2YzUzMjg7XFxufVxcbi5oaW50LS13YXJuaW5nLmhpbnQtLXRvcC1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNjMDk4NTQ7XFxufVxcbi5oaW50LS13YXJuaW5nLmhpbnQtLXRvcC1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYzA5ODU0O1xcbn1cXG4uaGludC0td2FybmluZy5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2MwOTg1NDtcXG59XFxuLmhpbnQtLXdhcm5pbmcuaGludC0tYm90dG9tLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2MwOTg1NDtcXG59XFxuLmhpbnQtLXdhcm5pbmcuaGludC0tYm90dG9tLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNjMDk4NTQ7XFxufVxcbi5oaW50LS13YXJuaW5nLmhpbnQtLWJvdHRvbVtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYzA5ODU0O1xcbn1cXG4uaGludC0td2FybmluZy5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjYzA5ODU0O1xcbn1cXG4uaGludC0td2FybmluZy5oaW50LS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItcmlnaHQtY29sb3I6ICNjMDk4NTQ7XFxufVxcblxcbi8qKlxcbiAqIEluZm9cXG4gKi9cXG4uaGludC0taW5mb1tkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzOTg2YWM7XFxuICB0ZXh0LXNoYWRvdzogMCAtMXB4IDBweCAjMWEzYzRkO1xcbn1cXG4uaGludC0taW5mby5oaW50LS10b3AtbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjMzk4NmFjO1xcbn1cXG4uaGludC0taW5mby5oaW50LS10b3AtcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzM5ODZhYztcXG59XFxuLmhpbnQtLWluZm8uaGludC0tdG9wW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICMzOTg2YWM7XFxufVxcbi5oaW50LS1pbmZvLmhpbnQtLWJvdHRvbS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICMzOTg2YWM7XFxufVxcbi5oaW50LS1pbmZvLmhpbnQtLWJvdHRvbS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjMzk4NmFjO1xcbn1cXG4uaGludC0taW5mby5oaW50LS1ib3R0b21bZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzM5ODZhYztcXG59XFxuLmhpbnQtLWluZm8uaGludC0tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItbGVmdC1jb2xvcjogIzM5ODZhYztcXG59XFxuLmhpbnQtLWluZm8uaGludC0tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjMzk4NmFjO1xcbn1cXG5cXG4vKipcXG4gKiBTdWNjZXNzXFxuICovXFxuLmhpbnQtLXN1Y2Nlc3NbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDU4NzQ2O1xcbiAgdGV4dC1zaGFkb3c6IDAgLTFweCAwcHggIzFhMzIxYTtcXG59XFxuLmhpbnQtLXN1Y2Nlc3MuaGludC0tdG9wLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzQ1ODc0NjtcXG59XFxuLmhpbnQtLXN1Y2Nlc3MuaGludC0tdG9wLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICM0NTg3NDY7XFxufVxcbi5oaW50LS1zdWNjZXNzLmhpbnQtLXRvcFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjNDU4NzQ2O1xcbn1cXG4uaGludC0tc3VjY2Vzcy5oaW50LS1ib3R0b20tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjNDU4NzQ2O1xcbn1cXG4uaGludC0tc3VjY2Vzcy5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzQ1ODc0NjtcXG59XFxuLmhpbnQtLXN1Y2Nlc3MuaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICM0NTg3NDY7XFxufVxcbi5oaW50LS1zdWNjZXNzLmhpbnQtLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6ICM0NTg3NDY7XFxufVxcbi5oaW50LS1zdWNjZXNzLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogIzQ1ODc0NjtcXG59XFxuXFxuLyoqXFxuICogc291cmNlOiBoaW50LWFsd2F5cy5zY3NzXFxuICpcXG4gKiBEZWZpbmVzIGEgcGVyc2lzdGVkIHRvb2x0aXAgd2hpY2ggc2hvd3MgYWx3YXlzLlxcbiAqXFxuICogQ2xhc3NlcyBhZGRlZDpcXG4gKiBcXHQxKSBoaW50LS1hbHdheXNcXG4gKlxcbiAqL1xcbi5oaW50LS1hbHdheXNbZGF0YS12LWY1NGFlOGQyXTphZnRlciwgLmhpbnQtLWFsd2F5c1tkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS10b3BbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC04cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC04cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLXRvcC1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxufVxcbi5oaW50LS1hbHdheXMuaGludC0tdG9wLWxlZnRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSgtOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKC04cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKC04cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLXRvcC1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLXRvcC1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC04cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCk7XFxufVxcbi5oaW50LS1hbHdheXMuaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxufVxcbi5oaW50LS1hbHdheXMuaGludC0tYm90dG9tW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSg4cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSg4cHgpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS1ib3R0b20tbGVmdFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLWJvdHRvbS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpIHRyYW5zbGF0ZVkoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpIHRyYW5zbGF0ZVkoOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS1ib3R0b20tcmlnaHRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg4cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLWxlZnRbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS1sZWZ0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLThweCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtOHB4KTtcXG59XFxuLmhpbnQtLWFsd2F5cy5oaW50LS1yaWdodFtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCg4cHgpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg4cHgpO1xcbn1cXG4uaGludC0tYWx3YXlzLmhpbnQtLXJpZ2h0W2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDhweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOHB4KTtcXG59XFxuXFxuLyoqXFxuICogc291cmNlOiBoaW50LXJvdW5kZWQuc2Nzc1xcbiAqXFxuICogRGVmaW5lcyByb3VuZGVkIGNvcm5lciB0b29sdGlwcy5cXG4gKlxcbiAqIENsYXNzZXMgYWRkZWQ6XFxuICogXFx0MSkgaGludC0tcm91bmRlZFxcbiAqXFxuICovXFxuLmhpbnQtLXJvdW5kZWRbZGF0YS12LWY1NGFlOGQyXTphZnRlciB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbi8qKlxcbiAqIHNvdXJjZTogaGludC1lZmZlY3RzLnNjc3NcXG4gKlxcbiAqIERlZmluZXMgdmFyaW91cyB0cmFuc2l0aW9uIGVmZmVjdHMgZm9yIHRoZSB0b29sdGlwcy5cXG4gKlxcbiAqIENsYXNzZXMgYWRkZWQ6XFxuICogXFx0MSkgaGludC0tbm8tYW5pbWF0ZVxcbiAqIFxcdDIpIGhpbnQtLWJvdW5jZVxcbiAqXFxuICovXFxuLmhpbnQtLW5vLWFuaW1hdGVbZGF0YS12LWY1NGFlOGQyXTpiZWZvcmUsIC5oaW50LS1uby1hbmltYXRlW2RhdGEtdi1mNTRhZThkMl06YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwbXM7XFxuICAtbW96LXRyYW5zaXRpb24tZHVyYXRpb246IDBtcztcXG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDBtcztcXG59XFxuLmhpbnQtLWJvdW5jZVtkYXRhLXYtZjU0YWU4ZDJdOmJlZm9yZSwgLmhpbnQtLWJvdW5jZVtkYXRhLXYtZjU0YWU4ZDJdOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2UsIHZpc2liaWxpdHkgMC4zcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjcxLCAxLjcsIDAuNzcsIDEuMjQpO1xcbiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2UsIC1tb3otdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNzEsIDEuNywgMC43NywgMS4yNCk7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSwgdmlzaWJpbGl0eSAwLjNzIGVhc2UsIHRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjcxLCAxLjcsIDAuNzcsIDEuMjQpO1xcbn1cXG5idXR0b24gLmFjdGl2ZVtkYXRhLXYtZjU0YWU4ZDJdIHtcXG4gIGNvbG9yOiAjMzQ5OERCO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjU0YWU4ZDJcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, "\\n#lv-viewer-controls[data-v-f895c3ba] {\\n  display: flex;\\n  justify-content: space-around;\\n  position: absolute;\\n  background-color: rgba(0, 0, 0, 0.75);\\n  margin: 0;\\n  z-index: 2;\\n  width: 100%;\\n}\\n@media screen and (min-width: 768px) {\\n#lv-viewer-controls[data-v-f895c3ba] {\\n      justify-content: initial;\\n      width: initial;\\n      margin: 1rem;\\n      border-radius: 25px;\\n      padding: 0 0.5rem;\\n}\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZT9lYTQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsaUVBQWtFLGtCQUFrQixrQ0FBa0MsdUJBQXVCLDBDQUEwQyxjQUFjLGVBQWUsZ0JBQWdCLEdBQUcsd0NBQXdDLHdDQUF3QyxpQ0FBaUMsdUJBQXVCLHFCQUFxQiw0QkFBNEIsMEJBQTBCLEdBQUcsR0FBRzs7QUFFaGMiLCJmaWxlIjoiMTcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2x2LXZpZXdlci1jb250cm9sc1tkYXRhLXYtZjg5NWMzYmFdIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxuICBtYXJnaW46IDA7XFxuICB6LWluZGV4OiAyO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuI2x2LXZpZXdlci1jb250cm9sc1tkYXRhLXYtZjg5NWMzYmFdIHtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGluaXRpYWw7XFxuICAgICAgd2lkdGg6IGluaXRpYWw7XFxuICAgICAgbWFyZ2luOiAxcmVtO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICAgICAgcGFkZGluZzogMCAwLjVyZW07XFxufVxcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjg5NWMzYmFcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(1)();\n// imports\n\n\n// module\nexports.push([module.i, ".fa-icon{display:inline-block;fill:currentColor}.fa-flip-horizontal{transform:scaleX(-1)}.fa-flip-vertical{transform:scaleY(-1)}.fa-spin{animation:fa-spin 1s 0s infinite linear}.fa-inverse{color:#fff}@keyframes fa-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWU/ZTVhZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLGtDQUFtQyxxQkFBcUIsa0JBQWtCLG9CQUFvQixxQkFBcUIsa0JBQWtCLHFCQUFxQixTQUFTLHdDQUF3QyxZQUFZLFdBQVcsbUJBQW1CLEdBQUcsdUJBQXVCLEdBQUcseUJBQXlCOztBQUUzUyIsImZpbGUiOiIxNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mYS1pY29ue2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZpbGw6Y3VycmVudENvbG9yfS5mYS1mbGlwLWhvcml6b250YWx7dHJhbnNmb3JtOnNjYWxlWCgtMSl9LmZhLWZsaXAtdmVydGljYWx7dHJhbnNmb3JtOnNjYWxlWSgtMSl9LmZhLXNwaW57YW5pbWF0aW9uOmZhLXNwaW4gMXMgMHMgaW5maW5pdGUgbGluZWFyfS5mYS1pbnZlcnNle2NvbG9yOiNmZmZ9QGtleWZyYW1lcyBmYS1zcGluezAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9dG97dHJhbnNmb3JtOnJvdGF0ZSgxdHVybil9fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyP21pbmltaXplIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi03OGQzNGI1MlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval("var DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n    var proto = Element.prototype;\n\n    proto.matches = proto.matchesSelector ||\n                    proto.mozMatchesSelector ||\n                    proto.msMatchesSelector ||\n                    proto.oMatchesSelector ||\n                    proto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest (element, selector) {\n    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n        if (typeof element.matches === 'function' &&\n            element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n    }\n}\n\nmodule.exports = closest;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2RlbGVnYXRlL3NyYy9jbG9zZXN0LmpzP2ZjNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERPQ1VNRU5UX05PREVfVFlQRSA9IDk7XG5cbi8qKlxuICogQSBwb2x5ZmlsbCBmb3IgRWxlbWVudC5tYXRjaGVzKClcbiAqL1xuaWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8ubWF0Y2hlcyA9IHByb3RvLm1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ubXNNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcGFyZW50IHRoYXQgbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdCAoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSBET0NVTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Lm1hdGNoZXMgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9zZXN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RlbGVnYXRlL3NyYy9jbG9zZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var closest = __webpack_require__(172);\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(element, selector, type, callback, useCapture) {\n    var listenerFn = listener.apply(this, arguments);\n\n    element.addEventListener(type, listenerFn, useCapture);\n\n    return {\n        destroy: function() {\n            element.removeEventListener(type, listenerFn, useCapture);\n        }\n    }\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n    return function(e) {\n        e.delegateTarget = closest(e.target, selector);\n\n        if (e.delegateTarget) {\n            callback.call(element, e);\n        }\n    }\n}\n\nmodule.exports = delegate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2RlbGVnYXRlL3NyYy9kZWxlZ2F0ZS5qcz8zMjAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE3My5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjbG9zZXN0ID0gcmVxdWlyZSgnLi9jbG9zZXN0Jyk7XG5cbi8qKlxuICogRGVsZWdhdGVzIGV2ZW50IHRvIGEgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGRlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIHZhciBsaXN0ZW5lckZuID0gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCB1c2VDYXB0dXJlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEZpbmRzIGNsb3Nlc3QgbWF0Y2ggYW5kIGludm9rZXMgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuZGVsZWdhdGVUYXJnZXQgPSBjbG9zZXN0KGUudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICAgICAgaWYgKGUuZGVsZWdhdGVUYXJnZXQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoZWxlbWVudCwgZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVsZWdhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZGVsZWdhdGUvc3JjL2RlbGVnYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2VzNi1vYmplY3QtYXNzaWduL2luZGV4LmpzPzViNmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbURBQW1ELGlCQUFpQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgcmVmYWN0b3JlZCBmcm9tIE1vemlsbGEgRGV2ZWxvcGVyIE5ldHdvcms6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBmaXJzdFNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcbiAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIGlmICghT2JqZWN0LmFzc2lnbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGFzc2lnblxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NpZ246IGFzc2lnbixcbiAgcG9seWZpbGw6IHBvbHlmaWxsXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process, global) {var require;/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.1\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = __webpack_require__(244);\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator$1(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate(input);\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nEnumerator$1.prototype._enumerate = function (input) {\n  for (var i = 0; this._state === PENDING && i < input.length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator$1.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$1 = c.resolve;\n\n  if (resolve$$1 === resolve$1) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise$2) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$1) {\n        return resolve$$1(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$1(entry), i);\n  }\n};\n\nEnumerator$1.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator$1.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all$1(entries) {\n  return new Enumerator$1(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race$1(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise$2(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise$2 ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise$2.all = all$1;\nPromise$2.race = race$1;\nPromise$2.resolve = resolve$1;\nPromise$2.reject = reject$1;\nPromise$2._setScheduler = setScheduler;\nPromise$2._setAsap = setAsap;\nPromise$2._asap = asap;\n\nPromise$2.prototype = {\n  constructor: Promise$2,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\n/*global self*/\nfunction polyfill$1() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise$2;\n}\n\n// Strange compat..\nPromise$2.polyfill = polyfill$1;\nPromise$2.Promise = Promise$2;\n\nreturn Promise$2;\n\n})));\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(180), __webpack_require__(51)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports){eval("/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n    return value !== undefined\n        && value instanceof HTMLElement\n        && value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return value !== undefined\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\n        && ('length' in value)\n        && (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n    return typeof value === 'string'\n        || value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return type === '[object Function]';\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2dvb2QtbGlzdGVuZXIvc3JjL2lzLmpzPzI2ZTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIxNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgSFRNTCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5ub2RlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgICYmIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIGxpc3Qgb2YgSFRNTCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMubm9kZUxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmICh0eXBlID09PSAnW29iamVjdCBOb2RlTGlzdF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXScpXG4gICAgICAgICYmICgnbGVuZ3RoJyBpbiB2YWx1ZSlcbiAgICAgICAgJiYgKHZhbHVlLmxlbmd0aCA9PT0gMCB8fCBleHBvcnRzLm5vZGUodmFsdWVbMF0pKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLnN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmZuID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZ29vZC1saXN0ZW5lci9zcmMvaXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("var is = __webpack_require__(176);\nvar delegate = __webpack_require__(173);\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2dvb2QtbGlzdGVuZXIvc3JjL2xpc3Rlbi5qcz9hODgzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJDQUEyQztBQUN0RCxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzID0gcmVxdWlyZSgnLi9pcycpO1xudmFyIGRlbGVnYXRlID0gcmVxdWlyZSgnZGVsZWdhdGUnKTtcblxuLyoqXG4gKiBWYWxpZGF0ZXMgYWxsIHBhcmFtcyBhbmQgY2FsbHMgdGhlIHJpZ2h0XG4gKiBsaXN0ZW5lciBmdW5jdGlvbiBiYXNlZCBvbiBpdHMgdGFyZ2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQgJiYgIXR5cGUgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzLnN0cmluZyh0eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIFN0cmluZycpO1xuICAgIH1cblxuICAgIGlmICghaXMuZm4oY2FsbGJhY2spKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXJkIGFyZ3VtZW50IG11c3QgYmUgYSBGdW5jdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChpcy5ub2RlKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGUodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzLm5vZGVMaXN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGVMaXN0KHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChpcy5zdHJpbmcodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuU2VsZWN0b3IodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nLCBIVE1MRWxlbWVudCwgSFRNTENvbGxlY3Rpb24sIG9yIE5vZGVMaXN0Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBIVE1MIGVsZW1lbnRcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5Ob2RlKG5vZGUsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBsaXN0IG9mIEhUTUwgZWxlbWVudHNcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpc3R8SFRNTENvbGxlY3Rpb259IG5vZGVMaXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTm9kZUxpc3Qobm9kZUxpc3QsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBhIHNlbGVjdG9yXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5TZWxlY3RvcihzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZGVsZWdhdGUoZG9jdW1lbnQuYm9keSwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0ZW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZ29vZC1saXN0ZW5lci9zcmMvbGlzdGVuLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(179);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L25vdHlmL2luZGV4LmpzPzEwZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3R5ZicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ub3R5Zi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;(function(){\n    this.Notyf = function(){\n      //List of notifications currently active\n      this.notifications = [];\n\n      var defaults = {\n        delay:2000,\n        alertIcon:'notyf__icon--alert',\n        confirmIcon:'notyf__icon--confirm' \n      }\n\n      if (arguments[0] && typeof arguments[0] == \"object\"){\n        this.options = extendDefaults(defaults, arguments[0]);\n      }else{\n        this.options = defaults;\n      }\n\n      //Creates the main notifications container\n      var docFrag = document.createDocumentFragment();\n      var notyfContainer = document.createElement('div');\n      notyfContainer.className = 'notyf';\n      docFrag.appendChild(notyfContainer);\n      document.body.appendChild(docFrag);\n      this.container = notyfContainer;\n\n      //Stores which transitionEnd event this browser supports\n      this.animationEnd = animationEndSelect();\n    }\n\n    //---------- Public methods ---------------\n    /**\n    * Shows an alert card\n    */\n    this.Notyf.prototype.alert = function(alertMessage){\n      var card = buildNotificationCard.call(this, alertMessage, this.options.alertIcon);\n      card.className += ' notyf--alert';\n      this.container.appendChild(card);\n      this.notifications.push(card);\n    }\n\n    /**\n    * Shows a confirm card\n    */\n    this.Notyf.prototype.confirm = function(alertMessage){\n      var card = buildNotificationCard.call(this, alertMessage, this.options.confirmIcon);\n      card.className += ' notyf--confirm';\n      this.container.appendChild(card);\n      this.notifications.push(card);\n    }\n\n    //---------- Private methods ---------------\n\n    /**\n    * Populates the source object with the value from the same keys found in destination\n    */\n    function extendDefaults(source, destination){\n      for (property in destination){\n        //Avoid asigning inherited properties of destination, only asign to source the destination own properties\n        if(destination.hasOwnProperty(property)){\n          source[property] = destination[property];\n        }\n      }\n      return source;\n    }\n\n    /**\n    * Creates a generic card with the param message. Returns a document fragment.\n    */\n    function buildNotificationCard(messageText, iconClass){\n      //Card wrapper\n      var notification = document.createElement('div');\n      notification.className = 'notyf__toast';\n\n      var wrapper = document.createElement('div');\n      wrapper.className = 'notyf__wrapper';\n\n      var iconContainer = document.createElement('div');\n      iconContainer.className = 'notyf__icon';\n\n      var icon = document.createElement('i');\n      icon.className = iconClass;\n\n      var message = document.createElement('div');\n      message.className = 'notyf__message';\n      message.innerHTML = messageText;\n\n      //Build the card\n      iconContainer.appendChild(icon);\n      wrapper.appendChild(iconContainer);\n      wrapper.appendChild(message);\n      notification.appendChild(wrapper);\n\n      var _this = this;\n      setTimeout(function(){\n          notification.className += \" notyf--disappear\";\n          notification.addEventListener(_this.animationEnd, function(event){\n            event.target == notification && _this.container.removeChild(notification);\n          });\n          var index = _this.notifications.indexOf(notification);\n          _this.notifications.splice(index,1);\n      },_this.options.delay);\n\n      return notification;\n    }\n\n    // Determine which animationend event is supported\n    function animationEndSelect() {\n      var t;\n      var el = document.createElement('fake');\n      var transitions = {\n        'transition':'animationend',\n        'OTransition':'oAnimationEnd',\n        'MozTransition':'animationend',\n        'WebkitTransition':'webkitAnimationEnd'\n      }\n\n      for(t in transitions){\n          if( el.style[t] !== undefined ){\n              return transitions[t];\n          }\n      }\n    }\n\n})();\n\n(function() {\n    if (true)\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return Notyf; }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    else if (typeof module !== 'undefined' && module.exports)\n        module.exports = Notyf;\n    else\n        window.Notyf = Notyf;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L25vdHlmL3NyYy9ub3R5Zi5qcz8wYjEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsdURBQXFDLGNBQWMsRUFBRTtBQUFBO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxNzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcbiAgICB0aGlzLk5vdHlmID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vTGlzdCBvZiBub3RpZmljYXRpb25zIGN1cnJlbnRseSBhY3RpdmVcbiAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IFtdO1xuXG4gICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRlbGF5OjIwMDAsXG4gICAgICAgIGFsZXJ0SWNvbjonbm90eWZfX2ljb24tLWFsZXJ0JyxcbiAgICAgICAgY29uZmlybUljb246J25vdHlmX19pY29uLS1jb25maXJtJyBcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3VtZW50c1swXSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09IFwib2JqZWN0XCIpe1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmREZWZhdWx0cyhkZWZhdWx0cywgYXJndW1lbnRzWzBdKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0cztcbiAgICAgIH1cblxuICAgICAgLy9DcmVhdGVzIHRoZSBtYWluIG5vdGlmaWNhdGlvbnMgY29udGFpbmVyXG4gICAgICB2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIHZhciBub3R5ZkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm90eWZDb250YWluZXIuY2xhc3NOYW1lID0gJ25vdHlmJztcbiAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQobm90eWZDb250YWluZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2NGcmFnKTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gbm90eWZDb250YWluZXI7XG5cbiAgICAgIC8vU3RvcmVzIHdoaWNoIHRyYW5zaXRpb25FbmQgZXZlbnQgdGhpcyBicm93c2VyIHN1cHBvcnRzXG4gICAgICB0aGlzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZFNlbGVjdCgpO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLSBQdWJsaWMgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS1cbiAgICAvKipcbiAgICAqIFNob3dzIGFuIGFsZXJ0IGNhcmRcbiAgICAqL1xuICAgIHRoaXMuTm90eWYucHJvdG90eXBlLmFsZXJ0ID0gZnVuY3Rpb24oYWxlcnRNZXNzYWdlKXtcbiAgICAgIHZhciBjYXJkID0gYnVpbGROb3RpZmljYXRpb25DYXJkLmNhbGwodGhpcywgYWxlcnRNZXNzYWdlLCB0aGlzLm9wdGlvbnMuYWxlcnRJY29uKTtcbiAgICAgIGNhcmQuY2xhc3NOYW1lICs9ICcgbm90eWYtLWFsZXJ0JztcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcmQpO1xuICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2goY2FyZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTaG93cyBhIGNvbmZpcm0gY2FyZFxuICAgICovXG4gICAgdGhpcy5Ob3R5Zi5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKGFsZXJ0TWVzc2FnZSl7XG4gICAgICB2YXIgY2FyZCA9IGJ1aWxkTm90aWZpY2F0aW9uQ2FyZC5jYWxsKHRoaXMsIGFsZXJ0TWVzc2FnZSwgdGhpcy5vcHRpb25zLmNvbmZpcm1JY29uKTtcbiAgICAgIGNhcmQuY2xhc3NOYW1lICs9ICcgbm90eWYtLWNvbmZpcm0nO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XG4gICAgICB0aGlzLm5vdGlmaWNhdGlvbnMucHVzaChjYXJkKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0gUHJpdmF0ZSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgKiBQb3B1bGF0ZXMgdGhlIHNvdXJjZSBvYmplY3Qgd2l0aCB0aGUgdmFsdWUgZnJvbSB0aGUgc2FtZSBrZXlzIGZvdW5kIGluIGRlc3RpbmF0aW9uXG4gICAgKi9cbiAgICBmdW5jdGlvbiBleHRlbmREZWZhdWx0cyhzb3VyY2UsIGRlc3RpbmF0aW9uKXtcbiAgICAgIGZvciAocHJvcGVydHkgaW4gZGVzdGluYXRpb24pe1xuICAgICAgICAvL0F2b2lkIGFzaWduaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzIG9mIGRlc3RpbmF0aW9uLCBvbmx5IGFzaWduIHRvIHNvdXJjZSB0aGUgZGVzdGluYXRpb24gb3duIHByb3BlcnRpZXNcbiAgICAgICAgaWYoZGVzdGluYXRpb24uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKXtcbiAgICAgICAgICBzb3VyY2VbcHJvcGVydHldID0gZGVzdGluYXRpb25bcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIGdlbmVyaWMgY2FyZCB3aXRoIHRoZSBwYXJhbSBtZXNzYWdlLiBSZXR1cm5zIGEgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBidWlsZE5vdGlmaWNhdGlvbkNhcmQobWVzc2FnZVRleHQsIGljb25DbGFzcyl7XG4gICAgICAvL0NhcmQgd3JhcHBlclxuICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm90aWZpY2F0aW9uLmNsYXNzTmFtZSA9ICdub3R5Zl9fdG9hc3QnO1xuXG4gICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSAnbm90eWZfX3dyYXBwZXInO1xuXG4gICAgICB2YXIgaWNvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgaWNvbkNvbnRhaW5lci5jbGFzc05hbWUgPSAnbm90eWZfX2ljb24nO1xuXG4gICAgICB2YXIgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgIGljb24uY2xhc3NOYW1lID0gaWNvbkNsYXNzO1xuXG4gICAgICB2YXIgbWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbWVzc2FnZS5jbGFzc05hbWUgPSAnbm90eWZfX21lc3NhZ2UnO1xuICAgICAgbWVzc2FnZS5pbm5lckhUTUwgPSBtZXNzYWdlVGV4dDtcblxuICAgICAgLy9CdWlsZCB0aGUgY2FyZFxuICAgICAgaWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaWNvbkNvbnRhaW5lcik7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG1lc3NhZ2UpO1xuICAgICAgbm90aWZpY2F0aW9uLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIG5vdGlmaWNhdGlvbi5jbGFzc05hbWUgKz0gXCIgbm90eWYtLWRpc2FwcGVhclwiO1xuICAgICAgICAgIG5vdGlmaWNhdGlvbi5hZGRFdmVudExpc3RlbmVyKF90aGlzLmFuaW1hdGlvbkVuZCwgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0ID09IG5vdGlmaWNhdGlvbiAmJiBfdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5ub3RpZmljYXRpb25zLmluZGV4T2Yobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICBfdGhpcy5ub3RpZmljYXRpb25zLnNwbGljZShpbmRleCwxKTtcbiAgICAgIH0sX3RoaXMub3B0aW9ucy5kZWxheSk7XG5cbiAgICAgIHJldHVybiBub3RpZmljYXRpb247XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGFuaW1hdGlvbmVuZCBldmVudCBpcyBzdXBwb3J0ZWRcbiAgICBmdW5jdGlvbiBhbmltYXRpb25FbmRTZWxlY3QoKSB7XG4gICAgICB2YXIgdDtcbiAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zha2UnKTtcbiAgICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICAgICAgJ3RyYW5zaXRpb24nOidhbmltYXRpb25lbmQnLFxuICAgICAgICAnT1RyYW5zaXRpb24nOidvQW5pbWF0aW9uRW5kJyxcbiAgICAgICAgJ01velRyYW5zaXRpb24nOidhbmltYXRpb25lbmQnLFxuICAgICAgICAnV2Via2l0VHJhbnNpdGlvbic6J3dlYmtpdEFuaW1hdGlvbkVuZCdcbiAgICAgIH1cblxuICAgICAgZm9yKHQgaW4gdHJhbnNpdGlvbnMpe1xuICAgICAgICAgIGlmKCBlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uc1t0XTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG59KSgpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcbiAgICAgICAgZGVmaW5lKCdOb3R5ZicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5vdHlmOyB9KTtcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cylcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBOb3R5ZjtcbiAgICBlbHNlXG4gICAgICAgIHdpbmRvdy5Ob3R5ZiA9IE5vdHlmO1xufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ub3R5Zi9zcmMvbm90eWYuanNcbi8vIG1vZHVsZSBpZCA9IDE3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports){eval("function select(element) {\n    var selectedText;\n\n    if (element.nodeName === 'SELECT') {\n        element.focus();\n\n        selectedText = element.value;\n    }\n    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        var isReadOnly = element.hasAttribute('readonly');\n\n        if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n        }\n\n        element.select();\n        element.setSelectionRange(0, element.value.length);\n\n        if (!isReadOnly) {\n            element.removeAttribute('readonly');\n        }\n\n        selectedText = element.value;\n    }\n    else {\n        if (element.hasAttribute('contenteditable')) {\n            element.focus();\n        }\n\n        var selection = window.getSelection();\n        var range = document.createRange();\n\n        range.selectNodeContents(element);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        selectedText = selection.toString();\n    }\n\n    return selectedText;\n}\n\nmodule.exports = select;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NlbGVjdC9zcmMvc2VsZWN0LmpzPzBjOTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNlbGVjdChlbGVtZW50KSB7XG4gICAgdmFyIHNlbGVjdGVkVGV4dDtcblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHZhciBpc1JlYWRPbmx5ID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5Jyk7XG5cbiAgICAgICAgaWYgKCFpc1JlYWRPbmx5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGVsZW1lbnQudmFsdWUubGVuZ3RoKTtcblxuICAgICAgICBpZiAoIWlzUmVhZE9ubHkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGVkVGV4dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZWxlY3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2VsZWN0L3NyYy9zZWxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(156);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(183)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js!../sass-loader/lib/loader.js!./normalize.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js!../sass-loader/lib/loader.js!./normalize.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcz9hNzExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMTgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL25vcm1hbGl6ZS5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge31cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbm9ybWFsaXplLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbm9ybWFsaXplLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzc1xuLy8gbW9kdWxlIGlkID0gMTgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === "undefined") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === "undefined") {\n\t\t\tmemo[selector] = fn.call(this, selector);\n\t\t}\n\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(184);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== "undefined" && DEBUG) {\n\t\tif (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === "object" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = "head";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = "bottom";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error("Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === "top") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === "bottom") {\n\t\ttarget.appendChild(style);\n\t} else {\n\t\tthrow new Error("Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement("style");\n\n\toptions.attrs.type = "text/css";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement("link");\n\n\toptions.attrs.type = "text/css";\n\toptions.attrs.rel = "stylesheet";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don\'t add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === "function" &&\n\t\ttypeof URL.createObjectURL === "function" &&\n\t\ttypeof URL.revokeObjectURL === "function" &&\n\t\ttypeof Blob === "function" &&\n\t\ttypeof btoa === "function"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join(\'\\n\');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? "" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute("media", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn\'t defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\n\t}\n\n\tvar blob = new Blob([css], { type: "text/css" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports){eval('\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function "fixes" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== "undefined" && window.location;\n\n  if (!location) {\n    throw new Error("fixUrls requires window.location");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== "string") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + "//" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, "/");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word "url" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn\'t a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn\'t a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn\'t a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^"(.*)"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^\'(.*)\'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf("//") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf("/") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with \'/\'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, ""); // Strip leading \'./\'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn "url(" + JSON.stringify(newUrl) + ")";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N0eWxlLWxvYWRlci9saWIvdXJscy5qcz85YzMxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVyxFQUFFO0FBQ3JELHdDQUF3QyxXQUFXLEVBQUU7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esc0NBQXNDO0FBQ3RDLEdBQUc7QUFDSDtBQUNBLDhEQUE4RDtBQUM5RDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EiLCJmaWxlIjoiMTg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval("function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbnktZW1pdHRlci9pbmRleC5qcz9iZmE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7O0FBRUEsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBFICgpIHtcbiAgLy8gS2VlcCB0aGlzIGVtcHR5IHNvIGl0J3MgZWFzaWVyIHRvIGluaGVyaXQgZnJvbVxuICAvLyAodmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9saXBzbWFjayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvaXNzdWVzLzMpXG59XG5cbkUucHJvdG90eXBlID0ge1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4OiBjdHhcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyICgpIHtcbiAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrXG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgbGlzdGVuZXIsIGN0eCk7XG4gIH0sXG5cbiAgZW1pdDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGF0YSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZXZ0QXJyID0gKCh0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KSlbbmFtZV0gfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBldnRBcnIubGVuZ3RoO1xuXG4gICAgZm9yIChpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGV2dEFycltpXS5mbi5hcHBseShldnRBcnJbaV0uY3R4LCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvZmY6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG4gICAgdmFyIGV2dHMgPSBlW25hbWVdO1xuICAgIHZhciBsaXZlRXZlbnRzID0gW107XG5cbiAgICBpZiAoZXZ0cyAmJiBjYWxsYmFjaykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgbGl2ZUV2ZW50cy5wdXNoKGV2dHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBldmVudCBmcm9tIHF1ZXVlIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICAvLyBTdWdnZXN0ZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2xhemRcbiAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvY29tbWl0L2M2ZWJmYWE5YmM5NzNiMzNkMTEwYTg0YTMwNzc0MmI3Y2Y5NGM5NTMjY29tbWl0Y29tbWVudC01MDI0OTEwXG5cbiAgICAobGl2ZUV2ZW50cy5sZW5ndGgpXG4gICAgICA/IGVbbmFtZV0gPSBsaXZlRXZlbnRzXG4gICAgICA6IGRlbGV0ZSBlW25hbWVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW55LWVtaXR0ZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzPzMwNjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgcmV0dXJuIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dWlkL2xpYi9ieXRlc1RvVXVpZC5qc1xuLy8gbW9kdWxlIGlkID0gMTg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvbGliL3JuZy1icm93c2VyLmpzPzk0NWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxODcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxudmFyIHJuZztcblxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvOyAvLyBmb3IgSUUgMTFcbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIHJuZyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbiAgICByZXR1cm4gcm5kczg7XG4gIH07XG59XG5cbmlmICghcm5nKSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuICBybmcgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBybmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdXVpZC9saWIvcm5nLWJyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(187);\nvar bytesToUuid = __webpack_require__(186);\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvdjQuanM/NDJlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dWlkL3Y0LmpzXG4vLyBtb2R1bGUgaWQgPSAxODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"arrow-circle-down":{"width":1536,"height":1792,"paths":[{"d":"M1284 897q0-27-18-45l-91-91q-18-18-45-18t-45 18l-189 189v-502q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v502l-189-189q-19-19-45-19t-45 19l-91 91q-18 18-18 45t18 45l362 362 91 91q18 18 45 18t45-18l91-91 362-362q18-18 18-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS1kb3duLmpzP2NmNTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxxQkFBcUIscUNBQXFDLHFYQUFxWCxHQUFHIiwiZmlsZSI6IjE4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiYXJyb3ctY2lyY2xlLWRvd25cIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTEyODQgODk3cTAtMjctMTgtNDVsLTkxLTkxcS0xOC0xOC00NS0xOHQtNDUgMThsLTE4OSAxODl2LTUwMnEwLTI2LTE5LTQ1dC00NS0xOWgtMTI4cS0yNiAwLTQ1IDE5dC0xOSA0NXY1MDJsLTE4OS0xODlxLTE5LTE5LTQ1LTE5dC00NSAxOWwtOTEgOTFxLTE4IDE4LTE4IDQ1dDE4IDQ1bDM2MiAzNjIgOTEgOTFxMTggMTggNDUgMTh0NDUtMThsOTEtOTEgMzYyLTM2MnExOC0xOCAxOC00NXpNMTUzNiA4OTZxMCAyMDktMTAzIDM4NS41dC0yNzkuNSAyNzkuNS0zODUuNSAxMDMtMzg1LjUtMTAzLTI3OS41LTI3OS41LTEwMy0zODUuNSAxMDMtMzg1LjUgMjc5LjUtMjc5LjUgMzg1LjUtMTAzIDM4NS41IDEwMyAyNzkuNSAyNzkuNSAxMDMgMzg1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS1kb3duLmpzXG4vLyBtb2R1bGUgaWQgPSAxODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"arrow-circle-left":{"width":1536,"height":1792,"paths":[{"d":"M1280 960v-128q0-26-19-45t-45-19h-502l189-189q19-19 19-45t-19-45l-91-91q-18-18-45-18t-45 18l-362 362-91 91q-18 18-18 45t18 45l91 91 362 362q18 18 45 18t45-18l91-91q18-18 18-45t-18-45l-189-189h502q26 0 45-19t19-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS1sZWZ0LmpzPzdlYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxxQkFBcUIscUNBQXFDLDZXQUE2VyxHQUFHIiwiZmlsZSI6IjE5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiYXJyb3ctY2lyY2xlLWxlZnRcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTEyODAgOTYwdi0xMjhxMC0yNi0xOS00NXQtNDUtMTloLTUwMmwxODktMTg5cTE5LTE5IDE5LTQ1dC0xOS00NWwtOTEtOTFxLTE4LTE4LTQ1LTE4dC00NSAxOGwtMzYyIDM2Mi05MSA5MXEtMTggMTgtMTggNDV0MTggNDVsOTEgOTEgMzYyIDM2MnExOCAxOCA0NSAxOHQ0NS0xOGw5MS05MXExOC0xOCAxOC00NXQtMTgtNDVsLTE4OS0xODloNTAycTI2IDAgNDUtMTl0MTktNDV6TTE1MzYgODk2cTAgMjA5LTEwMyAzODUuNXQtMjc5LjUgMjc5LjUtMzg1LjUgMTAzLTM4NS41LTEwMy0yNzkuNS0yNzkuNS0xMDMtMzg1LjUgMTAzLTM4NS41IDI3OS41LTI3OS41IDM4NS41LTEwMyAzODUuNSAxMDMgMjc5LjUgMjc5LjUgMTAzIDM4NS41elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9hcnJvdy1jaXJjbGUtbGVmdC5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"arrow-circle-right":{"width":1536,"height":1792,"paths":[{"d":"M1285 896q0-27-18-45l-91-91-362-362q-18-18-45-18t-45 18l-91 91q-18 18-18 45t18 45l189 189h-502q-26 0-45 19t-19 45v128q0 26 19 45t45 19h502l-189 189q-19 19-19 45t19 45l91 91q18 18 45 18t45-18l362-362 91-91q18-18 18-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS1yaWdodC5qcz83NjlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsc0JBQXNCLHFDQUFxQyxpWEFBaVgsR0FBRyIsImZpbGUiOiIxOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImFycm93LWNpcmNsZS1yaWdodFwiOntcIndpZHRoXCI6MTUzNixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNMTI4NSA4OTZxMC0yNy0xOC00NWwtOTEtOTEtMzYyLTM2MnEtMTgtMTgtNDUtMTh0LTQ1IDE4bC05MSA5MXEtMTggMTgtMTggNDV0MTggNDVsMTg5IDE4OWgtNTAycS0yNiAwLTQ1IDE5dC0xOSA0NXYxMjhxMCAyNiAxOSA0NXQ0NSAxOWg1MDJsLTE4OSAxODlxLTE5IDE5LTE5IDQ1dDE5IDQ1bDkxIDkxcTE4IDE4IDQ1IDE4dDQ1LTE4bDM2Mi0zNjIgOTEtOTFxMTgtMTggMTgtNDV6TTE1MzYgODk2cTAgMjA5LTEwMyAzODUuNXQtMjc5LjUgMjc5LjUtMzg1LjUgMTAzLTM4NS41LTEwMy0yNzkuNS0yNzkuNS0xMDMtMzg1LjUgMTAzLTM4NS41IDI3OS41LTI3OS41IDM4NS41LTEwMyAzODUuNSAxMDMgMjc5LjUgMjc5LjUgMTAzIDM4NS41elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9hcnJvdy1jaXJjbGUtcmlnaHQuanNcbi8vIG1vZHVsZSBpZCA9IDE5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"arrow-circle-up":{"width":1536,"height":1792,"paths":[{"d":"M1284 895q0-27-18-45l-362-362-91-91q-18-18-45-18t-45 18l-91 91-362 362q-18 18-18 45t18 45l91 91q18 18 45 18t45-18l189-189v502q0 26 19 45t45 19h128q26 0 45-19t19-45v-502l189 189q19 19 45 19t45-19l91-91q18-18 18-45zM1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS11cC5qcz84NGE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsbUJBQW1CLHFDQUFxQyw2V0FBNlcsR0FBRyIsImZpbGUiOiIxOTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImFycm93LWNpcmNsZS11cFwiOntcIndpZHRoXCI6MTUzNixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNMTI4NCA4OTVxMC0yNy0xOC00NWwtMzYyLTM2Mi05MS05MXEtMTgtMTgtNDUtMTh0LTQ1IDE4bC05MSA5MS0zNjIgMzYycS0xOCAxOC0xOCA0NXQxOCA0NWw5MSA5MXExOCAxOCA0NSAxOHQ0NS0xOGwxODktMTg5djUwMnEwIDI2IDE5IDQ1dDQ1IDE5aDEyOHEyNiAwIDQ1LTE5dDE5LTQ1di01MDJsMTg5IDE4OXExOSAxOSA0NSAxOXQ0NS0xOWw5MS05MXExOC0xOCAxOC00NXpNMTUzNiA4OTZxMCAyMDktMTAzIDM4NS41dC0yNzkuNSAyNzkuNS0zODUuNSAxMDMtMzg1LjUtMTAzLTI3OS41LTI3OS41LTEwMy0zODUuNSAxMDMtMzg1LjUgMjc5LjUtMjc5LjUgMzg1LjUtMTAzIDM4NS41IDEwMyAyNzkuNSAyNzkuNSAxMDMgMzg1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2Fycm93LWNpcmNsZS11cC5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"check":{"width":1792,"height":1792,"paths":[{"d":"M1671 566q0 40-28 68l-724 724-136 136q-28 28-68 28t-68-28l-136-136-362-362q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 295 656-657q28-28 68-28t68 28l136 136q28 28 28 68z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZWNrLmpzPzVkMjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxTQUFTLHFDQUFxQyxxTEFBcUwsR0FBRyIsImZpbGUiOiIxOTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImNoZWNrXCI6e1wid2lkdGhcIjoxNzkyLFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xNjcxIDU2NnEwIDQwLTI4IDY4bC03MjQgNzI0LTEzNiAxMzZxLTI4IDI4LTY4IDI4dC02OC0yOGwtMTM2LTEzNi0zNjItMzYycS0yOC0yOC0yOC02OHQyOC02OGwxMzYtMTM2cTI4LTI4IDY4LTI4dDY4IDI4bDI5NCAyOTUgNjU2LTY1N3EyOC0yOCA2OC0yOHQ2OCAyOGwxMzYgMTM2cTI4IDI4IDI4IDY4elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9jaGVjay5qc1xuLy8gbW9kdWxlIGlkID0gMTkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"chevron-down":{"width":1792,"height":1792,"paths":[{"d":"M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tZG93bi5qcz80OWM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsZ0JBQWdCLHFDQUFxQyx5S0FBeUssR0FBRyIsImZpbGUiOiIxOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImNoZXZyb24tZG93blwiOntcIndpZHRoXCI6MTc5MixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNMTY4MyA4MDhsLTc0MiA3NDFxLTE5IDE5LTQ1IDE5dC00NS0xOWwtNzQyLTc0MXEtMTktMTktMTktNDUuNXQxOS00NS41bDE2Ni0xNjVxMTktMTkgNDUtMTl0NDUgMTlsNTMxIDUzMSA1MzEtNTMxcTE5LTE5IDQ1LTE5dDQ1IDE5bDE2NiAxNjVxMTkgMTkgMTkgNDUuNXQtMTkgNDUuNXpcIn1dfX0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWF3ZXNvbWUvaWNvbnMvY2hldnJvbi1kb3duLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"chevron-up":{"width":1792,"height":1792,"paths":[{"d":"M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tdXAuanM/MTY0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLHVFQUFlLGNBQWMscUNBQXFDLDZLQUE2SyxHQUFHIiwiZmlsZSI6IjE5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi52dWUnXG5cbkljb24ucmVnaXN0ZXIoe1wiY2hldnJvbi11cFwiOntcIndpZHRoXCI6MTc5MixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNMTY4MyAxMzMxbC0xNjYgMTY1cS0xOSAxOS00NSAxOXQtNDUtMTlsLTUzMS01MzEtNTMxIDUzMXEtMTkgMTktNDUgMTl0LTQ1LTE5bC0xNjYtMTY1cS0xOS0xOS0xOS00NS41dDE5LTQ1LjVsNzQyLTc0MXExOS0xOSA0NS0xOXQ0NSAxOWw3NDIgNzQxcTE5IDE5IDE5IDQ1LjV0LTE5IDQ1LjV6XCJ9XX19KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NoZXZyb24tdXAuanNcbi8vIG1vZHVsZSBpZCA9IDE5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"circle":{"width":1536,"height":1792,"paths":[{"d":"M1536 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2NpcmNsZS5qcz9jOWM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsVUFBVSxxQ0FBcUMsd0pBQXdKLEdBQUciLCJmaWxlIjoiMTk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9JY29uLnZ1ZSdcblxuSWNvbi5yZWdpc3Rlcih7XCJjaXJjbGVcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTE1MzYgODk2cTAgMjA5LTEwMyAzODUuNXQtMjc5LjUgMjc5LjUtMzg1LjUgMTAzLTM4NS41LTEwMy0yNzkuNS0yNzkuNS0xMDMtMzg1LjUgMTAzLTM4NS41IDI3OS41LTI3OS41IDM4NS41LTEwMyAzODUuNSAxMDMgMjc5LjUgMjc5LjUgMTAzIDM4NS41elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9jaXJjbGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"github":{"width":1536,"height":1792,"paths":[{"d":"M768 128q209 0 385.5 103t279.5 279.5 103 385.5q0 251-146.5 451.5t-378.5 277.5q-27 5-40-7t-13-30q0-3 0.5-76.5t0.5-134.5q0-97-52-142 57-6 102.5-18t94-39 81-66.5 53-105 20.5-150.5q0-119-79-206 37-91-8-204-28-9-81 11t-92 44l-38 24q-93-26-192-26t-192 26q-16-11-42.5-27t-83.5-38.5-85-13.5q-45 113-8 204-79 87-79 206 0 85 20.5 150t52.5 105 80.5 67 94 39 102.5 18q-39 36-49 103-21 10-45 15t-57 5-65.5-21.5-55.5-62.5q-19-32-48.5-52t-49.5-24l-20-3q-21 0-29 4.5t-5 11.5 9 14 13 12l7 5q22 10 43.5 38t31.5 51l10 23q13 38 44 61.5t67 30 69.5 7 55.5-3.5l23-4q0 38 0.5 88.5t0.5 54.5q0 18-13 30t-40 7q-232-77-378.5-277.5t-146.5-451.5q0-209 103-385.5t279.5-279.5 385.5-103zM291 1231q3-7-7-12-10-3-13 2-3 7 7 12 9 6 13-2zM322 1265q7-5-2-16-10-9-16-3-7 5 2 16 10 10 16 3zM352 1310q9-7 0-19-8-13-17-6-9 5 0 18t17 7zM394 1352q8-8-4-19-12-12-20-3-9 8 4 19 12 12 20 3zM451 1377q3-11-13-16-15-4-19 7t13 15q15 6 19-6zM514 1382q0-13-17-11-16 0-16 11 0 13 17 11 16 0 16-11zM572 1372q-2-11-18-9-16 3-14 15t18 8 14-14z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL2dpdGh1Yi5qcz9jNDlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsVUFBVSxxQ0FBcUMsaytCQUFrK0IsR0FBRyIsImZpbGUiOiIxOTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcImdpdGh1YlwiOntcIndpZHRoXCI6MTUzNixcImhlaWdodFwiOjE3OTIsXCJwYXRoc1wiOlt7XCJkXCI6XCJNNzY4IDEyOHEyMDkgMCAzODUuNSAxMDN0Mjc5LjUgMjc5LjUgMTAzIDM4NS41cTAgMjUxLTE0Ni41IDQ1MS41dC0zNzguNSAyNzcuNXEtMjcgNS00MC03dC0xMy0zMHEwLTMgMC41LTc2LjV0MC41LTEzNC41cTAtOTctNTItMTQyIDU3LTYgMTAyLjUtMTh0OTQtMzkgODEtNjYuNSA1My0xMDUgMjAuNS0xNTAuNXEwLTExOS03OS0yMDYgMzctOTEtOC0yMDQtMjgtOS04MSAxMXQtOTIgNDRsLTM4IDI0cS05My0yNi0xOTItMjZ0LTE5MiAyNnEtMTYtMTEtNDIuNS0yN3QtODMuNS0zOC41LTg1LTEzLjVxLTQ1IDExMy04IDIwNC03OSA4Ny03OSAyMDYgMCA4NSAyMC41IDE1MHQ1Mi41IDEwNSA4MC41IDY3IDk0IDM5IDEwMi41IDE4cS0zOSAzNi00OSAxMDMtMjEgMTAtNDUgMTV0LTU3IDUtNjUuNS0yMS41LTU1LjUtNjIuNXEtMTktMzItNDguNS01MnQtNDkuNS0yNGwtMjAtM3EtMjEgMC0yOSA0LjV0LTUgMTEuNSA5IDE0IDEzIDEybDcgNXEyMiAxMCA0My41IDM4dDMxLjUgNTFsMTAgMjNxMTMgMzggNDQgNjEuNXQ2NyAzMCA2OS41IDcgNTUuNS0zLjVsMjMtNHEwIDM4IDAuNSA4OC41dDAuNSA1NC41cTAgMTgtMTMgMzB0LTQwIDdxLTIzMi03Ny0zNzguNS0yNzcuNXQtMTQ2LjUtNDUxLjVxMC0yMDkgMTAzLTM4NS41dDI3OS41LTI3OS41IDM4NS41LTEwM3pNMjkxIDEyMzFxMy03LTctMTItMTAtMy0xMyAyLTMgNyA3IDEyIDkgNiAxMy0yek0zMjIgMTI2NXE3LTUtMi0xNi0xMC05LTE2LTMtNyA1IDIgMTYgMTAgMTAgMTYgM3pNMzUyIDEzMTBxOS03IDAtMTktOC0xMy0xNy02LTkgNSAwIDE4dDE3IDd6TTM5NCAxMzUycTgtOC00LTE5LTEyLTEyLTIwLTMtOSA4IDQgMTkgMTIgMTIgMjAgM3pNNDUxIDEzNzdxMy0xMS0xMy0xNi0xNS00LTE5IDd0MTMgMTVxMTUgNiAxOS02ek01MTQgMTM4MnEwLTEzLTE3LTExLTE2IDAtMTYgMTEgMCAxMyAxNyAxMSAxNiAwIDE2LTExek01NzIgMTM3MnEtMi0xMS0xOC05LTE2IDMtMTQgMTV0MTggOCAxNC0xNHpcIn1dfX0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWF3ZXNvbWUvaWNvbnMvZ2l0aHViLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"share-alt":{"width":1536,"height":1792,"paths":[{"d":"M1216 1024q133 0 226.5 93.5t93.5 226.5-93.5 226.5-226.5 93.5-226.5-93.5-93.5-226.5q0-12 2-34l-360-180q-92 86-218 86-133 0-226.5-93.5t-93.5-226.5 93.5-226.5 226.5-93.5q126 0 218 86l360-180q-2-22-2-34 0-133 93.5-226.5t226.5-93.5 226.5 93.5 93.5 226.5-93.5 226.5-226.5 93.5q-126 0-218-86l-360 180q2 22 2 34t-2 34l360 180q92-86 218-86z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3NoYXJlLWFsdC5qcz81OTU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsdUVBQWUsYUFBYSxxQ0FBcUMsa1ZBQWtWLEdBQUciLCJmaWxlIjoiMTk4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9JY29uLnZ1ZSdcblxuSWNvbi5yZWdpc3Rlcih7XCJzaGFyZS1hbHRcIjp7XCJ3aWR0aFwiOjE1MzYsXCJoZWlnaHRcIjoxNzkyLFwicGF0aHNcIjpbe1wiZFwiOlwiTTEyMTYgMTAyNHExMzMgMCAyMjYuNSA5My41dDkzLjUgMjI2LjUtOTMuNSAyMjYuNS0yMjYuNSA5My41LTIyNi41LTkzLjUtOTMuNS0yMjYuNXEwLTEyIDItMzRsLTM2MC0xODBxLTkyIDg2LTIxOCA4Ni0xMzMgMC0yMjYuNS05My41dC05My41LTIyNi41IDkzLjUtMjI2LjUgMjI2LjUtOTMuNXExMjYgMCAyMTggODZsMzYwLTE4MHEtMi0yMi0yLTM0IDAtMTMzIDkzLjUtMjI2LjV0MjI2LjUtOTMuNSAyMjYuNSA5My41IDkzLjUgMjI2LjUtOTMuNSAyMjYuNS0yMjYuNSA5My41cS0xMjYgMC0yMTgtODZsLTM2MCAxODBxMiAyMiAyIDM0dC0yIDM0bDM2MCAxODBxOTItODYgMjE4LTg2elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy9zaGFyZS1hbHQuanNcbi8vIG1vZHVsZSBpZCA9IDE5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0__components_Icon_vue___default.a.register({"times":{"width":1408,"height":1792,"paths":[{"d":"M1298 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z"}]}})\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2ljb25zL3RpbWVzLmpzP2FlOGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSx1RUFBZSxTQUFTLHFDQUFxQyxrUkFBa1IsR0FBRyIsImZpbGUiOiIxOTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0ljb24udnVlJ1xuXG5JY29uLnJlZ2lzdGVyKHtcInRpbWVzXCI6e1wid2lkdGhcIjoxNDA4LFwiaGVpZ2h0XCI6MTc5MixcInBhdGhzXCI6W3tcImRcIjpcIk0xMjk4IDEzMjJxMCA0MC0yOCA2OGwtMTM2IDEzNnEtMjggMjgtNjggMjh0LTY4LTI4bC0yOTQtMjk0LTI5NCAyOTRxLTI4IDI4LTY4IDI4dC02OC0yOGwtMTM2LTEzNnEtMjgtMjgtMjgtNjh0MjgtNjhsMjk0LTI5NC0yOTQtMjk0cS0yOC0yOC0yOC02OHQyOC02OGwxMzYtMTM2cTI4LTI4IDY4LTI4dDY4IDI4bDI5NCAyOTQgMjk0LTI5NHEyOC0yOCA2OC0yOHQ2OCAyOGwxMzYgMTM2cTI4IDI4IDI4IDY4dC0yOCA2OGwtMjk0IDI5NCAyOTQgMjk0cTI4IDI4IDI4IDY4elwifV19fSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtYXdlc29tZS9pY29ucy90aW1lcy5qc1xuLy8gbW9kdWxlIGlkID0gMTk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('/**\n * vue-form-generator v2.0.0\n * https://github.com/icebob/vue-form-generator\n * Released under the MIT License.\n */\n\n!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.VueFormGenerator=t():e.VueFormGenerator=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}(function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))switch(typeof e[t]){case"function":break;case"object":e[t]=function(t){var n=t.slice(1),r=e[t[0]];return function(e,t,o){r.apply(this,[e,t,o].concat(n))}}(e[t]);break;default:e[t]=e[e[t]]}return e}([function(e,t,n){"use strict";e.exports={component:n(1),schema:n(46),validators:n(148),abstractField:n(147).default,install:function(t){t.component("VueFormGenerator",e.exports.component)}}},function(e,t,n){n(2);var r=n(3)(n(4),n(314),null,null);e.exports=r.exports},function(e,t){},function(e,t){e.exports=function(e,t,n,r){var o,i=e=e||{},a=typeof e.default;"object"!==a&&"function"!==a||(o=e,i=e.default);var s="function"==typeof i?i.options:i;if(t&&(s.render=t.render,s.staticRenderFns=t.staticRenderFns),n&&(s._scopeId=n),r){var u=s.computed||(s.computed={});Object.keys(r).forEach(function(e){var t=r[e];u[e]=function(){return t}})}return{esModule:o,exports:i,options:s}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),i=r(o),a=n(12),s=r(a),u=n(14),c=r(u),l=n(15),f=r(l),d=n(17),p=r(d),h=n(46),m={},v=n(143);(0,p.default)(v.keys(),function(e){var t=e.replace(/^\\.\\//,"").replace(/\\.vue/,"");m[t]=v(e)});var y=n(228);(0,p.default)(y.keys(),function(e){var t=e.replace(/^\\.\\//,"").replace(/\\.vue/,"");m[t]=y(e)}),t.default={components:m,props:{schema:Object,model:Object,options:{type:Object,default:function(){return{validateAfterLoad:!1,validateAfterChanged:!1,validationErrorClass:"error",validationSuccessClass:""}}},multiple:{type:Boolean,default:!1},isNewModel:{type:Boolean,default:!1},tag:{type:String,default:"fieldset",validator:function(e){return e.length>0}}},data:function(){return{errors:[]}},computed:{fields:function(){var e=this,t=[];return this.schema&&this.schema.fields&&(0,p.default)(this.schema.fields,function(n){e.multiple&&n.multi!==!0||t.push(n)}),t},groups:function(){var e=[];return this.schema&&this.schema.groups&&(0,p.default)(this.schema.groups,function(t){e.push(t)}),e}},watch:{model:function(e,t){var n=this;t!=e&&null!=e&&this.$nextTick(function(){n.options.validateAfterLoad===!0&&n.isNewModel!==!0?n.validate():n.clearValidationErrors()})}},mounted:function(){var e=this;this.$nextTick(function(){e.model&&(e.options.validateAfterLoad===!0&&e.isNewModel!==!0?e.validate():e.clearValidationErrors())})},methods:{getFieldRowClasses:function(e){var t=this.fieldErrors(e).length>0,n={error:t,disabled:this.fieldDisabled(e),readonly:this.fieldReadonly(e),featured:this.fieldFeatured(e),required:this.fieldRequired(e)},r=this.options,o=r.validationErrorClass,a=r.validationSuccessClass;return o&&a&&(t?(n[o]=!0,n.error=!1):n[a]=!0),(0,s.default)(e.styleClasses)?(0,p.default)(e.styleClasses,function(e){return n[e]=!0}):(0,i.default)(e.styleClasses)&&(n[e.styleClasses]=!0),n["field-"+e.type]=!0,n},getFieldType:function(e){return"field-"+e.type},fieldTypeHasLabel:function(e){var t="";switch(t="input"===e.type?e.inputType:e.type){case"button":case"submit":case"reset":return!1;default:return!0}},fieldDisabled:function(e){return(0,f.default)(e.disabled)?e.disabled.call(this,this.model,e,this):!(0,c.default)(e.disabled)&&e.disabled},fieldRequired:function(e){return(0,f.default)(e.required)?e.required.call(this,this.model,e,this):!(0,c.default)(e.required)&&e.required},fieldVisible:function(e){return(0,f.default)(e.visible)?e.visible.call(this,this.model,e,this):!!(0,c.default)(e.visible)||e.visible},fieldReadonly:function(e){return(0,f.default)(e.readonly)?e.readonly.call(this,this.model,e,this):!(0,c.default)(e.readonly)&&e.readonly},fieldFeatured:function(e){return(0,f.default)(e.featured)?e.featured.call(this,this.model,e,this):!(0,c.default)(e.featured)&&e.featured},buttonClickHandler:function(e,t,n){return e.onclick.call(this,this.model,t,n,this)},onFieldValidated:function(e,t,n){var r=this;this.errors=this.errors.filter(function(e){return e.field!=n.schema}),!e&&t&&t.length>0&&t.forEach(function(e){r.errors.push({field:n.schema,error:e})});var o=0==this.errors.length;this.$emit("validated",o,this.errors)},validate:function(){var e=this;this.clearValidationErrors(),this.$children.forEach(function(t){if((0,f.default)(t.validate)){var n=t.validate(!0);n.forEach(function(n){e.errors.push({field:t.schema,error:n})})}});var t=0==this.errors.length;return this.$emit("validated",t,this.errors),t},clearValidationErrors:function(){this.errors.splice(0),(0,p.default)(this.$children,function(e){e.clearValidationErrors()})},modelUpdated:function(e,t){this.$emit("model-updated",e,t)},buttonVisibility:function(e){return e.buttons&&e.buttons.length>0},fieldErrors:function(e){var t=this.errors.filter(function(t){return t.field==e});return t.map(function(e){return e.error})},getFieldID:function(e){var t=this.options&&this.options.fieldIdPrefix?this.options.fieldIdPrefix:"";return(0,h.slugifyFormID)(e,t)}}}},function(e,t,n){function r(e){return"string"==typeof e||!i(e)&&a(e)&&o(e)==s}var o=n(6),i=n(12),a=n(13),s="[object String]";e.exports=r},function(e,t,n){function r(e){return null==e?void 0===e?u:s:c&&c in Object(e)?i(e):a(e)}var o=n(7),i=n(10),a=n(11),s="[object Null]",u="[object Undefined]",c=o?o.toStringTag:void 0;e.exports=r},function(e,t,n){var r=n(8),o=r.Symbol;e.exports=o},function(e,t,n){var r=n(9),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,function(){return this}())},function(e,t,n){function r(e){var t=a.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=s.call(e);return r&&(t?e[u]=n:delete e[u]),o}var o=n(7),i=Object.prototype,a=i.hasOwnProperty,s=i.toString,u=o?o.toStringTag:void 0;e.exports=r},function(e,t){function n(e){return o.call(e)}var r=Object.prototype,o=r.toString;e.exports=n},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){function n(e){return null!=e&&"object"==typeof e}e.exports=n},function(e,t){function n(e){return null==e}e.exports=n},function(e,t,n){function r(e){if(!i(e))return!1;var t=o(e);return t==s||t==u||t==a||t==c}var o=n(6),i=n(16),a="[object AsyncFunction]",s="[object Function]",u="[object GeneratorFunction]",c="[object Proxy]";e.exports=r},function(e,t){function n(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}e.exports=n},function(e,t,n){e.exports=n(18)},function(e,t,n){function r(e,t){var n=s(e)?o:i;return n(e,a(t))}var o=n(19),i=n(20),a=n(44),s=n(12);e.exports=r},function(e,t){function n(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&t(e[n],n,e)!==!1;);return e}e.exports=n},function(e,t,n){var r=n(21),o=n(43),i=o(r);e.exports=i},function(e,t,n){function r(e,t){return e&&o(e,t,i)}var o=n(22),i=n(24);e.exports=r},function(e,t,n){var r=n(23),o=r();e.exports=o},function(e,t){function n(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),s=a.length;s--;){var u=a[e?s:++o];if(n(i[u],u,i)===!1)break}return t}}e.exports=n},function(e,t,n){function r(e){return a(e)?o(e):i(e)}var o=n(25),i=n(38),a=n(42);e.exports=r},function(e,t,n){function r(e,t){var n=a(e),r=!n&&i(e),l=!n&&!r&&s(e),d=!n&&!r&&!l&&c(e),p=n||r||l||d,h=p?o(e.length,String):[],m=h.length;for(var v in e)!t&&!f.call(e,v)||p&&("length"==v||l&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,m))||h.push(v);return h}var o=n(26),i=n(27),a=n(12),s=n(29),u=n(32),c=n(33),l=Object.prototype,f=l.hasOwnProperty;e.exports=r},function(e,t){function n(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}e.exports=n},function(e,t,n){var r=n(28),o=n(13),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=u},function(e,t,n){function r(e){return i(e)&&o(e)==a}var o=n(6),i=n(13),a="[object Arguments]";e.exports=r},function(e,t,n){(function(e){var r=n(8),o=n(31),i="object"==typeof t&&t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i,u=s?r.Buffer:void 0,c=u?u.isBuffer:void 0,l=c||o;e.exports=l}).call(t,n(30)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){function n(){return!1}e.exports=n},function(e,t){function n(e,t){return t=null==t?r:t,!!t&&("number"==typeof e||o.test(e))&&e>-1&&e%1==0&&e<t}var r=9007199254740991,o=/^(?:0|[1-9]\\d*)$/;e.exports=n},function(e,t,n){var r=n(34),o=n(36),i=n(37),a=i&&i.isTypedArray,s=a?o(a):r;e.exports=s},function(e,t,n){function r(e){return a(e)&&i(e.length)&&!!T[o(e)]}var o=n(6),i=n(35),a=n(13),s="[object Arguments]",u="[object Array]",c="[object Boolean]",l="[object Date]",f="[object Error]",d="[object Function]",p="[object Map]",h="[object Number]",m="[object Object]",v="[object RegExp]",y="[object Set]",b="[object String]",g="[object WeakMap]",x="[object ArrayBuffer]",_="[object DataView]",w="[object Float32Array]",O="[object Float64Array]",j="[object Int8Array]",M="[object Int16Array]",k="[object Int32Array]",S="[object Uint8Array]",C="[object Uint8ClampedArray]",P="[object Uint16Array]",F="[object Uint32Array]",T={};T[w]=T[O]=T[j]=T[M]=T[k]=T[S]=T[C]=T[P]=T[F]=!0,T[s]=T[u]=T[x]=T[c]=T[_]=T[l]=T[f]=T[d]=T[p]=T[h]=T[m]=T[v]=T[y]=T[b]=T[g]=!1,e.exports=r},function(e,t){function n(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}var r=9007199254740991;e.exports=n},function(e,t){function n(e){return function(t){return e(t)}}e.exports=n},function(e,t,n){(function(e){var r=n(9),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o,s=a&&r.process,u=function(){try{return s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=u}).call(t,n(30)(e))},function(e,t,n){function r(e){if(!o(e))return i(e);var t=[];for(var n in Object(e))s.call(e,n)&&"constructor"!=n&&t.push(n);return t}var o=n(39),i=n(40),a=Object.prototype,s=a.hasOwnProperty;e.exports=r},function(e,t){function n(e){var t=e&&e.constructor,n="function"==typeof t&&t.prototype||r;return e===n}var r=Object.prototype;e.exports=n},function(e,t,n){var r=n(41),o=r(Object.keys,Object);e.exports=o},function(e,t){function n(e,t){return function(n){return e(t(n))}}e.exports=n},function(e,t,n){function r(e){return null!=e&&i(e.length)&&!o(e)}var o=n(15),i=n(35);e.exports=r},function(e,t,n){function r(e,t){return function(n,r){if(null==n)return n;if(!o(n))return e(n,r);for(var i=n.length,a=t?i:-1,s=Object(n);(t?a--:++a<i)&&r(s[a],a,s)!==!1;);return n}}var o=n(42);e.exports=r},function(e,t,n){function r(e){return"function"==typeof e?e:o}var o=n(45);e.exports=r},function(e,t){function n(e){return e}e.exports=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(47),i=r(o),a=n(15),s=r(a),u=n(12),c=r(u),l=n(16),f=r(l),d=n(17),p=r(d),h=n(129),m=r(h),v=n(141),y=r(v);e.exports.createDefaultObject=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,p.default)(e.fields,function(n){void 0===(0,y.default)(t,n.model)&&void 0!==n.default&&((0,s.default)(n.default)?(0,m.default)(t,n.model,n.default(n,e,t)):(0,f.default)(n.default)||(0,c.default)(n.default)?(0,m.default)(t,n.model,(0,i.default)(n.default)):(0,m.default)(t,n.model,n.default))}),t},e.exports.getMultipleFields=function(e){var t=[];return(0,p.default)(e.fields,function(e){e.multi===!0&&t.push(e)}),t},e.exports.mergeMultiObjectFields=function(t,n){var r={},o=e.exports.getMultipleFields(t);return(0,p.default)(o,function(e){var t=void 0,o=!0,i=e.model;(0,p.default)(n,function(e){var n=(0,y.default)(e,i);o?(t=n,o=!1):t!=n&&(t=void 0)}),(0,m.default)(r,i,t)}),r},e.exports.slugifyFormID=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"undefined"!=typeof e.id?t+e.id:t+(e.inputName||e.label||e.model).toString().trim().toLowerCase().replace(/ |_/g,"-").replace(/-{2,}/g,"-").replace(/^-+|-+$/g,"").replace(/([^a-zA-Z0-9-]+)/g,"")}},function(e,t,n){function r(e){return o(e,i|a)}var o=n(48),i=1,a=4;e.exports=r},function(e,t,n){function r(e,t,n,S,C,P){var F,I=t&O,$=t&j,E=t&M;if(n&&(F=C?n(e,S,C,P):n(e)),void 0!==F)return F;if(!_(e))return e;var N=g(e);if(N){if(F=v(e),!I)return l(e,F)}else{var Y=m(e),R=Y==T||Y==D;if(x(e))return c(e,I);if(Y==A||Y==k||R&&!C){if(F=$||R?{}:b(e),!I)return $?d(e,u(F,e)):f(e,s(F,e))}else{if(!X[Y])return C?e:{};F=y(e,Y,r,I)}}P||(P=new o);var V=P.get(e);if(V)return V;P.set(e,F);var L=E?$?h:p:$?keysIn:w,H=N?void 0:L(e);return i(H||e,function(o,i){H&&(i=o,o=e[i]),a(F,i,r(o,t,n,i,e,P))}),F}var o=n(49),i=n(19),a=n(85),s=n(88),u=n(90),c=n(94),l=n(95),f=n(96),d=n(100),p=n(104),h=n(106),m=n(107),v=n(112),y=n(113),b=n(127),g=n(12),x=n(29),_=n(16),w=n(24),O=1,j=2,M=4,k="[object Arguments]",S="[object Array]",C="[object Boolean]",P="[object Date]",F="[object Error]",T="[object Function]",D="[object GeneratorFunction]",I="[object Map]",$="[object Number]",A="[object Object]",E="[object RegExp]",N="[object Set]",Y="[object String]",R="[object Symbol]",V="[object WeakMap]",L="[object ArrayBuffer]",H="[object DataView]",U="[object Float32Array]",z="[object Float64Array]",q="[object Int8Array]",B="[object Int16Array]",Z="[object Int32Array]",G="[object Uint8Array]",W="[object Uint8ClampedArray]",J="[object Uint16Array]",K="[object Uint32Array]",X={};X[k]=X[S]=X[L]=X[H]=X[C]=X[P]=X[U]=X[z]=X[q]=X[B]=X[Z]=X[I]=X[$]=X[A]=X[E]=X[N]=X[Y]=X[R]=X[G]=X[W]=X[J]=X[K]=!0,X[F]=X[T]=X[V]=!1,e.exports=r},function(e,t,n){function r(e){var t=this.__data__=new o(e);this.size=t.size}var o=n(50),i=n(58),a=n(59),s=n(60),u=n(61),c=n(62);r.prototype.clear=i,r.prototype.delete=a,r.prototype.get=s,r.prototype.has=u,r.prototype.set=c,e.exports=r},function(e,t,n){function r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}var o=n(51),i=n(52),a=n(55),s=n(56),u=n(57);r.prototype.clear=o,r.prototype.delete=i,r.prototype.get=a,r.prototype.has=s,r.prototype.set=u,e.exports=r},function(e,t){function n(){this.__data__=[],this.size=0}e.exports=n},function(e,t,n){function r(e){var t=this.__data__,n=o(t,e);if(n<0)return!1;var r=t.length-1;return n==r?t.pop():a.call(t,n,1),--this.size,!0}var o=n(53),i=Array.prototype,a=i.splice;e.exports=r},function(e,t,n){function r(e,t){for(var n=e.length;n--;)if(o(e[n][0],t))return n;return-1}var o=n(54);e.exports=r},function(e,t){function n(e,t){return e===t||e!==e&&t!==t}e.exports=n},function(e,t,n){function r(e){var t=this.__data__,n=o(t,e);return n<0?void 0:t[n][1]}var o=n(53);e.exports=r},function(e,t,n){function r(e){return o(this.__data__,e)>-1}var o=n(53);e.exports=r},function(e,t,n){function r(e,t){var n=this.__data__,r=o(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}var o=n(53);e.exports=r},function(e,t,n){function r(){this.__data__=new o,this.size=0}var o=n(50);e.exports=r},function(e,t){function n(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}e.exports=n},function(e,t){function n(e){return this.__data__.get(e)}e.exports=n},function(e,t){function n(e){return this.__data__.has(e)}e.exports=n},function(e,t,n){function r(e,t){var n=this.__data__;if(n instanceof o){var r=n.__data__;if(!i||r.length<s-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(r)}return n.set(e,t),this.size=n.size,this}var o=n(50),i=n(63),a=n(70),s=200;e.exports=r},function(e,t,n){var r=n(64),o=n(8),i=r(o,"Map");e.exports=i},function(e,t,n){function r(e,t){var n=i(e,t);return o(n)?n:void 0}var o=n(65),i=n(69);e.exports=r},function(e,t,n){function r(e){if(!a(e)||i(e))return!1;var t=o(e)?h:c;return t.test(s(e))}var o=n(15),i=n(66),a=n(16),s=n(68),u=/[\\\\^$.*+?()[\\]{}|]/g,c=/^\\[object .+?Constructor\\]$/,l=Function.prototype,f=Object.prototype,d=l.toString,p=f.hasOwnProperty,h=RegExp("^"+d.call(p).replace(u,"\\\\$&").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,"$1.*?")+"$");e.exports=r},function(e,t,n){function r(e){return!!i&&i in e}var o=n(67),i=function(){var e=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=r},function(e,t,n){var r=n(8),o=r["__core-js_shared__"];e.exports=o},function(e,t){function n(e){if(null!=e){try{return o.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var r=Function.prototype,o=r.toString;e.exports=n},function(e,t){function n(e,t){return null==e?void 0:e[t]}e.exports=n},function(e,t,n){function r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}var o=n(71),i=n(79),a=n(82),s=n(83),u=n(84);r.prototype.clear=o,r.prototype.delete=i,r.prototype.get=a,r.prototype.has=s,r.prototype.set=u,e.exports=r},function(e,t,n){function r(){this.size=0,this.__data__={hash:new o,map:new(a||i),string:new o}}var o=n(72),i=n(50),a=n(63);e.exports=r},function(e,t,n){function r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}var o=n(73),i=n(75),a=n(76),s=n(77),u=n(78);r.prototype.clear=o,r.prototype.delete=i,r.prototype.get=a,r.prototype.has=s,r.prototype.set=u,e.exports=r},function(e,t,n){function r(){this.__data__=o?o(null):{},this.size=0}var o=n(74);e.exports=r},function(e,t,n){var r=n(64),o=r(Object,"create");e.exports=o},function(e,t){function n(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}e.exports=n},function(e,t,n){function r(e){var t=this.__data__;if(o){var n=t[e];return n===i?void 0:n}return s.call(t,e)?t[e]:void 0}var o=n(74),i="__lodash_hash_undefined__",a=Object.prototype,s=a.hasOwnProperty;e.exports=r},function(e,t,n){function r(e){var t=this.__data__;return o?void 0!==t[e]:a.call(t,e)}var o=n(74),i=Object.prototype,a=i.hasOwnProperty;e.exports=r},function(e,t,n){function r(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=o&&void 0===t?i:t,this}var o=n(74),i="__lodash_hash_undefined__";e.exports=r},function(e,t,n){function r(e){var t=o(this,e).delete(e);return this.size-=t?1:0,t}var o=n(80);e.exports=r},function(e,t,n){function r(e,t){var n=e.__data__;return o(t)?n["string"==typeof t?"string":"hash"]:n.map}var o=n(81);e.exports=r},function(e,t){function n(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}e.exports=n},function(e,t,n){function r(e){return o(this,e).get(e)}var o=n(80);e.exports=r},function(e,t,n){function r(e){return o(this,e).has(e)}var o=n(80);e.exports=r},function(e,t,n){function r(e,t){var n=o(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}var o=n(80);e.exports=r},function(e,t,n){function r(e,t,n){var r=e[t];s.call(e,t)&&i(r,n)&&(void 0!==n||t in e)||o(e,t,n)}var o=n(86),i=n(54),a=Object.prototype,s=a.hasOwnProperty;e.exports=r},function(e,t,n){function r(e,t,n){"__proto__"==t&&o?o(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}var o=n(87);e.exports=r},function(e,t,n){var r=n(64),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){function r(e,t){return e&&o(t,i(t),e)}var o=n(89),i=n(24);e.exports=r},function(e,t,n){function r(e,t,n,r){var a=!n;n||(n={});for(var s=-1,u=t.length;++s<u;){var c=t[s],l=r?r(n[c],e[c],c,n,e):void 0;void 0===l&&(l=e[c]),a?i(n,c,l):o(n,c,l)}return n}var o=n(85),i=n(86);e.exports=r},function(e,t,n){function r(e,t){return e&&o(t,i(t),e)}var o=n(89),i=n(91);e.exports=r},function(e,t,n){function r(e){return a(e)?o(e,!0):i(e)}var o=n(25),i=n(92),a=n(42);e.exports=r},function(e,t,n){function r(e){if(!o(e))return a(e);var t=i(e),n=[];for(var r in e)("constructor"!=r||!t&&u.call(e,r))&&n.push(r);return n}var o=n(16),i=n(39),a=n(93),s=Object.prototype,u=s.hasOwnProperty;e.exports=r},function(e,t){function n(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}e.exports=n},function(e,t,n){(function(e){function r(e,t){if(t)return e.slice();var n=e.length,r=c?c(n):new e.constructor(n);return e.copy(r),r}var o=n(8),i="object"==typeof t&&t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i,u=s?o.Buffer:void 0,c=u?u.allocUnsafe:void 0;e.exports=r}).call(t,n(30)(e))},function(e,t){function n(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}e.exports=n},function(e,t,n){function r(e,t){return o(e,i(e),t)}var o=n(89),i=n(97);e.exports=r},function(e,t,n){var r=n(98),o=n(99),i=Object.prototype,a=i.propertyIsEnumerable,s=Object.getOwnPropertySymbols,u=s?function(e){return null==e?[]:(e=Object(e),r(s(e),function(t){return a.call(e,t)}))}:o;e.exports=u},function(e,t){function n(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}e.exports=n},function(e,t){function n(){return[]}e.exports=n},function(e,t,n){function r(e,t){return o(e,i(e),t)}var o=n(89),i=n(101);e.exports=r},function(e,t,n){var r=n(102),o=n(103),i=n(97),a=n(99),s=Object.getOwnPropertySymbols,u=s?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=u},function(e,t){function n(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}e.exports=n},function(e,t,n){var r=n(41),o=r(Object.getPrototypeOf,Object);e.exports=o},function(e,t,n){function r(e){return o(e,a,i)}var o=n(105),i=n(97),a=n(24);e.exports=r},function(e,t,n){function r(e,t,n){var r=t(e);return i(e)?r:o(r,n(e))}var o=n(102),i=n(12);e.exports=r},function(e,t,n){function r(e){return o(e,a,i)}var o=n(105),i=n(101),a=n(91);e.exports=r},function(e,t,n){var r=n(108),o=n(63),i=n(109),a=n(110),s=n(111),u=n(6),c=n(68),l="[object Map]",f="[object Object]",d="[object Promise]",p="[object Set]",h="[object WeakMap]",m="[object DataView]",v=c(r),y=c(o),b=c(i),g=c(a),x=c(s),_=u;(r&&_(new r(new ArrayBuffer(1)))!=m||o&&_(new o)!=l||i&&_(i.resolve())!=d||a&&_(new a)!=p||s&&_(new s)!=h)&&(_=function(e){var t=u(e),n=t==f?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case v:return m;case y:return l;case b:return d;case g:return p;case x:return h}return t}),e.exports=_},function(e,t,n){var r=n(64),o=n(8),i=r(o,"DataView");e.exports=i},function(e,t,n){var r=n(64),o=n(8),i=r(o,"Promise");e.exports=i},function(e,t,n){var r=n(64),o=n(8),i=r(o,"Set");e.exports=i},function(e,t,n){var r=n(64),o=n(8),i=r(o,"WeakMap");e.exports=i},function(e,t){function n(e){var t=e.length,n=e.constructor(t);return t&&"string"==typeof e[0]&&o.call(e,"index")&&(n.index=e.index,n.input=e.input),n}var r=Object.prototype,o=r.hasOwnProperty;e.exports=n},function(e,t,n){function r(e,t,n,r){var F=e.constructor;switch(t){case g:return o(e);case f:case d:return new F(+e);case x:return i(e,r);case _:case w:case O:case j:case M:case k:case S:case C:case P:return l(e,r);case p:return a(e,r,n);case h:case y:return new F(e);case m:return s(e);case v:return u(e,r,n);case b:return c(e)}}var o=n(114),i=n(116),a=n(117),s=n(121),u=n(122),c=n(125),l=n(126),f="[object Boolean]",d="[object Date]",p="[object Map]",h="[object Number]",m="[object RegExp]",v="[object Set]",y="[object String]",b="[object Symbol]",g="[object ArrayBuffer]",x="[object DataView]",_="[object Float32Array]",w="[object Float64Array]",O="[object Int8Array]",j="[object Int16Array]",M="[object Int32Array]",k="[object Uint8Array]",S="[object Uint8ClampedArray]",C="[object Uint16Array]",P="[object Uint32Array]";e.exports=r},function(e,t,n){function r(e){var t=new e.constructor(e.byteLength);return new o(t).set(new o(e)),t}var o=n(115);e.exports=r},function(e,t,n){var r=n(8),o=r.Uint8Array;e.exports=o},function(e,t,n){function r(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}var o=n(114);e.exports=r},function(e,t,n){function r(e,t,n){var r=t?n(a(e),s):a(e);return i(r,o,new e.constructor)}var o=n(118),i=n(119),a=n(120),s=1;e.exports=r},function(e,t){function n(e,t){return e.set(t[0],t[1]),e}e.exports=n},function(e,t){function n(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}e.exports=n},function(e,t){function n(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}e.exports=n},function(e,t){function n(e){var t=new e.constructor(e.source,r.exec(e));return t.lastIndex=e.lastIndex,t}var r=/\\w*$/;e.exports=n},function(e,t,n){function r(e,t,n){var r=t?n(a(e),s):a(e);return i(r,o,new e.constructor)}var o=n(123),i=n(119),a=n(124),s=1;e.exports=r},function(e,t){function n(e,t){return e.add(t),e}e.exports=n},function(e,t){function n(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}e.exports=n},function(e,t,n){function r(e){return a?Object(a.call(e)):{}}var o=n(7),i=o?o.prototype:void 0,a=i?i.valueOf:void 0;e.exports=r},function(e,t,n){function r(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}var o=n(114);e.exports=r},function(e,t,n){function r(e){return"function"!=typeof e.constructor||a(e)?{}:o(i(e))}var o=n(128),i=n(103),a=n(39);e.exports=r},function(e,t,n){var r=n(16),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){function r(e,t,n){return null==e?e:o(e,t,n)}var o=n(130);e.exports=r},function(e,t,n){function r(e,t,n,r){if(!s(e))return e;t=i(t,e);for(var c=-1,l=t.length,f=l-1,d=e;null!=d&&++c<l;){var p=u(t[c]),h=n;if(c!=f){var m=d[p];h=r?r(m,p,d):void 0,void 0===h&&(h=s(m)?m:a(t[c+1])?[]:{})}o(d,p,h),d=d[p]}return e}var o=n(85),i=n(131),a=n(32),s=n(16),u=n(140);e.exports=r},function(e,t,n){function r(e,t){return o(e)?e:i(e,t)?[e]:a(s(e))}var o=n(12),i=n(132),a=n(134),s=n(137);e.exports=r},function(e,t,n){function r(e,t){if(o(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!i(e))||(s.test(e)||!a.test(e)||null!=t&&e in Object(t))}var o=n(12),i=n(133),a=/\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,s=/^\\w*$/;e.exports=r},function(e,t,n){function r(e){return"symbol"==typeof e||i(e)&&o(e)==a}var o=n(6),i=n(13),a="[object Symbol]";e.exports=r},function(e,t,n){var r=n(135),o=/^\\./,i=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,a=/\\\\(\\\\)?/g,s=r(function(e){var t=[];return o.test(e)&&t.push(""),e.replace(i,function(e,n,r,o){t.push(r?o.replace(a,"$1"):n||e)}),t});e.exports=s},function(e,t,n){function r(e){var t=o(e,function(e){return n.size===i&&n.clear(),e}),n=t.cache;return t}var o=n(136),i=500;e.exports=r},function(e,t,n){function r(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(i);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(r.Cache||o),n}var o=n(70),i="Expected a function";r.Cache=o,e.exports=r},function(e,t,n){function r(e){return null==e?"":o(e)}var o=n(138);e.exports=r},function(e,t,n){function r(e){if("string"==typeof e)return e;if(a(e))return i(e,r)+"";if(s(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-u?"-0":t}var o=n(7),i=n(139),a=n(12),s=n(133),u=1/0,c=o?o.prototype:void 0,l=c?c.toString:void 0;e.exports=r},function(e,t){function n(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}e.exports=n},function(e,t,n){function r(e){if("string"==typeof e||o(e))return e;var t=e+"";return"0"==t&&1/e==-i?"-0":t}var o=n(133),i=1/0;e.exports=r},function(e,t,n){function r(e,t,n){var r=null==e?void 0:o(e,t);return void 0===r?n:r}var o=n(142);e.exports=r},function(e,t,n){function r(e,t){t=o(t,e);for(var n=0,r=t.length;null!=e&&n<r;)e=e[i(t[n++])];return n&&n==r?e:void 0}var o=n(131),i=n(140);e.exports=r},function(e,t,n){function r(e){return n(o(e))}function o(e){return i[e]||function(){throw new Error("Cannot find module \'"+e+"\'.")}()}var i={"./fieldCheckbox.vue":144,"./fieldChecklist.vue":199,"./fieldInput.vue":204,"./fieldLabel.vue":208,"./fieldRadios.vue":212,"./fieldSelect.vue":216,"./fieldSubmit.vue":220,"./fieldTextArea.vue":224};r.keys=function(){return Object.keys(i)},r.resolve=o,e.exports=r,r.id=143},function(e,t,n){n(145);var r=n(3)(n(146),n(198),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o);t.default={mixins:[i.default]}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return(0,u.default)(e)?null!=v.default[e]?v.default[e]:(console.warn("\'"+e+"\' is not a validator function!"),null):e}Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),a=r(i),s=n(5),u=r(s),c=n(15),l=r(c),f=n(17),d=r(f),p=n(141),h=r(p),m=n(148),v=r(m),y=n(46);t.default={props:["model","schema","formOptions","disabled"],data:function(){return{errors:[]}},computed:{value:{cache:!1,get:function(){var e=void 0;return(0,l.default)(this.schema.get)?e=this.schema.get(this.model):this.model&&this.schema.model&&(e=(0,h.default)(this.model,this.schema.model)),(0,l.default)(this.formatValueToField)&&(e=this.formatValueToField(e)),e},set:function(e){var t=this.value;(0,l.default)(this.formatValueToModel)&&(e=this.formatValueToModel(e));var n=!1;(0,l.default)(this.schema.set)?(this.schema.set(this.model,e),n=!0):this.schema.model&&(this.setModelValueByPath(this.schema.model,e),n=!0),n&&(this.$emit("model-updated",e,this.schema.model),(0,l.default)(this.schema.onChanged)&&this.schema.onChanged.call(this,this.model,e,t,this.schema),this.$parent.options&&this.$parent.options.validateAfterChanged===!0&&this.validate())}}},methods:{validate:function(e){var t=this;if(this.clearValidationErrors(),this.schema.validator&&this.schema.readonly!==!0&&this.disabled!==!0){var n=[];(0,a.default)(this.schema.validator)?(0,d.default)(this.schema.validator,function(e){n.push(o(e).bind(t))}):n.push(o(this.schema.validator).bind(this)),(0,d.default)(n,function(e){var n=function(e){(0,a.default)(e)?Array.prototype.push.apply(t.errors,e):(0,u.default)(e)&&t.errors.push(e)},r=e(t.value,t.schema,t.model);r&&(0,l.default)(r.then)?r.then(function(e){if(e){n(e);var r=0==t.errors.length;t.$emit("validated",r,t.errors,t)}}):r&&n(r)})}(0,l.default)(this.schema.onValidated)&&this.schema.onValidated.call(this,this.model,this.errors,this.schema);var r=0==this.errors.length;return e||this.$emit("validated",r,this.errors,this),this.errors},clearValidationErrors:function(){this.errors.splice(0)},setModelValueByPath:function(e,t){var n=e.replace(/\\[(\\w+)\\]/g,".$1");n=n.replace(/^\\./,"");for(var r=this.model,o=n.split("."),i=0,a=o.length;i<a;){var s=o[i];if(!(i<a-1))return void this.$root.$set(r,s,t);void 0!==r[s]?r=r[s]:(this.$root.$set(r,s,{}),r=r[s]),++i}},getFieldID:function(e){var t=this.formOptions&&this.formOptions.fieldIdPrefix?this.formOptions.fieldIdPrefix:"";return(0,y.slugifyFormID)(e,t)}}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:w;return(0,y.default)(e)||""===e?t?[i(n.fieldIsRequired)]:[]:null}function i(e){if(null!=e&&arguments.length>1)for(var t=1;t<arguments.length;t++)e=e.replace("{"+(t-1)+"}",arguments[t]);return e}var a=n(149),s=r(a),u=n(15),c=r(u),l=n(12),f=r(l),d=n(5),p=r(d),h=n(184),m=r(h),v=n(14),y=r(v),b=n(185),g=r(b),x=n(197),_=r(x),w={fieldIsRequired:"This field is required!",invalidFormat:"Invalid format!",numberTooSmall:"The number is too small! Minimum: {0}",numberTooBig:"The number is too big! Maximum: {0}",invalidNumber:"Invalid number",textTooSmall:"The length of text is too small! Current: {0}, Minimum: {1}",textTooBig:"The length of text is too big! Current: {0}, Maximum: {1}",thisNotText:"This is not a text!",\nthisNotArray:"This is not an array!",selectMinItems:"Select minimum {0} items!",selectMaxItems:"Select maximum {0} items!",invalidDate:"Invalid date!",dateIsEarly:"The date is too early! Current: {0}, Minimum: {1}",dateIsLate:"The date is too late! Current: {0}, Maximum: {1}",invalidEmail:"Invalid e-mail address!",invalidURL:"Invalid URL!",invalidCard:"Invalid card format!",invalidCardNumber:"Invalid card number!",invalidTextContainNumber:"Invalid text! Cannot contains numbers or special characters",invalidTextContainSpec:"Invalid text! Cannot contains special characters"};e.exports={resources:w,required:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w;return o(e,t.required,r)},number:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=[];return(0,m.default)(e)?(!(0,y.default)(t.min)&&e<t.min&&s.push(i(r.numberTooSmall,t.min)),!(0,y.default)(t.max)&&e>t.max&&s.push(i(r.numberTooBig,t.max))):s.push(i(r.invalidNumber)),s},integer:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);return null!=a?a:Number(e)!==e||e%1!==0?[i(r.invalidNumber)]:void 0},double:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);return null!=a?a:!(0,m.default)(e)||isNaN(e)?[i(r.invalidNumber)]:void 0},string:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=[];return(0,p.default)(e)?(!(0,y.default)(t.min)&&e.length<t.min&&s.push(i(r.textTooSmall,e.length,t.min)),!(0,y.default)(t.max)&&e.length>t.max&&s.push(i(r.textTooBig,e.length,t.max))):s.push(i(r.thisNotText)),s},array:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w;if(t.required){if(!(0,f.default)(e))return[i(r.thisNotArray)];if(0==e.length)return[i(r.fieldIsRequired)]}if(!(0,y.default)(e)){if(!(0,y.default)(t.min)&&e.length<t.min)return[i(r.selectMinItems,t.min)];if(!(0,y.default)(t.max)&&e.length>t.max)return[i(r.selectMaxItems,t.max)]}},date:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=new Date(e);if(!s)return[i(r.invalidDate)];var u=[];if(!(0,y.default)(t.min)){var c=new Date(t.min);s.valueOf()<c.valueOf()&&u.push(i(r.dateIsEarly,_.default.format(s),_.default.format(c)))}if(!(0,y.default)(t.max)){var l=new Date(t.max);s.valueOf()>l.valueOf()&&u.push(i(r.dateIsLate,_.default.format(s),_.default.format(l)))}return u},regexp:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;if(!(0,y.default)(t.pattern)){var s=new RegExp(t.pattern);if(!s.test(e))return[i(r.invalidFormat)]}},email:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=/^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;return s.test(e)?void 0:[i(r.invalidEmail)]},url:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)/g;return s.test(e)?void 0:[i(r.invalidURL)]},creditCard:function e(t,n,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,s=o(t,n.required,a);if(null!=s)return s;var e=/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,u=t.replace(/[^0-9]+/g,"");if(!e.test(u))return[i(a.invalidCard)];for(var c=0,l=void 0,f=void 0,d=void 0,p=u.length-1;p>=0;p--)l=u.substring(p,p+1),f=parseInt(l,10),d?(f*=2,c+=f>=10?f%10+1:f):c+=f,d=!d;return c%10===0&&u?void 0:[i(a.invalidCardNumber)]},alpha:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=/^[a-zA-Z]*$/;return s.test(e)?void 0:[i(r.invalidTextContainNumber)]},alphaNumeric:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w,a=o(e,t.required,r);if(null!=a)return a;var s=/^[a-zA-Z0-9]*$/;return s.test(e)?void 0:[i(r.invalidTextContainSpec)]}},(0,s.default)(e.exports).forEach(function(t){var n=e.exports[t];(0,c.default)(n)&&(n.locale=function(e){return function(t,r,o){return n(t,r,o,(0,g.default)(e,w))}})})},function(e,t,n){e.exports={default:n(150),__esModule:!0}},function(e,t,n){n(151),e.exports=n(171).Object.keys},function(e,t,n){var r=n(152),o=n(154);n(169)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(153);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on  "+e);return e}},function(e,t,n){var r=n(155),o=n(168);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(156),o=n(157),i=n(160)(!1),a=n(164)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;t.length>u;)r(s,n=t[u++])&&(~i(c,n)||c.push(n));return c}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(158),o=n(153);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(159);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(157),o=n(161),i=n(163);e.exports=function(e){return function(t,n,a){var s,u=r(t),c=o(u.length),l=i(a,c);if(e&&n!=n){for(;c>l;)if(s=u[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(162),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(162),o=Math.max,i=Math.min;e.exports=function(e,t){return e=r(e),e<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(165)("keys"),o=n(167);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(166),o="__core-js_shared__",i=r[o]||(r[o]={});e.exports=function(e){return i[e]||(i[e]={})}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(170),o=n(171),i=n(180);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var r=n(166),o=n(171),i=n(172),a=n(174),s="prototype",u=function(e,t,n){var c,l,f,d=e&u.F,p=e&u.G,h=e&u.S,m=e&u.P,v=e&u.B,y=e&u.W,b=p?o:o[t]||(o[t]={}),g=b[s],x=p?r:h?r[t]:(r[t]||{})[s];p&&(n=t);for(c in n)l=!d&&x&&void 0!==x[c],l&&c in b||(f=l?x[c]:n[c],b[c]=p&&"function"!=typeof x[c]?n[c]:v&&l?i(f,r):y&&x[c]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):m&&"function"==typeof f?i(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[c]=f,e&u.R&&g&&!g[c]&&a(g,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){var n=e.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(173);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(175),o=n(183);e.exports=n(179)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(176),o=n(178),i=n(182),a=Object.defineProperty;t.f=n(179)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(177);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(179)&&!n(180)(function(){return 7!=Object.defineProperty(n(181)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){e.exports=!n(180)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(177),o=n(166).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(177);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){function r(e){return"number"==typeof e||i(e)&&o(e)==a}var o=n(6),i=n(13),a="[object Number]";e.exports=r},function(e,t,n){var r=n(186),o=n(187),i=n(189),a=n(196),s=i(function(e){return e.push(void 0,a),r(o,void 0,e)});e.exports=s},function(e,t){function n(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}e.exports=n},function(e,t,n){var r=n(89),o=n(188),i=n(91),a=o(function(e,t,n,o){r(t,i(t),e,o)});e.exports=a},function(e,t,n){function r(e){return o(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:void 0,s=o>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(o--,a):void 0,s&&i(n[0],n[1],s)&&(a=o<3?void 0:a,o=1),t=Object(t);++r<o;){var u=n[r];u&&e(t,u,r,a)}return t})}var o=n(189),i=n(195);e.exports=r},function(e,t,n){function r(e,t){return a(i(e,t,o),e+"")}var o=n(45),i=n(190),a=n(191);e.exports=r},function(e,t,n){function r(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var r=arguments,a=-1,s=i(r.length-t,0),u=Array(s);++a<s;)u[a]=r[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=r[a];return c[t]=n(u),o(e,this,c)}}var o=n(186),i=Math.max;e.exports=r},function(e,t,n){var r=n(192),o=n(194),i=o(r);e.exports=i},function(e,t,n){var r=n(193),o=n(87),i=n(45),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},function(e,t){function n(e){return function(){return e}}e.exports=n},function(e,t){function n(e){var t=0,n=0;return function(){var a=i(),s=o-(a-n);if(n=a,s>0){if(++t>=r)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var r=800,o=16,i=Date.now;e.exports=n},function(e,t,n){function r(e,t,n){if(!s(n))return!1;var r=typeof t;return!!("number"==r?i(n)&&a(t,n.length):"string"==r&&t in n)&&o(n[t],e)}var o=n(54),i=n(42),a=n(32),s=n(16);e.exports=r},function(e,t,n){function r(e,t,n,r){return void 0===e||o(e,i[n])&&!a.call(r,n)?t:e}var o=n(54),i=Object.prototype,a=i.hasOwnProperty;e.exports=r},function(e,t,n){var r;!function(o){"use strict";function i(e,t){for(var n=[],r=0,o=e.length;r<o;r++)n.push(e[r].substr(0,t));return n}function a(e){return function(t,n,r){var o=r[e].indexOf(n.charAt(0).toUpperCase()+n.substr(1).toLowerCase());~o&&(t.month=o)}}function s(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}var u={},c=/d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|"[^"]*"|\'[^\']*\'/g,l=/\\d\\d?/,f=/\\d{3}/,d=/\\d{4}/,p=/[0-9]*[\'a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,h=/\\[([^]*?)\\]/gm,m=function(){},v=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],y=["January","February","March","April","May","June","July","August","September","October","November","December"],b=i(y,3),g=i(v,3);u.i18n={dayNamesShort:g,dayNames:v,monthNamesShort:b,monthNames:y,amPm:["am","pm"],DoFn:function(e){return e+["th","st","nd","rd"][e%10>3?0:(e-e%10!==10)*e%10]}};var x={D:function(e){return e.getDate()},DD:function(e){return s(e.getDate())},Do:function(e,t){return t.DoFn(e.getDate())},d:function(e){return e.getDay()},dd:function(e){return s(e.getDay())},ddd:function(e,t){return t.dayNamesShort[e.getDay()]},dddd:function(e,t){return t.dayNames[e.getDay()]},M:function(e){return e.getMonth()+1},MM:function(e){return s(e.getMonth()+1)},MMM:function(e,t){return t.monthNamesShort[e.getMonth()]},MMMM:function(e,t){return t.monthNames[e.getMonth()]},YY:function(e){return String(e.getFullYear()).substr(2)},YYYY:function(e){return e.getFullYear()},h:function(e){return e.getHours()%12||12},hh:function(e){return s(e.getHours()%12||12)},H:function(e){return e.getHours()},HH:function(e){return s(e.getHours())},m:function(e){return e.getMinutes()},mm:function(e){return s(e.getMinutes())},s:function(e){return e.getSeconds()},ss:function(e){return s(e.getSeconds())},S:function(e){return Math.round(e.getMilliseconds()/100)},SS:function(e){return s(Math.round(e.getMilliseconds()/10),2)},SSS:function(e){return s(e.getMilliseconds(),3)},a:function(e,t){return e.getHours()<12?t.amPm[0]:t.amPm[1]},A:function(e,t){return e.getHours()<12?t.amPm[0].toUpperCase():t.amPm[1].toUpperCase()},ZZ:function(e){var t=e.getTimezoneOffset();return(t>0?"-":"+")+s(100*Math.floor(Math.abs(t)/60)+Math.abs(t)%60,4)}},_={D:[l,function(e,t){e.day=t}],Do:[new RegExp(l.source+p.source),function(e,t){e.day=parseInt(t,10)}],M:[l,function(e,t){e.month=t-1}],YY:[l,function(e,t){var n=new Date,r=+(""+n.getFullYear()).substr(0,2);e.year=""+(t>68?r-1:r)+t}],h:[l,function(e,t){e.hour=t}],m:[l,function(e,t){e.minute=t}],s:[l,function(e,t){e.second=t}],YYYY:[d,function(e,t){e.year=t}],S:[/\\d/,function(e,t){e.millisecond=100*t}],SS:[/\\d{2}/,function(e,t){e.millisecond=10*t}],SSS:[f,function(e,t){e.millisecond=t}],d:[l,m],ddd:[p,m],MMM:[p,a("monthNamesShort")],MMMM:[p,a("monthNames")],a:[p,function(e,t,n){var r=t.toLowerCase();r===n.amPm[0]?e.isPm=!1:r===n.amPm[1]&&(e.isPm=!0)}],ZZ:[/[\\+\\-]\\d\\d:?\\d\\d/,function(e,t){var n,r=(t+"").match(/([\\+\\-]|\\d\\d)/gi);r&&(n=+(60*r[1])+parseInt(r[2],10),e.timezoneOffset="+"===r[0]?n:-n)}]};_.dd=_.d,_.dddd=_.ddd,_.DD=_.D,_.mm=_.m,_.hh=_.H=_.HH=_.h,_.MM=_.M,_.ss=_.s,_.A=_.a,u.masks={default:"ddd MMM DD YYYY HH:mm:ss",shortDate:"M/D/YY",mediumDate:"MMM D, YYYY",longDate:"MMMM D, YYYY",fullDate:"dddd, MMMM D, YYYY",shortTime:"HH:mm",mediumTime:"HH:mm:ss",longTime:"HH:mm:ss.SSS"},u.format=function(e,t,n){var r=n||u.i18n;if("number"==typeof e&&(e=new Date(e)),"[object Date]"!==Object.prototype.toString.call(e)||isNaN(e.getTime()))throw new Error("Invalid Date in fecha.format");t=u.masks[t]||t||u.masks.default;var o=[];return t=t.replace(h,function(e,t){return o.push(t),"??"}),t=t.replace(c,function(t){return t in x?x[t](e,r):t.slice(1,t.length-1)}),t.replace(/\\?\\?/g,function(){return o.shift()})},u.parse=function(e,t,n){var r=n||u.i18n;if("string"!=typeof t)throw new Error("Invalid format in fecha.parse");if(t=u.masks[t]||t,e.length>1e3)return!1;var o=!0,i={};if(t.replace(c,function(t){if(_[t]){var n=_[t],a=e.search(n[0]);~a?e.replace(n[0],function(t){return n[1](i,t,r),e=e.substr(a+t.length),t}):o=!1}return _[t]?"":t.slice(1,t.length-1)}),!o)return!1;var a=new Date;i.isPm===!0&&null!=i.hour&&12!==+i.hour?i.hour=+i.hour+12:i.isPm===!1&&12===+i.hour&&(i.hour=0);var s;return null!=i.timezoneOffset?(i.minute=+(i.minute||0)-+i.timezoneOffset,s=new Date(Date.UTC(i.year||a.getFullYear(),i.month||0,i.day||1,i.hour||0,i.minute||0,i.second||0,i.millisecond||0))):s=new Date(i.year||a.getFullYear(),i.month||0,i.day||1,i.hour||0,i.minute||0,i.second||0,i.millisecond||0),s},"undefined"!=typeof e&&e.exports?e.exports=u:(r=function(){return u}.call(t,n,t,e),!(void 0!==r&&(e.exports=r)))}(this)},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],attrs:{type:"checkbox",autocomplete:e.schema.autocomplete,disabled:e.disabled,name:e.schema.inputName},domProps:{checked:Array.isArray(e.value)?e._i(e.value,null)>-1:e.value},on:{click:function(t){var n=e.value,r=t.target,o=!!r.checked;if(Array.isArray(n)){var i=null,a=e._i(n,i);o?a<0&&(e.value=n.concat(i)):a>-1&&(e.value=n.slice(0,a).concat(n.slice(a+1)))}else e.value=o}}})},staticRenderFns:[]}},function(e,t,n){n(200);var r=n(3)(n(201),n(203),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(202),i=r(o),a=n(14),s=r(a),u=n(16),c=r(u),l=n(147),f=r(l);t.default={mixins:[f.default],data:function(){return{comboExpanded:!1}},computed:{items:function(){var e=this.schema.values;return"function"==typeof e?e.apply(this,[this.model,this.schema]):e},selectedCount:function(){return this.value?this.value.length:0}},methods:{getItemValue:function(e){if((0,c.default)(e)){if("undefined"!=typeof this.schema.checklistOptions&&"undefined"!=typeof this.schema.checklistOptions.value)return e[this.schema.checklistOptions.value];if("undefined"!=typeof e.value)return e.value;throw"value is not defined. If you want to use another key name, add a `value` property under `checklistOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/checklist.html#checklist-field-with-object-values"}return e},getItemName:function(e){if((0,c.default)(e)){if("undefined"!=typeof this.schema.checklistOptions&&"undefined"!=typeof this.schema.checklistOptions.name)return e[this.schema.checklistOptions.name];if("undefined"!=typeof e.name)return e.name;throw"name is not defined. If you want to use another key name, add a `name` property under `checklistOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/checklist.html#checklist-field-with-object-values"}return e},isItemChecked:function(e){return this.value&&this.value.indexOf(this.getItemValue(e))!=-1},onChanged:function(e,t){if(!(0,s.default)(this.value)&&Array.isArray(this.value)||(this.value=[]),e.target.checked){var n=(0,i.default)(this.value);n.push(this.getItemValue(t)),this.value=n}else{var r=(0,i.default)(this.value);r.splice(this.value.indexOf(this.getItemValue(t)),1),this.value=r}},onExpandCombo:function(){this.comboExpanded=!this.comboExpanded}}}},function(e,t,n){function r(e){return o(e,i)}var o=n(48),i=4;e.exports=r},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"wrapper"},[e.schema.listBox?n("div",{staticClass:"listbox form-control",attrs:{disabled:e.disabled}},e._l(e.items,function(t){return n("div",{staticClass:"list-row",class:{"is-checked":e.isItemChecked(t)}},[n("label",[n("input",{attrs:{type:"checkbox",disabled:e.disabled},domProps:{checked:e.isItemChecked(t)},on:{change:function(n){e.onChanged(n,t)}}}),e._v(e._s(e.getItemName(t)))])])})):e._e(),e.schema.listBox?e._e():n("div",{staticClass:"combobox form-control",attrs:{disabled:e.disabled}},[n("div",{staticClass:"mainRow",class:{expanded:e.comboExpanded},on:{click:e.onExpandCombo}},[n("div",{staticClass:"info"},[e._v(e._s(e.selectedCount)+" selected")]),n("div",{staticClass:"arrow"})]),n("div",{staticClass:"dropList"},e._l(e.items,function(t){return e.comboExpanded?n("div",{staticClass:"list-row",class:{"is-checked":e.isItemChecked(t)}},[n("label",[n("input",{attrs:{type:"checkbox",disabled:e.disabled},domProps:{checked:e.isItemChecked(t)},on:{change:function(n){e.onChanged(n,t)}}}),e._v(e._s(e.getItemName(t)))])]):e._e()}))])])},staticRenderFns:[]}},function(e,t,n){n(205);var r=n(3)(n(206),n(207),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o),a=n(197),s=r(a);t.default={mixins:[i.default],methods:{onChange:function(e){"file"===this.schema.inputType&&(this.value=e.target.files)},formatValueToField:function(e){if(null!=e){var t=void 0;switch(this.schema.inputType){case"date":return t=this.schema.format?s.default.parse(e,this.schema.format):new Date(e),s.default.format(t,"YYYY-MM-DD");case"datetime":return t=this.schema.format?s.default.parse(e,this.schema.format):new Date(e),s.default.format(t,"YYYY-MM-DD HH:mm:ss");case"datetime-local":return t=this.schema.format?s.default.parse(e,this.schema.format):new Date(e),s.default.format(t,"YYYY-MM-DDTHH:mm:ss")}}return e},formatValueToModel:function(e){if(null!=e){var t=void 0;switch(this.schema.inputType){case"date":t=s.default.parse(e,"YYYY-MM-DD"),t!==!1&&(e=this.schema.format?s.default.format(t,this.schema.format):t.valueOf());break;case"datetime":t=s.default.parse(e,"YYYY-MM-DD HH:mm:ss"),t!==!1&&(e=this.schema.format?s.default.format(t,this.schema.format):t.valueOf());break;case"datetime-local":t=s.default.parse(e,"YYYY-MM-DDTHH:mm:ss"),t!==!1&&(e=this.schema.format?s.default.format(t,this.schema.format):t.valueOf());break;case"number":return Number(e)}}return e}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"wrapper"},[n("input",{staticClass:"form-control",attrs:{id:e.getFieldID(e.schema),type:e.schema.inputType,disabled:e.disabled,accept:e.schema.accept,alt:e.schema.alt,autocomplete:e.schema.autocomplete,dirname:e.schema.dirname,formaction:e.schema.formaction,formenctype:e.schema.formenctype,formmethod:e.schema.formmethod,formnovalidate:e.schema.formnovalidate,formtarget:e.schema.formtarget,height:e.schema.height,list:e.schema.list,max:e.schema.max,maxlength:e.schema.maxlength,min:e.schema.min,multiple:e.schema.multiple,name:e.schema.inputName,pattern:e.schema.pattern,placeholder:e.schema.placeholder,readonly:e.schema.readonly,required:e.schema.required,size:e.schema.size,src:e.schema.src,step:e.schema.step,width:e.schema.width,files:e.schema.files},domProps:{value:e.value,checked:e.schema.checked},on:{input:function(t){e.value=t.target.value},change:e.onChange}}),"color"===e.schema.inputType||"range"===e.schema.inputType?n("span",{staticClass:"helper"},[e._v(e._s(e.value))]):e._e()])},staticRenderFns:[]}},function(e,t,n){n(209);var r=n(3)(n(210),n(211),null,null);e.exports=r.exports},2,146,function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("span",{attrs:{id:e.getFieldID(e.schema)}},[e._v(e._s(e.value))])},staticRenderFns:[]}},function(e,t,n){n(213);var r=n(3)(n(214),n(215),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(16),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],computed:{items:function(){var e=this.schema.values;return"function"==typeof e?e.apply(this,[this.model,this.schema]):e},id:function(){return this.schema.model}},methods:{getItemValue:function(e){if((0,i.default)(e)){if("undefined"!=typeof this.schema.radiosOptions&&"undefined"!=typeof this.schema.radiosOptions.value)return e[this.schema.radiosOptions.value];if("undefined"!=typeof e.value)return e.value;throw"value is not defined. If you want to use another key name, add a `value` property under `radiosOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/radios.html#radios-field-with-object-values"}return e},getItemName:function(e){if((0,i.default)(e)){if("undefined"!=typeof this.schema.radiosOptions&&"undefined"!=typeof this.schema.radiosOptions.name)return e[this.schema.radiosOptions.name];if("undefined"!=typeof e.name)return e.name;throw"name is not defined. If you want to use another key name, add a `name` property under `radiosOptions` in the schema. https://icebob.gitbooks.io/vueformgenerator/content/fields/radios.html#radios-field-with-object-values"}return e},onSelection:function(e){this.value=this.getItemValue(e)},isItemChecked:function(e){var t=this.getItemValue(e);return t===this.value}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"radio-list",attrs:{disabled:e.disabled}},e._l(e.items,function(t){return n("label",{class:{"is-checked":e.isItemChecked(t)}},[n("input",{attrs:{type:"radio",disabled:e.disabled,name:e.id},domProps:{value:e.getItemValue(t),checked:e.isItemChecked(t)},on:{click:function(n){e.onSelection(t)}}}),e._v(e._s(e.getItemName(t)))])}))},staticRenderFns:[]}},function(e,t,n){n(217);var r=n(3)(n(218),n(219),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(16),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],computed:{selectOptions:function(){return this.schema.selectOptions||{}},items:function(){var e=this.schema.values;return"function"==typeof e?e.apply(this,[this.model,this.schema]):e}},methods:{getItemID:function(e){return(0,i.default)(e)&&e.id?e.id:e},getItemName:function(e){return(0,i.default)(e)&&e.name?e.name:e}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("select",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{disabled:e.disabled,name:e.schema.inputName,id:e.getFieldID(e.schema)},on:{change:function(t){e.value=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){var t="_value"in e?e._value:e.value;return t})[0]}}},[e.selectOptions.hideNoneSelectedText?e._e():n("option",{attrs:{disabled:e.schema.required},domProps:{value:null,selected:void 0==e.value}},[e._v(e._s(e.selectOptions.noneSelectedText||"<Nothing selected>"))]),e._l(e.items,function(t){return n("option",{domProps:{value:e.getItemID(t)}},[e._v(e._s(e.getItemName(t)))])})],2)},staticRenderFns:[]}},function(e,t,n){n(221);var r=n(3)(n(222),n(223),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(15),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],methods:{click:function(){(this.schema.validateBeforeSubmit!==!0||this.$parent.validate())&&(0,i.default)(this.schema.onSubmit)&&this.schema.onSubmit(this.model,this.schema)}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{attrs:{type:"submit",name:e.schema.inputName,disabled:e.disabled},domProps:{value:e.schema.buttonText},on:{click:e.click}})},staticRenderFns:[]}},function(e,t,n){n(225);var r=n(3)(n(226),n(227),null,null);e.exports=r.exports},2,146,function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("textarea",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{id:e.getFieldID(e.schema),disabled:e.disabled,maxlength:e.schema.max,minlength:e.schema.min,placeholder:e.schema.placeholder,readonly:e.schema.readonly,rows:e.schema.rows||2,name:e.schema.inputName},domProps:{value:e._s(e.value)},on:{input:function(t){t.target.composing||(e.value=t.target.value)}}})},staticRenderFns:[]}},function(e,t,n){function r(e){return n(o(e))}function o(e){return i[e]||function(){throw new Error("Cannot find module \'"+e+"\'.")}()}var i={"./fieldCleave.vue":229,"./fieldDateTimePicker.vue":233,"./fieldGoogleAddress.vue":245,"./fieldImage.vue":249,"./fieldMasked.vue":253,"./fieldNoUiSlider.vue":257,"./fieldPikaday.vue":261,"./fieldRangeSlider.vue":265,"./fieldSelectEx.vue":295,"./fieldSpectrum.vue":299,"./fieldStaticMap.vue":303,"./fieldSwitch.vue":307,"./fieldVueMultiSelect.vue":311};r.keys=function(){return Object.keys(i)},r.resolve=o,e.exports=r,r.id=228},function(e,t,n){n(230);var r=n(3)(n(231),n(232),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(185),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],data:function(){return{cleave:null}},mounted:function(){this.$nextTick(function(){window.Cleave?this.cleave=new window.Cleave(this.$el,(0,i.default)(this.schema.cleaveOptions||{},{creditCard:!1,phone:!1,phoneRegionCode:"AU",date:!1,datePattern:["d","m","Y"],numeral:!1,numeralThousandsGroupStyle:"thousand",numeralDecimalScale:2,numeralDecimalMark:".",blocks:[],delimiter:" ",prefix:null,numericOnly:!1,uppercase:!1,lowercase:!1})):console.warn("Cleave is missing. Please download from https://github.com/nosir/cleave.js/ and load the script in the HTML head section!")})},beforeDestroy:function(){this.cleave&&this.cleave.destroy()}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName,id:e.getFieldID(e.schema)},domProps:{value:e._s(e.value)},on:{input:function(t){t.target.composing||(e.value=t.target.value)}}})},staticRenderFns:[]}},function(e,t,n){n(234);var r=n(3)(n(235),n(244),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(236),i=r(o),a=n(185),s=r(a),u=n(147),c=r(u),l=n(243),f=r(l),d="YYYY-MM-DD HH:mm:ss";t.default={mixins:[c.default],methods:(0,i.default)({getDateFormat:function(){return this.schema.dateTimePickerOptions&&this.schema.dateTimePickerOptions.format?this.schema.dateTimePickerOptions.format:d}},f.default),mounted:function(){this.$nextTick(function(){var e=this;if(window.$&&window.$.fn.datetimepicker){var t=this.$el.querySelector(".form-control");$(this.$el).datetimepicker((0,s.default)(this.schema.dateTimePickerOptions||{},{format:d})).on("dp.change",function(){e.value=t.value})}else console.warn("Bootstrap datetimepicker library is missing. Please download from https://eonasdan.github.io/bootstrap-datetimepicker/ and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){window.$&&window.$.fn.datetimepicker&&$(this.$el).data("DateTimePicker").destroy()}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=n(237),i=r(o);t.default=i.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){e.exports={default:n(238),__esModule:!0}},function(e,t,n){n(239),e.exports=n(171).Object.assign},function(e,t,n){var r=n(170);r(r.S+r.F,"Object",{assign:n(240)})},function(e,t,n){"use strict";var r=n(154),o=n(241),i=n(242),a=n(152),s=n(158),u=Object.assign;e.exports=!u||n(180)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=u({},e)[n]||Object.keys(u({},t)).join("")!=r})?function(e,t){for(var n=a(e),u=arguments.length,c=1,l=o.f,f=i.f;u>c;)for(var d,p=s(arguments[c++]),h=l?r(p).concat(l(p)):r(p),m=h.length,v=0;m>v;)f.call(p,d=h[v++])&&(n[d]=p[d]);return n}:u},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){t.f={}.propertyIsEnumerable;\n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(197),i=r(o);t.default={formatValueToField:function(e){if(null!=e){var t=this.schema.format?i.default.parse(e,this.schema.format):new Date(e);return i.default.format(t,this.getDateFormat())}return e},formatValueToModel:function(e){if(null!=e){var t=i.default.parse(e,this.getDateFormat());e=this.schema.format?i.default.format(t,this.schema.format):t.valueOf()}return e}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"input-group date"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName,id:e.getFieldID(e.schema)},domProps:{value:e._s(e.value)},on:{input:function(t){t.target.composing||(e.value=t.target.value)}}}),e._m(0)])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("span",{staticClass:"input-group-addon"},[n("span",{staticClass:"glyphicon glyphicon-calendar"})])}]}},function(e,t,n){n(246);var r=n(3)(n(247),n(248),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(15),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],data:function(){return{autocomplete:"",inputs:{street_number:"long_name",route:"long_name",country:"long_name",administrative_area_level_1:"long_name",administrative_area_level_2:"long_name",locality:"long_name",postal_code:"short_name"}}},mounted:function(){this.$nextTick(function(){window.google&&window.google.maps&&window.google.maps.places&&window.google.maps.places.Autocomplete?(this.autocomplete=new google.maps.places.Autocomplete(this.$el,{types:["geocode"]}),this.autocomplete.addListener("place_changed",this.pipeAddress)):console.warn("Google Maps API is missing. Please add https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&libraries=places script in the HTML head section!")})},methods:{pipeAddress:function(){var e=this.autocomplete.getPlace();if(e){this.value=e.formatted_address;var t={};if(void 0!==e.address_components)for(var n=0;n<e.address_components.length;n++){var r=e.address_components[n].types[0];this.inputs[r]&&(t[r]=e.address_components[n][this.inputs[r]])}(0,i.default)(this.schema.onPlaceChanged)&&this.schema.onPlaceChanged(this.value,t,e,this.model,this.schema)}},geolocate:function(){var e=this;navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(t){var n={lat:t.coords.latitude,lng:t.coords.longitude},r=new window.google.maps.Circle({center:n,radius:t.coords.accuracy});e.autocomplete.setBounds(r.getBounds())})}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName,debounce:"500",id:e.getFieldID(e.schema)},domProps:{value:e._s(e.value)},on:{focus:function(t){e.geolocate()},input:function(t){t.target.composing||(e.value=t.target.value)}}})},staticRenderFns:[]}},function(e,t,n){n(250);var r=n(3)(n(251),n(252),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o);t.default={mixins:[i.default],computed:{previewStyle:function(){return this.schema.preview!==!1?{display:"block","background-image":null!=this.value?"url("+this.value+")":"none"}:{display:"none"}},wrappedValue:{get:function(){return this.value&&0==this.value.indexOf("data")?"<inline base64 image>":this.value},set:function(e){e&&0==e.indexOf("http")&&(this.value=e)}}},watch:{model:function(){this.$el.querySelector("input.file").value=""}},methods:{remove:function(){this.value=""},fileChanged:function(e){var t=this,n=new FileReader;n.onload=function(e){t.value=e.target.result},e.target.files&&e.target.files.length>0&&n.readAsDataURL(e.target.files[0])}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"wrapper"},[n("input",{directives:[{name:"show",rawName:"v-show",value:e.schema.hideInput!==!0,expression:"schema.hideInput !== true"},{name:"model",rawName:"v-model",value:e.wrappedValue,expression:"wrappedValue"}],staticClass:"form-control link",attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly},domProps:{value:e._s(e.wrappedValue)},on:{input:function(t){t.target.composing||(e.wrappedValue=t.target.value)}}}),e.schema.browse!==!1?n("input",{staticClass:"form-control file",attrs:{type:"file",disabled:e.disabled,name:e.schema.inputName},on:{change:e.fileChanged}}):e._e(),n("div",{staticClass:"preview",style:e.previewStyle},[n("div",{staticClass:"remove",attrs:{title:"Remove image"},on:{click:e.remove}})])])},staticRenderFns:[]}},function(e,t,n){n(254);var r=n(3)(n(255),n(256),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o);t.default={mixins:[i.default],mounted:function(){this.$nextTick(function(){window.$&&window.$.fn.mask?$(this.$el).unmask().mask(this.schema.mask,this.schema.maskOptions):console.warn("JQuery MaskedInput library is missing. Please download from https://github.com/digitalBush/jquery.maskedinput and load the script in the HTML head section!")})},beforeDestroy:function(){window.$&&window.$.fn.mask&&$(this.$el).unmask()}}},232,function(e,t,n){n(258);var r=n(3)(n(259),n(260),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(185),i=r(o),a=n(12),s=r(a),u=n(147),c=r(u);t.default={mixins:[c.default],data:function(){return{slider:null}},watch:{model:function(){window.noUiSlider&&this.slider&&this.slider.noUiSlider&&this.slider.noUiSlider.set(this.value)}},computed:{containPips:function(){return this.schema.noUiSliderOptions&&"undefined"!=typeof this.schema.noUiSliderOptions.pips},containTooltip:function(){return this.schema.noUiSliderOptions&&this.schema.noUiSliderOptions.tooltips}},methods:{onChange:function(e){(0,s.default)(e)?this.value=[parseFloat(e[0]),parseFloat(e[1])]:this.value=parseFloat(e)},formatValueToField:function(e){null!==this.slider&&"undefined"!=typeof this.slider.noUiSlider&&this.slider.noUiSlider.set(e)},formatValueToModel:function(e){if("undefined"!=typeof this.slider.noUiSlider)return e instanceof Array?[Number(e[0]),Number(e[1])]:Number(e)},getStartValue:function(){return null!=this.value?this.value:"undefined"!=typeof this.schema.noUiSliderOptions&&this.schema.noUiSliderOptions.double?[this.schema.min,this.schema.min]:this.schema.min}},mounted:function(){this.$nextTick(function(){window.noUiSlider?(this.slider=this.$el,window.noUiSlider.create(this.slider,(0,i.default)(this.schema.noUiSliderOptions||{},{start:this.getStartValue(),range:{min:this.schema.min,max:this.schema.max}})),this.slider.noUiSlider.on("change",this.onChange.bind(this))):console.warn("noUiSlider is missing. Please download from https://github.com/leongersen/noUiSlider and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){this.slider&&this.slider.noUiSlider.off("change")}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"slider",class:{"contain-pips":e.containPips,"contain-tooltip":e.containTooltip},attrs:{disabled:e.disabled}})},staticRenderFns:[]}},function(e,t,n){n(262);var r=n(3)(n(263),n(264),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(236),i=r(o),a=n(185),s=r(a),u=n(147),c=r(u),l=n(243),f=r(l),d="YYYY-MM-DD";t.default={mixins:[c.default],data:function(){return{picker:null}},methods:(0,i.default)({getDateFormat:function(){return this.schema.pikadayOptions&&this.schema.pikadayOptions.format?this.schema.pikadayOptions.format:d}},f.default),mounted:function(){var e=this;this.$nextTick(function(){window.Pikaday?e.picker=new window.Pikaday((0,s.default)(e.schema.pikadayOptions||{},{field:e.$el,onSelect:function(){e.value=e.picker.toString()}})):console.warn("Pikaday is missing. Please download from https://github.com/dbushell/Pikaday/ and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){this.picker&&this.picker.destroy()}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"form-control",attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName},domProps:{value:e._s(e.value)},on:{input:function(t){t.target.composing||(e.value=t.target.value)}}})},staticRenderFns:[]}},function(e,t,n){n(266);var r=n(3)(n(267),n(294),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(268),i=r(o),a=n(12),s=r(a),u=n(185),c=r(u),l=n(147),f=r(l);t.default={mixins:[f.default],data:function(){return{slider:null}},watch:{model:function(){if(window.$&&window.$.fn.ionRangeSlider){var e=void 0,t=void 0;if((0,s.default)(this.value)){var n=(0,i.default)(this.value,2);e=n[0],t=n[1]}else e=this.value;this.slider&&this.slider.update({from:e,to:t})}}},mounted:function(){this.$nextTick(function(){if(window.$&&window.$.fn.ionRangeSlider){var e=void 0,t=void 0;if((0,s.default)(this.value)){var n=(0,i.default)(this.value,2);e=n[0],t=n[1]}else e=this.value;var r=this;$(this.$el).ionRangeSlider((0,c.default)(this.schema.rangeSliderOptions||{},{type:"single",grid:!0,hide_min_max:!0,from:e,to:t,onChange:function(e){"double"==r.slider.options.type?r.value=[e.from,e.to]:r.value=e.from}})),this.slider=$(this.$el).data("ionRangeSlider")}else console.warn("ion.rangeSlider library is missing. Please download from https://github.com/IonDen/ion.rangeSlider and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){this.slider&&this.slider.destroy()}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=n(269),i=r(o),a=n(290),s=r(a);t.default=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=(0,s.default)(e);!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if((0,i.default)(Object(t)))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(e,t,n){e.exports={default:n(270),__esModule:!0}},function(e,t,n){n(271),n(286),e.exports=n(288)},function(e,t,n){n(272);for(var r=n(166),o=n(174),i=n(275),a=n(284)("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=s[u],l=r[c],f=l&&l.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},function(e,t,n){"use strict";var r=n(273),o=n(274),i=n(275),a=n(157);e.exports=n(276)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,n):"values"==t?o(0,e[n]):o(0,[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(277),o=n(170),i=n(278),a=n(174),s=n(156),u=n(275),c=n(279),l=n(283),f=n(285),d=n(284)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",m="keys",v="values",y=function(){return this};e.exports=function(e,t,n,b,g,x,_){c(n,t,b);var w,O,j,M=function(e){if(!p&&e in P)return P[e];switch(e){case m:return function(){return new n(this,e)};case v:return function(){return new n(this,e)}}return function(){return new n(this,e)}},k=t+" Iterator",S=g==v,C=!1,P=e.prototype,F=P[d]||P[h]||g&&P[g],T=F||M(g),D=g?S?M("entries"):T:void 0,I="Array"==t?P.entries||F:F;if(I&&(j=f(I.call(new e)),j!==Object.prototype&&(l(j,k,!0),r||s(j,d)||a(j,d,y))),S&&F&&F.name!==v&&(C=!0,T=function(){return F.call(this)}),r&&!_||!p&&!C&&P[d]||a(P,d,T),u[t]=T,u[k]=y,g)if(w={values:S?T:M(v),keys:x?T:M(m),entries:D},_)for(O in w)O in P||i(P,O,w[O]);else o(o.P+o.F*(p||C),t,w);return w}},function(e,t){e.exports=!0},function(e,t,n){e.exports=n(174)},function(e,t,n){"use strict";var r=n(280),o=n(183),i=n(283),a={};n(174)(a,n(284)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(176),o=n(281),i=n(168),a=n(164)("IE_PROTO"),s=function(){},u="prototype",c=function(){var e,t=n(181)("iframe"),r=i.length,o="<",a=">";for(t.style.display="none",n(282).appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write(o+"script"+a+"document.F=Object"+o+"/script"+a),e.close(),c=e.F;r--;)delete c[u][i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(s[u]=r(e),n=new s,s[u]=null,n[a]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(175),o=n(176),i=n(154);e.exports=n(179)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),s=a.length,u=0;s>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){e.exports=n(166).document&&document.documentElement},function(e,t,n){var r=n(175).f,o=n(156),i=n(284)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(165)("wks"),o=n(167),i=n(166).Symbol,a="function"==typeof i,s=e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))};s.store=r},function(e,t,n){var r=n(156),o=n(152),i=n(164)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){"use strict";var r=n(287)(!0);n(276)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){var r=n(162),o=n(153);e.exports=function(e){return function(t,n){var i,a,s=String(o(t)),u=r(n),c=s.length;return u<0||u>=c?e?"":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},function(e,t,n){var r=n(289),o=n(284)("iterator"),i=n(275);e.exports=n(171).isIterable=function(e){var t=Object(e);return void 0!==t[o]||"@@iterator"in t||i.hasOwnProperty(r(t))}},function(e,t,n){var r=n(159),o=n(284)("toStringTag"),i="Arguments"==r(function(){return arguments}()),a=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,n,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=a(t=Object(e),o))?n:i?r(t):"Object"==(s=r(t))&&"function"==typeof t.callee?"Arguments":s}},function(e,t,n){e.exports={default:n(291),__esModule:!0}},function(e,t,n){n(271),n(286),e.exports=n(292)},function(e,t,n){var r=n(176),o=n(293);e.exports=n(171).getIterator=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(e+" is not iterable!");return r(t.call(e))}},function(e,t,n){var r=n(289),o=n(284)("iterator"),i=n(275);e.exports=n(171).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{attrs:{type:"text",autocomplete:e.schema.autocomplete,"data-disable":e.disabled,"data-max":e.schema.max,"data-min":e.schema.min,"data-step":e.schema.step,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName}})},staticRenderFns:[]}},function(e,t,n){n(296);var r=n(3)(n(297),n(298),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(16),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],computed:{items:function(){var e=this.schema.values;return"function"==typeof e?e.apply(this,[this.model,this.schema]):e}},methods:{getItemID:function(e){return(0,i.default)(e)&&e.id?e.id:e},getItemName:function(e){return(0,i.default)(e)&&e.name?e.name:e}},watch:{model:function(){$.fn.selectpicker&&$(this.$el).selectpicker("refresh")}},mounted:function(){this.$nextTick(function(){$.fn.selectpicker?$(this.$el).selectpicker("destroy").selectpicker(this.schema.selectOptions):console.warn("Bootstrap-select library is missing. Please download from https://silviomoreto.github.io/bootstrap-select/ and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){$.fn.selectpicker&&$(this.$el).selectpicker("destroy")}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("select",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],staticClass:"selectpicker",attrs:{disabled:e.disabled,multiple:e.schema.multiSelect,title:e.schema.placeholder,"data-width":"100%",name:e.schema.inputName},on:{change:function(t){e.value=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){var t="_value"in e?e._value:e.value;return t})[0]}}},[e.schema.multiSelect!==!0?n("option",{attrs:{disabled:e.schema.required},domProps:{value:null,selected:void 0==e.value}}):e._e(),e._l(e.items,function(t){return n("option",{domProps:{value:e.getItemID(t)}},[e._v(e._s(e.getItemName(t)))])})],2)},staticRenderFns:[]}},function(e,t,n){n(300);var r=n(3)(n(301),n(302),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(185),i=r(o),a=n(147),s=r(a);t.default={mixins:[s.default],data:function(){return{picker:null}},watch:{model:function(){window.$&&window.$.fn.spectrum&&this.picker.spectrum("set",this.value)},disabled:function(e){e?this.picker.spectrum("disable"):this.picker.spectrum("enable")}},mounted:function(){this.$nextTick(function(){var e=this;window.$&&window.$.fn.spectrum?(this.picker=$(this.$el).spectrum("destroy").spectrum((0,i.default)(this.schema.colorOptions||{},{showInput:!0,showAlpha:!0,disabled:this.schema.disabled,allowEmpty:!this.schema.required,preferredFormat:"hex",change:function(t){e.value=t?t.toString():null}})),this.picker.spectrum("set",this.value)):console.warn("Spectrum color library is missing. Please download from http://bgrins.github.io/spectrum/ and load the script and CSS in the HTML head section!")})},beforeDestroy:function(){this.picker&&this.picker.spectrum("destroy")}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("input",{attrs:{type:"text",autocomplete:e.schema.autocomplete,disabled:e.disabled,placeholder:e.schema.placeholder,readonly:e.schema.readonly,name:e.schema.inputName,id:e.getFieldID(e.schema)}})},staticRenderFns:[]}},function(e,t,n){n(304);var r=n(3)(n(305),n(306),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(290),i=r(o),a=n(185),s=r(a),u=n(147),c=r(u);t.default={mixins:[c.default],computed:{mapLink:function(){if(this.value){var e=void 0,t=void 0,n=(0,s.default)(this.schema.staticMapOptions||{},{lat:"lat",lng:"lng",zoom:8,sizeX:640,sizeY:640});e=this.value[n.lat],t=this.value[n.lng];var r="http://maps.googleapis.com/maps/api/staticmap?center="+e+","+t+"&zoom="+n.zoom+"&size="+n.sizeX+"x"+n.sizeY,o=["scale","format","maptype","language","region","markers","path","visible","style","key","signature"],a=!0,u=!1,c=void 0;try{for(var l,f=(0,i.default)(o);!(a=(l=f.next()).done);a=!0){var d=l.value;"undefined"!=typeof n[d]&&(r+="&"+d+"="+n[d])}}catch(e){u=!0,c=e}finally{try{!a&&f.return&&f.return()}finally{if(u)throw c}}if(e&&t)return r}}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("img",{attrs:{src:e.mapLink}})},staticRenderFns:[]}},function(e,t,n){n(308);var r=n(3)(n(309),n(310),null,null);e.exports=r.exports},2,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o);t.default={mixins:[i.default],methods:{formatValueToField:function(e){return null!=e&&this.schema.valueOn?e==this.schema.valueOn:e},formatValueToModel:function(e){return null!=e&&this.schema.valueOn?e?this.schema.valueOn:this.schema.valueOff:e}}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",[n("input",{directives:[{name:"model",rawName:"v-model",value:e.value,expression:"value"}],attrs:{type:"checkbox",autocomplete:e.schema.autocomplete,disabled:e.disabled,name:e.schema.inputName,id:e.getFieldID(e.schema)},domProps:{checked:Array.isArray(e.value)?e._i(e.value,null)>-1:e.value},on:{click:function(t){var n=e.value,r=t.target,o=!!r.checked;if(Array.isArray(n)){var i=null,a=e._i(n,i);o?a<0&&(e.value=n.concat(i)):a>-1&&(e.value=n.slice(0,a).concat(n.slice(a+1)))}else e.value=o}}}),n("span",{staticClass:"label",attrs:{"data-on":e.schema.textOn||"On","data-off":e.schema.textOff||"Off",for:e.getFieldID(e.schema)}}),n("span",{staticClass:"handle"})])},staticRenderFns:[]}},function(e,t,n){var r=n(3)(n(312),n(313),null,null);e.exports=r.exports},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(147),i=r(o);t.default={mixins:[i.default],computed:{selectOptions:function(){return this.schema.selectOptions||{}},options:function(){var e=this.schema.values;return"function"==typeof e?e.apply(this,[this.model,this.schema]):e},customLabel:function(){return"undefined"!=typeof this.schema.selectOptions&&"undefined"!=typeof this.schema.selectOptions.customLabel&&"function"==typeof this.schema.selectOptions.customLabel?this.schema.selectOptions.customLabel:void 0}},methods:{updateSelected:function(e){this.value=e},addTag:function(e,t){var n=this.selectOptions.onNewTag;"function"==typeof n&&n(e,t,this.options,this.value)},onSearchChange:function(e,t){var n=this.selectOptions.onSearch;"function"==typeof n&&n(e,t,this.options)},onSelect:function(){},onRemove:function(){},onOpen:function(){},onClose:function(){}},created:function(){this.$root.$options.components.multiselect||console.error("\'vue-multiselect\' is missing. Please download from https://github.com/monterail/vue-multiselect and register the component globally!")}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("multiselect",{attrs:{id:e.selectOptions.id,options:e.options,value:e.value,multiple:e.selectOptions.multiple,"track-by":e.selectOptions.trackBy||null,label:e.selectOptions.label||null,searchable:e.selectOptions.searchable,"clear-on-select":e.selectOptions.clearOnSelect,"hide-selected":e.selectOptions.hideSelected,placeholder:e.schema.placeholder,"allow-empty":e.selectOptions.allowEmpty,"reset-after":e.selectOptions.resetAfter,"close-on-select":e.selectOptions.closeOnSelect,"custom-label":e.customLabel,taggable:e.selectOptions.taggable,"tag-placeholder":e.selectOptions.tagPlaceholder,max:e.schema.max||null,"options-limit":e.selectOptions.optionsLimit,"group-values":e.selectOptions.groupValues,"group-label":e.selectOptions.groupLabel,"block-keys":e.selectOptions.blockKeys,"internal-search":e.selectOptions.internalSearch,"select-label":e.selectOptions.selectLabel,"selected-label":e.selectOptions.selectedLabel,"deselect-label":e.selectOptions.deselectLabel,"show-labels":e.selectOptions.showLabels,limit:e.selectOptions.limit,"limit-text":e.selectOptions.limitText,loading:e.selectOptions.loading,disabled:e.disabled,"max-height":e.selectOptions.maxHeight,"show-pointer":e.selectOptions.showPointer,"option-height":e.selectOptions.optionHeight},on:{input:e.updateSelected,select:e.onSelect,remove:e.onRemove,"search-change":e.onSearchChange,tag:e.addTag,open:e.onOpen,close:e.onClose}})},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return null!=e.schema?n("div",{staticClass:"vue-form-generator"},[e.schema.fields?n(e.tag,{tag:"fieldset"},[e._l(e.fields,function(t){return[e.fieldVisible(t)?n("div",{staticClass:"form-group",class:e.getFieldRowClasses(t)},[e.fieldTypeHasLabel(t)?n("label",{attrs:{for:e.getFieldID(t)}},[e._v(e._s(t.label)),t.help?n("span",{staticClass:"help"},[n("i",{staticClass:"icon"}),n("div",{staticClass:"helpText",domProps:{innerHTML:e._s(t.help)}})]):e._e()]):e._e(),n("div",{staticClass:"field-wrap"},[n(e.getFieldType(t),{tag:"component",attrs:{disabled:e.fieldDisabled(t),model:e.model,schema:t,formOptions:e.options},on:{"model-updated":e.modelUpdated,validated:e.onFieldValidated}}),e.buttonVisibility(t)?n("div",{staticClass:"buttons"},e._l(t.buttons,function(r){return n("button",{class:r.classes,on:{click:function(n){e.buttonClickHandler(r,t,n)}}},[e._v(e._s(r.label))])})):e._e()],1),t.hint?n("div",{staticClass:"hint"},[e._v(e._s(t.hint))]):e._e(),e.fieldErrors(t).length>0?n("div",{staticClass:"errors help-block"},e._l(e.fieldErrors(t),function(t,r){return n("span",{attrs:{"track-by":"index"}},[e._v(e._s(t))])})):e._e()]):e._e()]})],2):e._e(),e._l(e.groups,function(t){return[n("fieldset",[t.legend?n("legend",[e._v(e._s(t.legend))]):e._e(),e._l(t.fields,function(t){return[e.fieldVisible(t)?n("div",{staticClass:"form-group",class:e.getFieldRowClasses(t)},[e.fieldTypeHasLabel(t)?n("label",{attrs:{for:e.getFieldID(t)}},[e._v(e._s(t.label)),t.help?n("span",{staticClass:"help"},[n("i",{staticClass:"icon"}),n("div",{staticClass:"helpText",domProps:{innerHTML:e._s(t.help)}})]):e._e()]):e._e(),n("div",{staticClass:"field-wrap"},[n(e.getFieldType(t),{tag:"component",attrs:{disabled:e.fieldDisabled(t),model:e.model,schema:t,formOptions:e.options},on:{"model-updated":e.modelUpdated,validated:e.onFieldValidated}}),e.buttonVisibility(t)?n("div",{staticClass:"buttons"},e._l(t.buttons,function(r){return n("button",{class:r.classes,on:{click:function(n){e.buttonClickHandler(r,t,n)}}},[e._v(e._s(r.label))])})):e._e()],1),t.hint?n("div",{staticClass:"hint"},[e._v(e._s(t.hint))]):e._e(),e.fieldErrors(t).length>0?n("div",{staticClass:"errors help-block"},e._l(e.fieldErrors(t),function(t,r){return n("span",{attrs:{"track-by":"index"}},[e._v(e._s(t))])})):e._e()]):e._e()]})],2)]})],2):e._e()},staticRenderFns:[]}}]))});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(236)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(97),\n  /* template */\n  __webpack_require__(222),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-8d7a90c0",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3Rvci52dWU/Y2VlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHlCQUFtTDtBQUNuTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LThkN2E5MGMwXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NlbGVjdG9yLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VsZWN0b3IudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi04ZDdhOTBjMFxcXCJ9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TZWxlY3Rvci52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi04ZDdhOTBjMFwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1NlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(228)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(98),\n  /* template */\n  __webpack_require__(213),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIudnVlPzk0YzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBb0w7QUFDcEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yMzFmYmE5M1xcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVmlld2VyLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVmlld2VyLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjMxZmJhOTNcXFwifSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVmlld2VyLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvVmlld2VyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(233)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(100),\n  /* template */\n  __webpack_require__(218),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-6b792a45",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9QYW4udnVlPzllN2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBc0w7QUFDdEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi02Yjc5MmE0NVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9QYW4udnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9QYW4udnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02Yjc5MmE0NVxcXCJ9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9QYW4udnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtNmI3OTJhNDVcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9QYW4udnVlXG4vLyBtb2R1bGUgaWQgPSAyMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(240)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(101),\n  /* template */\n  __webpack_require__(226),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-f895c3ba",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZT8xMTQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EseUJBQXNMO0FBQ3RMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjg5NWMzYmFcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9vbGJhci52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rvb2xiYXIudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1mODk1YzNiYVxcXCJ9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub29sYmFyLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIFwiZGF0YS12LWY4OTVjM2JhXCIsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvVG9vbGJhci52dWVcbi8vIG1vZHVsZSBpZCA9IDIwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(227)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(102),\n  /* template */\n  __webpack_require__(212),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-07c9ed4a",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9ab29tLnZ1ZT85NDIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EseUJBQXNMO0FBQ3RMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjA1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDdjOWVkNGFcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vWm9vbS52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1pvb20udnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0wN2M5ZWQ0YVxcXCJ9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9ab29tLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIFwiZGF0YS12LTA3YzllZDRhXCIsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvWm9vbS52dWVcbi8vIG1vZHVsZSBpZCA9IDIwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(229)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(103),\n  /* template */\n  __webpack_require__(214),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvQnJvd3NlLnZ1ZT8wMWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EseUJBQXVMO0FBQ3ZMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjA2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjhkMzAzYTJcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0Jyb3dzZS52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Jyb3dzZS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTI4ZDMwM2EyXFxcIn0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Jyb3dzZS52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL21vZGFscy9Ccm93c2UudnVlXG4vLyBtb2R1bGUgaWQgPSAyMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(232)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(104),\n  /* template */\n  __webpack_require__(217),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-5a724e4e",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvSGVscC52dWU/ZDE0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHlCQUFzTDtBQUN0TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXNHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIwNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzI0ZTRlXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0hlbHAudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9IZWxwLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWE3MjRlNGVcXFwifSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSGVscC52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi01YTcyNGU0ZVwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL21vZGFscy9IZWxwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(238)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(105),\n  /* template */\n  __webpack_require__(224),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-cdd7c472",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlP2NiNGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBc0w7QUFDdEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1jZGQ3YzQ3MlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9NZXRhZGF0YS52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01ldGFkYXRhLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtY2RkN2M0NzJcXFwifSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTWV0YWRhdGEudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtY2RkN2M0NzJcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlXG4vLyBtb2R1bGUgaWQgPSAyMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(235)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(106),\n  /* template */\n  __webpack_require__(221),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-8bcd5610",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL1NpZGViYXIudnVlPzhlNzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBc0w7QUFDdEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi04YmNkNTYxMFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9TaWRlYmFyLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2lkZWJhci52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LThiY2Q1NjEwXFxcIn0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NpZGViYXIudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtOGJjZDU2MTBcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL1NpZGViYXIudnVlXG4vLyBtb2R1bGUgaWQgPSAyMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval('function injectStyle (ssrContext) {\n  __webpack_require__(237)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(107),\n  /* template */\n  __webpack_require__(223),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  "data-v-caebde82",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWU/NGZlYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHlCQUF5TDtBQUN6TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlHO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWNhZWJkZTgyXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NlbGVjdC52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NlbGVjdC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWNhZWJkZTgyXFxcIn0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NlbGVjdC52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi1jYWViZGU4MlwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3NpZGViYXIvaXRlbXMvU2VsZWN0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("function injectStyle (ssrContext) {\n  __webpack_require__(231)\n}\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(108),\n  /* template */\n  __webpack_require__(216),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1RyYW5zY3JpYmUudnVlPzY4N2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5QkFBMEw7QUFDMUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5RztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi00YjQ4MWZiOFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVHJhbnNjcmliZS52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RyYW5zY3JpYmUudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi00YjQ4MWZiOFxcXCJ9IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9UcmFuc2NyaWJlLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvc2lkZWJhci9pdGVtcy9UcmFuc2NyaWJlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-zoom-controls"\n    }\n  }, _vm._l((_vm.buttons), function(b, index) {\n    return _c(\'control-button\', {\n      key: ("btn-zoom-" + index),\n      attrs: {\n        "tooltip": b.tooltip,\n        "callback": b.callback,\n        "position": "bottom",\n        "hint-position": "top"\n      }\n    }, [_c(\'icon\', {\n      attrs: {\n        "name": b.icon\n      }\n    })], 1)\n  }))\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9ab29tLnZ1ZT82ZGIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJsdi16b29tLWNvbnRyb2xzXCJcbiAgICB9XG4gIH0sIF92bS5fbCgoX3ZtLmJ1dHRvbnMpLCBmdW5jdGlvbihiLCBpbmRleCkge1xuICAgIHJldHVybiBfYygnY29udHJvbC1idXR0b24nLCB7XG4gICAgICBrZXk6IChcImJ0bi16b29tLVwiICsgaW5kZXgpLFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJ0b29sdGlwXCI6IGIudG9vbHRpcCxcbiAgICAgICAgXCJjYWxsYmFja1wiOiBiLmNhbGxiYWNrLFxuICAgICAgICBcInBvc2l0aW9uXCI6IFwiYm90dG9tXCIsXG4gICAgICAgIFwiaGludC1wb3NpdGlvblwiOiBcInRvcFwiXG4gICAgICB9XG4gICAgfSwgW19jKCdpY29uJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJuYW1lXCI6IGIuaWNvblxuICAgICAgfVxuICAgIH0pXSwgMSlcbiAgfSkpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMDdjOWVkNGFcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL1pvb20udnVlXG4vLyBtb2R1bGUgaWQgPSAyMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    ref: "container",\n    attrs: {\n      "id": "lv-viewer"\n    }\n  }, [_c(\'div\', {\n    attrs: {\n      "id": "lv-viewer-wrapper"\n    }\n  }, [_c(\'div\', {\n    ref: "hud",\n    attrs: {\n      "id": "hud"\n    }\n  }, [(_vm.currentTask) ? _c(\'toolbar-controls\', {\n    attrs: {\n      "task": _vm.currentTask,\n      "viewer": _vm.viewer,\n      "showHelp": _vm.showHelp,\n      "showInfo": _vm.showInfo,\n      "showBrowse": _vm.showBrowse,\n      "showLike": _vm.showLike,\n      "showShare": _vm.showShare,\n      "helpButton": _vm.viewerOpts.helpButton,\n      "infoButton": _vm.viewerOpts.infoButton\n    },\n    on: {\n      "helpclicked": function($event) {\n        _vm.showHelpModal = true\n      },\n      "infoclicked": function($event) {\n        _vm.showInfoModal = true\n      },\n      "browseclicked": function($event) {\n        _vm.showBrowseModal = true\n      },\n      "likeclicked": _vm.emitTaskLiked,\n      "fullscreenclicked": _vm.toggleFullScreen\n    }\n  }) : _vm._e(), _vm._v(" "), _c(\'pan-controls\', {\n    attrs: {\n      "viewer": _vm.viewer,\n      "panBy": _vm.panBy\n    }\n  }), _vm._v(" "), _c(\'zoom-controls\', {\n    attrs: {\n      "viewer": _vm.viewer,\n      "zoomBy": _vm.zoomBy\n    }\n  }), _vm._v(" "), (_vm.currentTask) ? _c(\'metadata-modal\', {\n    attrs: {\n      "task": _vm.currentTask,\n      "show": _vm.showInfoModal,\n      "lang": _vm.lang\n    },\n    on: {\n      "hide": function($event) {\n        _vm.showInfoModal = false\n      }\n    }\n  }) : _vm._e(), _vm._v(" "), (_vm.currentTask && _vm.showHelp) ? _c(\'help-modal\', {\n    attrs: {\n      "showInfo": _vm.showInfo,\n      "showLike": _vm.showLike,\n      "showShare": _vm.showShare,\n      "show": _vm.showHelpModal,\n      "disableComplete": _vm.disableComplete,\n      "task": _vm.currentTask\n    },\n    on: {\n      "hide": function($event) {\n        _vm.showHelpModal = false\n      }\n    }\n  }) : _vm._e(), _vm._v(" "), (_vm.showBrowse) ? _c(\'browse-modal\', {\n    attrs: {\n      "tasks": _vm.tasks,\n      "show": _vm.showBrowseModal,\n      "disableComplete": _vm.disableComplete\n    },\n    on: {\n      "hide": function($event) {\n        _vm.showBrowseModal = false\n      },\n      "taskclick": _vm.setCurrentTask\n    }\n  }) : _vm._e(), _vm._v(" "), _c(\'button\', {\n    staticClass: "btn btn-hud",\n    attrs: {\n      "disabled": _vm.previousBtnDisabled,\n      "id": "lv-browse-previous"\n    },\n    on: {\n      "click": _vm.previousTask\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-left",\n      "scale": "1.5"\n    }\n  })], 1), _vm._v(" "), _c(\'button\', {\n    staticClass: "btn btn-hud",\n    attrs: {\n      "disabled": _vm.nextBtnDisabled,\n      "id": "lv-browse-next"\n    },\n    on: {\n      "click": _vm.nextTask\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-right",\n      "scale": "1.5"\n    }\n  })], 1)], 1), _vm._v(" "), _c(\'div\', {\n    attrs: {\n      "id": _vm.viewerOpts.id\n    }\n  })]), _vm._v(" "), (_vm.currentTask) ? _c(\'sidebar\', {\n    attrs: {\n      "task": _vm.currentTask,\n      "showNote": _vm.showNote,\n      "commentAnnotation": _vm.commentAnnotation,\n      "disableComplete": _vm.disableComplete\n    },\n    on: {\n      "noteupdated": _vm.updateNote,\n      "submit": _vm.submitTask\n    }\n  }, [(_vm.currentTask.mode === \'select\') ? _c(\'select-sidebar-item\', {\n    attrs: {\n      "task": _vm.currentTask,\n      "tags": _vm.tags\n    },\n    on: {\n      "edit": _vm.editTag,\n      "delete": _vm.deleteTag\n    }\n  }) : _vm._e(), _vm._v(" "), (_vm.currentTask.mode === \'transcribe\') ? _c(\'transcribe-sidebar-item\', {\n    attrs: {\n      "task": _vm.currentTask\n    },\n    on: {\n      "update": _vm.updateForm,\n      "inputfocus": _vm.onTranscribeInputFocus,\n      "inputblur": _vm.onTranscribeInputBlur\n    }\n  }) : _vm._e()], 1) : _vm._e(), _vm._v(" "), (_vm.selectorEnabled) ? _c(\'selector\', {\n    attrs: {\n      "viewer": _vm.viewer,\n      "task": _vm.currentTask,\n      "selectionRect": _vm.selectionRect\n    },\n    on: {\n      "selection": _vm.handleSelection\n    }\n  }) : _vm._e()], 1)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIudnVlP2EwYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHJlZjogXCJjb250YWluZXJcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImx2LXZpZXdlclwiXG4gICAgfVxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImx2LXZpZXdlci13cmFwcGVyXCJcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJodWRcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImh1ZFwiXG4gICAgfVxuICB9LCBbKF92bS5jdXJyZW50VGFzaykgPyBfYygndG9vbGJhci1jb250cm9scycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ0YXNrXCI6IF92bS5jdXJyZW50VGFzayxcbiAgICAgIFwidmlld2VyXCI6IF92bS52aWV3ZXIsXG4gICAgICBcInNob3dIZWxwXCI6IF92bS5zaG93SGVscCxcbiAgICAgIFwic2hvd0luZm9cIjogX3ZtLnNob3dJbmZvLFxuICAgICAgXCJzaG93QnJvd3NlXCI6IF92bS5zaG93QnJvd3NlLFxuICAgICAgXCJzaG93TGlrZVwiOiBfdm0uc2hvd0xpa2UsXG4gICAgICBcInNob3dTaGFyZVwiOiBfdm0uc2hvd1NoYXJlLFxuICAgICAgXCJoZWxwQnV0dG9uXCI6IF92bS52aWV3ZXJPcHRzLmhlbHBCdXR0b24sXG4gICAgICBcImluZm9CdXR0b25cIjogX3ZtLnZpZXdlck9wdHMuaW5mb0J1dHRvblxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiaGVscGNsaWNrZWRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5zaG93SGVscE1vZGFsID0gdHJ1ZVxuICAgICAgfSxcbiAgICAgIFwiaW5mb2NsaWNrZWRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5zaG93SW5mb01vZGFsID0gdHJ1ZVxuICAgICAgfSxcbiAgICAgIFwiYnJvd3NlY2xpY2tlZFwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLnNob3dCcm93c2VNb2RhbCA9IHRydWVcbiAgICAgIH0sXG4gICAgICBcImxpa2VjbGlja2VkXCI6IF92bS5lbWl0VGFza0xpa2VkLFxuICAgICAgXCJmdWxsc2NyZWVuY2xpY2tlZFwiOiBfdm0udG9nZ2xlRnVsbFNjcmVlblxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3Bhbi1jb250cm9scycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ2aWV3ZXJcIjogX3ZtLnZpZXdlcixcbiAgICAgIFwicGFuQnlcIjogX3ZtLnBhbkJ5XG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3pvb20tY29udHJvbHMnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidmlld2VyXCI6IF92bS52aWV3ZXIsXG4gICAgICBcInpvb21CeVwiOiBfdm0uem9vbUJ5XG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgKF92bS5jdXJyZW50VGFzaykgPyBfYygnbWV0YWRhdGEtbW9kYWwnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidGFza1wiOiBfdm0uY3VycmVudFRhc2ssXG4gICAgICBcInNob3dcIjogX3ZtLnNob3dJbmZvTW9kYWwsXG4gICAgICBcImxhbmdcIjogX3ZtLmxhbmdcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImhpZGVcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5zaG93SW5mb01vZGFsID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH0pIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksIChfdm0uY3VycmVudFRhc2sgJiYgX3ZtLnNob3dIZWxwKSA/IF9jKCdoZWxwLW1vZGFsJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNob3dJbmZvXCI6IF92bS5zaG93SW5mbyxcbiAgICAgIFwic2hvd0xpa2VcIjogX3ZtLnNob3dMaWtlLFxuICAgICAgXCJzaG93U2hhcmVcIjogX3ZtLnNob3dTaGFyZSxcbiAgICAgIFwic2hvd1wiOiBfdm0uc2hvd0hlbHBNb2RhbCxcbiAgICAgIFwiZGlzYWJsZUNvbXBsZXRlXCI6IF92bS5kaXNhYmxlQ29tcGxldGUsXG4gICAgICBcInRhc2tcIjogX3ZtLmN1cnJlbnRUYXNrXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJoaWRlXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uc2hvd0hlbHBNb2RhbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9KSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNob3dCcm93c2UpID8gX2MoJ2Jyb3dzZS1tb2RhbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ0YXNrc1wiOiBfdm0udGFza3MsXG4gICAgICBcInNob3dcIjogX3ZtLnNob3dCcm93c2VNb2RhbCxcbiAgICAgIFwiZGlzYWJsZUNvbXBsZXRlXCI6IF92bS5kaXNhYmxlQ29tcGxldGVcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImhpZGVcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5zaG93QnJvd3NlTW9kYWwgPSBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwidGFza2NsaWNrXCI6IF92bS5zZXRDdXJyZW50VGFza1xuICAgIH1cbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLWh1ZFwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImRpc2FibGVkXCI6IF92bS5wcmV2aW91c0J0bkRpc2FibGVkLFxuICAgICAgXCJpZFwiOiBcImx2LWJyb3dzZS1wcmV2aW91c1wiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0ucHJldmlvdXNUYXNrXG4gICAgfVxuICB9LCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcImNoZXZyb24tbGVmdFwiLFxuICAgICAgXCJzY2FsZVwiOiBcIjEuNVwiXG4gICAgfVxuICB9KV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4taHVkXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLm5leHRCdG5EaXNhYmxlZCxcbiAgICAgIFwiaWRcIjogXCJsdi1icm93c2UtbmV4dFwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0ubmV4dFRhc2tcbiAgICB9XG4gIH0sIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiY2hldnJvbi1yaWdodFwiLFxuICAgICAgXCJzY2FsZVwiOiBcIjEuNVwiXG4gICAgfVxuICB9KV0sIDEpXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogX3ZtLnZpZXdlck9wdHMuaWRcbiAgICB9XG4gIH0pXSksIF92bS5fdihcIiBcIiksIChfdm0uY3VycmVudFRhc2spID8gX2MoJ3NpZGViYXInLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidGFza1wiOiBfdm0uY3VycmVudFRhc2ssXG4gICAgICBcInNob3dOb3RlXCI6IF92bS5zaG93Tm90ZSxcbiAgICAgIFwiY29tbWVudEFubm90YXRpb25cIjogX3ZtLmNvbW1lbnRBbm5vdGF0aW9uLFxuICAgICAgXCJkaXNhYmxlQ29tcGxldGVcIjogX3ZtLmRpc2FibGVDb21wbGV0ZVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwibm90ZXVwZGF0ZWRcIjogX3ZtLnVwZGF0ZU5vdGUsXG4gICAgICBcInN1Ym1pdFwiOiBfdm0uc3VibWl0VGFza1xuICAgIH1cbiAgfSwgWyhfdm0uY3VycmVudFRhc2subW9kZSA9PT0gJ3NlbGVjdCcpID8gX2MoJ3NlbGVjdC1zaWRlYmFyLWl0ZW0nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidGFza1wiOiBfdm0uY3VycmVudFRhc2ssXG4gICAgICBcInRhZ3NcIjogX3ZtLnRhZ3NcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImVkaXRcIjogX3ZtLmVkaXRUYWcsXG4gICAgICBcImRlbGV0ZVwiOiBfdm0uZGVsZXRlVGFnXG4gICAgfVxuICB9KSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLmN1cnJlbnRUYXNrLm1vZGUgPT09ICd0cmFuc2NyaWJlJykgPyBfYygndHJhbnNjcmliZS1zaWRlYmFyLWl0ZW0nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidGFza1wiOiBfdm0uY3VycmVudFRhc2tcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcInVwZGF0ZVwiOiBfdm0udXBkYXRlRm9ybSxcbiAgICAgIFwiaW5wdXRmb2N1c1wiOiBfdm0ub25UcmFuc2NyaWJlSW5wdXRGb2N1cyxcbiAgICAgIFwiaW5wdXRibHVyXCI6IF92bS5vblRyYW5zY3JpYmVJbnB1dEJsdXJcbiAgICB9XG4gIH0pIDogX3ZtLl9lKCldLCAxKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNlbGVjdG9yRW5hYmxlZCkgPyBfYygnc2VsZWN0b3InLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidmlld2VyXCI6IF92bS52aWV3ZXIsXG4gICAgICBcInRhc2tcIjogX3ZtLmN1cnJlbnRUYXNrLFxuICAgICAgXCJzZWxlY3Rpb25SZWN0XCI6IF92bS5zZWxlY3Rpb25SZWN0XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJzZWxlY3Rpb25cIjogX3ZtLmhhbmRsZVNlbGVjdGlvblxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMjMxZmJhOTNcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1ZpZXdlci52dWVcbi8vIG1vZHVsZSBpZCA9IDIxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-browse-modal"\n    }\n  }, [_c(\'modal\', {\n    attrs: {\n      "show": _vm.show,\n      "title": "Browse Tasks"\n    },\n    on: {\n      "hide": function($event) {\n        _vm.$emit(\'hide\')\n      }\n    }\n  }, [_c(\'ul\', _vm._l((_vm.tasks), function(task, index) {\n    return _c(\'li\', {\n      key: ("task-" + index),\n      class: _vm.listItemClass,\n      on: {\n        "click": function($event) {\n          _vm.onTaskClicked(task)\n        }\n      }\n    }, [(task !== undefined) ? _c(\'figure\', [_c(\'img\', {\n      attrs: {\n        "src": task.thumbnailUri,\n        "alt": ("Task " + index + " thumbnail")\n      }\n    }), _vm._v(" "), (!task.complete || !_vm.disableComplete) ? _c(\'figcaption\', [_vm._v("\\n            " + _vm._s(task.objective) + "\\n          ")]) : _vm._e(), _vm._v(" "), (task.complete && _vm.disableComplete) ? _c(\'div\', {\n      staticClass: "complete-icon"\n    }, [_c(\'icon\', {\n      attrs: {\n        "name": "check-circle"\n      }\n    })], 1) : _vm._e()]) : _vm._e()])\n  }))])], 1)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvQnJvd3NlLnZ1ZT84NTBjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJsdi1icm93c2UtbW9kYWxcIlxuICAgIH1cbiAgfSwgW19jKCdtb2RhbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJzaG93XCI6IF92bS5zaG93LFxuICAgICAgXCJ0aXRsZVwiOiBcIkJyb3dzZSBUYXNrc1wiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJoaWRlXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uJGVtaXQoJ2hpZGUnKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCd1bCcsIF92bS5fbCgoX3ZtLnRhc2tzKSwgZnVuY3Rpb24odGFzaywgaW5kZXgpIHtcbiAgICByZXR1cm4gX2MoJ2xpJywge1xuICAgICAga2V5OiAoXCJ0YXNrLVwiICsgaW5kZXgpLFxuICAgICAgY2xhc3M6IF92bS5saXN0SXRlbUNsYXNzLFxuICAgICAgb246IHtcbiAgICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBfdm0ub25UYXNrQ2xpY2tlZCh0YXNrKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgWyh0YXNrICE9PSB1bmRlZmluZWQpID8gX2MoJ2ZpZ3VyZScsIFtfYygnaW1nJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJzcmNcIjogdGFzay50aHVtYm5haWxVcmksXG4gICAgICAgIFwiYWx0XCI6IChcIlRhc2sgXCIgKyBpbmRleCArIFwiIHRodW1ibmFpbFwiKVxuICAgICAgfVxuICAgIH0pLCBfdm0uX3YoXCIgXCIpLCAoIXRhc2suY29tcGxldGUgfHwgIV92bS5kaXNhYmxlQ29tcGxldGUpID8gX2MoJ2ZpZ2NhcHRpb24nLCBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIgKyBfdm0uX3ModGFzay5vYmplY3RpdmUpICsgXCJcXG4gICAgICAgICAgXCIpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKHRhc2suY29tcGxldGUgJiYgX3ZtLmRpc2FibGVDb21wbGV0ZSkgPyBfYygnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiY29tcGxldGUtaWNvblwiXG4gICAgfSwgW19jKCdpY29uJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiY2hlY2stY2lyY2xlXCJcbiAgICAgIH1cbiAgICB9KV0sIDEpIDogX3ZtLl9lKCldKSA6IF92bS5fZSgpXSlcbiAgfSkpXSldLCAxKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTI4ZDMwM2EyXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvQnJvd3NlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "app"\n    }\n  }, [(!_vm.showSelectViewer && !_vm.showTranscribeViewer) ? _c(\'div\', {\n    attrs: {\n      "id": "home-container"\n    }\n  }, [_c(\'h1\', [_vm._v("LibCrowds Viewer")]), _vm._v(" "), _c(\'p\', {\n    staticClass: "lead"\n  }, [_vm._v("\\n      IIIF-compatible image viewer Vue component.\\n    ")]), _vm._v(" "), _c(\'div\', {\n    attrs: {\n      "id": "mode-buttons"\n    }\n  }, [_c(\'button\', {\n    on: {\n      "click": function($event) {\n        _vm.showSelectViewer = true\n      }\n    }\n  }, [_vm._v("\\n        Select Mode\\n      ")]), _vm._v(" "), _c(\'button\', {\n    on: {\n      "click": function($event) {\n        _vm.showTranscribeViewer = true\n      }\n    }\n  }, [_vm._v("\\n        Transcribe Mode\\n      ")])]), _vm._v(" "), _c(\'a\', {\n    attrs: {\n      "href": _vm.githubUrl,\n      "id": "doc-link"\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "name": "github",\n      "scale": "1.2"\n    }\n  }), _vm._v(" "), _c(\'span\', {\n    staticClass: "text"\n  }, [_vm._v("Documentation on GitHub")])], 1)]) : (_vm.showSelectViewer) ? _c(\'div\', {\n    staticClass: "viewer-container"\n  }, [_c(\'libcrowds-viewer\', {\n    attrs: {\n      "disable-complete": true,\n      "show-like": _vm.showLike,\n      "message-bus": _vm.messageBus,\n      "task-opts": _vm.selectTaskOpts,\n      "creator": _vm.creator,\n      "generator": _vm.generator\n    },\n    on: {\n      "taskchange": _vm.handleTaskChange,\n      "create": _vm.handleCreate,\n      "update": _vm.handleUpdate,\n      "delete": _vm.handleDelete,\n      "submit": _vm.handleSubmit\n    }\n  })], 1) : (_vm.showTranscribeViewer) ? _c(\'div\', {\n    staticClass: "viewer-container"\n  }, [_c(\'libcrowds-viewer\', {\n    attrs: {\n      "disable-complete": true,\n      "show-like": _vm.showLike,\n      "message-bus": _vm.messageBus,\n      "task-opts": _vm.transcribeTaskOpts,\n      "creator": _vm.creator,\n      "generator": _vm.generator\n    },\n    on: {\n      "taskchange": _vm.handleTaskChange,\n      "create": _vm.handleCreate,\n      "update": _vm.handleUpdate,\n      "delete": _vm.handleDelete,\n      "submit": _vm.handleSubmit\n    }\n  })], 1) : _vm._e()])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9BcHAudnVlPzQxMjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiYXBwXCJcbiAgICB9XG4gIH0sIFsoIV92bS5zaG93U2VsZWN0Vmlld2VyICYmICFfdm0uc2hvd1RyYW5zY3JpYmVWaWV3ZXIpID8gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImhvbWUtY29udGFpbmVyXCJcbiAgICB9XG4gIH0sIFtfYygnaDEnLCBbX3ZtLl92KFwiTGliQ3Jvd2RzIFZpZXdlclwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncCcsIHtcbiAgICBzdGF0aWNDbGFzczogXCJsZWFkXCJcbiAgfSwgW192bS5fdihcIlxcbiAgICAgIElJSUYtY29tcGF0aWJsZSBpbWFnZSB2aWV3ZXIgVnVlIGNvbXBvbmVudC5cXG4gICAgXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJtb2RlLWJ1dHRvbnNcIlxuICAgIH1cbiAgfSwgW19jKCdidXR0b24nLCB7XG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5zaG93U2VsZWN0Vmlld2VyID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSwgW192bS5fdihcIlxcbiAgICAgICAgU2VsZWN0IE1vZGVcXG4gICAgICBcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLnNob3dUcmFuc2NyaWJlVmlld2VyID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSwgW192bS5fdihcIlxcbiAgICAgICAgVHJhbnNjcmliZSBNb2RlXFxuICAgICAgXCIpXSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2EnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaHJlZlwiOiBfdm0uZ2l0aHViVXJsLFxuICAgICAgXCJpZFwiOiBcImRvYy1saW5rXCJcbiAgICB9XG4gIH0sIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiZ2l0aHViXCIsXG4gICAgICBcInNjYWxlXCI6IFwiMS4yXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ0ZXh0XCJcbiAgfSwgW192bS5fdihcIkRvY3VtZW50YXRpb24gb24gR2l0SHViXCIpXSldLCAxKV0pIDogKF92bS5zaG93U2VsZWN0Vmlld2VyKSA/IF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidmlld2VyLWNvbnRhaW5lclwiXG4gIH0sIFtfYygnbGliY3Jvd2RzLXZpZXdlcicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJkaXNhYmxlLWNvbXBsZXRlXCI6IHRydWUsXG4gICAgICBcInNob3ctbGlrZVwiOiBfdm0uc2hvd0xpa2UsXG4gICAgICBcIm1lc3NhZ2UtYnVzXCI6IF92bS5tZXNzYWdlQnVzLFxuICAgICAgXCJ0YXNrLW9wdHNcIjogX3ZtLnNlbGVjdFRhc2tPcHRzLFxuICAgICAgXCJjcmVhdG9yXCI6IF92bS5jcmVhdG9yLFxuICAgICAgXCJnZW5lcmF0b3JcIjogX3ZtLmdlbmVyYXRvclxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwidGFza2NoYW5nZVwiOiBfdm0uaGFuZGxlVGFza0NoYW5nZSxcbiAgICAgIFwiY3JlYXRlXCI6IF92bS5oYW5kbGVDcmVhdGUsXG4gICAgICBcInVwZGF0ZVwiOiBfdm0uaGFuZGxlVXBkYXRlLFxuICAgICAgXCJkZWxldGVcIjogX3ZtLmhhbmRsZURlbGV0ZSxcbiAgICAgIFwic3VibWl0XCI6IF92bS5oYW5kbGVTdWJtaXRcbiAgICB9XG4gIH0pXSwgMSkgOiAoX3ZtLnNob3dUcmFuc2NyaWJlVmlld2VyKSA/IF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidmlld2VyLWNvbnRhaW5lclwiXG4gIH0sIFtfYygnbGliY3Jvd2RzLXZpZXdlcicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJkaXNhYmxlLWNvbXBsZXRlXCI6IHRydWUsXG4gICAgICBcInNob3ctbGlrZVwiOiBfdm0uc2hvd0xpa2UsXG4gICAgICBcIm1lc3NhZ2UtYnVzXCI6IF92bS5tZXNzYWdlQnVzLFxuICAgICAgXCJ0YXNrLW9wdHNcIjogX3ZtLnRyYW5zY3JpYmVUYXNrT3B0cyxcbiAgICAgIFwiY3JlYXRvclwiOiBfdm0uY3JlYXRvcixcbiAgICAgIFwiZ2VuZXJhdG9yXCI6IF92bS5nZW5lcmF0b3JcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcInRhc2tjaGFuZ2VcIjogX3ZtLmhhbmRsZVRhc2tDaGFuZ2UsXG4gICAgICBcImNyZWF0ZVwiOiBfdm0uaGFuZGxlQ3JlYXRlLFxuICAgICAgXCJ1cGRhdGVcIjogX3ZtLmhhbmRsZVVwZGF0ZSxcbiAgICAgIFwiZGVsZXRlXCI6IF92bS5oYW5kbGVEZWxldGUsXG4gICAgICBcInN1Ym1pdFwiOiBfdm0uaGFuZGxlU3VibWl0XG4gICAgfVxuICB9KV0sIDEpIDogX3ZtLl9lKCldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTM4YjNiNjQ3XCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9kZW1vL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAyMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-sidebar-transcribe-item"\n    }\n  }, [_c(\'vue-form-generator\', {\n    ref: "form",\n    attrs: {\n      "id": "lv-form",\n      "schema": _vm.form.schema,\n      "model": _vm.form.model,\n      "options": _vm.formOptions\n    },\n    on: {\n      "validated": _vm.onValidated\n    }\n  })], 1)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1RyYW5zY3JpYmUudnVlP2QyMTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJsdi1zaWRlYmFyLXRyYW5zY3JpYmUtaXRlbVwiXG4gICAgfVxuICB9LCBbX2MoJ3Z1ZS1mb3JtLWdlbmVyYXRvcicsIHtcbiAgICByZWY6IFwiZm9ybVwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibHYtZm9ybVwiLFxuICAgICAgXCJzY2hlbWFcIjogX3ZtLmZvcm0uc2NoZW1hLFxuICAgICAgXCJtb2RlbFwiOiBfdm0uZm9ybS5tb2RlbCxcbiAgICAgIFwib3B0aW9uc1wiOiBfdm0uZm9ybU9wdGlvbnNcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcInZhbGlkYXRlZFwiOiBfdm0ub25WYWxpZGF0ZWRcbiAgICB9XG4gIH0pXSwgMSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00YjQ4MWZiOFwifSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvc2lkZWJhci9pdGVtcy9UcmFuc2NyaWJlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-help-modal"\n    }\n  }, [_c(\'modal\', {\n    attrs: {\n      "show": _vm.show,\n      "title": "Help"\n    },\n    on: {\n      "hide": function($event) {\n        _vm.$emit(\'hide\')\n      }\n    }\n  }, [_c(\'p\', [_vm._v("\\n      The objective of the current task, along with any additional guidance\\n      can be seen in the sidebar to the right of the viewer. Once the task\\n      has been completed click the Submit button to submit your answer.\\n    ")]), _vm._v(" "), (_vm.disableComplete) ? _c(\'p\', [_vm._v("\\n      Note that you can only submit one answer for each task. You are free to\\n      browse back and forth between tasks but once you click submit your\\n      answer will be saved and further submissions disabled.\\n    ")]) : _vm._e(), _vm._v(" "), _c(\'h4\', [_vm._v("Viewer controls")]), _vm._v(" "), _c(\'p\', [_vm._v("The following controls are provided to the top-left of the viewer:")]), _vm._v(" "), _c(\'ul\', [_c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "plus-circle"\n    }\n  }), _vm._v("Zoom in\\n      ")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "minus-circle"\n    }\n  }), _vm._v("Zoom out\\n      ")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "refresh"\n    }\n  }), _vm._v("Reset zoom\\n      ")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "expand"\n    }\n  }), _vm._v("Fullscreen\\n      ")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "question-circle"\n    }\n  }), _vm._v("View Help\\n      ")], 1), _vm._v(" "), (_vm.showInfo) ? _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "info-circle"\n    }\n  }), _vm._v("View Metadata\\n      ")], 1) : _vm._e(), _vm._v(" "), (_vm.showBrowse) ? _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "list"\n    }\n  }), _vm._v("Browse Tasks\\n      ")], 1) : _vm._e(), _vm._v(" "), (_vm.showLike) ? _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "thumbs-up"\n    }\n  }), _vm._v("Like Task/Image\\n      ")], 1) : _vm._e(), _vm._v(" "), (_vm.showShare) ? _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "share-alt"\n    }\n  }), _vm._v("Copy Image URL\\n      ")], 1) : _vm._e()]), _vm._v(" "), _c(\'p\', [_vm._v("\\n      The following controls are provided to the bottom-left of the viewer:\\n    ")]), _vm._v(" "), _c(\'ul\', [_c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-up"\n    }\n  }), _vm._v("Pan up")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-down"\n    }\n  }), _vm._v("Pan down")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-left"\n    }\n  }), _vm._v("Pan left")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-right"\n    }\n  }), _vm._v("Pan right")], 1)]), _vm._v(" "), _c(\'p\', [_vm._v("\\n      To the left and right of the viewer are buttons to browse available\\n      tasks:\\n    ")]), _vm._v(" "), _c(\'ul\', [_c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-left"\n    }\n  }), _vm._v("Previous task")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "chevron-right"\n    }\n  }), _vm._v("Next task")], 1)]), _vm._v(" "), (_vm.task.mode === \'select\') ? _c(\'div\', [_c(\'h4\', [_vm._v("Select mode")]), _vm._v(" "), _c(\'p\', [_vm._v("\\n        When using the viewer in select mode an area of the image can\\n        be selected by clicking (or tapping) on the image. The following\\n        controls are provided to the right of the selection box:\\n      ")]), _vm._v(" "), _c(\'ul\', [_c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "check-circle"\n    }\n  }), _vm._v("Confirm selection")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "times-circle"\n    }\n  }), _vm._v("Cancel selection")], 1)]), _vm._v(" "), _c(\'p\', [_vm._v("\\n        Once a selection has been confirmed it will appear in the\\n        selections sidebar to the right of the screen, where the following\\n        controls are provided:\\n      ")]), _vm._v(" "), _c(\'ul\', [_c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "pencil"\n    }\n  }), _vm._v("Edit selection")], 1), _vm._v(" "), _c(\'li\', [_c(\'icon\', {\n    attrs: {\n      "name": "times-circle"\n    }\n  }), _vm._v("Delete selection")], 1)])]) : _vm._e()])], 1)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvSGVscC52dWU/YjVjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibHYtaGVscC1tb2RhbFwiXG4gICAgfVxuICB9LCBbX2MoJ21vZGFsJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNob3dcIjogX3ZtLnNob3csXG4gICAgICBcInRpdGxlXCI6IFwiSGVscFwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJoaWRlXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uJGVtaXQoJ2hpZGUnKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCdwJywgW192bS5fdihcIlxcbiAgICAgIFRoZSBvYmplY3RpdmUgb2YgdGhlIGN1cnJlbnQgdGFzaywgYWxvbmcgd2l0aCBhbnkgYWRkaXRpb25hbCBndWlkYW5jZVxcbiAgICAgIGNhbiBiZSBzZWVuIGluIHRoZSBzaWRlYmFyIHRvIHRoZSByaWdodCBvZiB0aGUgdmlld2VyLiBPbmNlIHRoZSB0YXNrXFxuICAgICAgaGFzIGJlZW4gY29tcGxldGVkIGNsaWNrIHRoZSBTdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCB5b3VyIGFuc3dlci5cXG4gICAgXCIpXSksIF92bS5fdihcIiBcIiksIChfdm0uZGlzYWJsZUNvbXBsZXRlKSA/IF9jKCdwJywgW192bS5fdihcIlxcbiAgICAgIE5vdGUgdGhhdCB5b3UgY2FuIG9ubHkgc3VibWl0IG9uZSBhbnN3ZXIgZm9yIGVhY2ggdGFzay4gWW91IGFyZSBmcmVlIHRvXFxuICAgICAgYnJvd3NlIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGFza3MgYnV0IG9uY2UgeW91IGNsaWNrIHN1Ym1pdCB5b3VyXFxuICAgICAgYW5zd2VyIHdpbGwgYmUgc2F2ZWQgYW5kIGZ1cnRoZXIgc3VibWlzc2lvbnMgZGlzYWJsZWQuXFxuICAgIFwiKV0pIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksIF9jKCdoNCcsIFtfdm0uX3YoXCJWaWV3ZXIgY29udHJvbHNcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnLCBbX3ZtLl92KFwiVGhlIGZvbGxvd2luZyBjb250cm9scyBhcmUgcHJvdmlkZWQgdG8gdGhlIHRvcC1sZWZ0IG9mIHRoZSB2aWV3ZXI6XCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd1bCcsIFtfYygnbGknLCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcInBsdXMtY2lyY2xlXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJab29tIGluXFxuICAgICAgXCIpXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwibWludXMtY2lyY2xlXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJab29tIG91dFxcbiAgICAgIFwiKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnbGknLCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcInJlZnJlc2hcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIlJlc2V0IHpvb21cXG4gICAgICBcIildLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJleHBhbmRcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIkZ1bGxzY3JlZW5cXG4gICAgICBcIildLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJxdWVzdGlvbi1jaXJjbGVcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIlZpZXcgSGVscFxcbiAgICAgIFwiKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNob3dJbmZvKSA/IF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiaW5mby1jaXJjbGVcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIlZpZXcgTWV0YWRhdGFcXG4gICAgICBcIildLCAxKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNob3dCcm93c2UpID8gX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJsaXN0XCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJCcm93c2UgVGFza3NcXG4gICAgICBcIildLCAxKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNob3dMaWtlKSA/IF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwidGh1bWJzLXVwXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJMaWtlIFRhc2svSW1hZ2VcXG4gICAgICBcIildLCAxKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnNob3dTaGFyZSkgPyBfYygnbGknLCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcInNoYXJlLWFsdFwiXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiQ29weSBJbWFnZSBVUkxcXG4gICAgICBcIildLCAxKSA6IF92bS5fZSgpXSksIF92bS5fdihcIiBcIiksIF9jKCdwJywgW192bS5fdihcIlxcbiAgICAgIFRoZSBmb2xsb3dpbmcgY29udHJvbHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBib3R0b20tbGVmdCBvZiB0aGUgdmlld2VyOlxcbiAgICBcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3VsJywgW19jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiY2hldnJvbi11cFwiXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiUGFuIHVwXCIpXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiY2hldnJvbi1kb3duXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJQYW4gZG93blwiKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnbGknLCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcImNoZXZyb24tbGVmdFwiXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiUGFuIGxlZnRcIildLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaGV2cm9uLXJpZ2h0XCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJQYW4gcmlnaHRcIildLCAxKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncCcsIFtfdm0uX3YoXCJcXG4gICAgICBUbyB0aGUgbGVmdCBhbmQgcmlnaHQgb2YgdGhlIHZpZXdlciBhcmUgYnV0dG9ucyB0byBicm93c2UgYXZhaWxhYmxlXFxuICAgICAgdGFza3M6XFxuICAgIFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndWwnLCBbX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaGV2cm9uLWxlZnRcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIlByZXZpb3VzIHRhc2tcIildLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaGV2cm9uLXJpZ2h0XCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJOZXh0IHRhc2tcIildLCAxKV0pLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLnRhc2subW9kZSA9PT0gJ3NlbGVjdCcpID8gX2MoJ2RpdicsIFtfYygnaDQnLCBbX3ZtLl92KFwiU2VsZWN0IG1vZGVcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnLCBbX3ZtLl92KFwiXFxuICAgICAgICBXaGVuIHVzaW5nIHRoZSB2aWV3ZXIgaW4gc2VsZWN0IG1vZGUgYW4gYXJlYSBvZiB0aGUgaW1hZ2UgY2FuXFxuICAgICAgICBiZSBzZWxlY3RlZCBieSBjbGlja2luZyAob3IgdGFwcGluZykgb24gdGhlIGltYWdlLiBUaGUgZm9sbG93aW5nXFxuICAgICAgICBjb250cm9scyBhcmUgcHJvdmlkZWQgdG8gdGhlIHJpZ2h0IG9mIHRoZSBzZWxlY3Rpb24gYm94OlxcbiAgICAgIFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndWwnLCBbX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIkNvbmZpcm0gc2VsZWN0aW9uXCIpXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwidGltZXMtY2lyY2xlXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJDYW5jZWwgc2VsZWN0aW9uXCIpXSwgMSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnLCBbX3ZtLl92KFwiXFxuICAgICAgICBPbmNlIGEgc2VsZWN0aW9uIGhhcyBiZWVuIGNvbmZpcm1lZCBpdCB3aWxsIGFwcGVhciBpbiB0aGVcXG4gICAgICAgIHNlbGVjdGlvbnMgc2lkZWJhciB0byB0aGUgcmlnaHQgb2YgdGhlIHNjcmVlbiwgd2hlcmUgdGhlIGZvbGxvd2luZ1xcbiAgICAgICAgY29udHJvbHMgYXJlIHByb3ZpZGVkOlxcbiAgICAgIFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndWwnLCBbX2MoJ2xpJywgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJwZW5jaWxcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIkVkaXQgc2VsZWN0aW9uXCIpXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwidGltZXMtY2lyY2xlXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCJEZWxldGUgc2VsZWN0aW9uXCIpXSwgMSldKV0pIDogX3ZtLl9lKCldKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNWE3MjRlNGVcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL21vZGFscy9IZWxwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-pan-controls"\n    }\n  }, _vm._l((_vm.buttons), function(b, index) {\n    return _c(\'control-button\', {\n      key: ("btn-zoom-" + index),\n      attrs: {\n        "id": b.id,\n        "tooltip": b.tooltip,\n        "callback": b.callback,\n        "position": "bottom",\n        "hint-position": "top"\n      }\n    }, [_c(\'icon\', {\n      attrs: {\n        "name": b.icon\n      }\n    })], 1)\n  }))\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9QYW4udnVlPzgxYzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibHYtcGFuLWNvbnRyb2xzXCJcbiAgICB9XG4gIH0sIF92bS5fbCgoX3ZtLmJ1dHRvbnMpLCBmdW5jdGlvbihiLCBpbmRleCkge1xuICAgIHJldHVybiBfYygnY29udHJvbC1idXR0b24nLCB7XG4gICAgICBrZXk6IChcImJ0bi16b29tLVwiICsgaW5kZXgpLFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJpZFwiOiBiLmlkLFxuICAgICAgICBcInRvb2x0aXBcIjogYi50b29sdGlwLFxuICAgICAgICBcImNhbGxiYWNrXCI6IGIuY2FsbGJhY2ssXG4gICAgICAgIFwicG9zaXRpb25cIjogXCJib3R0b21cIixcbiAgICAgICAgXCJoaW50LXBvc2l0aW9uXCI6IFwidG9wXCJcbiAgICAgIH1cbiAgICB9LCBbX2MoJ2ljb24nLCB7XG4gICAgICBhdHRyczoge1xuICAgICAgICBcIm5hbWVcIjogYi5pY29uXG4gICAgICB9XG4gICAgfSldLCAxKVxuICB9KSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi02Yjc5MmE0NVwifSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvUGFuLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'svg\', {\n    class: _vm.clazz,\n    style: (_vm.style),\n    attrs: {\n      "version": "1.1",\n      "role": _vm.label ? \'img\' : \'presentation\',\n      "aria-label": _vm.label,\n      "x": _vm.x,\n      "y": _vm.y,\n      "width": _vm.width,\n      "height": _vm.height,\n      "viewBox": _vm.box\n    }\n  }, [_vm._t("default", [(_vm.icon && _vm.icon.paths) ? _vm._l((_vm.icon.paths), function(path) {\n    return _c(\'path\', _vm._b({}, \'path\', path))\n  }) : _vm._e(), _vm._v(" "), (_vm.icon && _vm.icon.polygons) ? _vm._l((_vm.icon.polygons), function(polygon) {\n    return _c(\'polygon\', _vm._b({}, \'polygon\', polygon))\n  }) : _vm._e(), _vm._v("\\b\\n    "), (_vm.icon && _vm.icon.raw) ? [_c(\'g\', {\n    domProps: {\n      "innerHTML": _vm._s(_vm.icon.raw)\n    }\n  })] : _vm._e()])], 2)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWU/OGIxZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILCtCQUErQjtBQUMvQixHQUFHO0FBQ0gsa0NBQWtDO0FBQ2xDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsImZpbGUiOiIyMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3N2ZycsIHtcbiAgICBjbGFzczogX3ZtLmNsYXp6LFxuICAgIHN0eWxlOiAoX3ZtLnN0eWxlKSxcbiAgICBhdHRyczoge1xuICAgICAgXCJ2ZXJzaW9uXCI6IFwiMS4xXCIsXG4gICAgICBcInJvbGVcIjogX3ZtLmxhYmVsID8gJ2ltZycgOiAncHJlc2VudGF0aW9uJyxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBfdm0ubGFiZWwsXG4gICAgICBcInhcIjogX3ZtLngsXG4gICAgICBcInlcIjogX3ZtLnksXG4gICAgICBcIndpZHRoXCI6IF92bS53aWR0aCxcbiAgICAgIFwiaGVpZ2h0XCI6IF92bS5oZWlnaHQsXG4gICAgICBcInZpZXdCb3hcIjogX3ZtLmJveFxuICAgIH1cbiAgfSwgW192bS5fdChcImRlZmF1bHRcIiwgWyhfdm0uaWNvbiAmJiBfdm0uaWNvbi5wYXRocykgPyBfdm0uX2woKF92bS5pY29uLnBhdGhzKSwgZnVuY3Rpb24ocGF0aCkge1xuICAgIHJldHVybiBfYygncGF0aCcsIF92bS5fYih7fSwgJ3BhdGgnLCBwYXRoKSlcbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKF92bS5pY29uICYmIF92bS5pY29uLnBvbHlnb25zKSA/IF92bS5fbCgoX3ZtLmljb24ucG9seWdvbnMpLCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gICAgcmV0dXJuIF9jKCdwb2x5Z29uJywgX3ZtLl9iKHt9LCAncG9seWdvbicsIHBvbHlnb24pKVxuICB9KSA6IF92bS5fZSgpLCBfdm0uX3YoXCJcXGJcXG4gICAgXCIpLCAoX3ZtLmljb24gJiYgX3ZtLmljb24ucmF3KSA/IFtfYygnZycsIHtcbiAgICBkb21Qcm9wczoge1xuICAgICAgXCJpbm5lckhUTUxcIjogX3ZtLl9zKF92bS5pY29uLnJhdylcbiAgICB9XG4gIH0pXSA6IF92bS5fZSgpXSldLCAyKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTc4ZDM0YjUyXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDIxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'transition\', {\n    attrs: {\n      "name": "lv-modal-fade"\n    }\n  }, [_c(\'div\', {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: (_vm.show),\n      expression: "show"\n    }],\n    staticClass: "lv-modal"\n  }, [_c(\'div\', {\n    staticClass: "lv-modal-mask",\n    on: {\n      "click": _vm.hide\n    }\n  }, [_c(\'div\', {\n    staticClass: "lv-modal-wrapper"\n  }, [_c(\'div\', {\n    staticClass: "lv-modal-container",\n    on: {\n      "click": function($event) {\n        $event.stopPropagation();\n      }\n    }\n  }, [_c(\'div\', {\n    staticClass: "lv-modal-header"\n  }, [_vm._t("header", [_c(\'h3\', [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _c(\'span\', {\n    staticClass: "close",\n    on: {\n      "click": _vm.hide\n    }\n  }, [_vm._v("×")])])], 2), _vm._v(" "), _c(\'div\', {\n    staticClass: "lv-modal-body"\n  }, [_vm._t("default")], 2), _vm._v(" "), _c(\'div\', {\n    staticClass: "lv-modal-footer"\n  }, [_vm._t("footer", [_c(\'button\', {\n    staticClass: "btn",\n    on: {\n      "click": _vm.hide\n    }\n  }, [_vm._v("\\n                  OK\\n                ")])])], 2)])])])])])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/MDFhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCd0cmFuc2l0aW9uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJsdi1tb2RhbC1mYWRlXCJcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIGRpcmVjdGl2ZXM6IFt7XG4gICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICB2YWx1ZTogKF92bS5zaG93KSxcbiAgICAgIGV4cHJlc3Npb246IFwic2hvd1wiXG4gICAgfV0sXG4gICAgc3RhdGljQ2xhc3M6IFwibHYtbW9kYWxcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJsdi1tb2RhbC1tYXNrXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhpZGVcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImx2LW1vZGFsLXdyYXBwZXJcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJsdi1tb2RhbC1jb250YWluZXJcIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibHYtbW9kYWwtaGVhZGVyXCJcbiAgfSwgW192bS5fdChcImhlYWRlclwiLCBbX2MoJ2gzJywgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY2xvc2VcIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGlkZVxuICAgIH1cbiAgfSwgW192bS5fdihcIsOXXCIpXSldKV0sIDIpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImx2LW1vZGFsLWJvZHlcIlxuICB9LCBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sIDIpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImx2LW1vZGFsLWZvb3RlclwiXG4gIH0sIFtfdm0uX3QoXCJmb290ZXJcIiwgW19jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnRuXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhpZGVcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICBPS1xcbiAgICAgICAgICAgICAgICBcIildKV0pXSwgMildKV0pXSldKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtN2NiYzVlYmNcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL01vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    ref: "sidebar",\n    attrs: {\n      "id": "lv-sidebar"\n    }\n  }, [_c(\'div\', {\n    staticClass: "lv-sidebar-header"\n  }, [_c(\'h4\', [_vm._v(_vm._s(_vm.title))])]), _vm._v(" "), (!(_vm.disableComplete && _vm.task.complete)) ? _c(\'div\', {\n    staticClass: "lv-sidebar-content"\n  }, [_c(\'h4\', [_vm._v(_vm._s(_vm.task.objective))]), _vm._v(" "), _c(\'p\', [_vm._v(_vm._s(_vm.task.guidance))]), _vm._v(" "), _vm._t("default")], 2) : _vm._e(), _vm._v(" "), _c(\'div\', {\n    staticClass: "lv-sidebar-footer"\n  }, [(!(_vm.disableComplete && _vm.task.complete) && _vm.showNote) ? _c(\'button\', {\n    staticClass: "btn btn-block",\n    on: {\n      "click": _vm.toggleeNoteCollapse\n    }\n  }, [_vm._v("\\n      Add a note\\n    ")]) : _vm._e(), _vm._v(" "), (!_vm.noteCollapsed) ? _c(\'transition\', {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: (_vm.showNote),\n      expression: "showNote"\n    }],\n    attrs: {\n      "name": "fade-height"\n    }\n  }, [(!(_vm.disableComplete && _vm.task.complete)) ? _c(\'textarea\', {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: (_vm.note),\n      expression: "note"\n    }],\n    ref: "note",\n    attrs: {\n      "rows": "3",\n      "placeholder": "Leave a note..."\n    },\n    domProps: {\n      "value": (_vm.note)\n    },\n    on: {\n      "input": [function($event) {\n        if ($event.target.composing) { return; }\n        _vm.note = $event.target.value\n      }, _vm.updateNote]\n    }\n  }) : _vm._e()]) : _vm._e(), _vm._v(" "), (!(_vm.disableComplete && _vm.task.complete)) ? _c(\'button\', {\n    staticClass: "btn btn-block btn-green",\n    on: {\n      "click": _vm.submit\n    }\n  }, [_vm._v("\\n      Submit\\n    ")]) : _vm._e(), _vm._v(" "), (_vm.task.complete && _vm.disableComplete) ? _c(\'span\', {\n    attrs: {\n      "id": "task-complete"\n    }\n  }, [_c(\'p\', [_vm._v("\\n        Task complete!\\n      ")]), _vm._v(" "), _c(\'icon\', {\n    attrs: {\n      "name": "check-circle"\n    }\n  })], 1) : _vm._e()], 1)])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL1NpZGViYXIudnVlP2E2MzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHJlZjogXCJzaWRlYmFyXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJsdi1zaWRlYmFyXCJcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImx2LXNpZGViYXItaGVhZGVyXCJcbiAgfSwgW19jKCdoNCcsIFtfdm0uX3YoX3ZtLl9zKF92bS50aXRsZSkpXSldKSwgX3ZtLl92KFwiIFwiKSwgKCEoX3ZtLmRpc2FibGVDb21wbGV0ZSAmJiBfdm0udGFzay5jb21wbGV0ZSkpID8gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJsdi1zaWRlYmFyLWNvbnRlbnRcIlxuICB9LCBbX2MoJ2g0JywgW192bS5fdihfdm0uX3MoX3ZtLnRhc2sub2JqZWN0aXZlKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnLCBbX3ZtLl92KF92bS5fcyhfdm0udGFzay5ndWlkYW5jZSkpXSksIF92bS5fdihcIiBcIiksIF92bS5fdChcImRlZmF1bHRcIildLCAyKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImx2LXNpZGViYXItZm9vdGVyXCJcbiAgfSwgWyghKF92bS5kaXNhYmxlQ29tcGxldGUgJiYgX3ZtLnRhc2suY29tcGxldGUpICYmIF92bS5zaG93Tm90ZSkgPyBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tYmxvY2tcIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0udG9nZ2xlZU5vdGVDb2xsYXBzZVxuICAgIH1cbiAgfSwgW192bS5fdihcIlxcbiAgICAgIEFkZCBhIG5vdGVcXG4gICAgXCIpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKCFfdm0ubm90ZUNvbGxhcHNlZCkgPyBfYygndHJhbnNpdGlvbicsIHtcbiAgICBkaXJlY3RpdmVzOiBbe1xuICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgdmFsdWU6IChfdm0uc2hvd05vdGUpLFxuICAgICAgZXhwcmVzc2lvbjogXCJzaG93Tm90ZVwiXG4gICAgfV0sXG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcImZhZGUtaGVpZ2h0XCJcbiAgICB9XG4gIH0sIFsoIShfdm0uZGlzYWJsZUNvbXBsZXRlICYmIF92bS50YXNrLmNvbXBsZXRlKSkgPyBfYygndGV4dGFyZWEnLCB7XG4gICAgZGlyZWN0aXZlczogW3tcbiAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgdmFsdWU6IChfdm0ubm90ZSksXG4gICAgICBleHByZXNzaW9uOiBcIm5vdGVcIlxuICAgIH1dLFxuICAgIHJlZjogXCJub3RlXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwicm93c1wiOiBcIjNcIixcbiAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJMZWF2ZSBhIG5vdGUuLi5cIlxuICAgIH0sXG4gICAgZG9tUHJvcHM6IHtcbiAgICAgIFwidmFsdWVcIjogKF92bS5ub3RlKVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiaW5wdXRcIjogW2Z1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuOyB9XG4gICAgICAgIF92bS5ub3RlID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgfSwgX3ZtLnVwZGF0ZU5vdGVdXG4gICAgfVxuICB9KSA6IF92bS5fZSgpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKCEoX3ZtLmRpc2FibGVDb21wbGV0ZSAmJiBfdm0udGFzay5jb21wbGV0ZSkpID8gX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLWJsb2NrIGJ0bi1ncmVlblwiLFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5zdWJtaXRcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJcXG4gICAgICBTdWJtaXRcXG4gICAgXCIpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKF92bS50YXNrLmNvbXBsZXRlICYmIF92bS5kaXNhYmxlQ29tcGxldGUpID8gX2MoJ3NwYW4nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJ0YXNrLWNvbXBsZXRlXCJcbiAgICB9XG4gIH0sIFtfYygncCcsIFtfdm0uX3YoXCJcXG4gICAgICAgIFRhc2sgY29tcGxldGUhXFxuICAgICAgXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIlxuICAgIH1cbiAgfSldLCAxKSA6IF92bS5fZSgpXSwgMSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LThiY2Q1NjEwXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL1NpZGViYXIudnVlXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-selector"\n    }\n  }, [_c(\'div\', {\n    ref: "box",\n    staticClass: "lv-selector-box"\n  }, [_c(\'span\', {\n    ref: "border-top",\n    staticClass: "border border-top"\n  }, [_c(\'span\', {\n    staticClass: "handle"\n  })]), _vm._v(" "), _c(\'span\', {\n    ref: "border-right",\n    staticClass: "border border-right"\n  }, [_c(\'span\', {\n    staticClass: "handle"\n  })]), _vm._v(" "), _c(\'span\', {\n    ref: "border-bottom",\n    staticClass: "border border-bottom"\n  }, [_c(\'span\', {\n    staticClass: "handle"\n  })]), _vm._v(" "), _c(\'span\', {\n    ref: "border-left",\n    staticClass: "border border-left"\n  }, [_c(\'span\', {\n    staticClass: "handle"\n  })]), _vm._v(" "), _c(\'span\', {\n    ref: "corner-top-right",\n    staticClass: "corner corner-top-right"\n  }), _vm._v(" "), _c(\'span\', {\n    ref: "corner-bottom-right",\n    staticClass: "corner corner-bottom-right"\n  }), _vm._v(" "), _c(\'span\', {\n    ref: "corner-bottom-left",\n    staticClass: "corner corner-bottom-left"\n  }), _vm._v(" "), _c(\'span\', {\n    ref: "corner-top-left",\n    staticClass: "corner corner-top-left"\n  }), _vm._v(" "), _c(\'div\', {\n    staticClass: "selection-buttons"\n  }, [_c(\'button\', {\n    ref: "cancelSelection",\n    staticClass: "btn-selection",\n    attrs: {\n      "id": "cancel-selection"\n    },\n    on: {\n      "click": _vm.cancel\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "label": "Cancel",\n      "scale": "1.2"\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "name": "circle",\n      "scale": "1.2"\n    }\n  }), _vm._v(" "), _c(\'icon\', {\n    staticClass: "icon-white",\n    attrs: {\n      "name": "times",\n      "scale": "0.8"\n    }\n  })], 1)], 1), _vm._v(" "), _c(\'button\', {\n    ref: "confirmSelection",\n    staticClass: "btn-selection",\n    attrs: {\n      "id": "confirm-selection"\n    },\n    on: {\n      "click": _vm.confirm\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "label": "Confirm",\n      "scale": "1.2"\n    }\n  }, [_c(\'icon\', {\n    attrs: {\n      "name": "circle",\n      "scale": "1.2"\n    }\n  }), _vm._v(" "), _c(\'icon\', {\n    staticClass: "icon-white",\n    attrs: {\n      "name": "check",\n      "scale": "0.8"\n    }\n  })], 1)], 1)])])])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3Rvci52dWU/MDBlYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJsdi1zZWxlY3RvclwiXG4gICAgfVxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICByZWY6IFwiYm94XCIsXG4gICAgc3RhdGljQ2xhc3M6IFwibHYtc2VsZWN0b3ItYm94XCJcbiAgfSwgW19jKCdzcGFuJywge1xuICAgIHJlZjogXCJib3JkZXItdG9wXCIsXG4gICAgc3RhdGljQ2xhc3M6IFwiYm9yZGVyIGJvcmRlci10b3BcIlxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiaGFuZGxlXCJcbiAgfSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgcmVmOiBcImJvcmRlci1yaWdodFwiLFxuICAgIHN0YXRpY0NsYXNzOiBcImJvcmRlciBib3JkZXItcmlnaHRcIlxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiaGFuZGxlXCJcbiAgfSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgcmVmOiBcImJvcmRlci1ib3R0b21cIixcbiAgICBzdGF0aWNDbGFzczogXCJib3JkZXIgYm9yZGVyLWJvdHRvbVwiXG4gIH0sIFtfYygnc3BhbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJoYW5kbGVcIlxuICB9KV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICByZWY6IFwiYm9yZGVyLWxlZnRcIixcbiAgICBzdGF0aWNDbGFzczogXCJib3JkZXIgYm9yZGVyLWxlZnRcIlxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiaGFuZGxlXCJcbiAgfSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgcmVmOiBcImNvcm5lci10b3AtcmlnaHRcIixcbiAgICBzdGF0aWNDbGFzczogXCJjb3JuZXIgY29ybmVyLXRvcC1yaWdodFwiXG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICByZWY6IFwiY29ybmVyLWJvdHRvbS1yaWdodFwiLFxuICAgIHN0YXRpY0NsYXNzOiBcImNvcm5lciBjb3JuZXItYm90dG9tLXJpZ2h0XCJcbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdzcGFuJywge1xuICAgIHJlZjogXCJjb3JuZXItYm90dG9tLWxlZnRcIixcbiAgICBzdGF0aWNDbGFzczogXCJjb3JuZXIgY29ybmVyLWJvdHRvbS1sZWZ0XCJcbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdzcGFuJywge1xuICAgIHJlZjogXCJjb3JuZXItdG9wLWxlZnRcIixcbiAgICBzdGF0aWNDbGFzczogXCJjb3JuZXIgY29ybmVyLXRvcC1sZWZ0XCJcbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic2VsZWN0aW9uLWJ1dHRvbnNcIlxuICB9LCBbX2MoJ2J1dHRvbicsIHtcbiAgICByZWY6IFwiY2FuY2VsU2VsZWN0aW9uXCIsXG4gICAgc3RhdGljQ2xhc3M6IFwiYnRuLXNlbGVjdGlvblwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiY2FuY2VsLXNlbGVjdGlvblwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uY2FuY2VsXG4gICAgfVxuICB9LCBbX2MoJ2ljb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibGFiZWxcIjogXCJDYW5jZWxcIixcbiAgICAgIFwic2NhbGVcIjogXCIxLjJcIlxuICAgIH1cbiAgfSwgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaXJjbGVcIixcbiAgICAgIFwic2NhbGVcIjogXCIxLjJcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdpY29uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImljb24td2hpdGVcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwidGltZXNcIixcbiAgICAgIFwic2NhbGVcIjogXCIwLjhcIlxuICAgIH1cbiAgfSldLCAxKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnYnV0dG9uJywge1xuICAgIHJlZjogXCJjb25maXJtU2VsZWN0aW9uXCIsXG4gICAgc3RhdGljQ2xhc3M6IFwiYnRuLXNlbGVjdGlvblwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiY29uZmlybS1zZWxlY3Rpb25cIlxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmNvbmZpcm1cbiAgICB9XG4gIH0sIFtfYygnaWNvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJsYWJlbFwiOiBcIkNvbmZpcm1cIixcbiAgICAgIFwic2NhbGVcIjogXCIxLjJcIlxuICAgIH1cbiAgfSwgW19jKCdpY29uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm5hbWVcIjogXCJjaXJjbGVcIixcbiAgICAgIFwic2NhbGVcIjogXCIxLjJcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdpY29uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImljb24td2hpdGVcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwiY2hlY2tcIixcbiAgICAgIFwic2NhbGVcIjogXCIwLjhcIlxuICAgIH1cbiAgfSldLCAxKV0sIDEpXSldKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtOGQ3YTkwYzBcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1NlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-sidebar-select-item"\n    }\n  }, [_c(\'ul\', _vm._l((_vm.tags), function(tag) {\n    return _c(\'li\', {\n      key: tag.id,\n      on: {\n        "mouseover": function($event) {\n          _vm.highlightOverlay(tag.id, true)\n        },\n        "mouseleave": function($event) {\n          _vm.highlightOverlay(tag.id, false)\n        }\n      }\n    }, [_c(\'div\', {\n      staticClass: "thumbnail-container"\n    }, [_c(\'img\', {\n      attrs: {\n        "src": tag.target.selector.value\n      }\n    })]), _vm._v(" "), _c(\'div\', {\n      staticClass: "buttons"\n    }, [_c(\'button\', {\n      staticClass: "btn btn-control",\n      on: {\n        "click": function($event) {\n          _vm.editTag(tag)\n        }\n      }\n    }, [_c(\'icon\', {\n      attrs: {\n        "name": "pencil"\n      }\n    })], 1), _vm._v(" "), _c(\'button\', {\n      staticClass: "btn btn-control",\n      on: {\n        "click": function($event) {\n          _vm.deleteTag(tag)\n        }\n      }\n    }, [_c(\'icon\', {\n      attrs: {\n        "name": "times-circle"\n      }\n    })], 1)])])\n  }))])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWU/ZmJhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQyIsImZpbGUiOiIyMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImx2LXNpZGViYXItc2VsZWN0LWl0ZW1cIlxuICAgIH1cbiAgfSwgW19jKCd1bCcsIF92bS5fbCgoX3ZtLnRhZ3MpLCBmdW5jdGlvbih0YWcpIHtcbiAgICByZXR1cm4gX2MoJ2xpJywge1xuICAgICAga2V5OiB0YWcuaWQsXG4gICAgICBvbjoge1xuICAgICAgICBcIm1vdXNlb3ZlclwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBfdm0uaGlnaGxpZ2h0T3ZlcmxheSh0YWcuaWQsIHRydWUpXG4gICAgICAgIH0sXG4gICAgICAgIFwibW91c2VsZWF2ZVwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBfdm0uaGlnaGxpZ2h0T3ZlcmxheSh0YWcuaWQsIGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW19jKCdkaXYnLCB7XG4gICAgICBzdGF0aWNDbGFzczogXCJ0aHVtYm5haWwtY29udGFpbmVyXCJcbiAgICB9LCBbX2MoJ2ltZycsIHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIFwic3JjXCI6IHRhZy50YXJnZXQuc2VsZWN0b3IudmFsdWVcbiAgICAgIH1cbiAgICB9KV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uc1wiXG4gICAgfSwgW19jKCdidXR0b24nLCB7XG4gICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLWNvbnRyb2xcIixcbiAgICAgIG9uOiB7XG4gICAgICAgIFwiY2xpY2tcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgX3ZtLmVkaXRUYWcodGFnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW19jKCdpY29uJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwicGVuY2lsXCJcbiAgICAgIH1cbiAgICB9KV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnYnV0dG9uJywge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1jb250cm9sXCIsXG4gICAgICBvbjoge1xuICAgICAgICBcImNsaWNrXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgIF92bS5kZWxldGVUYWcodGFnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW19jKCdpY29uJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwidGltZXMtY2lyY2xlXCJcbiAgICAgIH1cbiAgICB9KV0sIDEpXSldKVxuICB9KSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWNhZWJkZTgyXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWVcbi8vIG1vZHVsZSBpZCA9IDIyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-metadata-modal"\n    }\n  }, [_c(\'modal\', {\n    attrs: {\n      "show": _vm.show,\n      "title": "Metadata"\n    },\n    on: {\n      "hide": function($event) {\n        _vm.$emit(\'hide\')\n      }\n    }\n  }, [(_vm.hasData) ? _c(\'span\', [_vm._l((_vm.metadata), function(item) {\n    return _c(\'ul\', {\n      key: item.label\n    }, [_c(\'li\', [_c(\'strong\', [_vm._v(_vm._s(item.label) + ":")]), _vm._v(" "), _c(\'span\', {\n      domProps: {\n        "innerHTML": _vm._s(item.value)\n      }\n    })])])\n  }), _vm._v(" "), _c(\'div\', {\n    staticClass: "center"\n  }, [(_vm.logo) ? _c(\'img\', {\n    attrs: {\n      "src": _vm.logo\n    }\n  }) : _vm._e(), _vm._v(" "), (_vm.attribution) ? _c(\'p\', {\n    domProps: {\n      "innerHTML": _vm._s(_vm.attribution)\n    }\n  }) : _vm._e(), _vm._v(" "), (_vm.license) ? _c(\'a\', {\n    attrs: {\n      "href": _vm.license\n    },\n    domProps: {\n      "innerHTML": _vm._s(_vm.license)\n    }\n  }) : _vm._e()])], 2) : _c(\'span\', [_c(\'p\', {\n    staticClass: "center"\n  }, [_vm._v("No metadata loaded")])])])], 1)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlPzkwZGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6IjIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibHYtbWV0YWRhdGEtbW9kYWxcIlxuICAgIH1cbiAgfSwgW19jKCdtb2RhbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJzaG93XCI6IF92bS5zaG93LFxuICAgICAgXCJ0aXRsZVwiOiBcIk1ldGFkYXRhXCJcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImhpZGVcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS4kZW1pdCgnaGlkZScpXG4gICAgICB9XG4gICAgfVxuICB9LCBbKF92bS5oYXNEYXRhKSA/IF9jKCdzcGFuJywgW192bS5fbCgoX3ZtLm1ldGFkYXRhKSwgZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBfYygndWwnLCB7XG4gICAgICBrZXk6IGl0ZW0ubGFiZWxcbiAgICB9LCBbX2MoJ2xpJywgW19jKCdzdHJvbmcnLCBbX3ZtLl92KF92bS5fcyhpdGVtLmxhYmVsKSArIFwiOlwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgIFwiaW5uZXJIVE1MXCI6IF92bS5fcyhpdGVtLnZhbHVlKVxuICAgICAgfVxuICAgIH0pXSldKVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjZW50ZXJcIlxuICB9LCBbKF92bS5sb2dvKSA/IF9jKCdpbWcnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwic3JjXCI6IF92bS5sb2dvXG4gICAgfVxuICB9KSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCAoX3ZtLmF0dHJpYnV0aW9uKSA/IF9jKCdwJywge1xuICAgIGRvbVByb3BzOiB7XG4gICAgICBcImlubmVySFRNTFwiOiBfdm0uX3MoX3ZtLmF0dHJpYnV0aW9uKVxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKF92bS5saWNlbnNlKSA/IF9jKCdhJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImhyZWZcIjogX3ZtLmxpY2Vuc2VcbiAgICB9LFxuICAgIGRvbVByb3BzOiB7XG4gICAgICBcImlubmVySFRNTFwiOiBfdm0uX3MoX3ZtLmxpY2Vuc2UpXG4gICAgfVxuICB9KSA6IF92bS5fZSgpXSldLCAyKSA6IF9jKCdzcGFuJywgW19jKCdwJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNlbnRlclwiXG4gIH0sIFtfdm0uX3YoXCJObyBtZXRhZGF0YSBsb2FkZWRcIildKV0pXSldLCAxKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWNkZDdjNDcyXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlXG4vLyBtb2R1bGUgaWQgPSAyMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'button\', {\n    class: ("hint--" + _vm.hintPosition + " hint--no-animate btn btn-control"),\n    attrs: {\n      "id": _vm.id,\n      "aria-label": _vm.tooltip\n    },\n    on: {\n      "click": function($event) {\n        _vm.callback($event)\n      }\n    }\n  }, [_vm._t("default")], 2)\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZT8wMjBiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiMjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdidXR0b24nLCB7XG4gICAgY2xhc3M6IChcImhpbnQtLVwiICsgX3ZtLmhpbnRQb3NpdGlvbiArIFwiIGhpbnQtLW5vLWFuaW1hdGUgYnRuIGJ0bi1jb250cm9sXCIpLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IF92bS5pZCxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBfdm0udG9vbHRpcFxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS5jYWxsYmFjaygkZXZlbnQpXG4gICAgICB9XG4gICAgfVxuICB9LCBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sIDIpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZjU0YWU4ZDJcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL0NvbnRyb2xCdXR0b24udnVlXG4vLyBtb2R1bGUgaWQgPSAyMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', {\n    attrs: {\n      "id": "lv-viewer-controls"\n    }\n  }, _vm._l((_vm.buttons), function(b, index) {\n    return _c(\'control-button\', {\n      key: ("btn-zoom-" + index),\n      attrs: {\n        "tooltip": b.tooltip,\n        "callback": b.callback,\n        "position": "bottom",\n        "hint-position": "bottom"\n      }\n    }, [_c(\'icon\', {\n      class: b.iconClass,\n      attrs: {\n        "name": b.icon\n      }\n    })], 1)\n  }))\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZT80YjY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQyIsImZpbGUiOiIyMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImx2LXZpZXdlci1jb250cm9sc1wiXG4gICAgfVxuICB9LCBfdm0uX2woKF92bS5idXR0b25zKSwgZnVuY3Rpb24oYiwgaW5kZXgpIHtcbiAgICByZXR1cm4gX2MoJ2NvbnRyb2wtYnV0dG9uJywge1xuICAgICAga2V5OiAoXCJidG4tem9vbS1cIiArIGluZGV4KSxcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIFwidG9vbHRpcFwiOiBiLnRvb2x0aXAsXG4gICAgICAgIFwiY2FsbGJhY2tcIjogYi5jYWxsYmFjayxcbiAgICAgICAgXCJwb3NpdGlvblwiOiBcImJvdHRvbVwiLFxuICAgICAgICBcImhpbnQtcG9zaXRpb25cIjogXCJib3R0b21cIlxuICAgICAgfVxuICAgIH0sIFtfYygnaWNvbicsIHtcbiAgICAgIGNsYXNzOiBiLmljb25DbGFzcyxcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIFwibmFtZVwiOiBiLmljb25cbiAgICAgIH1cbiAgICB9KV0sIDEpXG4gIH0pKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWY4OTVjM2JhXCJ9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(157);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"6a64f84a\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9ab29tLnZ1ZT8wMDc5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EscUNBQW1OO0FBQ25OO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTA3YzllZDRhXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1pvb20udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI2YTY0Zjg0YVwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMDdjOWVkNGFcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9ab29tLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(158);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"93ebbce2\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIudnVlPzllZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBOE07QUFDOU07QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjMxZmJhOTNcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1ZpZXdlci52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjkzZWJiY2UyXCIsIGNvbnRlbnQsIHRydWUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0yMzFmYmE5M1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9WaWV3ZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAyMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(159);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"7ba2659e\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvQnJvd3NlLnZ1ZT8yZWZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EscUNBQW9OO0FBQ3BOO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTI4ZDMwM2EyXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Ccm93c2UudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI3YmEyNjU5ZVwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMjhkMzAzYTJcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbW9kYWxzL0Jyb3dzZS52dWVcbi8vIG1vZHVsZSBpZCA9IDIyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(160);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"2664e770\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9BcHAudnVlP2M0MDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBOE07QUFDOU07QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzhiM2I2NDdcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjI2NjRlNzcwXCIsIGNvbnRlbnQsIHRydWUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0zOGIzYjY0N1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9kZW1vL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAyMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(161);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"ebabf044\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1RyYW5zY3JpYmUudnVlP2ZmYzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBME47QUFDMU47QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNGI0ODFmYjhcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1RyYW5zY3JpYmUudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCJlYmFiZjA0NFwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtNGI0ODFmYjhcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvc2lkZWJhci9pdGVtcy9UcmFuc2NyaWJlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(162);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"2c8d73ed\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvSGVscC52dWU/NGM3NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFDQUFtTjtBQUNuTjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01YTcyNGU0ZVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9IZWxwLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMmM4ZDczZWRcIiwgY29udGVudCwgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTVhNzI0ZTRlXCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbW9kYWxzL0hlbHAudnVlXG4vLyBtb2R1bGUgaWQgPSAyMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(163);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"4fc514f4\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9QYW4udnVlP2EwZjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBbU47QUFDbk47QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNmI3OTJhNDVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vUGFuLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiNGZjNTE0ZjRcIiwgY29udGVudCwgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTZiNzkyYTQ1XCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvUGFuLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(164);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"046bbc75\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/MjM5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFDQUE4TTtBQUM5TTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03Y2JjNWViY1xcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vTW9kYWwudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIwNDZiYmM3NVwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtN2NiYzVlYmNcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlXG4vLyBtb2R1bGUgaWQgPSAyMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(165);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"4d9a2aa8\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL1NpZGViYXIudnVlP2YxZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBbU47QUFDbk47QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtOGJjZDU2MTBcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vU2lkZWJhci52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjRkOWEyYWE4XCIsIGNvbnRlbnQsIHRydWUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi04YmNkNTYxMFwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL3NpZGViYXIvU2lkZWJhci52dWVcbi8vIG1vZHVsZSBpZCA9IDIzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(166);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"771ab168\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3Rvci52dWU/ZjJkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFDQUE2TTtBQUM3TTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi04ZDdhOTBjMFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9TZWxlY3Rvci52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjc3MWFiMTY4XCIsIGNvbnRlbnQsIHRydWUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi04ZDdhOTBjMFwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1NlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(167);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"439e690b\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWU/Zjc0NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFDQUF5TjtBQUN6TjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1jYWViZGU4MlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9TZWxlY3QudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI0MzllNjkwYlwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtY2FlYmRlODJcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyL2l0ZW1zL1NlbGVjdC52dWVcbi8vIG1vZHVsZSBpZCA9IDIzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(168);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"17e4c014\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlPzA0OWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBbU47QUFDbk47QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtY2RkN2M0NzJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vTWV0YWRhdGEudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIxN2U0YzAxNFwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtY2RkN2M0NzJcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9tb2RhbHMvTWV0YWRhdGEudnVlXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(169);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"72bc45c3\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZT8yOWQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EscUNBQW1OO0FBQ25OO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWY1NGFlOGQyXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0NvbnRyb2xCdXR0b24udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI3MmJjNDVjM1wiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjU0YWU4ZDJcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Db250cm9sQnV0dG9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(170);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"0ce138d2\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZT8zZGIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EscUNBQW1OO0FBQ25OO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWY4OTVjM2JhXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1Rvb2xiYXIudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIwY2UxMzhkMlwiLCBjb250ZW50LCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjg5NWMzYmFcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9Ub29sYmFyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(171);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(3)(\"8bb46026\", content, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hd2Vzb21lL2NvbXBvbmVudHMvSWNvbi52dWU/ZDAzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFDQUE2TDtBQUM3TDtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzhkMzRiNTJcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vSWNvbi52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiOGJiNDYwMjZcIiwgY29udGVudCwgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXI/bWluaW1pemUhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTc4ZDM0YjUyXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL34vdnVlLWF3ZXNvbWUvY29tcG9uZW50cy9JY29uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports){eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports){eval("/* (ignored) */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdmVydHggKGlnbm9yZWQpP2M1MmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gdmVydHggKGlnbm9yZWQpXG4vLyBtb2R1bGUgaWQgPSAyNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")}])});